[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# Duke project template","lastModifiedDate":"2024-01-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it.","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2021-01-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`.","lastModifiedDate":"2021-01-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2021-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29"},{"lineNumber":16,"author":{"gitId":"clarencepohh"},"content":"3. After that, locate the `src/main/java/Hachi.java` file, right-click it, and choose `Run Hachi.main()` (if the code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something like the below as the output:","lastModifiedDate":"2024-01-22"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"   Hello from","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    ____        _        ","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ ","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"clarencepohh":1,"-":23}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"clarencepohh"},"content":"# Hachi User Guide","lastModifiedDate":"2024-03-08"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":3,"author":{"gitId":"clarencepohh"},"content":"![image](https://github.com/clarencepohh/ip/assets/110753446/8aa2ce06-83fe-460a-9141-cb12ad4f0545)","lastModifiedDate":"2024-03-08"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":5,"author":{"gitId":"clarencepohh"},"content":"Hachi is a simple chatbot that runs in the CLI that has the functionality to add Tasks to a list of Tasks.","lastModifiedDate":"2024-03-08"},{"lineNumber":6,"author":{"gitId":"clarencepohh"},"content":"\u003cbr\u003eThere are 3 task types: Todos (which have no complete date), Deadlines (which have a complete date), and Events (which have a start and end date) ","lastModifiedDate":"2024-03-08"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":8,"author":{"gitId":"clarencepohh"},"content":"## help: `help` ","lastModifiedDate":"2024-03-08"},{"lineNumber":9,"author":{"gitId":"clarencepohh"},"content":"To get the list of valid commands, use the command `help`.","lastModifiedDate":"2024-03-08"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":11,"author":{"gitId":"clarencepohh"},"content":"Examples: ","lastModifiedDate":"2024-03-08"},{"lineNumber":12,"author":{"gitId":"clarencepohh"},"content":"  * `help`","lastModifiedDate":"2024-03-08"},{"lineNumber":13,"author":{"gitId":"clarencepohh"},"content":"\u003cbr\u003e![image](https://github.com/clarencepohh/ip/assets/110753446/a80c5636-6cbd-469d-b876-487d00fd1333)","lastModifiedDate":"2024-03-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":15,"author":{"gitId":"clarencepohh"},"content":"## Adding todos: `todo` ","lastModifiedDate":"2024-03-08"},{"lineNumber":16,"author":{"gitId":"clarencepohh"},"content":"To add a Todo, use the command `todo \u003cevent_name\u003e`.","lastModifiedDate":"2024-03-08"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":18,"author":{"gitId":"clarencepohh"},"content":"Examples: ","lastModifiedDate":"2024-03-08"},{"lineNumber":19,"author":{"gitId":"clarencepohh"},"content":"  * `todo project`","lastModifiedDate":"2024-03-08"},{"lineNumber":20,"author":{"gitId":"clarencepohh"},"content":"  * `todo School Homework`","lastModifiedDate":"2024-03-08"},{"lineNumber":21,"author":{"gitId":"clarencepohh"},"content":"\u003cbr\u003e![image](https://github.com/clarencepohh/ip/assets/110753446/aca62485-4e3c-482d-97ba-f7971592a92b)","lastModifiedDate":"2024-03-08"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":23,"author":{"gitId":"-"},"content":"  ","lastModifiedDate":"2019-07-29"},{"lineNumber":24,"author":{"gitId":"clarencepohh"},"content":"## Adding deadlines: `deadline`","lastModifiedDate":"2024-03-08"},{"lineNumber":25,"author":{"gitId":"clarencepohh"},"content":"To add a Deadline, use the command `deadline \u003cevent_name\u003e /by \u003cstart_date\u003e`.","lastModifiedDate":"2024-03-08"},{"lineNumber":26,"author":{"gitId":"clarencepohh"},"content":"\u003e The start_date does not have to be a date format, any text will do!","lastModifiedDate":"2024-03-08"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":28,"author":{"gitId":"clarencepohh"},"content":"Examples: ","lastModifiedDate":"2024-03-08"},{"lineNumber":29,"author":{"gitId":"clarencepohh"},"content":"  * `deadline IP /by 8th March 2024`","lastModifiedDate":"2024-03-08"},{"lineNumber":30,"author":{"gitId":"clarencepohh"},"content":"  * `deadline IP /by 08/03/2024`","lastModifiedDate":"2024-03-08"},{"lineNumber":31,"author":{"gitId":"clarencepohh"},"content":"\u003cbr\u003e![image](https://github.com/clarencepohh/ip/assets/110753446/1a2aded2-b8ee-45ca-8552-5fb494073f94)","lastModifiedDate":"2024-03-08"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":34,"author":{"gitId":"clarencepohh"},"content":"## Adding events: `event`","lastModifiedDate":"2024-03-08"},{"lineNumber":35,"author":{"gitId":"clarencepohh"},"content":"To add an Event, use the command `event \u003cevent_name\u003e /from \u003cstart_date\u003e /to \u003cend_date\u003e`.","lastModifiedDate":"2024-03-08"},{"lineNumber":36,"author":{"gitId":"clarencepohh"},"content":"\u003e The start_date and end_date does not have to be a date format, any text will do!","lastModifiedDate":"2024-03-08"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":38,"author":{"gitId":"clarencepohh"},"content":"Examples: ","lastModifiedDate":"2024-03-08"},{"lineNumber":39,"author":{"gitId":"clarencepohh"},"content":"  * `event Chinese New Year /from 10th Feb /to 11th Feb`","lastModifiedDate":"2024-03-08"},{"lineNumber":40,"author":{"gitId":"clarencepohh"},"content":"  * `event recess week /from 26th Feb /to 1st Mar`","lastModifiedDate":"2024-03-08"},{"lineNumber":41,"author":{"gitId":"clarencepohh"},"content":"\u003cbr\u003e![image](https://github.com/clarencepohh/ip/assets/110753446/d3ef2404-c121-4f67-91f3-dc450d8b795a)","lastModifiedDate":"2024-03-08"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":43,"author":{"gitId":"clarencepohh"},"content":"## Getting your list of tasks: `list`","lastModifiedDate":"2024-03-08"},{"lineNumber":44,"author":{"gitId":"clarencepohh"},"content":"To get your list of tasks, use the command `list`.","lastModifiedDate":"2024-03-08"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-01-07"},{"lineNumber":46,"author":{"gitId":"clarencepohh"},"content":"Examples: ","lastModifiedDate":"2024-03-08"},{"lineNumber":47,"author":{"gitId":"clarencepohh"},"content":"  * `list`","lastModifiedDate":"2024-03-08"},{"lineNumber":48,"author":{"gitId":"clarencepohh"},"content":"\u003cbr\u003e![image](https://github.com/clarencepohh/ip/assets/110753446/72644182-bb2b-416e-8a8f-95b33c9a3366)","lastModifiedDate":"2024-03-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-08"},{"lineNumber":50,"author":{"gitId":"clarencepohh"},"content":"## Finding tasks in your list that have a specified substring: `find`","lastModifiedDate":"2024-03-08"},{"lineNumber":51,"author":{"gitId":"clarencepohh"},"content":"If you\u0027d like to find all tasks with a certain substring, use the command `find \u003csubstring\u003e`.","lastModifiedDate":"2024-03-08"},{"lineNumber":52,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-03-08"},{"lineNumber":53,"author":{"gitId":"clarencepohh"},"content":"Examples: ","lastModifiedDate":"2024-03-08"},{"lineNumber":54,"author":{"gitId":"clarencepohh"},"content":"  * `find IP`","lastModifiedDate":"2024-03-08"},{"lineNumber":55,"author":{"gitId":"clarencepohh"},"content":"\u003cbr\u003e![image](https://github.com/clarencepohh/ip/assets/110753446/8673ebf6-c22b-433f-9da4-02af75f2fc82)","lastModifiedDate":"2024-03-08"},{"lineNumber":56,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-03-08"},{"lineNumber":57,"author":{"gitId":"clarencepohh"},"content":"## Mark a task as done: `mark`","lastModifiedDate":"2024-03-08"},{"lineNumber":58,"author":{"gitId":"clarencepohh"},"content":"To mark a task as complete, use the command `mark \u003ctask_index\u003e`.","lastModifiedDate":"2024-03-08"},{"lineNumber":59,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-03-08"},{"lineNumber":60,"author":{"gitId":"clarencepohh"},"content":"Examples: ","lastModifiedDate":"2024-03-08"},{"lineNumber":61,"author":{"gitId":"clarencepohh"},"content":"  * `mark 2`","lastModifiedDate":"2024-03-08"},{"lineNumber":62,"author":{"gitId":"clarencepohh"},"content":"\u003cbr\u003e![image](https://github.com/clarencepohh/ip/assets/110753446/db3e2231-f780-4861-919a-fd82175cc006)","lastModifiedDate":"2024-03-08"},{"lineNumber":63,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-03-08"},{"lineNumber":64,"author":{"gitId":"clarencepohh"},"content":"## Mark a task as undone: `unmark`","lastModifiedDate":"2024-03-08"},{"lineNumber":65,"author":{"gitId":"clarencepohh"},"content":"To mark a task as incomplete, use the command `mark \u003ctask_index\u003e`.","lastModifiedDate":"2024-03-08"},{"lineNumber":66,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-03-08"},{"lineNumber":67,"author":{"gitId":"clarencepohh"},"content":"Examples: ","lastModifiedDate":"2024-03-08"},{"lineNumber":68,"author":{"gitId":"clarencepohh"},"content":"  * `unmark 2`","lastModifiedDate":"2024-03-08"},{"lineNumber":69,"author":{"gitId":"clarencepohh"},"content":"\u003cbr\u003e![image](https://github.com/clarencepohh/ip/assets/110753446/84bb2227-2c20-42a2-8cb4-ba4541ef3135)","lastModifiedDate":"2024-03-08"},{"lineNumber":70,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-03-08"},{"lineNumber":71,"author":{"gitId":"clarencepohh"},"content":"## To delete a task: `delete`","lastModifiedDate":"2024-03-08"},{"lineNumber":72,"author":{"gitId":"clarencepohh"},"content":"To delete a task, use the command `delete \u003ctask_index\u003e`.","lastModifiedDate":"2024-03-08"},{"lineNumber":73,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-03-08"},{"lineNumber":74,"author":{"gitId":"clarencepohh"},"content":"Examples: ","lastModifiedDate":"2024-03-08"},{"lineNumber":75,"author":{"gitId":"clarencepohh"},"content":"  * `delete 3`","lastModifiedDate":"2024-03-08"},{"lineNumber":76,"author":{"gitId":"clarencepohh"},"content":"\u003cbr\u003e![image](https://github.com/clarencepohh/ip/assets/110753446/ffc5798a-b922-4de7-b1ef-2f39d685a89e)","lastModifiedDate":"2024-03-08"},{"lineNumber":77,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-03-08"},{"lineNumber":78,"author":{"gitId":"clarencepohh"},"content":"## Closing the chatbot: `bye` or `goodbye`","lastModifiedDate":"2024-03-08"},{"lineNumber":79,"author":{"gitId":"clarencepohh"},"content":"To close the chatbot, use the command `bye` or `goodbye`.","lastModifiedDate":"2024-03-08"},{"lineNumber":80,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-03-08"},{"lineNumber":81,"author":{"gitId":"clarencepohh"},"content":"Examples: ","lastModifiedDate":"2024-03-08"},{"lineNumber":82,"author":{"gitId":"clarencepohh"},"content":"  * `bye`","lastModifiedDate":"2024-03-08"},{"lineNumber":83,"author":{"gitId":"clarencepohh"},"content":"  * `goodbye`","lastModifiedDate":"2024-03-08"},{"lineNumber":84,"author":{"gitId":"clarencepohh"},"content":"\u003cbr\u003e![image](https://github.com/clarencepohh/ip/assets/110753446/b8c2b625-27d5-4707-842d-5235219419c2)","lastModifiedDate":"2024-03-08"},{"lineNumber":85,"author":{"gitId":"clarencepohh"},"content":"\u003cbr\u003e![image](https://github.com/clarencepohh/ip/assets/110753446/1f2428d5-be1b-4e00-9928-fce20b4d9959)","lastModifiedDate":"2024-03-08"}],"authorContributionMap":{"clarencepohh":70,"-":15}},{"path":"src/main/java/hachi/Hachi.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"clarencepohh"},"content":"package hachi;","lastModifiedDate":"2024-02-15"},{"lineNumber":2,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-02-15"},{"lineNumber":3,"author":{"gitId":"clarencepohh"},"content":"import hachi.data.HachiException;","lastModifiedDate":"2024-02-15"},{"lineNumber":4,"author":{"gitId":"clarencepohh"},"content":"import hachi.data.TaskList;","lastModifiedDate":"2024-02-26"},{"lineNumber":5,"author":{"gitId":"clarencepohh"},"content":"import hachi.parser.Parser;","lastModifiedDate":"2024-02-26"},{"lineNumber":6,"author":{"gitId":"clarencepohh"},"content":"import hachi.storage.Storage;","lastModifiedDate":"2024-02-26"},{"lineNumber":7,"author":{"gitId":"clarencepohh"},"content":"import hachi.ui.Ui;","lastModifiedDate":"2024-02-25"},{"lineNumber":8,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-02-15"},{"lineNumber":9,"author":{"gitId":"clarencepohh"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2024-02-20"},{"lineNumber":10,"author":{"gitId":"clarencepohh"},"content":"import java.io.IOException;","lastModifiedDate":"2024-02-20"},{"lineNumber":11,"author":{"gitId":"clarencepohh"},"content":"import java.util.Objects;","lastModifiedDate":"2024-02-26"},{"lineNumber":12,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-01-29"},{"lineNumber":13,"author":{"gitId":"clarencepohh"},"content":"/**","lastModifiedDate":"2024-01-23"},{"lineNumber":14,"author":{"gitId":"clarencepohh"},"content":" * This file represents the main class of the chatbot called Hachi","lastModifiedDate":"2024-02-29"},{"lineNumber":15,"author":{"gitId":"clarencepohh"},"content":" * and is also the entry point of the program.","lastModifiedDate":"2024-02-29"},{"lineNumber":16,"author":{"gitId":"clarencepohh"},"content":" *","lastModifiedDate":"2024-01-23"},{"lineNumber":17,"author":{"gitId":"clarencepohh"},"content":" * @author clarencepohh","lastModifiedDate":"2024-01-23"},{"lineNumber":18,"author":{"gitId":"clarencepohh"},"content":" * @version 01/03/2024","lastModifiedDate":"2024-03-01"},{"lineNumber":19,"author":{"gitId":"clarencepohh"},"content":" */","lastModifiedDate":"2024-01-23"},{"lineNumber":20,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-01-30"},{"lineNumber":21,"author":{"gitId":"clarencepohh"},"content":"public class Hachi {","lastModifiedDate":"2024-01-22"},{"lineNumber":22,"author":{"gitId":"clarencepohh"},"content":"    private static Ui ui;","lastModifiedDate":"2024-02-29"},{"lineNumber":23,"author":{"gitId":"clarencepohh"},"content":"    private static TaskList tasksList;","lastModifiedDate":"2024-02-29"},{"lineNumber":24,"author":{"gitId":"clarencepohh"},"content":"    private static Storage storage;","lastModifiedDate":"2024-02-29"},{"lineNumber":25,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":26,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-02-17"},{"lineNumber":27,"author":{"gitId":"clarencepohh"},"content":"    /**","lastModifiedDate":"2024-02-29"},{"lineNumber":28,"author":{"gitId":"clarencepohh"},"content":"     * The constructor for Hachi class.","lastModifiedDate":"2024-02-29"},{"lineNumber":29,"author":{"gitId":"clarencepohh"},"content":"     * Initializes the required Ui, Storage and TaskList classes.","lastModifiedDate":"2024-02-29"},{"lineNumber":30,"author":{"gitId":"clarencepohh"},"content":"     *","lastModifiedDate":"2024-02-29"},{"lineNumber":31,"author":{"gitId":"clarencepohh"},"content":"     * @param filePath The file path for save data of the user\u0027s task list.","lastModifiedDate":"2024-02-29"},{"lineNumber":32,"author":{"gitId":"clarencepohh"},"content":"     */","lastModifiedDate":"2024-02-29"},{"lineNumber":33,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-02-17"},{"lineNumber":34,"author":{"gitId":"clarencepohh"},"content":"    public Hachi(String filePath) {","lastModifiedDate":"2024-02-29"},{"lineNumber":35,"author":{"gitId":"clarencepohh"},"content":"        ui \u003d new Ui();","lastModifiedDate":"2024-02-29"},{"lineNumber":36,"author":{"gitId":"clarencepohh"},"content":"        storage \u003d new Storage(filePath);","lastModifiedDate":"2024-02-29"},{"lineNumber":37,"author":{"gitId":"clarencepohh"},"content":"        try {","lastModifiedDate":"2024-02-17"},{"lineNumber":38,"author":{"gitId":"clarencepohh"},"content":"            tasksList \u003d new TaskList(storage.load());","lastModifiedDate":"2024-02-29"},{"lineNumber":39,"author":{"gitId":"clarencepohh"},"content":"        } catch (HachiException | FileNotFoundException e) {","lastModifiedDate":"2024-02-29"},{"lineNumber":40,"author":{"gitId":"clarencepohh"},"content":"            ui.printFileLoadingError();","lastModifiedDate":"2024-02-29"},{"lineNumber":41,"author":{"gitId":"clarencepohh"},"content":"            tasksList \u003d new TaskList(storage.getTasksList().getTasksArrayList());","lastModifiedDate":"2024-03-08"},{"lineNumber":42,"author":{"gitId":"clarencepohh"},"content":"        }","lastModifiedDate":"2024-02-20"},{"lineNumber":43,"author":{"gitId":"clarencepohh"},"content":"    }","lastModifiedDate":"2024-02-20"},{"lineNumber":44,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-02-20"},{"lineNumber":45,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-02-20"},{"lineNumber":46,"author":{"gitId":"clarencepohh"},"content":"    /**","lastModifiedDate":"2024-01-23"},{"lineNumber":47,"author":{"gitId":"clarencepohh"},"content":"     * The main program that starts the chatbot.","lastModifiedDate":"2024-01-30"},{"lineNumber":48,"author":{"gitId":"clarencepohh"},"content":"     * Prints to the console for the user to read its messages.","lastModifiedDate":"2024-01-23"},{"lineNumber":49,"author":{"gitId":"clarencepohh"},"content":"     * Retrieves user data upon startup and creates a save file if saved data is not found.","lastModifiedDate":"2024-02-29"},{"lineNumber":50,"author":{"gitId":"clarencepohh"},"content":"     * Greets the user and awaits user input.","lastModifiedDate":"2024-01-30"},{"lineNumber":51,"author":{"gitId":"clarencepohh"},"content":"     * \u003cp\u003e","lastModifiedDate":"2024-01-30"},{"lineNumber":52,"author":{"gitId":"clarencepohh"},"content":"     * Chatbot can:","lastModifiedDate":"2024-01-30"},{"lineNumber":53,"author":{"gitId":"clarencepohh"},"content":"     * \u003cp\u003e1. retrieve list of tasks with user input \"list\"","lastModifiedDate":"2024-01-30"},{"lineNumber":54,"author":{"gitId":"clarencepohh"},"content":"     * \u003cp\u003e2. mark or unmark tasks complete with user input \"mark #tasknumber\"","lastModifiedDate":"2024-02-06"},{"lineNumber":55,"author":{"gitId":"clarencepohh"},"content":"     * \u003cp\u003e3. say goodbye to the user with user input \"bye\" or \"goodbye\"","lastModifiedDate":"2024-02-06"},{"lineNumber":56,"author":{"gitId":"clarencepohh"},"content":"     * \u003cp\u003e4. add a to-do to the list of task with \"todo \u003cevent name\u003e\"","lastModifiedDate":"2024-02-06"},{"lineNumber":57,"author":{"gitId":"clarencepohh"},"content":"     * \u003cp\u003e5. add a deadline to the list of task with \"deadline \u003cevent name\u003e /by \u003cby date\u003e\"","lastModifiedDate":"2024-02-06"},{"lineNumber":58,"author":{"gitId":"clarencepohh"},"content":"     * \u003cp\u003e6. add an event to the list of task with \"event \u003cevent name\u003e /from \u003cstart date\u003e /to \u003cend date\u003e\"","lastModifiedDate":"2024-02-06"},{"lineNumber":59,"author":{"gitId":"clarencepohh"},"content":"     * \u003cp\u003e7. delete an existing task from the list of tasks with \"delete \u003ctask number\u003e\"","lastModifiedDate":"2024-02-29"},{"lineNumber":60,"author":{"gitId":"clarencepohh"},"content":"     * \u003cp\u003e8. retrieve a list of chatbot commands with \"help\"","lastModifiedDate":"2024-02-29"},{"lineNumber":61,"author":{"gitId":"clarencepohh"},"content":"     *","lastModifiedDate":"2024-01-23"},{"lineNumber":62,"author":{"gitId":"clarencepohh"},"content":"     */","lastModifiedDate":"2024-01-23"},{"lineNumber":63,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-01-29"},{"lineNumber":64,"author":{"gitId":"clarencepohh"},"content":"    public void runHachi() {","lastModifiedDate":"2024-02-29"},{"lineNumber":65,"author":{"gitId":"clarencepohh"},"content":"        Parser parser \u003d new Parser(ui, tasksList);","lastModifiedDate":"2024-02-29"},{"lineNumber":66,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-02-20"},{"lineNumber":67,"author":{"gitId":"clarencepohh"},"content":"        ui.spacerInsert();","lastModifiedDate":"2024-02-29"},{"lineNumber":68,"author":{"gitId":"clarencepohh"},"content":"        ui.printGreetingMessage();","lastModifiedDate":"2024-02-29"},{"lineNumber":69,"author":{"gitId":"clarencepohh"},"content":"        ui.printHelpMessage();","lastModifiedDate":"2024-02-29"},{"lineNumber":70,"author":{"gitId":"clarencepohh"},"content":"        storage.initializeData();","lastModifiedDate":"2024-02-29"},{"lineNumber":71,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-02-13"},{"lineNumber":72,"author":{"gitId":"clarencepohh"},"content":"        String command \u003d null;","lastModifiedDate":"2024-02-26"},{"lineNumber":73,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-02-26"},{"lineNumber":74,"author":{"gitId":"clarencepohh"},"content":"        do {","lastModifiedDate":"2024-02-26"},{"lineNumber":75,"author":{"gitId":"clarencepohh"},"content":"            try {","lastModifiedDate":"2024-02-13"},{"lineNumber":76,"author":{"gitId":"clarencepohh"},"content":"                String userInput \u003d ui.getUserInput();","lastModifiedDate":"2024-02-29"},{"lineNumber":77,"author":{"gitId":"clarencepohh"},"content":"                String cleanedInput \u003d ui.cleanUserInput(userInput);","lastModifiedDate":"2024-02-29"},{"lineNumber":78,"author":{"gitId":"clarencepohh"},"content":"                String firstWord;","lastModifiedDate":"2024-02-06"},{"lineNumber":79,"author":{"gitId":"clarencepohh"},"content":"                int indexOfSpace \u003d cleanedInput.indexOf(\" \");","lastModifiedDate":"2024-02-13"},{"lineNumber":80,"author":{"gitId":"clarencepohh"},"content":"                firstWord \u003d parser.getFirstWordOfInput(indexOfSpace, cleanedInput);","lastModifiedDate":"2024-02-29"},{"lineNumber":81,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-02-13"},{"lineNumber":82,"author":{"gitId":"clarencepohh"},"content":"                command \u003d parser.processUserCommand(firstWord, cleanedInput, userInput);","lastModifiedDate":"2024-02-29"},{"lineNumber":83,"author":{"gitId":"clarencepohh"},"content":"            } catch (HachiException e) {","lastModifiedDate":"2024-02-26"},{"lineNumber":84,"author":{"gitId":"clarencepohh"},"content":"                System.out.println(e.getMessage());","lastModifiedDate":"2024-02-26"},{"lineNumber":85,"author":{"gitId":"clarencepohh"},"content":"            }","lastModifiedDate":"2024-02-06"},{"lineNumber":86,"author":{"gitId":"clarencepohh"},"content":"            ","lastModifiedDate":"2024-02-13"},{"lineNumber":87,"author":{"gitId":"clarencepohh"},"content":"            ui.spacerInsert();","lastModifiedDate":"2024-02-29"},{"lineNumber":88,"author":{"gitId":"clarencepohh"},"content":"        } while (!Objects.equals(command, \"BYE\"));","lastModifiedDate":"2024-02-26"},{"lineNumber":89,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":90,"author":{"gitId":"clarencepohh"},"content":"        try {","lastModifiedDate":"2024-02-20"},{"lineNumber":91,"author":{"gitId":"clarencepohh"},"content":"            storage.saveHandler();","lastModifiedDate":"2024-02-29"},{"lineNumber":92,"author":{"gitId":"clarencepohh"},"content":"        } catch (IOException e) {","lastModifiedDate":"2024-02-20"},{"lineNumber":93,"author":{"gitId":"clarencepohh"},"content":"            System.out.println(\"There was an error saving tasks.\");","lastModifiedDate":"2024-02-20"},{"lineNumber":94,"author":{"gitId":"clarencepohh"},"content":"        }","lastModifiedDate":"2024-02-20"},{"lineNumber":95,"author":{"gitId":"clarencepohh"},"content":"    }","lastModifiedDate":"2024-02-20"},{"lineNumber":96,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-02-29"},{"lineNumber":97,"author":{"gitId":"clarencepohh"},"content":"    /**","lastModifiedDate":"2024-02-29"},{"lineNumber":98,"author":{"gitId":"clarencepohh"},"content":"     * The main function of Hachi chatbot.","lastModifiedDate":"2024-02-29"},{"lineNumber":99,"author":{"gitId":"clarencepohh"},"content":"     *","lastModifiedDate":"2024-02-29"},{"lineNumber":100,"author":{"gitId":"clarencepohh"},"content":"     * @param args Command line arguments - not in use.","lastModifiedDate":"2024-02-29"},{"lineNumber":101,"author":{"gitId":"clarencepohh"},"content":"     */","lastModifiedDate":"2024-02-29"},{"lineNumber":102,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-02-29"},{"lineNumber":103,"author":{"gitId":"clarencepohh"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2024-02-29"},{"lineNumber":104,"author":{"gitId":"clarencepohh"},"content":"        new Hachi(\"hachidata/hachidata.txt\").runHachi();","lastModifiedDate":"2024-02-29"},{"lineNumber":105,"author":{"gitId":"clarencepohh"},"content":"    }","lastModifiedDate":"2024-02-29"},{"lineNumber":106,"author":{"gitId":"clarencepohh"},"content":"}","lastModifiedDate":"2024-01-30"}],"authorContributionMap":{"clarencepohh":106}},{"path":"src/main/java/hachi/data/HachiException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"clarencepohh"},"content":"package hachi.data;","lastModifiedDate":"2024-02-15"},{"lineNumber":2,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-02-15"},{"lineNumber":3,"author":{"gitId":"clarencepohh"},"content":"import hachi.data.task.Task;","lastModifiedDate":"2024-02-15"},{"lineNumber":4,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-02-15"},{"lineNumber":5,"author":{"gitId":"clarencepohh"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-03-01"},{"lineNumber":6,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-03-01"},{"lineNumber":7,"author":{"gitId":"clarencepohh"},"content":"/**","lastModifiedDate":"2024-02-13"},{"lineNumber":8,"author":{"gitId":"clarencepohh"},"content":" * Represent the error handling class for the chatbot Hachi.","lastModifiedDate":"2024-02-13"},{"lineNumber":9,"author":{"gitId":"clarencepohh"},"content":" *","lastModifiedDate":"2024-02-29"},{"lineNumber":10,"author":{"gitId":"clarencepohh"},"content":" * @author clarencepohh","lastModifiedDate":"2024-02-29"},{"lineNumber":11,"author":{"gitId":"clarencepohh"},"content":" * @version 01/03/2024","lastModifiedDate":"2024-03-01"},{"lineNumber":12,"author":{"gitId":"clarencepohh"},"content":" *","lastModifiedDate":"2024-02-29"},{"lineNumber":13,"author":{"gitId":"clarencepohh"},"content":" */","lastModifiedDate":"2024-02-13"},{"lineNumber":14,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-02-13"},{"lineNumber":15,"author":{"gitId":"clarencepohh"},"content":"public class HachiException extends Exception {","lastModifiedDate":"2024-02-13"},{"lineNumber":16,"author":{"gitId":"clarencepohh"},"content":"    public static final String INVALID_INPUT_MESSAGE \u003d \"Not marvelous! I\u0027m not sure what you\u0027re saying here...\";","lastModifiedDate":"2024-02-13"},{"lineNumber":17,"author":{"gitId":"clarencepohh"},"content":"    public static final String EMPTY_TASK_LIST_MESSAGE \u003d \"It appears you have no tasks at the moment...\";","lastModifiedDate":"2024-02-13"},{"lineNumber":18,"author":{"gitId":"clarencepohh"},"content":"    public static final String EMPTY_TASK_DESCRIPTION_MESSAGE \u003d \"Where\u0027s the task description? \" +","lastModifiedDate":"2024-02-13"},{"lineNumber":19,"author":{"gitId":"clarencepohh"},"content":"            \"Type \u0027help\u0027 without quotes if you need to see the format! \";","lastModifiedDate":"2024-02-13"},{"lineNumber":20,"author":{"gitId":"clarencepohh"},"content":"    public static final String MISSING_DEADLINE_BY_DATE_MESSAGE \u003d \"Looks like you\u0027re missing the complete-by date! \" +","lastModifiedDate":"2024-02-24"},{"lineNumber":21,"author":{"gitId":"clarencepohh"},"content":"            \"Remember: /by \u003cdate here\u003e!\";","lastModifiedDate":"2024-02-24"},{"lineNumber":22,"author":{"gitId":"clarencepohh"},"content":"    public static final String MISSING_EVENT_START_END_DATE_MESSAGE \u003d \"Your start or end dates have some formatting \" +","lastModifiedDate":"2024-02-24"},{"lineNumber":23,"author":{"gitId":"clarencepohh"},"content":"            \"issues. It\u0027s: /from \u003cstart date\u003e /to \u003cend date\u003e\";","lastModifiedDate":"2024-02-24"},{"lineNumber":24,"author":{"gitId":"clarencepohh"},"content":"    public static final String LIST_OUT_OF_BOUNDS_MESSAGE \u003d \"Woah, I\u0027m not so sure if that task exists. You might \" +","lastModifiedDate":"2024-02-24"},{"lineNumber":25,"author":{"gitId":"clarencepohh"},"content":"            \"want to check that task number again.\";","lastModifiedDate":"2024-02-24"},{"lineNumber":26,"author":{"gitId":"clarencepohh"},"content":"    public static final String CORRUPTED_SAVE_MESSAGE \u003d \"The data stored looks corrupted. Getting rid of it.\";","lastModifiedDate":"2024-02-20"},{"lineNumber":27,"author":{"gitId":"clarencepohh"},"content":"    public static final String MISSING_FIND_DESCRIPTION_MESSAGE \u003d \"What exactly do you want to find? Please state it\" +","lastModifiedDate":"2024-03-01"},{"lineNumber":28,"author":{"gitId":"clarencepohh"},"content":"            \" after \u0027/find\u0027.\";","lastModifiedDate":"2024-03-01"},{"lineNumber":29,"author":{"gitId":"clarencepohh"},"content":"    public static final String EMPTY_FOUND_TASK_LIST \u003d \"Looks like there aren\u0027t any tasks like that...\";","lastModifiedDate":"2024-03-01"},{"lineNumber":30,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-02-29"},{"lineNumber":31,"author":{"gitId":"clarencepohh"},"content":"    public HachiException (String errorMessage) {","lastModifiedDate":"2024-02-13"},{"lineNumber":32,"author":{"gitId":"clarencepohh"},"content":"        super(errorMessage);","lastModifiedDate":"2024-02-13"},{"lineNumber":33,"author":{"gitId":"clarencepohh"},"content":"    }","lastModifiedDate":"2024-02-13"},{"lineNumber":34,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-02-13"},{"lineNumber":35,"author":{"gitId":"clarencepohh"},"content":"    /**","lastModifiedDate":"2024-02-29"},{"lineNumber":36,"author":{"gitId":"clarencepohh"},"content":"     * Prints to the console when an unrecognised input is given by the user.","lastModifiedDate":"2024-02-29"},{"lineNumber":37,"author":{"gitId":"clarencepohh"},"content":"     *","lastModifiedDate":"2024-02-29"},{"lineNumber":38,"author":{"gitId":"clarencepohh"},"content":"     * @throws HachiException If the input is not recognised.","lastModifiedDate":"2024-02-29"},{"lineNumber":39,"author":{"gitId":"clarencepohh"},"content":"     */","lastModifiedDate":"2024-02-29"},{"lineNumber":40,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-02-29"},{"lineNumber":41,"author":{"gitId":"clarencepohh"},"content":"    public static void invalidInput() throws HachiException {","lastModifiedDate":"2024-02-13"},{"lineNumber":42,"author":{"gitId":"clarencepohh"},"content":"        throw new HachiException(INVALID_INPUT_MESSAGE);","lastModifiedDate":"2024-02-13"},{"lineNumber":43,"author":{"gitId":"clarencepohh"},"content":"    }","lastModifiedDate":"2024-02-13"},{"lineNumber":44,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-02-13"},{"lineNumber":45,"author":{"gitId":"clarencepohh"},"content":"    /**","lastModifiedDate":"2024-02-29"},{"lineNumber":46,"author":{"gitId":"clarencepohh"},"content":"     * Checks if the task list is empty and prints an error message if command","lastModifiedDate":"2024-02-29"},{"lineNumber":47,"author":{"gitId":"clarencepohh"},"content":"     * given requires a populated task list to be executed.","lastModifiedDate":"2024-02-29"},{"lineNumber":48,"author":{"gitId":"clarencepohh"},"content":"     *","lastModifiedDate":"2024-02-29"},{"lineNumber":49,"author":{"gitId":"clarencepohh"},"content":"     * @param numTasks The number of tasks currently in the task list.","lastModifiedDate":"2024-02-29"},{"lineNumber":50,"author":{"gitId":"clarencepohh"},"content":"     * @throws HachiException If numTasks is 0.","lastModifiedDate":"2024-02-29"},{"lineNumber":51,"author":{"gitId":"clarencepohh"},"content":"     */","lastModifiedDate":"2024-02-29"},{"lineNumber":52,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-02-29"},{"lineNumber":53,"author":{"gitId":"clarencepohh"},"content":"    public static void checkEmptyList(int numTasks) throws HachiException {","lastModifiedDate":"2024-02-13"},{"lineNumber":54,"author":{"gitId":"clarencepohh"},"content":"        if (numTasks \u003d\u003d 0) {","lastModifiedDate":"2024-02-13"},{"lineNumber":55,"author":{"gitId":"clarencepohh"},"content":"            throw new HachiException(EMPTY_TASK_LIST_MESSAGE);","lastModifiedDate":"2024-02-13"},{"lineNumber":56,"author":{"gitId":"clarencepohh"},"content":"        }","lastModifiedDate":"2024-02-13"},{"lineNumber":57,"author":{"gitId":"clarencepohh"},"content":"    }","lastModifiedDate":"2024-02-13"},{"lineNumber":58,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-02-13"},{"lineNumber":59,"author":{"gitId":"clarencepohh"},"content":"    /**","lastModifiedDate":"2024-02-29"},{"lineNumber":60,"author":{"gitId":"clarencepohh"},"content":"     * Checks if the user input for task-creation related commands (todo, event, deadline)","lastModifiedDate":"2024-02-29"},{"lineNumber":61,"author":{"gitId":"clarencepohh"},"content":"     * contains a task description, and prints an error message to the console if it is missing.","lastModifiedDate":"2024-02-29"},{"lineNumber":62,"author":{"gitId":"clarencepohh"},"content":"     *","lastModifiedDate":"2024-02-29"},{"lineNumber":63,"author":{"gitId":"clarencepohh"},"content":"     * @param line The String containing the whole user input.","lastModifiedDate":"2024-02-29"},{"lineNumber":64,"author":{"gitId":"clarencepohh"},"content":"     * @throws HachiException if there is no task description.","lastModifiedDate":"2024-02-29"},{"lineNumber":65,"author":{"gitId":"clarencepohh"},"content":"     */","lastModifiedDate":"2024-02-29"},{"lineNumber":66,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-02-29"},{"lineNumber":67,"author":{"gitId":"clarencepohh"},"content":"    public static void checkValidDescription (String line) throws HachiException {","lastModifiedDate":"2024-02-13"},{"lineNumber":68,"author":{"gitId":"clarencepohh"},"content":"        String[] userWords \u003d line.split(\" \");","lastModifiedDate":"2024-02-13"},{"lineNumber":69,"author":{"gitId":"clarencepohh"},"content":"        if (userWords.length \u003d\u003d 1) {","lastModifiedDate":"2024-02-13"},{"lineNumber":70,"author":{"gitId":"clarencepohh"},"content":"            throw new HachiException(EMPTY_TASK_DESCRIPTION_MESSAGE);","lastModifiedDate":"2024-02-13"},{"lineNumber":71,"author":{"gitId":"clarencepohh"},"content":"        }","lastModifiedDate":"2024-02-13"},{"lineNumber":72,"author":{"gitId":"clarencepohh"},"content":"    }","lastModifiedDate":"2024-02-13"},{"lineNumber":73,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-02-13"},{"lineNumber":74,"author":{"gitId":"clarencepohh"},"content":"    /**","lastModifiedDate":"2024-02-29"},{"lineNumber":75,"author":{"gitId":"clarencepohh"},"content":"     * Checks if deadlines to be created have a by date, and prints an error message to","lastModifiedDate":"2024-02-29"},{"lineNumber":76,"author":{"gitId":"clarencepohh"},"content":"     * the console if it is missing. Also checks if deadlines have the required \"/by\" command.","lastModifiedDate":"2024-02-29"},{"lineNumber":77,"author":{"gitId":"clarencepohh"},"content":"     *","lastModifiedDate":"2024-02-29"},{"lineNumber":78,"author":{"gitId":"clarencepohh"},"content":"     * @param indexOfBy The int representing the index of the character after \"/by\" in the input string.","lastModifiedDate":"2024-02-29"},{"lineNumber":79,"author":{"gitId":"clarencepohh"},"content":"     * @param line The String containing the whole user input.","lastModifiedDate":"2024-02-29"},{"lineNumber":80,"author":{"gitId":"clarencepohh"},"content":"     * @throws HachiException If the required input format is incorrect.","lastModifiedDate":"2024-02-29"},{"lineNumber":81,"author":{"gitId":"clarencepohh"},"content":"     */","lastModifiedDate":"2024-02-29"},{"lineNumber":82,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-02-29"},{"lineNumber":83,"author":{"gitId":"clarencepohh"},"content":"    public static void checkDeadlineByDate (int indexOfBy, String line) throws HachiException {","lastModifiedDate":"2024-02-29"},{"lineNumber":84,"author":{"gitId":"clarencepohh"},"content":"        String[] afterBySubstring \u003d line.split(\"/by\");","lastModifiedDate":"2024-02-29"},{"lineNumber":85,"author":{"gitId":"clarencepohh"},"content":"        if (afterBySubstring.length \u003d\u003d 1 || indexOfBy \u003d\u003d 2 || afterBySubstring[1].isBlank()) {","lastModifiedDate":"2024-02-29"},{"lineNumber":86,"author":{"gitId":"clarencepohh"},"content":"            throw new HachiException(MISSING_DEADLINE_BY_DATE_MESSAGE);","lastModifiedDate":"2024-02-13"},{"lineNumber":87,"author":{"gitId":"clarencepohh"},"content":"        }","lastModifiedDate":"2024-02-13"},{"lineNumber":88,"author":{"gitId":"clarencepohh"},"content":"    }","lastModifiedDate":"2024-02-13"},{"lineNumber":89,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-02-13"},{"lineNumber":90,"author":{"gitId":"clarencepohh"},"content":"    /**","lastModifiedDate":"2024-02-29"},{"lineNumber":91,"author":{"gitId":"clarencepohh"},"content":"     * Checks if events to be created have a from and to date, and prints an error message to","lastModifiedDate":"2024-02-29"},{"lineNumber":92,"author":{"gitId":"clarencepohh"},"content":"     * the console if they are missing. Also checks if events have the required \"/from\" and \"/to\" commands.","lastModifiedDate":"2024-02-29"},{"lineNumber":93,"author":{"gitId":"clarencepohh"},"content":"     *","lastModifiedDate":"2024-02-29"},{"lineNumber":94,"author":{"gitId":"clarencepohh"},"content":"     * @param indexOfStart The int representing the index of the character after \"/from\" in the input string.","lastModifiedDate":"2024-02-29"},{"lineNumber":95,"author":{"gitId":"clarencepohh"},"content":"     * @param indexOfEnd The int representing the index of the character after \"/to\" in the input string.","lastModifiedDate":"2024-02-29"},{"lineNumber":96,"author":{"gitId":"clarencepohh"},"content":"     * @param line The string containing the whole user input.","lastModifiedDate":"2024-02-29"},{"lineNumber":97,"author":{"gitId":"clarencepohh"},"content":"     * @throws HachiException If the required input format is incorrect.","lastModifiedDate":"2024-02-29"},{"lineNumber":98,"author":{"gitId":"clarencepohh"},"content":"     */","lastModifiedDate":"2024-02-29"},{"lineNumber":99,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-02-29"},{"lineNumber":100,"author":{"gitId":"clarencepohh"},"content":"    public static void checkEventDates (int indexOfStart, int indexOfEnd, String line) throws HachiException {","lastModifiedDate":"2024-02-29"},{"lineNumber":101,"author":{"gitId":"clarencepohh"},"content":"        boolean isMissingDate \u003d false;","lastModifiedDate":"2024-02-29"},{"lineNumber":102,"author":{"gitId":"clarencepohh"},"content":"        boolean isDateEmpty \u003d false;","lastModifiedDate":"2024-02-29"},{"lineNumber":103,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-02-29"},{"lineNumber":104,"author":{"gitId":"clarencepohh"},"content":"        String substringWithFrom \u003d line.substring(indexOfStart - 5, indexOfEnd - 4);","lastModifiedDate":"2024-02-29"},{"lineNumber":105,"author":{"gitId":"clarencepohh"},"content":"        String substringWithTo \u003d line.substring(indexOfEnd - 4);","lastModifiedDate":"2024-02-29"},{"lineNumber":106,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-02-29"},{"lineNumber":107,"author":{"gitId":"clarencepohh"},"content":"        String[] afterFromSubstring \u003d substringWithFrom.split(\"/from\");","lastModifiedDate":"2024-02-29"},{"lineNumber":108,"author":{"gitId":"clarencepohh"},"content":"        String[] afterToSubstring \u003d substringWithTo.split(\"/to\");","lastModifiedDate":"2024-02-29"},{"lineNumber":109,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-02-29"},{"lineNumber":110,"author":{"gitId":"clarencepohh"},"content":"        if (afterFromSubstring.length \u003d\u003d 1 || afterToSubstring.length \u003d\u003d 1) {","lastModifiedDate":"2024-02-29"},{"lineNumber":111,"author":{"gitId":"clarencepohh"},"content":"            isMissingDate \u003d true;","lastModifiedDate":"2024-02-29"},{"lineNumber":112,"author":{"gitId":"clarencepohh"},"content":"        } else try {","lastModifiedDate":"2024-03-01"},{"lineNumber":113,"author":{"gitId":"clarencepohh"},"content":"            if (afterFromSubstring[1].isBlank() || afterToSubstring[1].isBlank()) {","lastModifiedDate":"2024-03-01"},{"lineNumber":114,"author":{"gitId":"clarencepohh"},"content":"                isDateEmpty \u003d true;","lastModifiedDate":"2024-02-29"},{"lineNumber":115,"author":{"gitId":"clarencepohh"},"content":"            }","lastModifiedDate":"2024-02-29"},{"lineNumber":116,"author":{"gitId":"clarencepohh"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2024-03-01"},{"lineNumber":117,"author":{"gitId":"clarencepohh"},"content":"            throw new HachiException(MISSING_EVENT_START_END_DATE_MESSAGE);","lastModifiedDate":"2024-03-01"},{"lineNumber":118,"author":{"gitId":"clarencepohh"},"content":"        }","lastModifiedDate":"2024-03-01"},{"lineNumber":119,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-02-29"},{"lineNumber":120,"author":{"gitId":"clarencepohh"},"content":"        if (indexOfEnd \u003d\u003d 2 || indexOfStart \u003d\u003d 4 || isMissingDate || isDateEmpty) {","lastModifiedDate":"2024-02-29"},{"lineNumber":121,"author":{"gitId":"clarencepohh"},"content":"            throw new HachiException(MISSING_EVENT_START_END_DATE_MESSAGE);","lastModifiedDate":"2024-02-13"},{"lineNumber":122,"author":{"gitId":"clarencepohh"},"content":"        }","lastModifiedDate":"2024-02-13"},{"lineNumber":123,"author":{"gitId":"clarencepohh"},"content":"    }","lastModifiedDate":"2024-02-13"},{"lineNumber":124,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-02-13"},{"lineNumber":125,"author":{"gitId":"clarencepohh"},"content":"    /**","lastModifiedDate":"2024-02-29"},{"lineNumber":126,"author":{"gitId":"clarencepohh"},"content":"     * Checks if the task to be accessed exists within the current task list, and prints an","lastModifiedDate":"2024-02-29"},{"lineNumber":127,"author":{"gitId":"clarencepohh"},"content":"     * error message to the console if it is out of bounds.","lastModifiedDate":"2024-02-29"},{"lineNumber":128,"author":{"gitId":"clarencepohh"},"content":"     *","lastModifiedDate":"2024-02-29"},{"lineNumber":129,"author":{"gitId":"clarencepohh"},"content":"     * @param taskNumber The int representing the task number of the task to be accessed.","lastModifiedDate":"2024-02-29"},{"lineNumber":130,"author":{"gitId":"clarencepohh"},"content":"     * @throws HachiException If taskNumber is out of bounds of the task list.","lastModifiedDate":"2024-02-29"},{"lineNumber":131,"author":{"gitId":"clarencepohh"},"content":"     */","lastModifiedDate":"2024-02-29"},{"lineNumber":132,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-02-29"},{"lineNumber":133,"author":{"gitId":"clarencepohh"},"content":"    public static void checkOutOfBounds (int taskNumber) throws HachiException{","lastModifiedDate":"2024-02-13"},{"lineNumber":134,"author":{"gitId":"clarencepohh"},"content":"        int currentLastTask \u003d Task.getTotalNumTasks();","lastModifiedDate":"2024-02-13"},{"lineNumber":135,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-02-13"},{"lineNumber":136,"author":{"gitId":"clarencepohh"},"content":"        if (taskNumber \u003e currentLastTask || taskNumber \u003c\u003d 0) {","lastModifiedDate":"2024-02-26"},{"lineNumber":137,"author":{"gitId":"clarencepohh"},"content":"            throw new HachiException(LIST_OUT_OF_BOUNDS_MESSAGE);","lastModifiedDate":"2024-02-13"},{"lineNumber":138,"author":{"gitId":"clarencepohh"},"content":"        }","lastModifiedDate":"2024-02-13"},{"lineNumber":139,"author":{"gitId":"clarencepohh"},"content":"    }","lastModifiedDate":"2024-02-13"},{"lineNumber":140,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-03-01"},{"lineNumber":141,"author":{"gitId":"clarencepohh"},"content":"    /**","lastModifiedDate":"2024-03-01"},{"lineNumber":142,"author":{"gitId":"clarencepohh"},"content":"     * Function that checks if the user input after the \u0027find\u0027 command is valid, and prints an","lastModifiedDate":"2024-03-01"},{"lineNumber":143,"author":{"gitId":"clarencepohh"},"content":"     * error message to the console if it is invalid.","lastModifiedDate":"2024-03-01"},{"lineNumber":144,"author":{"gitId":"clarencepohh"},"content":"     *","lastModifiedDate":"2024-03-01"},{"lineNumber":145,"author":{"gitId":"clarencepohh"},"content":"     * @param indexOfFind The int representing the index of the character after \u0027find\u0027 in the input string.","lastModifiedDate":"2024-03-01"},{"lineNumber":146,"author":{"gitId":"clarencepohh"},"content":"     * @param cleanedInput The String containing the cleaned whole user input.","lastModifiedDate":"2024-03-01"},{"lineNumber":147,"author":{"gitId":"clarencepohh"},"content":"     * @throws HachiException If the user input is invalid.","lastModifiedDate":"2024-03-01"},{"lineNumber":148,"author":{"gitId":"clarencepohh"},"content":"     */","lastModifiedDate":"2024-03-01"},{"lineNumber":149,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-03-01"},{"lineNumber":150,"author":{"gitId":"clarencepohh"},"content":"    public static void checkFindTaskDescription (int indexOfFind, String cleanedInput) throws HachiException {","lastModifiedDate":"2024-03-01"},{"lineNumber":151,"author":{"gitId":"clarencepohh"},"content":"        boolean isMissingDescription \u003d false;","lastModifiedDate":"2024-03-01"},{"lineNumber":152,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-03-01"},{"lineNumber":153,"author":{"gitId":"clarencepohh"},"content":"        String[] afterFromSubstring \u003d cleanedInput.split(\"FIND\");","lastModifiedDate":"2024-03-01"},{"lineNumber":154,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-03-01"},{"lineNumber":155,"author":{"gitId":"clarencepohh"},"content":"        if (afterFromSubstring.length \u003d\u003d 1) {","lastModifiedDate":"2024-03-01"},{"lineNumber":156,"author":{"gitId":"clarencepohh"},"content":"            isMissingDescription \u003d true;","lastModifiedDate":"2024-03-01"},{"lineNumber":157,"author":{"gitId":"clarencepohh"},"content":"        } else try {","lastModifiedDate":"2024-03-01"},{"lineNumber":158,"author":{"gitId":"clarencepohh"},"content":"            if (afterFromSubstring[1].isBlank()) {","lastModifiedDate":"2024-03-01"},{"lineNumber":159,"author":{"gitId":"clarencepohh"},"content":"                throw new HachiException(MISSING_FIND_DESCRIPTION_MESSAGE);","lastModifiedDate":"2024-03-01"},{"lineNumber":160,"author":{"gitId":"clarencepohh"},"content":"            }","lastModifiedDate":"2024-03-01"},{"lineNumber":161,"author":{"gitId":"clarencepohh"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2024-03-01"},{"lineNumber":162,"author":{"gitId":"clarencepohh"},"content":"            isMissingDescription \u003d true;","lastModifiedDate":"2024-03-01"},{"lineNumber":163,"author":{"gitId":"clarencepohh"},"content":"        }","lastModifiedDate":"2024-03-01"},{"lineNumber":164,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-03-01"},{"lineNumber":165,"author":{"gitId":"clarencepohh"},"content":"        if (isMissingDescription || indexOfFind \u003d\u003d 4) {","lastModifiedDate":"2024-03-01"},{"lineNumber":166,"author":{"gitId":"clarencepohh"},"content":"            throw new HachiException(MISSING_FIND_DESCRIPTION_MESSAGE);","lastModifiedDate":"2024-03-01"},{"lineNumber":167,"author":{"gitId":"clarencepohh"},"content":"        }","lastModifiedDate":"2024-03-01"},{"lineNumber":168,"author":{"gitId":"clarencepohh"},"content":"    }","lastModifiedDate":"2024-03-01"},{"lineNumber":169,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-03-01"},{"lineNumber":170,"author":{"gitId":"clarencepohh"},"content":"    /**","lastModifiedDate":"2024-03-01"},{"lineNumber":171,"author":{"gitId":"clarencepohh"},"content":"     * Function that checks if the returned task list that contains tasks matching the user\u0027s","lastModifiedDate":"2024-03-01"},{"lineNumber":172,"author":{"gitId":"clarencepohh"},"content":"     * requested keyword is empty, and prints an error message to the console if it is empty.","lastModifiedDate":"2024-03-01"},{"lineNumber":173,"author":{"gitId":"clarencepohh"},"content":"     *","lastModifiedDate":"2024-03-01"},{"lineNumber":174,"author":{"gitId":"clarencepohh"},"content":"     * @param foundTasksList The ArrayList\u003cTask\u003e containing the tasks found to be matching.","lastModifiedDate":"2024-03-01"},{"lineNumber":175,"author":{"gitId":"clarencepohh"},"content":"     * @throws HachiException If foundTasksList is empty.","lastModifiedDate":"2024-03-01"},{"lineNumber":176,"author":{"gitId":"clarencepohh"},"content":"     */","lastModifiedDate":"2024-03-01"},{"lineNumber":177,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-03-01"},{"lineNumber":178,"author":{"gitId":"clarencepohh"},"content":"    public static void checkForEmptyFoundTaskList (ArrayList\u003cTask\u003e foundTasksList) throws HachiException{","lastModifiedDate":"2024-03-01"},{"lineNumber":179,"author":{"gitId":"clarencepohh"},"content":"        if (foundTasksList.isEmpty()) {","lastModifiedDate":"2024-03-01"},{"lineNumber":180,"author":{"gitId":"clarencepohh"},"content":"            throw new HachiException(EMPTY_FOUND_TASK_LIST);","lastModifiedDate":"2024-03-01"},{"lineNumber":181,"author":{"gitId":"clarencepohh"},"content":"        }","lastModifiedDate":"2024-03-01"},{"lineNumber":182,"author":{"gitId":"clarencepohh"},"content":"    }","lastModifiedDate":"2024-03-01"},{"lineNumber":183,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-03-01"},{"lineNumber":184,"author":{"gitId":"clarencepohh"},"content":"    @Override","lastModifiedDate":"2024-02-13"},{"lineNumber":185,"author":{"gitId":"clarencepohh"},"content":"    public String toString() {","lastModifiedDate":"2024-02-13"},{"lineNumber":186,"author":{"gitId":"clarencepohh"},"content":"        return super.getMessage();","lastModifiedDate":"2024-02-13"},{"lineNumber":187,"author":{"gitId":"clarencepohh"},"content":"    }","lastModifiedDate":"2024-02-13"},{"lineNumber":188,"author":{"gitId":"clarencepohh"},"content":"}","lastModifiedDate":"2024-02-13"}],"authorContributionMap":{"clarencepohh":188}},{"path":"src/main/java/hachi/data/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"clarencepohh"},"content":"package hachi.data;","lastModifiedDate":"2024-02-26"},{"lineNumber":2,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-02-26"},{"lineNumber":3,"author":{"gitId":"clarencepohh"},"content":"import hachi.data.task.Task;","lastModifiedDate":"2024-03-08"},{"lineNumber":4,"author":{"gitId":"clarencepohh"},"content":"import hachi.data.task.Event;","lastModifiedDate":"2024-03-08"},{"lineNumber":5,"author":{"gitId":"clarencepohh"},"content":"import hachi.data.task.Deadline;","lastModifiedDate":"2024-03-08"},{"lineNumber":6,"author":{"gitId":"clarencepohh"},"content":"import hachi.data.task.TaskType;","lastModifiedDate":"2024-03-08"},{"lineNumber":7,"author":{"gitId":"clarencepohh"},"content":"import hachi.data.task.Todo;","lastModifiedDate":"2024-03-08"},{"lineNumber":8,"author":{"gitId":"clarencepohh"},"content":"import hachi.parser.Parser;","lastModifiedDate":"2024-02-26"},{"lineNumber":9,"author":{"gitId":"clarencepohh"},"content":"import hachi.ui.Ui;","lastModifiedDate":"2024-02-26"},{"lineNumber":10,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-02-26"},{"lineNumber":11,"author":{"gitId":"clarencepohh"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-02-26"},{"lineNumber":12,"author":{"gitId":"clarencepohh"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2024-03-01"},{"lineNumber":13,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-02-26"},{"lineNumber":14,"author":{"gitId":"clarencepohh"},"content":"/**","lastModifiedDate":"2024-03-08"},{"lineNumber":15,"author":{"gitId":"clarencepohh"},"content":" * Represents the TaskList for the chatbot Hachi.","lastModifiedDate":"2024-03-08"},{"lineNumber":16,"author":{"gitId":"clarencepohh"},"content":" * Contains methods for handling tasks.","lastModifiedDate":"2024-03-08"},{"lineNumber":17,"author":{"gitId":"clarencepohh"},"content":" *","lastModifiedDate":"2024-03-08"},{"lineNumber":18,"author":{"gitId":"clarencepohh"},"content":" * @author clarencepohh","lastModifiedDate":"2024-03-08"},{"lineNumber":19,"author":{"gitId":"clarencepohh"},"content":" * @version 08/03/2024","lastModifiedDate":"2024-03-08"},{"lineNumber":20,"author":{"gitId":"clarencepohh"},"content":" */","lastModifiedDate":"2024-03-08"},{"lineNumber":21,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-03-08"},{"lineNumber":22,"author":{"gitId":"clarencepohh"},"content":"public class TaskList {","lastModifiedDate":"2024-02-26"},{"lineNumber":23,"author":{"gitId":"clarencepohh"},"content":"    private final ArrayList\u003cTask\u003e tasksArrayList;","lastModifiedDate":"2024-02-29"},{"lineNumber":24,"author":{"gitId":"clarencepohh"},"content":"    private final Ui ui;","lastModifiedDate":"2024-02-29"},{"lineNumber":25,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-02-26"},{"lineNumber":26,"author":{"gitId":"clarencepohh"},"content":"    /**","lastModifiedDate":"2024-03-08"},{"lineNumber":27,"author":{"gitId":"clarencepohh"},"content":"     * The standard constructor for TaskList.","lastModifiedDate":"2024-03-08"},{"lineNumber":28,"author":{"gitId":"clarencepohh"},"content":"     * Initializes the required ArrayList and Ui classes.","lastModifiedDate":"2024-03-08"},{"lineNumber":29,"author":{"gitId":"clarencepohh"},"content":"     *","lastModifiedDate":"2024-03-08"},{"lineNumber":30,"author":{"gitId":"clarencepohh"},"content":"     */","lastModifiedDate":"2024-03-08"},{"lineNumber":31,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-03-08"},{"lineNumber":32,"author":{"gitId":"clarencepohh"},"content":"    public TaskList () {","lastModifiedDate":"2024-02-26"},{"lineNumber":33,"author":{"gitId":"clarencepohh"},"content":"        this.tasksArrayList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-03-08"},{"lineNumber":34,"author":{"gitId":"clarencepohh"},"content":"        this.ui \u003d new Ui();","lastModifiedDate":"2024-03-08"},{"lineNumber":35,"author":{"gitId":"clarencepohh"},"content":"    }","lastModifiedDate":"2024-02-26"},{"lineNumber":36,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-02-26"},{"lineNumber":37,"author":{"gitId":"clarencepohh"},"content":"    /**","lastModifiedDate":"2024-03-08"},{"lineNumber":38,"author":{"gitId":"clarencepohh"},"content":"     * The constructor for TaskList that takes in an existing ArrayList.","lastModifiedDate":"2024-03-08"},{"lineNumber":39,"author":{"gitId":"clarencepohh"},"content":"     * Initializes the Arraylist with an existing Arraylist and a new Ui classes.","lastModifiedDate":"2024-03-08"},{"lineNumber":40,"author":{"gitId":"clarencepohh"},"content":"     *","lastModifiedDate":"2024-03-08"},{"lineNumber":41,"author":{"gitId":"clarencepohh"},"content":"     * @param tasksArrayList The existing ArrayList that the TaskList takes in.","lastModifiedDate":"2024-03-08"},{"lineNumber":42,"author":{"gitId":"clarencepohh"},"content":"     */","lastModifiedDate":"2024-03-08"},{"lineNumber":43,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-03-08"},{"lineNumber":44,"author":{"gitId":"clarencepohh"},"content":"    public TaskList (ArrayList\u003cTask\u003e tasksArrayList) {","lastModifiedDate":"2024-02-26"},{"lineNumber":45,"author":{"gitId":"clarencepohh"},"content":"        this.tasksArrayList \u003d tasksArrayList;","lastModifiedDate":"2024-02-29"},{"lineNumber":46,"author":{"gitId":"clarencepohh"},"content":"        this.ui \u003d new Ui();","lastModifiedDate":"2024-03-08"},{"lineNumber":47,"author":{"gitId":"clarencepohh"},"content":"    }","lastModifiedDate":"2024-02-26"},{"lineNumber":48,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-02-26"},{"lineNumber":49,"author":{"gitId":"clarencepohh"},"content":"    /**","lastModifiedDate":"2024-03-08"},{"lineNumber":50,"author":{"gitId":"clarencepohh"},"content":"     * Getter for the TaskList.","lastModifiedDate":"2024-03-08"},{"lineNumber":51,"author":{"gitId":"clarencepohh"},"content":"     *","lastModifiedDate":"2024-03-08"},{"lineNumber":52,"author":{"gitId":"clarencepohh"},"content":"     * @return Returns the Task ArrayList.","lastModifiedDate":"2024-03-08"},{"lineNumber":53,"author":{"gitId":"clarencepohh"},"content":"     */","lastModifiedDate":"2024-03-08"},{"lineNumber":54,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-03-08"},{"lineNumber":55,"author":{"gitId":"clarencepohh"},"content":"    public ArrayList\u003cTask\u003e getTasksArrayList() {","lastModifiedDate":"2024-02-29"},{"lineNumber":56,"author":{"gitId":"clarencepohh"},"content":"        return tasksArrayList;","lastModifiedDate":"2024-02-26"},{"lineNumber":57,"author":{"gitId":"clarencepohh"},"content":"    }","lastModifiedDate":"2024-02-26"},{"lineNumber":58,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-02-26"},{"lineNumber":59,"author":{"gitId":"clarencepohh"},"content":"    /**","lastModifiedDate":"2024-03-08"},{"lineNumber":60,"author":{"gitId":"clarencepohh"},"content":"     * Getter for the size of the TaskList.","lastModifiedDate":"2024-03-08"},{"lineNumber":61,"author":{"gitId":"clarencepohh"},"content":"     *","lastModifiedDate":"2024-03-08"},{"lineNumber":62,"author":{"gitId":"clarencepohh"},"content":"     * @return Returns the size of the Task ArrayList.","lastModifiedDate":"2024-03-08"},{"lineNumber":63,"author":{"gitId":"clarencepohh"},"content":"     */","lastModifiedDate":"2024-03-08"},{"lineNumber":64,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-03-08"},{"lineNumber":65,"author":{"gitId":"clarencepohh"},"content":"    public int getSize () {","lastModifiedDate":"2024-02-29"},{"lineNumber":66,"author":{"gitId":"clarencepohh"},"content":"        return tasksArrayList.size();","lastModifiedDate":"2024-02-29"},{"lineNumber":67,"author":{"gitId":"clarencepohh"},"content":"    }","lastModifiedDate":"2024-02-29"},{"lineNumber":68,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-02-29"},{"lineNumber":69,"author":{"gitId":"clarencepohh"},"content":"    /**","lastModifiedDate":"2024-03-08"},{"lineNumber":70,"author":{"gitId":"clarencepohh"},"content":"     * Getter for a task of specific index in the Task ArrayList.","lastModifiedDate":"2024-03-08"},{"lineNumber":71,"author":{"gitId":"clarencepohh"},"content":"     *","lastModifiedDate":"2024-03-08"},{"lineNumber":72,"author":{"gitId":"clarencepohh"},"content":"     * @param index Index of the task to be returned.","lastModifiedDate":"2024-03-08"},{"lineNumber":73,"author":{"gitId":"clarencepohh"},"content":"     * @return Returns the specified task.","lastModifiedDate":"2024-03-08"},{"lineNumber":74,"author":{"gitId":"clarencepohh"},"content":"     */","lastModifiedDate":"2024-03-08"},{"lineNumber":75,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-03-08"},{"lineNumber":76,"author":{"gitId":"clarencepohh"},"content":"    public Task getSpecifiedTask (int index) {","lastModifiedDate":"2024-02-29"},{"lineNumber":77,"author":{"gitId":"clarencepohh"},"content":"        return tasksArrayList.get(index);","lastModifiedDate":"2024-02-29"},{"lineNumber":78,"author":{"gitId":"clarencepohh"},"content":"    }","lastModifiedDate":"2024-02-29"},{"lineNumber":79,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-02-29"},{"lineNumber":80,"author":{"gitId":"clarencepohh"},"content":"    /**","lastModifiedDate":"2024-02-26"},{"lineNumber":81,"author":{"gitId":"clarencepohh"},"content":"     * Retrieves the current list of tasks and prints it to","lastModifiedDate":"2024-02-26"},{"lineNumber":82,"author":{"gitId":"clarencepohh"},"content":"     * the console for the user to see.","lastModifiedDate":"2024-02-26"},{"lineNumber":83,"author":{"gitId":"clarencepohh"},"content":"     *","lastModifiedDate":"2024-02-26"},{"lineNumber":84,"author":{"gitId":"clarencepohh"},"content":"     * @throws HachiException If the current list is empty.","lastModifiedDate":"2024-02-26"},{"lineNumber":85,"author":{"gitId":"clarencepohh"},"content":"     */","lastModifiedDate":"2024-02-26"},{"lineNumber":86,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-02-26"},{"lineNumber":87,"author":{"gitId":"clarencepohh"},"content":"    public void retrieveTaskList() throws HachiException{","lastModifiedDate":"2024-02-29"},{"lineNumber":88,"author":{"gitId":"clarencepohh"},"content":"        int numTasks \u003d Task.getTotalNumTasks();","lastModifiedDate":"2024-02-26"},{"lineNumber":89,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-02-26"},{"lineNumber":90,"author":{"gitId":"clarencepohh"},"content":"        HachiException.checkEmptyList(numTasks);","lastModifiedDate":"2024-02-26"},{"lineNumber":91,"author":{"gitId":"clarencepohh"},"content":"        ui.spacerInsert();","lastModifiedDate":"2024-02-29"},{"lineNumber":92,"author":{"gitId":"clarencepohh"},"content":"        ui.printTaskList(tasksArrayList);","lastModifiedDate":"2024-02-29"},{"lineNumber":93,"author":{"gitId":"clarencepohh"},"content":"    }","lastModifiedDate":"2024-02-26"},{"lineNumber":94,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-02-26"},{"lineNumber":95,"author":{"gitId":"clarencepohh"},"content":"    /**","lastModifiedDate":"2024-02-26"},{"lineNumber":96,"author":{"gitId":"clarencepohh"},"content":"     * Given a task\u0027s name and the list of tasks, add a new task into the list.","lastModifiedDate":"2024-02-26"},{"lineNumber":97,"author":{"gitId":"clarencepohh"},"content":"     * Depending on the user\u0027s input, can create subclass of tasks: Todos, Deadlines and Events.","lastModifiedDate":"2024-02-26"},{"lineNumber":98,"author":{"gitId":"clarencepohh"},"content":"     * Prints to the console after a successful addition to the Task ArrayList.","lastModifiedDate":"2024-03-08"},{"lineNumber":99,"author":{"gitId":"clarencepohh"},"content":"     *","lastModifiedDate":"2024-02-26"},{"lineNumber":100,"author":{"gitId":"clarencepohh"},"content":"     * @param taskType Type of task to be added. (Todo, Event, Deadline)","lastModifiedDate":"2024-02-26"},{"lineNumber":101,"author":{"gitId":"clarencepohh"},"content":"     * @param line The line of text given by the user.","lastModifiedDate":"2024-02-26"},{"lineNumber":102,"author":{"gitId":"clarencepohh"},"content":"     * @param cleanInput The cleaned line of text that will be used to determine the instruction.","lastModifiedDate":"2024-02-26"},{"lineNumber":103,"author":{"gitId":"clarencepohh"},"content":"     * @throws HachiException If there is an error creating the tasks.","lastModifiedDate":"2024-03-08"},{"lineNumber":104,"author":{"gitId":"clarencepohh"},"content":"     */","lastModifiedDate":"2024-02-26"},{"lineNumber":105,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-02-26"},{"lineNumber":106,"author":{"gitId":"clarencepohh"},"content":"    public void addTask(TaskType taskType, String line, String cleanInput) throws HachiException {","lastModifiedDate":"2024-02-29"},{"lineNumber":107,"author":{"gitId":"clarencepohh"},"content":"        Task toAdd;","lastModifiedDate":"2024-02-26"},{"lineNumber":108,"author":{"gitId":"clarencepohh"},"content":"        HachiException.checkValidDescription(line);","lastModifiedDate":"2024-02-26"},{"lineNumber":109,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-02-26"},{"lineNumber":110,"author":{"gitId":"clarencepohh"},"content":"        if (taskType \u003d\u003d TaskType.TODO) {","lastModifiedDate":"2024-02-26"},{"lineNumber":111,"author":{"gitId":"clarencepohh"},"content":"            int indexOfTodo \u003d cleanInput.indexOf(\"TODO\") + 5;","lastModifiedDate":"2024-02-26"},{"lineNumber":112,"author":{"gitId":"clarencepohh"},"content":"            String name \u003d line.substring(indexOfTodo).trim();","lastModifiedDate":"2024-02-26"},{"lineNumber":113,"author":{"gitId":"clarencepohh"},"content":"            toAdd \u003d new Todo(name);","lastModifiedDate":"2024-02-26"},{"lineNumber":114,"author":{"gitId":"clarencepohh"},"content":"        } else if (taskType \u003d\u003d TaskType.DEADLINE) {","lastModifiedDate":"2024-02-26"},{"lineNumber":115,"author":{"gitId":"clarencepohh"},"content":"            // parse deadline here","lastModifiedDate":"2024-02-26"},{"lineNumber":116,"author":{"gitId":"clarencepohh"},"content":"            int indexOfName \u003d cleanInput.indexOf(\"DEADLINE\") + 9;","lastModifiedDate":"2024-02-26"},{"lineNumber":117,"author":{"gitId":"clarencepohh"},"content":"            int indexOfBy \u003d cleanInput.indexOf(\"/BY\") + 3;","lastModifiedDate":"2024-02-26"},{"lineNumber":118,"author":{"gitId":"clarencepohh"},"content":"            HachiException.checkDeadlineByDate(indexOfBy, line);","lastModifiedDate":"2024-02-29"},{"lineNumber":119,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-02-26"},{"lineNumber":120,"author":{"gitId":"clarencepohh"},"content":"            String name \u003d line.substring(indexOfName, indexOfBy - 3).trim();","lastModifiedDate":"2024-02-26"},{"lineNumber":121,"author":{"gitId":"clarencepohh"},"content":"            String byDate \u003d line.substring(indexOfBy).trim();","lastModifiedDate":"2024-02-26"},{"lineNumber":122,"author":{"gitId":"clarencepohh"},"content":"            toAdd \u003d new Deadline(name, byDate);","lastModifiedDate":"2024-02-26"},{"lineNumber":123,"author":{"gitId":"clarencepohh"},"content":"        } else {","lastModifiedDate":"2024-02-26"},{"lineNumber":124,"author":{"gitId":"clarencepohh"},"content":"            // parse to and from dates here","lastModifiedDate":"2024-02-26"},{"lineNumber":125,"author":{"gitId":"clarencepohh"},"content":"            int indexOfName \u003d cleanInput.indexOf(\"EVENT\") + 6;","lastModifiedDate":"2024-02-26"},{"lineNumber":126,"author":{"gitId":"clarencepohh"},"content":"            int indexOfStart \u003d cleanInput.indexOf(\"/FROM\") + 5;","lastModifiedDate":"2024-02-26"},{"lineNumber":127,"author":{"gitId":"clarencepohh"},"content":"            int indexOfEnd \u003d cleanInput.indexOf(\"/TO\") + 3;","lastModifiedDate":"2024-02-26"},{"lineNumber":128,"author":{"gitId":"clarencepohh"},"content":"            HachiException.checkEventDates(indexOfStart, indexOfEnd, line);","lastModifiedDate":"2024-02-29"},{"lineNumber":129,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-02-26"},{"lineNumber":130,"author":{"gitId":"clarencepohh"},"content":"            String name \u003d line.substring(indexOfName, indexOfStart - 5);","lastModifiedDate":"2024-02-26"},{"lineNumber":131,"author":{"gitId":"clarencepohh"},"content":"            String fromDate \u003d line.substring(indexOfStart, indexOfEnd - 3).trim();","lastModifiedDate":"2024-02-26"},{"lineNumber":132,"author":{"gitId":"clarencepohh"},"content":"            String toDate \u003d line.substring(indexOfEnd).trim();","lastModifiedDate":"2024-02-26"},{"lineNumber":133,"author":{"gitId":"clarencepohh"},"content":"            toAdd \u003d new Event(name, fromDate, toDate);","lastModifiedDate":"2024-02-26"},{"lineNumber":134,"author":{"gitId":"clarencepohh"},"content":"        }","lastModifiedDate":"2024-02-26"},{"lineNumber":135,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-02-26"},{"lineNumber":136,"author":{"gitId":"clarencepohh"},"content":"        tasksArrayList.add(toAdd);","lastModifiedDate":"2024-02-26"},{"lineNumber":137,"author":{"gitId":"clarencepohh"},"content":"        ui.printAddTaskMessage(toAdd);","lastModifiedDate":"2024-02-29"},{"lineNumber":138,"author":{"gitId":"clarencepohh"},"content":"    }","lastModifiedDate":"2024-02-26"},{"lineNumber":139,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-02-26"},{"lineNumber":140,"author":{"gitId":"clarencepohh"},"content":"    /**","lastModifiedDate":"2024-03-08"},{"lineNumber":141,"author":{"gitId":"clarencepohh"},"content":"     * Given a task index, deletes it from the Task ArrayList.","lastModifiedDate":"2024-03-08"},{"lineNumber":142,"author":{"gitId":"clarencepohh"},"content":"     *","lastModifiedDate":"2024-03-08"},{"lineNumber":143,"author":{"gitId":"clarencepohh"},"content":"     * @param cleanedInput The String containing the cleaned whole user input.","lastModifiedDate":"2024-03-08"},{"lineNumber":144,"author":{"gitId":"clarencepohh"},"content":"     * @throws HachiException If the list is empty or the specified task index is out of bounds.","lastModifiedDate":"2024-03-08"},{"lineNumber":145,"author":{"gitId":"clarencepohh"},"content":"     */","lastModifiedDate":"2024-03-08"},{"lineNumber":146,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-03-08"},{"lineNumber":147,"author":{"gitId":"clarencepohh"},"content":"    public void deleteTask(String cleanedInput) throws HachiException {","lastModifiedDate":"2024-02-29"},{"lineNumber":148,"author":{"gitId":"clarencepohh"},"content":"        int numTasks \u003d Task.getTotalNumTasks();","lastModifiedDate":"2024-02-26"},{"lineNumber":149,"author":{"gitId":"clarencepohh"},"content":"        HachiException.checkEmptyList(numTasks);","lastModifiedDate":"2024-02-26"},{"lineNumber":150,"author":{"gitId":"clarencepohh"},"content":"        int taskNumber \u003d Parser.getDeleteTaskNumber(cleanedInput);","lastModifiedDate":"2024-02-26"},{"lineNumber":151,"author":{"gitId":"clarencepohh"},"content":"        HachiException.checkOutOfBounds(taskNumber);","lastModifiedDate":"2024-02-26"},{"lineNumber":152,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-02-26"},{"lineNumber":153,"author":{"gitId":"clarencepohh"},"content":"        Task taskToDelete \u003d tasksArrayList.get(taskNumber - 1);","lastModifiedDate":"2024-02-26"},{"lineNumber":154,"author":{"gitId":"clarencepohh"},"content":"        String taskType \u003d taskToDelete.getTaskType();","lastModifiedDate":"2024-02-26"},{"lineNumber":155,"author":{"gitId":"clarencepohh"},"content":"        String statusIcon \u003d taskToDelete.getStatusIcon();","lastModifiedDate":"2024-02-26"},{"lineNumber":156,"author":{"gitId":"clarencepohh"},"content":"        Task.decrementTotalNumTasks();","lastModifiedDate":"2024-02-26"},{"lineNumber":157,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-02-26"},{"lineNumber":158,"author":{"gitId":"clarencepohh"},"content":"        ui.printTaskDeleteMessage(taskType, statusIcon, taskToDelete);","lastModifiedDate":"2024-02-29"},{"lineNumber":159,"author":{"gitId":"clarencepohh"},"content":"        tasksArrayList.remove(taskNumber - 1);","lastModifiedDate":"2024-02-26"},{"lineNumber":160,"author":{"gitId":"clarencepohh"},"content":"    }","lastModifiedDate":"2024-02-26"},{"lineNumber":161,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-02-26"},{"lineNumber":162,"author":{"gitId":"clarencepohh"},"content":"    /**","lastModifiedDate":"2024-02-26"},{"lineNumber":163,"author":{"gitId":"clarencepohh"},"content":"     * Given a task\u0027s index and the list of tasks,","lastModifiedDate":"2024-02-26"},{"lineNumber":164,"author":{"gitId":"clarencepohh"},"content":"     * mark that task as complete or incomplete.","lastModifiedDate":"2024-02-26"},{"lineNumber":165,"author":{"gitId":"clarencepohh"},"content":"     *","lastModifiedDate":"2024-02-26"},{"lineNumber":166,"author":{"gitId":"clarencepohh"},"content":"     * @param index Index of the task to be marked.","lastModifiedDate":"2024-02-26"},{"lineNumber":167,"author":{"gitId":"clarencepohh"},"content":"     * @param isMark True if task is to be marked as complete, false otherwise","lastModifiedDate":"2024-02-26"},{"lineNumber":168,"author":{"gitId":"clarencepohh"},"content":"     */","lastModifiedDate":"2024-02-26"},{"lineNumber":169,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-02-26"},{"lineNumber":170,"author":{"gitId":"clarencepohh"},"content":"    public void markOrUnmarkTask(int index, boolean isMark) {","lastModifiedDate":"2024-02-29"},{"lineNumber":171,"author":{"gitId":"clarencepohh"},"content":"        tasksArrayList.get(index).setCompleteness(isMark);","lastModifiedDate":"2024-02-26"},{"lineNumber":172,"author":{"gitId":"clarencepohh"},"content":"        ui.printAfterMarkOrUnmark(tasksArrayList, index);","lastModifiedDate":"2024-02-29"},{"lineNumber":173,"author":{"gitId":"clarencepohh"},"content":"    }","lastModifiedDate":"2024-02-26"},{"lineNumber":174,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-02-26"},{"lineNumber":175,"author":{"gitId":"clarencepohh"},"content":"    /**","lastModifiedDate":"2024-02-26"},{"lineNumber":176,"author":{"gitId":"clarencepohh"},"content":"     * Function that cleans the user input for mark or unmark requests","lastModifiedDate":"2024-02-26"},{"lineNumber":177,"author":{"gitId":"clarencepohh"},"content":"     * and completes the function call as required.","lastModifiedDate":"2024-02-26"},{"lineNumber":178,"author":{"gitId":"clarencepohh"},"content":"     *","lastModifiedDate":"2024-02-26"},{"lineNumber":179,"author":{"gitId":"clarencepohh"},"content":"     * @param cleanedInput Cleaned input string from user.","lastModifiedDate":"2024-02-26"},{"lineNumber":180,"author":{"gitId":"clarencepohh"},"content":"     */","lastModifiedDate":"2024-02-26"},{"lineNumber":181,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-02-26"},{"lineNumber":182,"author":{"gitId":"clarencepohh"},"content":"    public void markOrUnmarkHandler(String cleanedInput) throws HachiException{","lastModifiedDate":"2024-02-29"},{"lineNumber":183,"author":{"gitId":"clarencepohh"},"content":"        int numTasks \u003d Task.getTotalNumTasks();","lastModifiedDate":"2024-02-26"},{"lineNumber":184,"author":{"gitId":"clarencepohh"},"content":"        HachiException.checkEmptyList(numTasks);","lastModifiedDate":"2024-02-26"},{"lineNumber":185,"author":{"gitId":"clarencepohh"},"content":"        int taskNumber \u003d Parser.getMarkTaskNumber(cleanedInput);","lastModifiedDate":"2024-02-26"},{"lineNumber":186,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-02-26"},{"lineNumber":187,"author":{"gitId":"clarencepohh"},"content":"        HachiException.checkOutOfBounds(taskNumber);","lastModifiedDate":"2024-02-26"},{"lineNumber":188,"author":{"gitId":"clarencepohh"},"content":"        markOrUnmarkTask(taskNumber - 1, !cleanedInput.contains(\"UNMARK\"));","lastModifiedDate":"2024-02-29"},{"lineNumber":189,"author":{"gitId":"clarencepohh"},"content":"    }","lastModifiedDate":"2024-02-29"},{"lineNumber":190,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-02-29"},{"lineNumber":191,"author":{"gitId":"clarencepohh"},"content":"    /**","lastModifiedDate":"2024-03-01"},{"lineNumber":192,"author":{"gitId":"clarencepohh"},"content":"     * Function that adds a task to the task list.","lastModifiedDate":"2024-03-01"},{"lineNumber":193,"author":{"gitId":"clarencepohh"},"content":"     *","lastModifiedDate":"2024-03-01"},{"lineNumber":194,"author":{"gitId":"clarencepohh"},"content":"     * @param toAdd The task to be added to the task list.","lastModifiedDate":"2024-03-01"},{"lineNumber":195,"author":{"gitId":"clarencepohh"},"content":"     */","lastModifiedDate":"2024-03-01"},{"lineNumber":196,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-03-01"},{"lineNumber":197,"author":{"gitId":"clarencepohh"},"content":"    public void add (Task toAdd) {","lastModifiedDate":"2024-02-29"},{"lineNumber":198,"author":{"gitId":"clarencepohh"},"content":"        tasksArrayList.add(toAdd);","lastModifiedDate":"2024-02-29"},{"lineNumber":199,"author":{"gitId":"clarencepohh"},"content":"    }","lastModifiedDate":"2024-02-26"},{"lineNumber":200,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-03-01"},{"lineNumber":201,"author":{"gitId":"clarencepohh"},"content":"    /**","lastModifiedDate":"2024-03-08"},{"lineNumber":202,"author":{"gitId":"clarencepohh"},"content":"     * Given a specified substring, finds all tasks that contains that substring and","lastModifiedDate":"2024-03-08"},{"lineNumber":203,"author":{"gitId":"clarencepohh"},"content":"     * returns it to the caller as an ArrayList\u003cTask\u003e.","lastModifiedDate":"2024-03-08"},{"lineNumber":204,"author":{"gitId":"clarencepohh"},"content":"     *","lastModifiedDate":"2024-03-08"},{"lineNumber":205,"author":{"gitId":"clarencepohh"},"content":"     * @param cleanedInput The String that contains the cleaned whole user input.","lastModifiedDate":"2024-03-08"},{"lineNumber":206,"author":{"gitId":"clarencepohh"},"content":"     * @return An ArrayList\u003cTask\u003e that contains all tasks that contains the user specified substring.","lastModifiedDate":"2024-03-08"},{"lineNumber":207,"author":{"gitId":"clarencepohh"},"content":"     * @throws HachiException If the user input for the \u0027find\u0027 command is invalid.","lastModifiedDate":"2024-03-08"},{"lineNumber":208,"author":{"gitId":"clarencepohh"},"content":"     */","lastModifiedDate":"2024-03-08"},{"lineNumber":209,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-03-08"},{"lineNumber":210,"author":{"gitId":"clarencepohh"},"content":"    public ArrayList\u003cTask\u003e findTask (String cleanedInput) throws HachiException{","lastModifiedDate":"2024-03-01"},{"lineNumber":211,"author":{"gitId":"clarencepohh"},"content":"        int indexOfFind \u003d cleanedInput.indexOf(\"FIND\") + 5;","lastModifiedDate":"2024-03-01"},{"lineNumber":212,"author":{"gitId":"clarencepohh"},"content":"        HachiException.checkFindTaskDescription(indexOfFind, cleanedInput);","lastModifiedDate":"2024-03-01"},{"lineNumber":213,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-03-01"},{"lineNumber":214,"author":{"gitId":"clarencepohh"},"content":"        String substringToFind \u003d cleanedInput.substring(indexOfFind);","lastModifiedDate":"2024-03-01"},{"lineNumber":215,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-03-01"},{"lineNumber":216,"author":{"gitId":"clarencepohh"},"content":"        return (ArrayList\u003cTask\u003e) tasksArrayList.stream()","lastModifiedDate":"2024-03-01"},{"lineNumber":217,"author":{"gitId":"clarencepohh"},"content":"                .filter((task -\u003e task.getName().toUpperCase().contains(substringToFind)))","lastModifiedDate":"2024-03-01"},{"lineNumber":218,"author":{"gitId":"clarencepohh"},"content":"                .collect(Collectors.toList());","lastModifiedDate":"2024-03-01"},{"lineNumber":219,"author":{"gitId":"clarencepohh"},"content":"    }","lastModifiedDate":"2024-03-01"},{"lineNumber":220,"author":{"gitId":"clarencepohh"},"content":"}","lastModifiedDate":"2024-02-26"}],"authorContributionMap":{"clarencepohh":220}},{"path":"src/main/java/hachi/data/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"clarencepohh"},"content":"package hachi.data.task;","lastModifiedDate":"2024-02-15"},{"lineNumber":2,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-02-15"},{"lineNumber":3,"author":{"gitId":"clarencepohh"},"content":"/**","lastModifiedDate":"2024-03-01"},{"lineNumber":4,"author":{"gitId":"clarencepohh"},"content":" * Represents a Deadline Task with the elements task name, its completeness status","lastModifiedDate":"2024-03-01"},{"lineNumber":5,"author":{"gitId":"clarencepohh"},"content":" * and a class-level element that tracks the total number of tasks currently active.","lastModifiedDate":"2024-03-01"},{"lineNumber":6,"author":{"gitId":"clarencepohh"},"content":" * Overrides superclass Task which adds a by date which represents the date of the deadline.","lastModifiedDate":"2024-03-01"},{"lineNumber":7,"author":{"gitId":"clarencepohh"},"content":" *","lastModifiedDate":"2024-03-01"},{"lineNumber":8,"author":{"gitId":"clarencepohh"},"content":" * @author clarencepohh","lastModifiedDate":"2024-03-01"},{"lineNumber":9,"author":{"gitId":"clarencepohh"},"content":" * @version 01/03/2024","lastModifiedDate":"2024-03-01"},{"lineNumber":10,"author":{"gitId":"clarencepohh"},"content":" */","lastModifiedDate":"2024-03-01"},{"lineNumber":11,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-03-01"},{"lineNumber":12,"author":{"gitId":"clarencepohh"},"content":"public class Deadline extends Task {","lastModifiedDate":"2024-02-06"},{"lineNumber":13,"author":{"gitId":"clarencepohh"},"content":"    protected String byDate;","lastModifiedDate":"2024-02-06"},{"lineNumber":14,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":15,"author":{"gitId":"clarencepohh"},"content":"    /**","lastModifiedDate":"2024-02-06"},{"lineNumber":16,"author":{"gitId":"clarencepohh"},"content":"     * Constructor for new tasks given its name.","lastModifiedDate":"2024-02-06"},{"lineNumber":17,"author":{"gitId":"clarencepohh"},"content":"     * Tasks are initialized as incomplete.","lastModifiedDate":"2024-02-06"},{"lineNumber":18,"author":{"gitId":"clarencepohh"},"content":"     * Increments the class-level element totalNumTasks by 1.","lastModifiedDate":"2024-02-06"},{"lineNumber":19,"author":{"gitId":"clarencepohh"},"content":"     * Deadlines are also considered as tasks.","lastModifiedDate":"2024-02-06"},{"lineNumber":20,"author":{"gitId":"clarencepohh"},"content":"     *","lastModifiedDate":"2024-02-06"},{"lineNumber":21,"author":{"gitId":"clarencepohh"},"content":"     * @param name The name of the task to be created.","lastModifiedDate":"2024-02-06"},{"lineNumber":22,"author":{"gitId":"clarencepohh"},"content":"     * @param by The date of the task\u0027s deadline as a string.","lastModifiedDate":"2024-02-06"},{"lineNumber":23,"author":{"gitId":"clarencepohh"},"content":"     */","lastModifiedDate":"2024-02-06"},{"lineNumber":24,"author":{"gitId":"clarencepohh"},"content":"    public Deadline(String name, String by) {","lastModifiedDate":"2024-02-06"},{"lineNumber":25,"author":{"gitId":"clarencepohh"},"content":"        super(name);","lastModifiedDate":"2024-02-06"},{"lineNumber":26,"author":{"gitId":"clarencepohh"},"content":"        this.byDate \u003d by;","lastModifiedDate":"2024-02-06"},{"lineNumber":27,"author":{"gitId":"clarencepohh"},"content":"    }","lastModifiedDate":"2024-02-06"},{"lineNumber":28,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":29,"author":{"gitId":"clarencepohh"},"content":"    /**","lastModifiedDate":"2024-03-01"},{"lineNumber":30,"author":{"gitId":"clarencepohh"},"content":"     * Returns the task type of the specified task.","lastModifiedDate":"2024-03-01"},{"lineNumber":31,"author":{"gitId":"clarencepohh"},"content":"     * Override function of superclass Task.","lastModifiedDate":"2024-03-01"},{"lineNumber":32,"author":{"gitId":"clarencepohh"},"content":"     *","lastModifiedDate":"2024-03-01"},{"lineNumber":33,"author":{"gitId":"clarencepohh"},"content":"     * @return D which represents a Deadline task.","lastModifiedDate":"2024-03-01"},{"lineNumber":34,"author":{"gitId":"clarencepohh"},"content":"     */","lastModifiedDate":"2024-03-01"},{"lineNumber":35,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-03-01"},{"lineNumber":36,"author":{"gitId":"clarencepohh"},"content":"    @Override","lastModifiedDate":"2024-02-06"},{"lineNumber":37,"author":{"gitId":"clarencepohh"},"content":"    public String getTaskType () {","lastModifiedDate":"2024-02-06"},{"lineNumber":38,"author":{"gitId":"clarencepohh"},"content":"        return \"D\";","lastModifiedDate":"2024-02-06"},{"lineNumber":39,"author":{"gitId":"clarencepohh"},"content":"    }","lastModifiedDate":"2024-02-06"},{"lineNumber":40,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":41,"author":{"gitId":"clarencepohh"},"content":"    /**","lastModifiedDate":"2024-03-01"},{"lineNumber":42,"author":{"gitId":"clarencepohh"},"content":"     * Returns the name of the task that invokes this function.","lastModifiedDate":"2024-03-01"},{"lineNumber":43,"author":{"gitId":"clarencepohh"},"content":"     * Override function of superclass Task.","lastModifiedDate":"2024-03-01"},{"lineNumber":44,"author":{"gitId":"clarencepohh"},"content":"     *","lastModifiedDate":"2024-03-01"},{"lineNumber":45,"author":{"gitId":"clarencepohh"},"content":"     * @return Returns the string of the task\u0027s name, including the by date.","lastModifiedDate":"2024-03-01"},{"lineNumber":46,"author":{"gitId":"clarencepohh"},"content":"     */","lastModifiedDate":"2024-03-01"},{"lineNumber":47,"author":{"gitId":"clarencepohh"},"content":"    @Override","lastModifiedDate":"2024-02-06"},{"lineNumber":48,"author":{"gitId":"clarencepohh"},"content":"    public String getName () {","lastModifiedDate":"2024-02-06"},{"lineNumber":49,"author":{"gitId":"clarencepohh"},"content":"        return name + \" (by: \" + byDate + \")\";","lastModifiedDate":"2024-02-06"},{"lineNumber":50,"author":{"gitId":"clarencepohh"},"content":"    }","lastModifiedDate":"2024-02-06"},{"lineNumber":51,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-02-20"},{"lineNumber":52,"author":{"gitId":"clarencepohh"},"content":"    /**","lastModifiedDate":"2024-03-01"},{"lineNumber":53,"author":{"gitId":"clarencepohh"},"content":"     * Returns the String save format used to save Hachi task data.","lastModifiedDate":"2024-03-01"},{"lineNumber":54,"author":{"gitId":"clarencepohh"},"content":"     * Override function of superclass Task.","lastModifiedDate":"2024-03-01"},{"lineNumber":55,"author":{"gitId":"clarencepohh"},"content":"     *","lastModifiedDate":"2024-03-01"},{"lineNumber":56,"author":{"gitId":"clarencepohh"},"content":"     * @return The required save format including the task type, status icon, name and by date.","lastModifiedDate":"2024-03-01"},{"lineNumber":57,"author":{"gitId":"clarencepohh"},"content":"     */","lastModifiedDate":"2024-03-01"},{"lineNumber":58,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-03-01"},{"lineNumber":59,"author":{"gitId":"clarencepohh"},"content":"    @Override","lastModifiedDate":"2024-02-20"},{"lineNumber":60,"author":{"gitId":"clarencepohh"},"content":"    public String getSaveFormat () {","lastModifiedDate":"2024-02-20"},{"lineNumber":61,"author":{"gitId":"clarencepohh"},"content":"        return getTaskType() + \" | \" + getStatusIcon() + \" | \" + this.name + \" | \" + byDate;","lastModifiedDate":"2024-02-20"},{"lineNumber":62,"author":{"gitId":"clarencepohh"},"content":"    }","lastModifiedDate":"2024-02-20"},{"lineNumber":63,"author":{"gitId":"clarencepohh"},"content":"}","lastModifiedDate":"2024-02-06"}],"authorContributionMap":{"clarencepohh":63}},{"path":"src/main/java/hachi/data/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"clarencepohh"},"content":"package hachi.data.task;","lastModifiedDate":"2024-02-15"},{"lineNumber":2,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-02-15"},{"lineNumber":3,"author":{"gitId":"clarencepohh"},"content":"/**","lastModifiedDate":"2024-03-01"},{"lineNumber":4,"author":{"gitId":"clarencepohh"},"content":" * Represents an Event Task with the elements task name, its completeness status","lastModifiedDate":"2024-03-01"},{"lineNumber":5,"author":{"gitId":"clarencepohh"},"content":" * and a class-level element that tracks the total number of tasks currently active.","lastModifiedDate":"2024-03-01"},{"lineNumber":6,"author":{"gitId":"clarencepohh"},"content":" * Overrides superclass Task which adds a start and end date which represents","lastModifiedDate":"2024-03-01"},{"lineNumber":7,"author":{"gitId":"clarencepohh"},"content":" * the starting date of the event and the ending date of the event respectively.","lastModifiedDate":"2024-03-01"},{"lineNumber":8,"author":{"gitId":"clarencepohh"},"content":" *","lastModifiedDate":"2024-03-01"},{"lineNumber":9,"author":{"gitId":"clarencepohh"},"content":" * @author clarencepohh","lastModifiedDate":"2024-03-01"},{"lineNumber":10,"author":{"gitId":"clarencepohh"},"content":" * @version 01/03/2024","lastModifiedDate":"2024-03-01"},{"lineNumber":11,"author":{"gitId":"clarencepohh"},"content":" */","lastModifiedDate":"2024-03-01"},{"lineNumber":12,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-03-01"},{"lineNumber":13,"author":{"gitId":"clarencepohh"},"content":"public class Event extends Task {","lastModifiedDate":"2024-02-06"},{"lineNumber":14,"author":{"gitId":"clarencepohh"},"content":"    protected String startDate;","lastModifiedDate":"2024-02-06"},{"lineNumber":15,"author":{"gitId":"clarencepohh"},"content":"    protected String endDate;","lastModifiedDate":"2024-02-06"},{"lineNumber":16,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-03-01"},{"lineNumber":17,"author":{"gitId":"clarencepohh"},"content":"    /**","lastModifiedDate":"2024-02-06"},{"lineNumber":18,"author":{"gitId":"clarencepohh"},"content":"     * Constructor for new tasks given its name.","lastModifiedDate":"2024-02-06"},{"lineNumber":19,"author":{"gitId":"clarencepohh"},"content":"     * Tasks are initialized as incomplete.","lastModifiedDate":"2024-02-06"},{"lineNumber":20,"author":{"gitId":"clarencepohh"},"content":"     * Increments the class-level element totalNumTasks by 1.","lastModifiedDate":"2024-02-06"},{"lineNumber":21,"author":{"gitId":"clarencepohh"},"content":"     * Events are also considered as tasks.","lastModifiedDate":"2024-02-06"},{"lineNumber":22,"author":{"gitId":"clarencepohh"},"content":"     *","lastModifiedDate":"2024-02-06"},{"lineNumber":23,"author":{"gitId":"clarencepohh"},"content":"     * @param name The name of the task to be created.","lastModifiedDate":"2024-02-06"},{"lineNumber":24,"author":{"gitId":"clarencepohh"},"content":"     * @param start The starting time/date of the task.","lastModifiedDate":"2024-02-06"},{"lineNumber":25,"author":{"gitId":"clarencepohh"},"content":"     * @param end The ending time/date of the task.","lastModifiedDate":"2024-02-06"},{"lineNumber":26,"author":{"gitId":"clarencepohh"},"content":"     */","lastModifiedDate":"2024-02-06"},{"lineNumber":27,"author":{"gitId":"clarencepohh"},"content":"    public Event(String name, String start, String end) {","lastModifiedDate":"2024-02-06"},{"lineNumber":28,"author":{"gitId":"clarencepohh"},"content":"        super(name);","lastModifiedDate":"2024-02-06"},{"lineNumber":29,"author":{"gitId":"clarencepohh"},"content":"        this.startDate \u003d start;","lastModifiedDate":"2024-02-06"},{"lineNumber":30,"author":{"gitId":"clarencepohh"},"content":"        this.endDate \u003d end;","lastModifiedDate":"2024-02-06"},{"lineNumber":31,"author":{"gitId":"clarencepohh"},"content":"    }","lastModifiedDate":"2024-02-06"},{"lineNumber":32,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":33,"author":{"gitId":"clarencepohh"},"content":"    /**","lastModifiedDate":"2024-03-01"},{"lineNumber":34,"author":{"gitId":"clarencepohh"},"content":"     * Returns the task type of the specified task.","lastModifiedDate":"2024-03-01"},{"lineNumber":35,"author":{"gitId":"clarencepohh"},"content":"     * Override function of superclass Task.","lastModifiedDate":"2024-03-01"},{"lineNumber":36,"author":{"gitId":"clarencepohh"},"content":"     *","lastModifiedDate":"2024-03-01"},{"lineNumber":37,"author":{"gitId":"clarencepohh"},"content":"     * @return E which represents an Event task.","lastModifiedDate":"2024-03-01"},{"lineNumber":38,"author":{"gitId":"clarencepohh"},"content":"     */","lastModifiedDate":"2024-03-01"},{"lineNumber":39,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-03-01"},{"lineNumber":40,"author":{"gitId":"clarencepohh"},"content":"    @Override","lastModifiedDate":"2024-02-06"},{"lineNumber":41,"author":{"gitId":"clarencepohh"},"content":"    public String getTaskType() {","lastModifiedDate":"2024-02-06"},{"lineNumber":42,"author":{"gitId":"clarencepohh"},"content":"        return \"E\";","lastModifiedDate":"2024-02-06"},{"lineNumber":43,"author":{"gitId":"clarencepohh"},"content":"    }","lastModifiedDate":"2024-02-06"},{"lineNumber":44,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":45,"author":{"gitId":"clarencepohh"},"content":"    /**","lastModifiedDate":"2024-03-01"},{"lineNumber":46,"author":{"gitId":"clarencepohh"},"content":"     * Returns the name of the task that invokes this function.","lastModifiedDate":"2024-03-01"},{"lineNumber":47,"author":{"gitId":"clarencepohh"},"content":"     * Override function of superclass Task.","lastModifiedDate":"2024-03-01"},{"lineNumber":48,"author":{"gitId":"clarencepohh"},"content":"     *","lastModifiedDate":"2024-03-01"},{"lineNumber":49,"author":{"gitId":"clarencepohh"},"content":"     * @return Returns the string of the task\u0027s name, including the start and end date.","lastModifiedDate":"2024-03-01"},{"lineNumber":50,"author":{"gitId":"clarencepohh"},"content":"     */","lastModifiedDate":"2024-03-01"},{"lineNumber":51,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-03-01"},{"lineNumber":52,"author":{"gitId":"clarencepohh"},"content":"    @Override","lastModifiedDate":"2024-02-06"},{"lineNumber":53,"author":{"gitId":"clarencepohh"},"content":"    public String getName () {","lastModifiedDate":"2024-02-06"},{"lineNumber":54,"author":{"gitId":"clarencepohh"},"content":"        return name + \"(from: \" + startDate + \" to: \" + endDate + \")\";","lastModifiedDate":"2024-02-06"},{"lineNumber":55,"author":{"gitId":"clarencepohh"},"content":"    }","lastModifiedDate":"2024-02-06"},{"lineNumber":56,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-02-20"},{"lineNumber":57,"author":{"gitId":"clarencepohh"},"content":"    /**","lastModifiedDate":"2024-03-01"},{"lineNumber":58,"author":{"gitId":"clarencepohh"},"content":"     * Returns the String save format used to save Hachi task data.","lastModifiedDate":"2024-03-01"},{"lineNumber":59,"author":{"gitId":"clarencepohh"},"content":"     * Override function of superclass Task.","lastModifiedDate":"2024-03-01"},{"lineNumber":60,"author":{"gitId":"clarencepohh"},"content":"     *","lastModifiedDate":"2024-03-01"},{"lineNumber":61,"author":{"gitId":"clarencepohh"},"content":"     * @return The required save format including the task type, status icon, name, start and end date.","lastModifiedDate":"2024-03-01"},{"lineNumber":62,"author":{"gitId":"clarencepohh"},"content":"     */","lastModifiedDate":"2024-03-01"},{"lineNumber":63,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-03-01"},{"lineNumber":64,"author":{"gitId":"clarencepohh"},"content":"    @Override","lastModifiedDate":"2024-02-20"},{"lineNumber":65,"author":{"gitId":"clarencepohh"},"content":"    public String getSaveFormat () {","lastModifiedDate":"2024-02-20"},{"lineNumber":66,"author":{"gitId":"clarencepohh"},"content":"        return getTaskType() + \" | \" + getStatusIcon() + \" | \" + this.name + \" | \" + startDate + \" | \" + endDate;","lastModifiedDate":"2024-02-20"},{"lineNumber":67,"author":{"gitId":"clarencepohh"},"content":"    }","lastModifiedDate":"2024-02-20"},{"lineNumber":68,"author":{"gitId":"clarencepohh"},"content":"}","lastModifiedDate":"2024-02-06"}],"authorContributionMap":{"clarencepohh":68}},{"path":"src/main/java/hachi/data/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"clarencepohh"},"content":"package hachi.data.task;","lastModifiedDate":"2024-02-15"},{"lineNumber":2,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-02-15"},{"lineNumber":3,"author":{"gitId":"clarencepohh"},"content":"/**","lastModifiedDate":"2024-01-30"},{"lineNumber":4,"author":{"gitId":"clarencepohh"},"content":" * Represents a Task with the elements task name, its completeness status","lastModifiedDate":"2024-01-30"},{"lineNumber":5,"author":{"gitId":"clarencepohh"},"content":" * and a class-level element that tracks the total number of tasks currently active.","lastModifiedDate":"2024-01-30"},{"lineNumber":6,"author":{"gitId":"clarencepohh"},"content":" *","lastModifiedDate":"2024-01-30"},{"lineNumber":7,"author":{"gitId":"clarencepohh"},"content":" * @author clarencepohh","lastModifiedDate":"2024-01-30"},{"lineNumber":8,"author":{"gitId":"clarencepohh"},"content":" * @version 01/03/2024","lastModifiedDate":"2024-03-01"},{"lineNumber":9,"author":{"gitId":"clarencepohh"},"content":" */","lastModifiedDate":"2024-01-30"},{"lineNumber":10,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-01-30"},{"lineNumber":11,"author":{"gitId":"clarencepohh"},"content":"public class Task {","lastModifiedDate":"2024-01-29"},{"lineNumber":12,"author":{"gitId":"clarencepohh"},"content":"    protected String name;","lastModifiedDate":"2024-01-29"},{"lineNumber":13,"author":{"gitId":"clarencepohh"},"content":"    protected boolean isCompleted;","lastModifiedDate":"2024-01-29"},{"lineNumber":14,"author":{"gitId":"clarencepohh"},"content":"    private static int totalNumTasks \u003d 0;","lastModifiedDate":"2024-01-29"},{"lineNumber":15,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-01-29"},{"lineNumber":16,"author":{"gitId":"clarencepohh"},"content":"    /**","lastModifiedDate":"2024-01-30"},{"lineNumber":17,"author":{"gitId":"clarencepohh"},"content":"     * Constructor for new tasks given its name.","lastModifiedDate":"2024-01-30"},{"lineNumber":18,"author":{"gitId":"clarencepohh"},"content":"     * Tasks are initialized as incomplete.","lastModifiedDate":"2024-01-30"},{"lineNumber":19,"author":{"gitId":"clarencepohh"},"content":"     * Increments the class-level element totalNumTasks by 1.","lastModifiedDate":"2024-01-30"},{"lineNumber":20,"author":{"gitId":"clarencepohh"},"content":"     *","lastModifiedDate":"2024-01-30"},{"lineNumber":21,"author":{"gitId":"clarencepohh"},"content":"     * @param name The name of the task to be created.","lastModifiedDate":"2024-01-30"},{"lineNumber":22,"author":{"gitId":"clarencepohh"},"content":"     */","lastModifiedDate":"2024-01-30"},{"lineNumber":23,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-01-30"},{"lineNumber":24,"author":{"gitId":"clarencepohh"},"content":"    public Task(String name) {","lastModifiedDate":"2024-01-29"},{"lineNumber":25,"author":{"gitId":"clarencepohh"},"content":"        this.name \u003d name;","lastModifiedDate":"2024-01-29"},{"lineNumber":26,"author":{"gitId":"clarencepohh"},"content":"        this.isCompleted \u003d false;","lastModifiedDate":"2024-01-29"},{"lineNumber":27,"author":{"gitId":"clarencepohh"},"content":"        totalNumTasks +\u003d 1;","lastModifiedDate":"2024-01-29"},{"lineNumber":28,"author":{"gitId":"clarencepohh"},"content":"    }","lastModifiedDate":"2024-01-29"},{"lineNumber":29,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-01-29"},{"lineNumber":30,"author":{"gitId":"clarencepohh"},"content":"    /**","lastModifiedDate":"2024-01-30"},{"lineNumber":31,"author":{"gitId":"clarencepohh"},"content":"     * Returns the name of the task that invokes this function.","lastModifiedDate":"2024-01-30"},{"lineNumber":32,"author":{"gitId":"clarencepohh"},"content":"     *","lastModifiedDate":"2024-01-30"},{"lineNumber":33,"author":{"gitId":"clarencepohh"},"content":"     * @return Returns the string of the task\u0027s name.","lastModifiedDate":"2024-01-30"},{"lineNumber":34,"author":{"gitId":"clarencepohh"},"content":"     */","lastModifiedDate":"2024-01-30"},{"lineNumber":35,"author":{"gitId":"clarencepohh"},"content":"    public String getName() {","lastModifiedDate":"2024-01-29"},{"lineNumber":36,"author":{"gitId":"clarencepohh"},"content":"        return name;","lastModifiedDate":"2024-01-29"},{"lineNumber":37,"author":{"gitId":"clarencepohh"},"content":"    }","lastModifiedDate":"2024-01-29"},{"lineNumber":38,"author":{"gitId":"clarencepohh"},"content":"    /**","lastModifiedDate":"2024-01-30"},{"lineNumber":39,"author":{"gitId":"clarencepohh"},"content":"     * Sets the task\u0027s name to the given name.","lastModifiedDate":"2024-01-30"},{"lineNumber":40,"author":{"gitId":"clarencepohh"},"content":"     *","lastModifiedDate":"2024-01-30"},{"lineNumber":41,"author":{"gitId":"clarencepohh"},"content":"     * @param name The name to set the task\u0027s name to.","lastModifiedDate":"2024-01-30"},{"lineNumber":42,"author":{"gitId":"clarencepohh"},"content":"     */","lastModifiedDate":"2024-01-30"},{"lineNumber":43,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-01-29"},{"lineNumber":44,"author":{"gitId":"clarencepohh"},"content":"    public void setName(String name) {","lastModifiedDate":"2024-01-29"},{"lineNumber":45,"author":{"gitId":"clarencepohh"},"content":"        this.name \u003d name;","lastModifiedDate":"2024-01-29"},{"lineNumber":46,"author":{"gitId":"clarencepohh"},"content":"    }","lastModifiedDate":"2024-01-29"},{"lineNumber":47,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-01-29"},{"lineNumber":48,"author":{"gitId":"clarencepohh"},"content":"    /**","lastModifiedDate":"2024-01-30"},{"lineNumber":49,"author":{"gitId":"clarencepohh"},"content":"     * Checks if a task is complete and returns true if complete, false if incomplete.","lastModifiedDate":"2024-01-30"},{"lineNumber":50,"author":{"gitId":"clarencepohh"},"content":"     *","lastModifiedDate":"2024-01-30"},{"lineNumber":51,"author":{"gitId":"clarencepohh"},"content":"     * @return The boolean value that represents whether a task is completed:","lastModifiedDate":"2024-01-30"},{"lineNumber":52,"author":{"gitId":"clarencepohh"},"content":"     */","lastModifiedDate":"2024-01-30"},{"lineNumber":53,"author":{"gitId":"clarencepohh"},"content":"    public boolean isCompleted() {","lastModifiedDate":"2024-01-29"},{"lineNumber":54,"author":{"gitId":"clarencepohh"},"content":"        return isCompleted;","lastModifiedDate":"2024-01-29"},{"lineNumber":55,"author":{"gitId":"clarencepohh"},"content":"    }","lastModifiedDate":"2024-01-29"},{"lineNumber":56,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-01-29"},{"lineNumber":57,"author":{"gitId":"clarencepohh"},"content":"    /**","lastModifiedDate":"2024-01-30"},{"lineNumber":58,"author":{"gitId":"clarencepohh"},"content":"     * Sets the completeness status of a task.","lastModifiedDate":"2024-01-30"},{"lineNumber":59,"author":{"gitId":"clarencepohh"},"content":"     *","lastModifiedDate":"2024-01-30"},{"lineNumber":60,"author":{"gitId":"clarencepohh"},"content":"     * @param completed Boolean value to set the task to.","lastModifiedDate":"2024-01-30"},{"lineNumber":61,"author":{"gitId":"clarencepohh"},"content":"     */","lastModifiedDate":"2024-01-30"},{"lineNumber":62,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-01-30"},{"lineNumber":63,"author":{"gitId":"clarencepohh"},"content":"    public void setCompleteness(boolean completed) {","lastModifiedDate":"2024-01-29"},{"lineNumber":64,"author":{"gitId":"clarencepohh"},"content":"        isCompleted \u003d completed;","lastModifiedDate":"2024-01-29"},{"lineNumber":65,"author":{"gitId":"clarencepohh"},"content":"    }","lastModifiedDate":"2024-01-29"},{"lineNumber":66,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-01-29"},{"lineNumber":67,"author":{"gitId":"clarencepohh"},"content":"    /**","lastModifiedDate":"2024-01-30"},{"lineNumber":68,"author":{"gitId":"clarencepohh"},"content":"     * Retrieves the class-level counter of total number of tasks active.","lastModifiedDate":"2024-01-30"},{"lineNumber":69,"author":{"gitId":"clarencepohh"},"content":"     *","lastModifiedDate":"2024-01-30"},{"lineNumber":70,"author":{"gitId":"clarencepohh"},"content":"     * @return The total number of tasks active.","lastModifiedDate":"2024-01-30"},{"lineNumber":71,"author":{"gitId":"clarencepohh"},"content":"     */","lastModifiedDate":"2024-01-30"},{"lineNumber":72,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-01-30"},{"lineNumber":73,"author":{"gitId":"clarencepohh"},"content":"    public static int getTotalNumTasks() {","lastModifiedDate":"2024-01-29"},{"lineNumber":74,"author":{"gitId":"clarencepohh"},"content":"        return totalNumTasks;","lastModifiedDate":"2024-01-29"},{"lineNumber":75,"author":{"gitId":"clarencepohh"},"content":"    }","lastModifiedDate":"2024-01-29"},{"lineNumber":76,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-01-30"},{"lineNumber":77,"author":{"gitId":"clarencepohh"},"content":"    /**","lastModifiedDate":"2024-03-01"},{"lineNumber":78,"author":{"gitId":"clarencepohh"},"content":"     * Decrements the class-level counter of total number of tasks active.","lastModifiedDate":"2024-03-01"},{"lineNumber":79,"author":{"gitId":"clarencepohh"},"content":"     *","lastModifiedDate":"2024-03-01"},{"lineNumber":80,"author":{"gitId":"clarencepohh"},"content":"     */","lastModifiedDate":"2024-03-01"},{"lineNumber":81,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-03-01"},{"lineNumber":82,"author":{"gitId":"clarencepohh"},"content":"    public static void decrementTotalNumTasks() {","lastModifiedDate":"2024-02-17"},{"lineNumber":83,"author":{"gitId":"clarencepohh"},"content":"        totalNumTasks -\u003d 1;","lastModifiedDate":"2024-02-17"},{"lineNumber":84,"author":{"gitId":"clarencepohh"},"content":"    }","lastModifiedDate":"2024-02-17"},{"lineNumber":85,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-02-17"},{"lineNumber":86,"author":{"gitId":"clarencepohh"},"content":"    /**","lastModifiedDate":"2024-01-30"},{"lineNumber":87,"author":{"gitId":"clarencepohh"},"content":"     * Checks the completeness status of a task and returns to the","lastModifiedDate":"2024-01-30"},{"lineNumber":88,"author":{"gitId":"clarencepohh"},"content":"     * caller the status icon of the task.","lastModifiedDate":"2024-01-30"},{"lineNumber":89,"author":{"gitId":"clarencepohh"},"content":"     * \"X\" for complete, \" \" for incomplete.","lastModifiedDate":"2024-01-30"},{"lineNumber":90,"author":{"gitId":"clarencepohh"},"content":"     *","lastModifiedDate":"2024-01-30"},{"lineNumber":91,"author":{"gitId":"clarencepohh"},"content":"     * @return String representation of completeness status icon.","lastModifiedDate":"2024-01-30"},{"lineNumber":92,"author":{"gitId":"clarencepohh"},"content":"     */","lastModifiedDate":"2024-01-30"},{"lineNumber":93,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-01-30"},{"lineNumber":94,"author":{"gitId":"clarencepohh"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2024-01-30"},{"lineNumber":95,"author":{"gitId":"clarencepohh"},"content":"        return (isCompleted ? \"X\" : \" \");","lastModifiedDate":"2024-01-30"},{"lineNumber":96,"author":{"gitId":"clarencepohh"},"content":"    }","lastModifiedDate":"2024-01-30"},{"lineNumber":97,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":98,"author":{"gitId":"clarencepohh"},"content":"    /**","lastModifiedDate":"2024-03-01"},{"lineNumber":99,"author":{"gitId":"clarencepohh"},"content":"     * Returns the task type of the specified task.","lastModifiedDate":"2024-03-01"},{"lineNumber":100,"author":{"gitId":"clarencepohh"},"content":"     *","lastModifiedDate":"2024-03-01"},{"lineNumber":101,"author":{"gitId":"clarencepohh"},"content":"     * @return ? which represents an unclassified task.","lastModifiedDate":"2024-03-01"},{"lineNumber":102,"author":{"gitId":"clarencepohh"},"content":"     */","lastModifiedDate":"2024-03-01"},{"lineNumber":103,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-03-01"},{"lineNumber":104,"author":{"gitId":"clarencepohh"},"content":"    public String getTaskType() {","lastModifiedDate":"2024-02-06"},{"lineNumber":105,"author":{"gitId":"clarencepohh"},"content":"        return \"?\";","lastModifiedDate":"2024-02-06"},{"lineNumber":106,"author":{"gitId":"clarencepohh"},"content":"    }","lastModifiedDate":"2024-02-06"},{"lineNumber":107,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-02-20"},{"lineNumber":108,"author":{"gitId":"clarencepohh"},"content":"    /**","lastModifiedDate":"2024-03-01"},{"lineNumber":109,"author":{"gitId":"clarencepohh"},"content":"     * Returns the String save format used to save Hachi task data.","lastModifiedDate":"2024-03-01"},{"lineNumber":110,"author":{"gitId":"clarencepohh"},"content":"     *","lastModifiedDate":"2024-03-01"},{"lineNumber":111,"author":{"gitId":"clarencepohh"},"content":"     * @return ? which represents an unclassified task.","lastModifiedDate":"2024-03-01"},{"lineNumber":112,"author":{"gitId":"clarencepohh"},"content":"     */","lastModifiedDate":"2024-03-01"},{"lineNumber":113,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-03-01"},{"lineNumber":114,"author":{"gitId":"clarencepohh"},"content":"    public String getSaveFormat () {","lastModifiedDate":"2024-02-20"},{"lineNumber":115,"author":{"gitId":"clarencepohh"},"content":"        return \"?\";","lastModifiedDate":"2024-02-20"},{"lineNumber":116,"author":{"gitId":"clarencepohh"},"content":"    }","lastModifiedDate":"2024-02-20"},{"lineNumber":117,"author":{"gitId":"clarencepohh"},"content":"}","lastModifiedDate":"2024-01-29"}],"authorContributionMap":{"clarencepohh":117}},{"path":"src/main/java/hachi/data/task/TaskType.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"clarencepohh"},"content":"package hachi.data.task;","lastModifiedDate":"2024-02-15"},{"lineNumber":2,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-02-15"},{"lineNumber":3,"author":{"gitId":"clarencepohh"},"content":"/**","lastModifiedDate":"2024-03-01"},{"lineNumber":4,"author":{"gitId":"clarencepohh"},"content":" * Represents the different types of Tasks that can exist for Hachi chatbot.","lastModifiedDate":"2024-03-01"},{"lineNumber":5,"author":{"gitId":"clarencepohh"},"content":" *","lastModifiedDate":"2024-03-01"},{"lineNumber":6,"author":{"gitId":"clarencepohh"},"content":" * @author clarencepohh","lastModifiedDate":"2024-03-01"},{"lineNumber":7,"author":{"gitId":"clarencepohh"},"content":" * @version 01/03/2024","lastModifiedDate":"2024-03-01"},{"lineNumber":8,"author":{"gitId":"clarencepohh"},"content":" */","lastModifiedDate":"2024-03-01"},{"lineNumber":9,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-03-01"},{"lineNumber":10,"author":{"gitId":"clarencepohh"},"content":"public enum TaskType {","lastModifiedDate":"2024-02-06"},{"lineNumber":11,"author":{"gitId":"clarencepohh"},"content":"    TODO,","lastModifiedDate":"2024-02-06"},{"lineNumber":12,"author":{"gitId":"clarencepohh"},"content":"    DEADLINE,","lastModifiedDate":"2024-02-06"},{"lineNumber":13,"author":{"gitId":"clarencepohh"},"content":"    EVENT","lastModifiedDate":"2024-02-13"},{"lineNumber":14,"author":{"gitId":"clarencepohh"},"content":"}","lastModifiedDate":"2024-02-06"}],"authorContributionMap":{"clarencepohh":14}},{"path":"src/main/java/hachi/data/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"clarencepohh"},"content":"package hachi.data.task;","lastModifiedDate":"2024-02-15"},{"lineNumber":2,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-02-15"},{"lineNumber":3,"author":{"gitId":"clarencepohh"},"content":"/**","lastModifiedDate":"2024-03-01"},{"lineNumber":4,"author":{"gitId":"clarencepohh"},"content":" * Represents a Todo Task with the elements task name, its completeness status","lastModifiedDate":"2024-03-01"},{"lineNumber":5,"author":{"gitId":"clarencepohh"},"content":" * and a class-level element that tracks the total number of tasks currently active.","lastModifiedDate":"2024-03-01"},{"lineNumber":6,"author":{"gitId":"clarencepohh"},"content":" * Overrides superclass Task.","lastModifiedDate":"2024-03-01"},{"lineNumber":7,"author":{"gitId":"clarencepohh"},"content":" *","lastModifiedDate":"2024-03-01"},{"lineNumber":8,"author":{"gitId":"clarencepohh"},"content":" * @author clarencepohh","lastModifiedDate":"2024-03-01"},{"lineNumber":9,"author":{"gitId":"clarencepohh"},"content":" * @version 01/03/2024","lastModifiedDate":"2024-03-01"},{"lineNumber":10,"author":{"gitId":"clarencepohh"},"content":" */","lastModifiedDate":"2024-03-01"},{"lineNumber":11,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-03-01"},{"lineNumber":12,"author":{"gitId":"clarencepohh"},"content":"public class Todo extends Task {","lastModifiedDate":"2024-02-06"},{"lineNumber":13,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-03-01"},{"lineNumber":14,"author":{"gitId":"clarencepohh"},"content":"    /**","lastModifiedDate":"2024-02-06"},{"lineNumber":15,"author":{"gitId":"clarencepohh"},"content":"     * Constructor for new tasks given its name.","lastModifiedDate":"2024-02-06"},{"lineNumber":16,"author":{"gitId":"clarencepohh"},"content":"     * Tasks are initialized as incomplete.","lastModifiedDate":"2024-02-06"},{"lineNumber":17,"author":{"gitId":"clarencepohh"},"content":"     * Increments the class-level element totalNumTasks by 1.","lastModifiedDate":"2024-02-06"},{"lineNumber":18,"author":{"gitId":"clarencepohh"},"content":"     * Todos are also considered as tasks.","lastModifiedDate":"2024-02-06"},{"lineNumber":19,"author":{"gitId":"clarencepohh"},"content":"     *","lastModifiedDate":"2024-02-06"},{"lineNumber":20,"author":{"gitId":"clarencepohh"},"content":"     * @param name The name of the task to be created.","lastModifiedDate":"2024-02-06"},{"lineNumber":21,"author":{"gitId":"clarencepohh"},"content":"     */","lastModifiedDate":"2024-02-06"},{"lineNumber":22,"author":{"gitId":"clarencepohh"},"content":"    public Todo(String name) {","lastModifiedDate":"2024-02-06"},{"lineNumber":23,"author":{"gitId":"clarencepohh"},"content":"        super(name);","lastModifiedDate":"2024-02-06"},{"lineNumber":24,"author":{"gitId":"clarencepohh"},"content":"    }","lastModifiedDate":"2024-02-06"},{"lineNumber":25,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":26,"author":{"gitId":"clarencepohh"},"content":"    /**","lastModifiedDate":"2024-03-01"},{"lineNumber":27,"author":{"gitId":"clarencepohh"},"content":"     * Returns the task type of the specified task.","lastModifiedDate":"2024-03-01"},{"lineNumber":28,"author":{"gitId":"clarencepohh"},"content":"     * Override function of superclass Task.","lastModifiedDate":"2024-03-01"},{"lineNumber":29,"author":{"gitId":"clarencepohh"},"content":"     *","lastModifiedDate":"2024-03-01"},{"lineNumber":30,"author":{"gitId":"clarencepohh"},"content":"     * @return T which represents a Todo task.","lastModifiedDate":"2024-03-01"},{"lineNumber":31,"author":{"gitId":"clarencepohh"},"content":"     */","lastModifiedDate":"2024-03-01"},{"lineNumber":32,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-03-01"},{"lineNumber":33,"author":{"gitId":"clarencepohh"},"content":"    @Override","lastModifiedDate":"2024-02-06"},{"lineNumber":34,"author":{"gitId":"clarencepohh"},"content":"    public String getTaskType () {","lastModifiedDate":"2024-02-06"},{"lineNumber":35,"author":{"gitId":"clarencepohh"},"content":"        return \"T\";","lastModifiedDate":"2024-02-06"},{"lineNumber":36,"author":{"gitId":"clarencepohh"},"content":"    }","lastModifiedDate":"2024-02-06"},{"lineNumber":37,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-02-20"},{"lineNumber":38,"author":{"gitId":"clarencepohh"},"content":"    /**","lastModifiedDate":"2024-03-01"},{"lineNumber":39,"author":{"gitId":"clarencepohh"},"content":"     * Returns the String save format used to save Hachi task data.","lastModifiedDate":"2024-03-01"},{"lineNumber":40,"author":{"gitId":"clarencepohh"},"content":"     * Override function of superclass Task.","lastModifiedDate":"2024-03-01"},{"lineNumber":41,"author":{"gitId":"clarencepohh"},"content":"     *","lastModifiedDate":"2024-03-01"},{"lineNumber":42,"author":{"gitId":"clarencepohh"},"content":"     * @return The required save format including the task type, status icon and name.","lastModifiedDate":"2024-03-01"},{"lineNumber":43,"author":{"gitId":"clarencepohh"},"content":"     */","lastModifiedDate":"2024-03-01"},{"lineNumber":44,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-03-01"},{"lineNumber":45,"author":{"gitId":"clarencepohh"},"content":"    @Override","lastModifiedDate":"2024-02-20"},{"lineNumber":46,"author":{"gitId":"clarencepohh"},"content":"    public String getSaveFormat () {","lastModifiedDate":"2024-02-20"},{"lineNumber":47,"author":{"gitId":"clarencepohh"},"content":"        return getTaskType() + \" | \" + getStatusIcon() + \" | \" + getName();","lastModifiedDate":"2024-02-20"},{"lineNumber":48,"author":{"gitId":"clarencepohh"},"content":"    }","lastModifiedDate":"2024-02-20"},{"lineNumber":49,"author":{"gitId":"clarencepohh"},"content":"}","lastModifiedDate":"2024-02-06"}],"authorContributionMap":{"clarencepohh":49}},{"path":"src/main/java/hachi/parser/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"clarencepohh"},"content":"package hachi.parser;","lastModifiedDate":"2024-02-15"},{"lineNumber":2,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-02-15"},{"lineNumber":3,"author":{"gitId":"clarencepohh"},"content":"import hachi.data.HachiException;","lastModifiedDate":"2024-02-26"},{"lineNumber":4,"author":{"gitId":"clarencepohh"},"content":"import hachi.data.TaskList;","lastModifiedDate":"2024-02-26"},{"lineNumber":5,"author":{"gitId":"clarencepohh"},"content":"import hachi.data.task.Task;","lastModifiedDate":"2024-03-01"},{"lineNumber":6,"author":{"gitId":"clarencepohh"},"content":"import hachi.data.task.TaskType;","lastModifiedDate":"2024-02-26"},{"lineNumber":7,"author":{"gitId":"clarencepohh"},"content":"import hachi.ui.Ui;","lastModifiedDate":"2024-02-15"},{"lineNumber":8,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-02-15"},{"lineNumber":9,"author":{"gitId":"clarencepohh"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-03-01"},{"lineNumber":10,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-03-01"},{"lineNumber":11,"author":{"gitId":"clarencepohh"},"content":"/**","lastModifiedDate":"2024-02-06"},{"lineNumber":12,"author":{"gitId":"clarencepohh"},"content":" * This file represents the Parser class for the chatbot Hachi.","lastModifiedDate":"2024-03-08"},{"lineNumber":13,"author":{"gitId":"clarencepohh"},"content":" * Parses user input in order to determine instructions for the chatbot.","lastModifiedDate":"2024-02-06"},{"lineNumber":14,"author":{"gitId":"clarencepohh"},"content":" *","lastModifiedDate":"2024-03-08"},{"lineNumber":15,"author":{"gitId":"clarencepohh"},"content":" * @author clarencepohh","lastModifiedDate":"2024-03-08"},{"lineNumber":16,"author":{"gitId":"clarencepohh"},"content":" * @version 08/03/2024","lastModifiedDate":"2024-03-08"},{"lineNumber":17,"author":{"gitId":"clarencepohh"},"content":" */","lastModifiedDate":"2024-02-06"},{"lineNumber":18,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":19,"author":{"gitId":"clarencepohh"},"content":"public class Parser {","lastModifiedDate":"2024-02-06"},{"lineNumber":20,"author":{"gitId":"clarencepohh"},"content":"    private final Ui ui;","lastModifiedDate":"2024-03-01"},{"lineNumber":21,"author":{"gitId":"clarencepohh"},"content":"    private final TaskList tasksList;","lastModifiedDate":"2024-03-01"},{"lineNumber":22,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":23,"author":{"gitId":"clarencepohh"},"content":"    /**","lastModifiedDate":"2024-03-08"},{"lineNumber":24,"author":{"gitId":"clarencepohh"},"content":"     * The constructor for the Parser class.","lastModifiedDate":"2024-03-08"},{"lineNumber":25,"author":{"gitId":"clarencepohh"},"content":"     * Initializes the required Ui and TaskList classes.","lastModifiedDate":"2024-03-08"},{"lineNumber":26,"author":{"gitId":"clarencepohh"},"content":"     *","lastModifiedDate":"2024-03-08"},{"lineNumber":27,"author":{"gitId":"clarencepohh"},"content":"     * @param ui The Ui class to be used for the Parser.","lastModifiedDate":"2024-03-08"},{"lineNumber":28,"author":{"gitId":"clarencepohh"},"content":"     * @param tasksList The TaskList class to be used for the Parser.","lastModifiedDate":"2024-03-08"},{"lineNumber":29,"author":{"gitId":"clarencepohh"},"content":"     */","lastModifiedDate":"2024-03-08"},{"lineNumber":30,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-03-08"},{"lineNumber":31,"author":{"gitId":"clarencepohh"},"content":"    public Parser (Ui ui, TaskList tasksList) {","lastModifiedDate":"2024-02-29"},{"lineNumber":32,"author":{"gitId":"clarencepohh"},"content":"        this.ui \u003d ui;","lastModifiedDate":"2024-02-06"},{"lineNumber":33,"author":{"gitId":"clarencepohh"},"content":"        this.tasksList \u003d tasksList;","lastModifiedDate":"2024-02-29"},{"lineNumber":34,"author":{"gitId":"clarencepohh"},"content":"    }","lastModifiedDate":"2024-02-06"},{"lineNumber":35,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-02-26"},{"lineNumber":36,"author":{"gitId":"clarencepohh"},"content":"    /**","lastModifiedDate":"2024-03-08"},{"lineNumber":37,"author":{"gitId":"clarencepohh"},"content":"     * Main Parser method that parses the user input and calls the required functions.","lastModifiedDate":"2024-03-08"},{"lineNumber":38,"author":{"gitId":"clarencepohh"},"content":"     *","lastModifiedDate":"2024-03-08"},{"lineNumber":39,"author":{"gitId":"clarencepohh"},"content":"     * @param firstWord The String that contains the first word in the users input.","lastModifiedDate":"2024-03-08"},{"lineNumber":40,"author":{"gitId":"clarencepohh"},"content":"     *                  Should contain the function keyword.","lastModifiedDate":"2024-03-08"},{"lineNumber":41,"author":{"gitId":"clarencepohh"},"content":"     * @param cleanedInput The String that contains the cleaned whole user input.","lastModifiedDate":"2024-03-08"},{"lineNumber":42,"author":{"gitId":"clarencepohh"},"content":"     * @param userInput The String the contains the whole user input.","lastModifiedDate":"2024-03-08"},{"lineNumber":43,"author":{"gitId":"clarencepohh"},"content":"     * @return The String that contains the parsed user command.","lastModifiedDate":"2024-03-08"},{"lineNumber":44,"author":{"gitId":"clarencepohh"},"content":"     * @throws HachiException If there is an error in any of the function calls.","lastModifiedDate":"2024-03-08"},{"lineNumber":45,"author":{"gitId":"clarencepohh"},"content":"     */","lastModifiedDate":"2024-03-08"},{"lineNumber":46,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-03-08"},{"lineNumber":47,"author":{"gitId":"clarencepohh"},"content":"    public String processUserCommand (String firstWord, String cleanedInput, String userInput)","lastModifiedDate":"2024-02-29"},{"lineNumber":48,"author":{"gitId":"clarencepohh"},"content":"            throws HachiException {","lastModifiedDate":"2024-02-26"},{"lineNumber":49,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-02-26"},{"lineNumber":50,"author":{"gitId":"clarencepohh"},"content":"        String userCommand \u003d \"notBye\";","lastModifiedDate":"2024-02-26"},{"lineNumber":51,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-02-26"},{"lineNumber":52,"author":{"gitId":"clarencepohh"},"content":"        switch (firstWord) {","lastModifiedDate":"2024-02-26"},{"lineNumber":53,"author":{"gitId":"clarencepohh"},"content":"        case \"MARK\":","lastModifiedDate":"2024-02-26"},{"lineNumber":54,"author":{"gitId":"clarencepohh"},"content":"        case \"UNMARK\":","lastModifiedDate":"2024-02-26"},{"lineNumber":55,"author":{"gitId":"clarencepohh"},"content":"            tasksList.markOrUnmarkHandler(cleanedInput);","lastModifiedDate":"2024-02-29"},{"lineNumber":56,"author":{"gitId":"clarencepohh"},"content":"            break;","lastModifiedDate":"2024-02-26"},{"lineNumber":57,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-02-26"},{"lineNumber":58,"author":{"gitId":"clarencepohh"},"content":"        case \"LIST\":","lastModifiedDate":"2024-02-26"},{"lineNumber":59,"author":{"gitId":"clarencepohh"},"content":"            tasksList.retrieveTaskList();","lastModifiedDate":"2024-02-29"},{"lineNumber":60,"author":{"gitId":"clarencepohh"},"content":"            break;","lastModifiedDate":"2024-02-26"},{"lineNumber":61,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-02-26"},{"lineNumber":62,"author":{"gitId":"clarencepohh"},"content":"        case \"DELETE\":","lastModifiedDate":"2024-02-26"},{"lineNumber":63,"author":{"gitId":"clarencepohh"},"content":"            tasksList.deleteTask(cleanedInput);","lastModifiedDate":"2024-02-29"},{"lineNumber":64,"author":{"gitId":"clarencepohh"},"content":"            break;","lastModifiedDate":"2024-02-26"},{"lineNumber":65,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-02-26"},{"lineNumber":66,"author":{"gitId":"clarencepohh"},"content":"        case \"TODO\":","lastModifiedDate":"2024-02-26"},{"lineNumber":67,"author":{"gitId":"clarencepohh"},"content":"        case \"EVENT\":","lastModifiedDate":"2024-02-26"},{"lineNumber":68,"author":{"gitId":"clarencepohh"},"content":"        case \"DEADLINE\":","lastModifiedDate":"2024-02-26"},{"lineNumber":69,"author":{"gitId":"clarencepohh"},"content":"            TaskType currentTask;","lastModifiedDate":"2024-02-26"},{"lineNumber":70,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-02-26"},{"lineNumber":71,"author":{"gitId":"clarencepohh"},"content":"            if (cleanedInput.startsWith(\"EVENT\")) {","lastModifiedDate":"2024-02-26"},{"lineNumber":72,"author":{"gitId":"clarencepohh"},"content":"                currentTask \u003d TaskType.EVENT;","lastModifiedDate":"2024-02-26"},{"lineNumber":73,"author":{"gitId":"clarencepohh"},"content":"            } else if (cleanedInput.startsWith(\"DEADLINE\")) {","lastModifiedDate":"2024-02-26"},{"lineNumber":74,"author":{"gitId":"clarencepohh"},"content":"                currentTask \u003d TaskType.DEADLINE;","lastModifiedDate":"2024-02-26"},{"lineNumber":75,"author":{"gitId":"clarencepohh"},"content":"            } else {","lastModifiedDate":"2024-02-26"},{"lineNumber":76,"author":{"gitId":"clarencepohh"},"content":"                currentTask \u003d TaskType.TODO;","lastModifiedDate":"2024-02-26"},{"lineNumber":77,"author":{"gitId":"clarencepohh"},"content":"            }","lastModifiedDate":"2024-02-26"},{"lineNumber":78,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-02-26"},{"lineNumber":79,"author":{"gitId":"clarencepohh"},"content":"            tasksList.addTask(currentTask, userInput, cleanedInput);","lastModifiedDate":"2024-02-29"},{"lineNumber":80,"author":{"gitId":"clarencepohh"},"content":"            break;","lastModifiedDate":"2024-02-26"},{"lineNumber":81,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-02-26"},{"lineNumber":82,"author":{"gitId":"clarencepohh"},"content":"        case \"FIND\":","lastModifiedDate":"2024-03-01"},{"lineNumber":83,"author":{"gitId":"clarencepohh"},"content":"            ArrayList\u003cTask\u003e foundTasksList \u003d tasksList.findTask(cleanedInput);","lastModifiedDate":"2024-03-01"},{"lineNumber":84,"author":{"gitId":"clarencepohh"},"content":"            ui.printFoundTasks(foundTasksList);","lastModifiedDate":"2024-03-01"},{"lineNumber":85,"author":{"gitId":"clarencepohh"},"content":"            break;","lastModifiedDate":"2024-02-26"},{"lineNumber":86,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-02-26"},{"lineNumber":87,"author":{"gitId":"clarencepohh"},"content":"        case \"HELP\":","lastModifiedDate":"2024-02-26"},{"lineNumber":88,"author":{"gitId":"clarencepohh"},"content":"            ui.printHelpMessage();","lastModifiedDate":"2024-02-29"},{"lineNumber":89,"author":{"gitId":"clarencepohh"},"content":"            break;","lastModifiedDate":"2024-02-26"},{"lineNumber":90,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-02-26"},{"lineNumber":91,"author":{"gitId":"clarencepohh"},"content":"        case \"BYE\":","lastModifiedDate":"2024-03-01"},{"lineNumber":92,"author":{"gitId":"clarencepohh"},"content":"        case \"GOODBYE\":","lastModifiedDate":"2024-03-01"},{"lineNumber":93,"author":{"gitId":"clarencepohh"},"content":"            ui.printGoodbyeMessage();","lastModifiedDate":"2024-03-01"},{"lineNumber":94,"author":{"gitId":"clarencepohh"},"content":"            userCommand \u003d \"BYE\";","lastModifiedDate":"2024-03-01"},{"lineNumber":95,"author":{"gitId":"clarencepohh"},"content":"            break;","lastModifiedDate":"2024-03-01"},{"lineNumber":96,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-03-01"},{"lineNumber":97,"author":{"gitId":"clarencepohh"},"content":"        default:","lastModifiedDate":"2024-02-26"},{"lineNumber":98,"author":{"gitId":"clarencepohh"},"content":"            HachiException.invalidInput();","lastModifiedDate":"2024-02-26"},{"lineNumber":99,"author":{"gitId":"clarencepohh"},"content":"            break;","lastModifiedDate":"2024-02-26"},{"lineNumber":100,"author":{"gitId":"clarencepohh"},"content":"        }","lastModifiedDate":"2024-02-26"},{"lineNumber":101,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-02-26"},{"lineNumber":102,"author":{"gitId":"clarencepohh"},"content":"        return userCommand;","lastModifiedDate":"2024-02-26"},{"lineNumber":103,"author":{"gitId":"clarencepohh"},"content":"    }","lastModifiedDate":"2024-02-26"},{"lineNumber":104,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-02-26"},{"lineNumber":105,"author":{"gitId":"clarencepohh"},"content":"    /**","lastModifiedDate":"2024-03-08"},{"lineNumber":106,"author":{"gitId":"clarencepohh"},"content":"     * Given a String that contains the user input and the index of the first \u0027space\u0027 character in the user input,","lastModifiedDate":"2024-03-08"},{"lineNumber":107,"author":{"gitId":"clarencepohh"},"content":"     * returns the first word in the user input.","lastModifiedDate":"2024-03-08"},{"lineNumber":108,"author":{"gitId":"clarencepohh"},"content":"     *","lastModifiedDate":"2024-03-08"},{"lineNumber":109,"author":{"gitId":"clarencepohh"},"content":"     * @param indexOfSpace The int contains the index of the first \u0027space\u0027 character.","lastModifiedDate":"2024-03-08"},{"lineNumber":110,"author":{"gitId":"clarencepohh"},"content":"     * @param cleanedInput The String containing the cleaned whole user input.","lastModifiedDate":"2024-03-08"},{"lineNumber":111,"author":{"gitId":"clarencepohh"},"content":"     * @return The String containing the first word in the user input.","lastModifiedDate":"2024-03-08"},{"lineNumber":112,"author":{"gitId":"clarencepohh"},"content":"     */","lastModifiedDate":"2024-03-08"},{"lineNumber":113,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-03-08"},{"lineNumber":114,"author":{"gitId":"clarencepohh"},"content":"    public String getFirstWordOfInput(int indexOfSpace, String cleanedInput) {","lastModifiedDate":"2024-02-29"},{"lineNumber":115,"author":{"gitId":"clarencepohh"},"content":"        String firstWord;","lastModifiedDate":"2024-02-26"},{"lineNumber":116,"author":{"gitId":"clarencepohh"},"content":"        if (indexOfSpace \u003d\u003d -1) { // check for single-word inputs","lastModifiedDate":"2024-02-26"},{"lineNumber":117,"author":{"gitId":"clarencepohh"},"content":"            firstWord \u003d cleanedInput;","lastModifiedDate":"2024-02-26"},{"lineNumber":118,"author":{"gitId":"clarencepohh"},"content":"        } else {","lastModifiedDate":"2024-02-26"},{"lineNumber":119,"author":{"gitId":"clarencepohh"},"content":"            firstWord \u003d cleanedInput.substring(0, indexOfSpace);","lastModifiedDate":"2024-02-26"},{"lineNumber":120,"author":{"gitId":"clarencepohh"},"content":"        }","lastModifiedDate":"2024-02-26"},{"lineNumber":121,"author":{"gitId":"clarencepohh"},"content":"        return firstWord;","lastModifiedDate":"2024-02-26"},{"lineNumber":122,"author":{"gitId":"clarencepohh"},"content":"    }","lastModifiedDate":"2024-02-26"},{"lineNumber":123,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-02-26"},{"lineNumber":124,"author":{"gitId":"clarencepohh"},"content":"    /**","lastModifiedDate":"2024-03-08"},{"lineNumber":125,"author":{"gitId":"clarencepohh"},"content":"     * Function is called from a delete request.","lastModifiedDate":"2024-03-08"},{"lineNumber":126,"author":{"gitId":"clarencepohh"},"content":"     * Given a String that contains the cleaned user input,","lastModifiedDate":"2024-03-08"},{"lineNumber":127,"author":{"gitId":"clarencepohh"},"content":"     * finds the int in the user input that specifies the index of the Task to be deleted.","lastModifiedDate":"2024-03-08"},{"lineNumber":128,"author":{"gitId":"clarencepohh"},"content":"     *","lastModifiedDate":"2024-03-08"},{"lineNumber":129,"author":{"gitId":"clarencepohh"},"content":"     * @param cleanedInput The String containing the cleaned whole user input.","lastModifiedDate":"2024-03-08"},{"lineNumber":130,"author":{"gitId":"clarencepohh"},"content":"     * @return The int that contains the index of the Task to be deleted.","lastModifiedDate":"2024-03-08"},{"lineNumber":131,"author":{"gitId":"clarencepohh"},"content":"     * @throws HachiException If the input is invalid.","lastModifiedDate":"2024-03-08"},{"lineNumber":132,"author":{"gitId":"clarencepohh"},"content":"     */","lastModifiedDate":"2024-03-08"},{"lineNumber":133,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-03-08"},{"lineNumber":134,"author":{"gitId":"clarencepohh"},"content":"    public static int getDeleteTaskNumber(String cleanedInput) throws HachiException {","lastModifiedDate":"2024-02-26"},{"lineNumber":135,"author":{"gitId":"clarencepohh"},"content":"        int indexOfTaskNum \u003d cleanedInput.indexOf(\"DELETE\") + 6; // find index of task number","lastModifiedDate":"2024-02-26"},{"lineNumber":136,"author":{"gitId":"clarencepohh"},"content":"        int taskNumber \u003d 0;","lastModifiedDate":"2024-02-26"},{"lineNumber":137,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-02-26"},{"lineNumber":138,"author":{"gitId":"clarencepohh"},"content":"        try {","lastModifiedDate":"2024-02-26"},{"lineNumber":139,"author":{"gitId":"clarencepohh"},"content":"            taskNumber \u003d Integer.parseInt(cleanedInput.substring(indexOfTaskNum).trim()); // parse string to int","lastModifiedDate":"2024-02-26"},{"lineNumber":140,"author":{"gitId":"clarencepohh"},"content":"        } catch (NumberFormatException e){","lastModifiedDate":"2024-02-26"},{"lineNumber":141,"author":{"gitId":"clarencepohh"},"content":"            HachiException.checkOutOfBounds(indexOfTaskNum);","lastModifiedDate":"2024-02-26"},{"lineNumber":142,"author":{"gitId":"clarencepohh"},"content":"        }","lastModifiedDate":"2024-02-26"},{"lineNumber":143,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-02-26"},{"lineNumber":144,"author":{"gitId":"clarencepohh"},"content":"        return taskNumber;","lastModifiedDate":"2024-02-26"},{"lineNumber":145,"author":{"gitId":"clarencepohh"},"content":"    }","lastModifiedDate":"2024-02-26"},{"lineNumber":146,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-02-26"},{"lineNumber":147,"author":{"gitId":"clarencepohh"},"content":"    /**","lastModifiedDate":"2024-03-08"},{"lineNumber":148,"author":{"gitId":"clarencepohh"},"content":"     * Function is called from a mark/unmark request.","lastModifiedDate":"2024-03-08"},{"lineNumber":149,"author":{"gitId":"clarencepohh"},"content":"     * Given a String that contains the cleaned user input,","lastModifiedDate":"2024-03-08"},{"lineNumber":150,"author":{"gitId":"clarencepohh"},"content":"     * finds the int in the user input that specifies the index of the Task to be marked/unmarked.","lastModifiedDate":"2024-03-08"},{"lineNumber":151,"author":{"gitId":"clarencepohh"},"content":"     *","lastModifiedDate":"2024-03-08"},{"lineNumber":152,"author":{"gitId":"clarencepohh"},"content":"     * @param cleanedInput The String containing the cleaned whole user input.","lastModifiedDate":"2024-03-08"},{"lineNumber":153,"author":{"gitId":"clarencepohh"},"content":"     * @return The int that contains the index of the Task to be marked/unmarked.","lastModifiedDate":"2024-03-08"},{"lineNumber":154,"author":{"gitId":"clarencepohh"},"content":"     * @throws HachiException If the input is invalid.","lastModifiedDate":"2024-03-08"},{"lineNumber":155,"author":{"gitId":"clarencepohh"},"content":"     */","lastModifiedDate":"2024-03-08"},{"lineNumber":156,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-03-08"},{"lineNumber":157,"author":{"gitId":"clarencepohh"},"content":"    public static int getMarkTaskNumber(String cleanedInput) throws HachiException {","lastModifiedDate":"2024-02-26"},{"lineNumber":158,"author":{"gitId":"clarencepohh"},"content":"        int indexOfTaskNum \u003d cleanedInput.indexOf(\"MARK\") + 4; // find index of task number","lastModifiedDate":"2024-02-26"},{"lineNumber":159,"author":{"gitId":"clarencepohh"},"content":"        int taskNumber \u003d 0;","lastModifiedDate":"2024-02-26"},{"lineNumber":160,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-02-26"},{"lineNumber":161,"author":{"gitId":"clarencepohh"},"content":"        try {","lastModifiedDate":"2024-02-26"},{"lineNumber":162,"author":{"gitId":"clarencepohh"},"content":"            taskNumber \u003d Integer.parseInt(cleanedInput.substring(indexOfTaskNum).trim()); // parse string to int","lastModifiedDate":"2024-02-26"},{"lineNumber":163,"author":{"gitId":"clarencepohh"},"content":"        } catch (NumberFormatException e){","lastModifiedDate":"2024-02-26"},{"lineNumber":164,"author":{"gitId":"clarencepohh"},"content":"            HachiException.checkOutOfBounds(indexOfTaskNum);","lastModifiedDate":"2024-02-26"},{"lineNumber":165,"author":{"gitId":"clarencepohh"},"content":"        }","lastModifiedDate":"2024-02-26"},{"lineNumber":166,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-02-26"},{"lineNumber":167,"author":{"gitId":"clarencepohh"},"content":"        return taskNumber;","lastModifiedDate":"2024-02-26"},{"lineNumber":168,"author":{"gitId":"clarencepohh"},"content":"    }","lastModifiedDate":"2024-02-26"},{"lineNumber":169,"author":{"gitId":"clarencepohh"},"content":"}","lastModifiedDate":"2024-02-06"}],"authorContributionMap":{"clarencepohh":169}},{"path":"src/main/java/hachi/storage/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"clarencepohh"},"content":"package hachi.storage;","lastModifiedDate":"2024-02-24"},{"lineNumber":2,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-02-24"},{"lineNumber":3,"author":{"gitId":"clarencepohh"},"content":"import hachi.data.HachiException;","lastModifiedDate":"2024-02-24"},{"lineNumber":4,"author":{"gitId":"clarencepohh"},"content":"import hachi.data.TaskList;","lastModifiedDate":"2024-02-26"},{"lineNumber":5,"author":{"gitId":"clarencepohh"},"content":"import hachi.data.task.Deadline;","lastModifiedDate":"2024-02-24"},{"lineNumber":6,"author":{"gitId":"clarencepohh"},"content":"import hachi.data.task.Event;","lastModifiedDate":"2024-02-24"},{"lineNumber":7,"author":{"gitId":"clarencepohh"},"content":"import hachi.data.task.Task;","lastModifiedDate":"2024-02-24"},{"lineNumber":8,"author":{"gitId":"clarencepohh"},"content":"import hachi.data.task.Todo;","lastModifiedDate":"2024-02-24"},{"lineNumber":9,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-02-24"},{"lineNumber":10,"author":{"gitId":"clarencepohh"},"content":"import java.io.File;","lastModifiedDate":"2024-02-24"},{"lineNumber":11,"author":{"gitId":"clarencepohh"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2024-02-24"},{"lineNumber":12,"author":{"gitId":"clarencepohh"},"content":"import java.io.FileWriter;","lastModifiedDate":"2024-02-24"},{"lineNumber":13,"author":{"gitId":"clarencepohh"},"content":"import java.io.IOException;","lastModifiedDate":"2024-02-24"},{"lineNumber":14,"author":{"gitId":"clarencepohh"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-02-24"},{"lineNumber":15,"author":{"gitId":"clarencepohh"},"content":"import java.util.Scanner;","lastModifiedDate":"2024-02-24"},{"lineNumber":16,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-02-24"},{"lineNumber":17,"author":{"gitId":"clarencepohh"},"content":"/**","lastModifiedDate":"2024-03-08"},{"lineNumber":18,"author":{"gitId":"clarencepohh"},"content":" * This file represents the Storage class for the chatbot Hachi.","lastModifiedDate":"2024-03-08"},{"lineNumber":19,"author":{"gitId":"clarencepohh"},"content":" * Contains methods for handling storage of save files for Hachi.","lastModifiedDate":"2024-03-08"},{"lineNumber":20,"author":{"gitId":"clarencepohh"},"content":" *","lastModifiedDate":"2024-03-08"},{"lineNumber":21,"author":{"gitId":"clarencepohh"},"content":" * @author clarencepohh","lastModifiedDate":"2024-03-08"},{"lineNumber":22,"author":{"gitId":"clarencepohh"},"content":" * @version 08/03/2024","lastModifiedDate":"2024-03-08"},{"lineNumber":23,"author":{"gitId":"clarencepohh"},"content":" */","lastModifiedDate":"2024-03-08"},{"lineNumber":24,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-02-24"},{"lineNumber":25,"author":{"gitId":"clarencepohh"},"content":"public class Storage {","lastModifiedDate":"2024-02-24"},{"lineNumber":26,"author":{"gitId":"clarencepohh"},"content":"    private final String filePath;","lastModifiedDate":"2024-03-01"},{"lineNumber":27,"author":{"gitId":"clarencepohh"},"content":"    private final TaskList tasksList;","lastModifiedDate":"2024-03-01"},{"lineNumber":28,"author":{"gitId":"clarencepohh"},"content":"    protected File folder \u003d new File(\"hachidata\");","lastModifiedDate":"2024-02-29"},{"lineNumber":29,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-02-24"},{"lineNumber":30,"author":{"gitId":"clarencepohh"},"content":"    /**","lastModifiedDate":"2024-03-08"},{"lineNumber":31,"author":{"gitId":"clarencepohh"},"content":"     * The constructor for Storage.","lastModifiedDate":"2024-03-08"},{"lineNumber":32,"author":{"gitId":"clarencepohh"},"content":"     * Initializes the required String filePath and TaskList.","lastModifiedDate":"2024-03-08"},{"lineNumber":33,"author":{"gitId":"clarencepohh"},"content":"     *","lastModifiedDate":"2024-03-08"},{"lineNumber":34,"author":{"gitId":"clarencepohh"},"content":"     * @param filePath The String that contains the relative path to the save file for Hachi.","lastModifiedDate":"2024-03-08"},{"lineNumber":35,"author":{"gitId":"clarencepohh"},"content":"     */","lastModifiedDate":"2024-03-08"},{"lineNumber":36,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-03-08"},{"lineNumber":37,"author":{"gitId":"clarencepohh"},"content":"    public Storage (String filePath) {","lastModifiedDate":"2024-02-29"},{"lineNumber":38,"author":{"gitId":"clarencepohh"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2024-02-29"},{"lineNumber":39,"author":{"gitId":"clarencepohh"},"content":"        this.tasksList \u003d new TaskList();","lastModifiedDate":"2024-02-29"},{"lineNumber":40,"author":{"gitId":"clarencepohh"},"content":"    }","lastModifiedDate":"2024-02-24"},{"lineNumber":41,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-02-24"},{"lineNumber":42,"author":{"gitId":"clarencepohh"},"content":"    /**","lastModifiedDate":"2024-03-08"},{"lineNumber":43,"author":{"gitId":"clarencepohh"},"content":"     * Getter for TaskList of Storage class.","lastModifiedDate":"2024-03-08"},{"lineNumber":44,"author":{"gitId":"clarencepohh"},"content":"     *","lastModifiedDate":"2024-03-08"},{"lineNumber":45,"author":{"gitId":"clarencepohh"},"content":"     * @return The TaskList currently stored.","lastModifiedDate":"2024-03-08"},{"lineNumber":46,"author":{"gitId":"clarencepohh"},"content":"     */","lastModifiedDate":"2024-03-08"},{"lineNumber":47,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-03-08"},{"lineNumber":48,"author":{"gitId":"clarencepohh"},"content":"    public TaskList getTasksList() {","lastModifiedDate":"2024-03-08"},{"lineNumber":49,"author":{"gitId":"clarencepohh"},"content":"        return tasksList;","lastModifiedDate":"2024-03-08"},{"lineNumber":50,"author":{"gitId":"clarencepohh"},"content":"    }","lastModifiedDate":"2024-03-08"},{"lineNumber":51,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-03-08"},{"lineNumber":52,"author":{"gitId":"clarencepohh"},"content":"    /**","lastModifiedDate":"2024-03-08"},{"lineNumber":53,"author":{"gitId":"clarencepohh"},"content":"     * Checks if the folder for the save file for Hachi exists,","lastModifiedDate":"2024-03-08"},{"lineNumber":54,"author":{"gitId":"clarencepohh"},"content":"     * and if it does not exist, creates the folder required.","lastModifiedDate":"2024-03-08"},{"lineNumber":55,"author":{"gitId":"clarencepohh"},"content":"     *","lastModifiedDate":"2024-03-08"},{"lineNumber":56,"author":{"gitId":"clarencepohh"},"content":"     * @throws SecurityException If there is a Security Violation.","lastModifiedDate":"2024-03-08"},{"lineNumber":57,"author":{"gitId":"clarencepohh"},"content":"     */","lastModifiedDate":"2024-03-08"},{"lineNumber":58,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-03-08"},{"lineNumber":59,"author":{"gitId":"clarencepohh"},"content":"    public void initializeData() throws SecurityException{","lastModifiedDate":"2024-02-29"},{"lineNumber":60,"author":{"gitId":"clarencepohh"},"content":"        if (!folder.exists()) {","lastModifiedDate":"2024-02-24"},{"lineNumber":61,"author":{"gitId":"clarencepohh"},"content":"            folder.mkdir();","lastModifiedDate":"2024-02-24"},{"lineNumber":62,"author":{"gitId":"clarencepohh"},"content":"        }","lastModifiedDate":"2024-02-24"},{"lineNumber":63,"author":{"gitId":"clarencepohh"},"content":"    }","lastModifiedDate":"2024-02-24"},{"lineNumber":64,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-02-24"},{"lineNumber":65,"author":{"gitId":"clarencepohh"},"content":"    /**","lastModifiedDate":"2024-03-08"},{"lineNumber":66,"author":{"gitId":"clarencepohh"},"content":"     * Method that handles saving files for Hachi chatbot.","lastModifiedDate":"2024-03-08"},{"lineNumber":67,"author":{"gitId":"clarencepohh"},"content":"     * Writes the save file when there are changes made to the TaskList.","lastModifiedDate":"2024-03-08"},{"lineNumber":68,"author":{"gitId":"clarencepohh"},"content":"     *","lastModifiedDate":"2024-03-08"},{"lineNumber":69,"author":{"gitId":"clarencepohh"},"content":"     * @throws IOException If there are failed or interrupted I/O operations.","lastModifiedDate":"2024-03-08"},{"lineNumber":70,"author":{"gitId":"clarencepohh"},"content":"     */","lastModifiedDate":"2024-03-08"},{"lineNumber":71,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-03-08"},{"lineNumber":72,"author":{"gitId":"clarencepohh"},"content":"    public void saveHandler() throws IOException {","lastModifiedDate":"2024-02-29"},{"lineNumber":73,"author":{"gitId":"clarencepohh"},"content":"        initializeData();","lastModifiedDate":"2024-02-24"},{"lineNumber":74,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-02-24"},{"lineNumber":75,"author":{"gitId":"clarencepohh"},"content":"        try {","lastModifiedDate":"2024-02-24"},{"lineNumber":76,"author":{"gitId":"clarencepohh"},"content":"            // to clear text file","lastModifiedDate":"2024-03-08"},{"lineNumber":77,"author":{"gitId":"clarencepohh"},"content":"            FileWriter fw \u003d new FileWriter(filePath, false);","lastModifiedDate":"2024-02-24"},{"lineNumber":78,"author":{"gitId":"clarencepohh"},"content":"            fw.write(\"\");","lastModifiedDate":"2024-02-24"},{"lineNumber":79,"author":{"gitId":"clarencepohh"},"content":"            fw.close();","lastModifiedDate":"2024-03-08"},{"lineNumber":80,"author":{"gitId":"clarencepohh"},"content":"        } catch (IOException e) {","lastModifiedDate":"2024-02-24"},{"lineNumber":81,"author":{"gitId":"clarencepohh"},"content":"            System.out.println(\"\\n\\tCreating new task list save...\");","lastModifiedDate":"2024-02-24"},{"lineNumber":82,"author":{"gitId":"clarencepohh"},"content":"        }","lastModifiedDate":"2024-02-24"},{"lineNumber":83,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-02-24"},{"lineNumber":84,"author":{"gitId":"clarencepohh"},"content":"        FileWriter fw \u003d new FileWriter(filePath, true);","lastModifiedDate":"2024-03-08"},{"lineNumber":85,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-02-29"},{"lineNumber":86,"author":{"gitId":"clarencepohh"},"content":"        for (int i \u003d 0; i \u003c tasksList.getSize(); i++) {","lastModifiedDate":"2024-02-29"},{"lineNumber":87,"author":{"gitId":"clarencepohh"},"content":"            fw.write((tasksList.getSpecifiedTask(i).getSaveFormat()) + \"\\n\");","lastModifiedDate":"2024-02-29"},{"lineNumber":88,"author":{"gitId":"clarencepohh"},"content":"        }","lastModifiedDate":"2024-02-24"},{"lineNumber":89,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-03-08"},{"lineNumber":90,"author":{"gitId":"clarencepohh"},"content":"        fw.close();","lastModifiedDate":"2024-02-24"},{"lineNumber":91,"author":{"gitId":"clarencepohh"},"content":"    }","lastModifiedDate":"2024-02-24"},{"lineNumber":92,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-02-24"},{"lineNumber":93,"author":{"gitId":"clarencepohh"},"content":"    /**","lastModifiedDate":"2024-03-08"},{"lineNumber":94,"author":{"gitId":"clarencepohh"},"content":"     * Method that finds the save file for Hachi.","lastModifiedDate":"2024-03-08"},{"lineNumber":95,"author":{"gitId":"clarencepohh"},"content":"     * Attempts to find the save file, reads it and overwrites the TaskList with the","lastModifiedDate":"2024-03-08"},{"lineNumber":96,"author":{"gitId":"clarencepohh"},"content":"     * Tasks in the save file.","lastModifiedDate":"2024-03-08"},{"lineNumber":97,"author":{"gitId":"clarencepohh"},"content":"     *","lastModifiedDate":"2024-03-08"},{"lineNumber":98,"author":{"gitId":"clarencepohh"},"content":"     * @throws FileNotFoundException If the specified save file cannot be found.","lastModifiedDate":"2024-03-08"},{"lineNumber":99,"author":{"gitId":"clarencepohh"},"content":"     * @throws HachiException If the save file is corrupted.","lastModifiedDate":"2024-03-08"},{"lineNumber":100,"author":{"gitId":"clarencepohh"},"content":"     */","lastModifiedDate":"2024-03-08"},{"lineNumber":101,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-03-08"},{"lineNumber":102,"author":{"gitId":"clarencepohh"},"content":"    public void readFile() throws FileNotFoundException, HachiException {","lastModifiedDate":"2024-02-29"},{"lineNumber":103,"author":{"gitId":"clarencepohh"},"content":"        File taskFile \u003d new File(filePath);","lastModifiedDate":"2024-02-24"},{"lineNumber":104,"author":{"gitId":"clarencepohh"},"content":"        Scanner s \u003d new Scanner(taskFile);","lastModifiedDate":"2024-02-24"},{"lineNumber":105,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-02-24"},{"lineNumber":106,"author":{"gitId":"clarencepohh"},"content":"        while (s.hasNext()) {","lastModifiedDate":"2024-02-24"},{"lineNumber":107,"author":{"gitId":"clarencepohh"},"content":"            String[] line \u003d s.nextLine().split(\" \\\\| \");","lastModifiedDate":"2024-02-24"},{"lineNumber":108,"author":{"gitId":"clarencepohh"},"content":"            Task toAdd;","lastModifiedDate":"2024-02-24"},{"lineNumber":109,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-02-24"},{"lineNumber":110,"author":{"gitId":"clarencepohh"},"content":"            switch (line[0]){","lastModifiedDate":"2024-02-24"},{"lineNumber":111,"author":{"gitId":"clarencepohh"},"content":"            case \"T\":","lastModifiedDate":"2024-02-24"},{"lineNumber":112,"author":{"gitId":"clarencepohh"},"content":"                toAdd \u003d new Todo(line[2]);","lastModifiedDate":"2024-02-24"},{"lineNumber":113,"author":{"gitId":"clarencepohh"},"content":"                break;","lastModifiedDate":"2024-02-24"},{"lineNumber":114,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-02-24"},{"lineNumber":115,"author":{"gitId":"clarencepohh"},"content":"            case \"D\":","lastModifiedDate":"2024-02-24"},{"lineNumber":116,"author":{"gitId":"clarencepohh"},"content":"                toAdd \u003d new Deadline(line[2], line[3]);","lastModifiedDate":"2024-02-24"},{"lineNumber":117,"author":{"gitId":"clarencepohh"},"content":"                break;","lastModifiedDate":"2024-02-24"},{"lineNumber":118,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-02-24"},{"lineNumber":119,"author":{"gitId":"clarencepohh"},"content":"            case \"E\":","lastModifiedDate":"2024-02-24"},{"lineNumber":120,"author":{"gitId":"clarencepohh"},"content":"                toAdd \u003d new Event(line[2], line[3], line[4]);","lastModifiedDate":"2024-02-24"},{"lineNumber":121,"author":{"gitId":"clarencepohh"},"content":"                break;","lastModifiedDate":"2024-02-24"},{"lineNumber":122,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-02-24"},{"lineNumber":123,"author":{"gitId":"clarencepohh"},"content":"            default:","lastModifiedDate":"2024-02-24"},{"lineNumber":124,"author":{"gitId":"clarencepohh"},"content":"                throw new HachiException(HachiException.CORRUPTED_SAVE_MESSAGE);","lastModifiedDate":"2024-02-24"},{"lineNumber":125,"author":{"gitId":"clarencepohh"},"content":"            }","lastModifiedDate":"2024-02-24"},{"lineNumber":126,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-02-24"},{"lineNumber":127,"author":{"gitId":"clarencepohh"},"content":"            if (line[1].equals(\"X\")) {","lastModifiedDate":"2024-02-24"},{"lineNumber":128,"author":{"gitId":"clarencepohh"},"content":"                toAdd.setCompleteness(true);","lastModifiedDate":"2024-02-24"},{"lineNumber":129,"author":{"gitId":"clarencepohh"},"content":"            }","lastModifiedDate":"2024-02-24"},{"lineNumber":130,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-02-24"},{"lineNumber":131,"author":{"gitId":"clarencepohh"},"content":"            tasksList.add(toAdd);","lastModifiedDate":"2024-02-29"},{"lineNumber":132,"author":{"gitId":"clarencepohh"},"content":"        }","lastModifiedDate":"2024-02-24"},{"lineNumber":133,"author":{"gitId":"clarencepohh"},"content":"    }","lastModifiedDate":"2024-02-24"},{"lineNumber":134,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-02-24"},{"lineNumber":135,"author":{"gitId":"clarencepohh"},"content":"    /**","lastModifiedDate":"2024-03-08"},{"lineNumber":136,"author":{"gitId":"clarencepohh"},"content":"     * Method that loads the save file and returns the TaskList after it is overwritten.","lastModifiedDate":"2024-03-08"},{"lineNumber":137,"author":{"gitId":"clarencepohh"},"content":"     *","lastModifiedDate":"2024-03-08"},{"lineNumber":138,"author":{"gitId":"clarencepohh"},"content":"     * @return The TaskList generated after reading the save file.","lastModifiedDate":"2024-03-08"},{"lineNumber":139,"author":{"gitId":"clarencepohh"},"content":"     * @throws HachiException If the save file is corrupted.","lastModifiedDate":"2024-03-08"},{"lineNumber":140,"author":{"gitId":"clarencepohh"},"content":"     * @throws FileNotFoundException If the specified save file cannot be found.","lastModifiedDate":"2024-03-08"},{"lineNumber":141,"author":{"gitId":"clarencepohh"},"content":"     */","lastModifiedDate":"2024-03-08"},{"lineNumber":142,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-03-08"},{"lineNumber":143,"author":{"gitId":"clarencepohh"},"content":"    public ArrayList\u003cTask\u003e load() throws HachiException, FileNotFoundException {","lastModifiedDate":"2024-02-29"},{"lineNumber":144,"author":{"gitId":"clarencepohh"},"content":"        readFile();","lastModifiedDate":"2024-02-24"},{"lineNumber":145,"author":{"gitId":"clarencepohh"},"content":"        return tasksList.getTasksArrayList();","lastModifiedDate":"2024-02-29"},{"lineNumber":146,"author":{"gitId":"clarencepohh"},"content":"    }","lastModifiedDate":"2024-02-24"},{"lineNumber":147,"author":{"gitId":"clarencepohh"},"content":"}","lastModifiedDate":"2024-02-24"}],"authorContributionMap":{"clarencepohh":147}},{"path":"src/main/java/hachi/ui/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"clarencepohh"},"content":"package hachi.ui;","lastModifiedDate":"2024-02-15"},{"lineNumber":2,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-02-15"},{"lineNumber":3,"author":{"gitId":"clarencepohh"},"content":"import hachi.data.HachiException;","lastModifiedDate":"2024-03-01"},{"lineNumber":4,"author":{"gitId":"clarencepohh"},"content":"import hachi.data.task.Task;","lastModifiedDate":"2024-02-25"},{"lineNumber":5,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-02-25"},{"lineNumber":6,"author":{"gitId":"clarencepohh"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-02-25"},{"lineNumber":7,"author":{"gitId":"clarencepohh"},"content":"import java.util.Scanner;","lastModifiedDate":"2024-02-06"},{"lineNumber":8,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":9,"author":{"gitId":"clarencepohh"},"content":"/**","lastModifiedDate":"2024-02-06"},{"lineNumber":10,"author":{"gitId":"clarencepohh"},"content":" * Represents the UI interface that the user interacts with for the chatbot Hachi.","lastModifiedDate":"2024-03-08"},{"lineNumber":11,"author":{"gitId":"clarencepohh"},"content":" *","lastModifiedDate":"2024-02-25"},{"lineNumber":12,"author":{"gitId":"clarencepohh"},"content":" * @author clarencepohh","lastModifiedDate":"2024-03-08"},{"lineNumber":13,"author":{"gitId":"clarencepohh"},"content":" * @version 08/03/2024","lastModifiedDate":"2024-03-08"},{"lineNumber":14,"author":{"gitId":"clarencepohh"},"content":" */","lastModifiedDate":"2024-02-06"},{"lineNumber":15,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":16,"author":{"gitId":"clarencepohh"},"content":"public class Ui {","lastModifiedDate":"2024-02-06"},{"lineNumber":17,"author":{"gitId":"clarencepohh"},"content":"    private static Scanner in;","lastModifiedDate":"2024-02-25"},{"lineNumber":18,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-03-08"},{"lineNumber":19,"author":{"gitId":"clarencepohh"},"content":"    /**","lastModifiedDate":"2024-03-08"},{"lineNumber":20,"author":{"gitId":"clarencepohh"},"content":"     * The standard constructor for the Ui class.","lastModifiedDate":"2024-03-08"},{"lineNumber":21,"author":{"gitId":"clarencepohh"},"content":"     * Initializes the required Scanner for the Ui class.","lastModifiedDate":"2024-03-08"},{"lineNumber":22,"author":{"gitId":"clarencepohh"},"content":"     *","lastModifiedDate":"2024-03-08"},{"lineNumber":23,"author":{"gitId":"clarencepohh"},"content":"     */","lastModifiedDate":"2024-03-08"},{"lineNumber":24,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-03-08"},{"lineNumber":25,"author":{"gitId":"clarencepohh"},"content":"    public Ui () {","lastModifiedDate":"2024-02-06"},{"lineNumber":26,"author":{"gitId":"clarencepohh"},"content":"        in \u003d new Scanner(System.in);","lastModifiedDate":"2024-02-25"},{"lineNumber":27,"author":{"gitId":"clarencepohh"},"content":"    }","lastModifiedDate":"2024-02-06"},{"lineNumber":28,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-02-25"},{"lineNumber":29,"author":{"gitId":"clarencepohh"},"content":"    /**","lastModifiedDate":"2024-02-25"},{"lineNumber":30,"author":{"gitId":"clarencepohh"},"content":"     * Prints a greeting to the user in the console","lastModifiedDate":"2024-02-25"},{"lineNumber":31,"author":{"gitId":"clarencepohh"},"content":"     * with the bot\u0027s name, Hachi.","lastModifiedDate":"2024-02-25"},{"lineNumber":32,"author":{"gitId":"clarencepohh"},"content":"     */","lastModifiedDate":"2024-02-25"},{"lineNumber":33,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-02-25"},{"lineNumber":34,"author":{"gitId":"clarencepohh"},"content":"    public void printGreetingMessage() {","lastModifiedDate":"2024-02-29"},{"lineNumber":35,"author":{"gitId":"clarencepohh"},"content":"        String logo \u003d \"._. ._.  ._____.  ._____.  ._. ._.  ._.\\n\"","lastModifiedDate":"2024-02-25"},{"lineNumber":36,"author":{"gitId":"clarencepohh"},"content":"                + \"| | | |  | ._. |  |  ___|  | | | |  | |\\n\"","lastModifiedDate":"2024-02-25"},{"lineNumber":37,"author":{"gitId":"clarencepohh"},"content":"                + \"| |_| |  | |_| |  | |      | |_| |  | |\\n\"","lastModifiedDate":"2024-02-25"},{"lineNumber":38,"author":{"gitId":"clarencepohh"},"content":"                + \"| ._. |  | ._. |  | |___   |  _  |  | |\\n\"","lastModifiedDate":"2024-02-25"},{"lineNumber":39,"author":{"gitId":"clarencepohh"},"content":"                + \"|_| |_|  |_| |_|  |_____|  |_| |_|  |_|\\n\";","lastModifiedDate":"2024-02-25"},{"lineNumber":40,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-02-25"},{"lineNumber":41,"author":{"gitId":"clarencepohh"},"content":"        System.out.println(\"Hey, Hachi Here!\\n\" + logo + \"How can I assist you today?\\n\");","lastModifiedDate":"2024-02-25"},{"lineNumber":42,"author":{"gitId":"clarencepohh"},"content":"        spacerInsert();","lastModifiedDate":"2024-02-29"},{"lineNumber":43,"author":{"gitId":"clarencepohh"},"content":"    }","lastModifiedDate":"2024-02-25"},{"lineNumber":44,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-02-25"},{"lineNumber":45,"author":{"gitId":"clarencepohh"},"content":"    /**","lastModifiedDate":"2024-02-25"},{"lineNumber":46,"author":{"gitId":"clarencepohh"},"content":"     * Prints to the console a help message that details the commands","lastModifiedDate":"2024-02-25"},{"lineNumber":47,"author":{"gitId":"clarencepohh"},"content":"     * the user can use for interacting with the chatbot.","lastModifiedDate":"2024-02-25"},{"lineNumber":48,"author":{"gitId":"clarencepohh"},"content":"     *","lastModifiedDate":"2024-02-25"},{"lineNumber":49,"author":{"gitId":"clarencepohh"},"content":"     */","lastModifiedDate":"2024-02-25"},{"lineNumber":50,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-02-25"},{"lineNumber":51,"author":{"gitId":"clarencepohh"},"content":"    public void printHelpMessage() {","lastModifiedDate":"2024-02-29"},{"lineNumber":52,"author":{"gitId":"clarencepohh"},"content":"        spacerInsert();","lastModifiedDate":"2024-02-29"},{"lineNumber":53,"author":{"gitId":"clarencepohh"},"content":"        System.out.println(\"You can use the following commands:\");","lastModifiedDate":"2024-02-25"},{"lineNumber":54,"author":{"gitId":"clarencepohh"},"content":"        System.out.println(\"\\t\u0027list\u0027 to retrieve your current list of tasks,\");","lastModifiedDate":"2024-02-25"},{"lineNumber":55,"author":{"gitId":"clarencepohh"},"content":"        System.out.println(\"\\t\u0027find \u003csubstring\u003e to find tasks in your list that have the specified substring,\");","lastModifiedDate":"2024-03-08"},{"lineNumber":56,"author":{"gitId":"clarencepohh"},"content":"        System.out.println(\"\\t\u0027mark \u003c#\u003e\u0027 to mark task number # as complete,\");","lastModifiedDate":"2024-02-25"},{"lineNumber":57,"author":{"gitId":"clarencepohh"},"content":"        System.out.println(\"\\t\u0027unmark \u003c#\u003e\u0027 to mark task number # as incomplete,\");","lastModifiedDate":"2024-02-25"},{"lineNumber":58,"author":{"gitId":"clarencepohh"},"content":"        System.out.println(\"\\t\u0027todo \u003ctask name\u003e\u0027 to create a to-do,\");","lastModifiedDate":"2024-02-25"},{"lineNumber":59,"author":{"gitId":"clarencepohh"},"content":"        System.out.println(\"\\t\u0027deadline \u003ctask name\u003e /by \u003cby date\u003e\u0027 to create a task with a deadline,\");","lastModifiedDate":"2024-02-25"},{"lineNumber":60,"author":{"gitId":"clarencepohh"},"content":"        System.out.println(\"\\t\u0027event \u003ctask name\u003e /from \u003cstart\u003e /to \u003cend\u003e\u0027 to create an event \" +","lastModifiedDate":"2024-02-25"},{"lineNumber":61,"author":{"gitId":"clarencepohh"},"content":"                \"with a start and end date,\");","lastModifiedDate":"2024-02-25"},{"lineNumber":62,"author":{"gitId":"clarencepohh"},"content":"        System.out.println(\"\\t\u0027delete \u003ctask number\u003e to delete a previously created entry,\");","lastModifiedDate":"2024-02-29"},{"lineNumber":63,"author":{"gitId":"clarencepohh"},"content":"        System.out.println(\"\\t\u0027bye\u0027 to stop chatting :(\u0027\");","lastModifiedDate":"2024-02-25"},{"lineNumber":64,"author":{"gitId":"clarencepohh"},"content":"        System.out.println(\"\\tAnd if you need to see this again, type \u0027help\u0027!\");","lastModifiedDate":"2024-02-25"},{"lineNumber":65,"author":{"gitId":"clarencepohh"},"content":"        spacerInsert();","lastModifiedDate":"2024-02-29"},{"lineNumber":66,"author":{"gitId":"clarencepohh"},"content":"    }","lastModifiedDate":"2024-02-25"},{"lineNumber":67,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-02-25"},{"lineNumber":68,"author":{"gitId":"clarencepohh"},"content":"    /**","lastModifiedDate":"2024-02-25"},{"lineNumber":69,"author":{"gitId":"clarencepohh"},"content":"     * Prints to the console a spacer line made of tildes.","lastModifiedDate":"2024-02-25"},{"lineNumber":70,"author":{"gitId":"clarencepohh"},"content":"     *","lastModifiedDate":"2024-03-08"},{"lineNumber":71,"author":{"gitId":"clarencepohh"},"content":"     */","lastModifiedDate":"2024-02-25"},{"lineNumber":72,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-02-25"},{"lineNumber":73,"author":{"gitId":"clarencepohh"},"content":"    public void spacerInsert() {","lastModifiedDate":"2024-02-29"},{"lineNumber":74,"author":{"gitId":"clarencepohh"},"content":"        System.out.print(\"\\t\");","lastModifiedDate":"2024-02-25"},{"lineNumber":75,"author":{"gitId":"clarencepohh"},"content":"        System.out.println(\"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\");","lastModifiedDate":"2024-02-29"},{"lineNumber":76,"author":{"gitId":"clarencepohh"},"content":"    }","lastModifiedDate":"2024-02-25"},{"lineNumber":77,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-02-25"},{"lineNumber":78,"author":{"gitId":"clarencepohh"},"content":"    /**","lastModifiedDate":"2024-03-08"},{"lineNumber":79,"author":{"gitId":"clarencepohh"},"content":"     * Prints to the console the message after a Task is deleted from the TaskList.","lastModifiedDate":"2024-03-08"},{"lineNumber":80,"author":{"gitId":"clarencepohh"},"content":"     *","lastModifiedDate":"2024-03-08"},{"lineNumber":81,"author":{"gitId":"clarencepohh"},"content":"     * @param taskType The TaskType of the Task to be deleted.","lastModifiedDate":"2024-03-08"},{"lineNumber":82,"author":{"gitId":"clarencepohh"},"content":"     * @param statusIcon The String that contains the statusIcon: T (for Todo), D (for Deadline), E (for Event)","lastModifiedDate":"2024-03-08"},{"lineNumber":83,"author":{"gitId":"clarencepohh"},"content":"     * @param taskToDelete The Task to be deleted from the TaskList.","lastModifiedDate":"2024-03-08"},{"lineNumber":84,"author":{"gitId":"clarencepohh"},"content":"     */","lastModifiedDate":"2024-03-08"},{"lineNumber":85,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-03-08"},{"lineNumber":86,"author":{"gitId":"clarencepohh"},"content":"    public void printTaskDeleteMessage(String taskType, String statusIcon, Task taskToDelete) {","lastModifiedDate":"2024-02-29"},{"lineNumber":87,"author":{"gitId":"clarencepohh"},"content":"        System.out.println(\"\\tSure, I\u0027ve done as you requested.\");","lastModifiedDate":"2024-02-25"},{"lineNumber":88,"author":{"gitId":"clarencepohh"},"content":"        System.out.print(\"\\t[\" + taskType + \"] \");","lastModifiedDate":"2024-02-25"},{"lineNumber":89,"author":{"gitId":"clarencepohh"},"content":"        System.out.print(\"[\" + statusIcon + \"] \" + taskToDelete.getName());","lastModifiedDate":"2024-02-25"},{"lineNumber":90,"author":{"gitId":"clarencepohh"},"content":"        System.out.println(\" has been deleted from your list.\");","lastModifiedDate":"2024-02-25"},{"lineNumber":91,"author":{"gitId":"clarencepohh"},"content":"    }","lastModifiedDate":"2024-02-25"},{"lineNumber":92,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-02-25"},{"lineNumber":93,"author":{"gitId":"clarencepohh"},"content":"    /**","lastModifiedDate":"2024-02-25"},{"lineNumber":94,"author":{"gitId":"clarencepohh"},"content":"     * Prints to the console a goodbye message for the user.","lastModifiedDate":"2024-02-25"},{"lineNumber":95,"author":{"gitId":"clarencepohh"},"content":"     */","lastModifiedDate":"2024-02-25"},{"lineNumber":96,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-02-25"},{"lineNumber":97,"author":{"gitId":"clarencepohh"},"content":"    public void printGoodbyeMessage() {","lastModifiedDate":"2024-02-29"},{"lineNumber":98,"author":{"gitId":"clarencepohh"},"content":"        System.out.println(\"\\tGoodbye! Hope you have a marvelous day.\");","lastModifiedDate":"2024-02-25"},{"lineNumber":99,"author":{"gitId":"clarencepohh"},"content":"    }","lastModifiedDate":"2024-02-25"},{"lineNumber":100,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-02-25"},{"lineNumber":101,"author":{"gitId":"clarencepohh"},"content":"    /**","lastModifiedDate":"2024-03-08"},{"lineNumber":102,"author":{"gitId":"clarencepohh"},"content":"     * Gets the user input from the console.","lastModifiedDate":"2024-03-08"},{"lineNumber":103,"author":{"gitId":"clarencepohh"},"content":"     *","lastModifiedDate":"2024-03-08"},{"lineNumber":104,"author":{"gitId":"clarencepohh"},"content":"     * @return The String that contains the latest user input.","lastModifiedDate":"2024-03-08"},{"lineNumber":105,"author":{"gitId":"clarencepohh"},"content":"     */","lastModifiedDate":"2024-03-08"},{"lineNumber":106,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-03-08"},{"lineNumber":107,"author":{"gitId":"clarencepohh"},"content":"    public String getUserInput() {","lastModifiedDate":"2024-02-29"},{"lineNumber":108,"author":{"gitId":"clarencepohh"},"content":"        return in.nextLine();","lastModifiedDate":"2024-02-25"},{"lineNumber":109,"author":{"gitId":"clarencepohh"},"content":"    }","lastModifiedDate":"2024-02-25"},{"lineNumber":110,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-02-25"},{"lineNumber":111,"author":{"gitId":"clarencepohh"},"content":"    /**","lastModifiedDate":"2024-03-08"},{"lineNumber":112,"author":{"gitId":"clarencepohh"},"content":"     * Converts the user input to uppercase and removes any trailing whitespace.","lastModifiedDate":"2024-03-08"},{"lineNumber":113,"author":{"gitId":"clarencepohh"},"content":"     *","lastModifiedDate":"2024-03-08"},{"lineNumber":114,"author":{"gitId":"clarencepohh"},"content":"     * @param input The String that contains the whole user input.","lastModifiedDate":"2024-03-08"},{"lineNumber":115,"author":{"gitId":"clarencepohh"},"content":"     * @return The cleaned whole user input.","lastModifiedDate":"2024-03-08"},{"lineNumber":116,"author":{"gitId":"clarencepohh"},"content":"     */","lastModifiedDate":"2024-03-08"},{"lineNumber":117,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-03-08"},{"lineNumber":118,"author":{"gitId":"clarencepohh"},"content":"    public String cleanUserInput(String input) {","lastModifiedDate":"2024-02-29"},{"lineNumber":119,"author":{"gitId":"clarencepohh"},"content":"        return input.toUpperCase().trim();","lastModifiedDate":"2024-02-25"},{"lineNumber":120,"author":{"gitId":"clarencepohh"},"content":"    }","lastModifiedDate":"2024-02-25"},{"lineNumber":121,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-02-25"},{"lineNumber":122,"author":{"gitId":"clarencepohh"},"content":"    /**","lastModifiedDate":"2024-03-08"},{"lineNumber":123,"author":{"gitId":"clarencepohh"},"content":"     * Prints to the console the message after a Task is marked/unmarked","lastModifiedDate":"2024-03-08"},{"lineNumber":124,"author":{"gitId":"clarencepohh"},"content":"     * in the TaskList.","lastModifiedDate":"2024-03-08"},{"lineNumber":125,"author":{"gitId":"clarencepohh"},"content":"     *","lastModifiedDate":"2024-03-08"},{"lineNumber":126,"author":{"gitId":"clarencepohh"},"content":"     * @param tasksArrayList The ArrayList\u003cTask\u003e to be searched for marking/unmarking.","lastModifiedDate":"2024-03-08"},{"lineNumber":127,"author":{"gitId":"clarencepohh"},"content":"     * @param index The int containing the Task index to be marked/unmarked.","lastModifiedDate":"2024-03-08"},{"lineNumber":128,"author":{"gitId":"clarencepohh"},"content":"     */","lastModifiedDate":"2024-03-08"},{"lineNumber":129,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-03-08"},{"lineNumber":130,"author":{"gitId":"clarencepohh"},"content":"    public void printAfterMarkOrUnmark (ArrayList\u003cTask\u003e tasksArrayList, int index) {","lastModifiedDate":"2024-02-29"},{"lineNumber":131,"author":{"gitId":"clarencepohh"},"content":"        Task currentTask \u003d tasksArrayList.get(index);","lastModifiedDate":"2024-02-25"},{"lineNumber":132,"author":{"gitId":"clarencepohh"},"content":"        String taskType \u003d currentTask.getTaskType();","lastModifiedDate":"2024-02-25"},{"lineNumber":133,"author":{"gitId":"clarencepohh"},"content":"        String statusIcon \u003d currentTask.getStatusIcon();","lastModifiedDate":"2024-02-25"},{"lineNumber":134,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-02-25"},{"lineNumber":135,"author":{"gitId":"clarencepohh"},"content":"        System.out.println(\"\\tSure, I\u0027ve done as you requested:\");","lastModifiedDate":"2024-02-25"},{"lineNumber":136,"author":{"gitId":"clarencepohh"},"content":"        System.out.print(\"\\t\" + (index + 1) + \": \");","lastModifiedDate":"2024-02-25"},{"lineNumber":137,"author":{"gitId":"clarencepohh"},"content":"        System.out.print(\"[\" + taskType + \"] \");","lastModifiedDate":"2024-02-25"},{"lineNumber":138,"author":{"gitId":"clarencepohh"},"content":"        System.out.print(\"[\" + statusIcon + \"] \");","lastModifiedDate":"2024-02-25"},{"lineNumber":139,"author":{"gitId":"clarencepohh"},"content":"        System.out.println(currentTask.getName());","lastModifiedDate":"2024-02-25"},{"lineNumber":140,"author":{"gitId":"clarencepohh"},"content":"    }","lastModifiedDate":"2024-02-25"},{"lineNumber":141,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-02-25"},{"lineNumber":142,"author":{"gitId":"clarencepohh"},"content":"    /**","lastModifiedDate":"2024-03-08"},{"lineNumber":143,"author":{"gitId":"clarencepohh"},"content":"     * Prints to the console after a Task has been added to the TaskList.","lastModifiedDate":"2024-03-08"},{"lineNumber":144,"author":{"gitId":"clarencepohh"},"content":"     *","lastModifiedDate":"2024-03-08"},{"lineNumber":145,"author":{"gitId":"clarencepohh"},"content":"     * @param toAdd The Task to be added to the TaskList.","lastModifiedDate":"2024-03-08"},{"lineNumber":146,"author":{"gitId":"clarencepohh"},"content":"     */","lastModifiedDate":"2024-03-08"},{"lineNumber":147,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-03-08"},{"lineNumber":148,"author":{"gitId":"clarencepohh"},"content":"    public void printAddTaskMessage(Task toAdd) {","lastModifiedDate":"2024-02-29"},{"lineNumber":149,"author":{"gitId":"clarencepohh"},"content":"        System.out.println(\"\\tAdded to list: \" + toAdd.getName());","lastModifiedDate":"2024-02-25"},{"lineNumber":150,"author":{"gitId":"clarencepohh"},"content":"    }","lastModifiedDate":"2024-02-25"},{"lineNumber":151,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-02-25"},{"lineNumber":152,"author":{"gitId":"clarencepohh"},"content":"    /**","lastModifiedDate":"2024-03-08"},{"lineNumber":153,"author":{"gitId":"clarencepohh"},"content":"     * Prints to the console all the Tasks in the TaskList.","lastModifiedDate":"2024-03-08"},{"lineNumber":154,"author":{"gitId":"clarencepohh"},"content":"     *","lastModifiedDate":"2024-03-08"},{"lineNumber":155,"author":{"gitId":"clarencepohh"},"content":"     * @param tasksArrayList The ArrayList\u003cTask\u003e to be printed.","lastModifiedDate":"2024-03-08"},{"lineNumber":156,"author":{"gitId":"clarencepohh"},"content":"     */","lastModifiedDate":"2024-03-08"},{"lineNumber":157,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-03-08"},{"lineNumber":158,"author":{"gitId":"clarencepohh"},"content":"    public void printTaskList(ArrayList\u003cTask\u003e tasksArrayList) {","lastModifiedDate":"2024-02-29"},{"lineNumber":159,"author":{"gitId":"clarencepohh"},"content":"        System.out.println(\"\\tThe following are in your list:\");","lastModifiedDate":"2024-02-25"},{"lineNumber":160,"author":{"gitId":"clarencepohh"},"content":"        printFromTasksList(tasksArrayList);","lastModifiedDate":"2024-03-01"},{"lineNumber":161,"author":{"gitId":"clarencepohh"},"content":"    }","lastModifiedDate":"2024-03-01"},{"lineNumber":162,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-03-01"},{"lineNumber":163,"author":{"gitId":"clarencepohh"},"content":"    /**","lastModifiedDate":"2024-03-08"},{"lineNumber":164,"author":{"gitId":"clarencepohh"},"content":"     * Prints to the console an error message if there was an error loading the save file.","lastModifiedDate":"2024-03-08"},{"lineNumber":165,"author":{"gitId":"clarencepohh"},"content":"     *","lastModifiedDate":"2024-03-08"},{"lineNumber":166,"author":{"gitId":"clarencepohh"},"content":"     */","lastModifiedDate":"2024-03-08"},{"lineNumber":167,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-03-08"},{"lineNumber":168,"author":{"gitId":"clarencepohh"},"content":"    public void printFileLoadingError () {","lastModifiedDate":"2024-03-01"},{"lineNumber":169,"author":{"gitId":"clarencepohh"},"content":"        System.out.println(\"There was an error finding save files. Creating a new save...\");","lastModifiedDate":"2024-03-01"},{"lineNumber":170,"author":{"gitId":"clarencepohh"},"content":"    }","lastModifiedDate":"2024-03-01"},{"lineNumber":171,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-03-01"},{"lineNumber":172,"author":{"gitId":"clarencepohh"},"content":"    /**","lastModifiedDate":"2024-03-08"},{"lineNumber":173,"author":{"gitId":"clarencepohh"},"content":"     * Function is called from a find request.","lastModifiedDate":"2024-03-08"},{"lineNumber":174,"author":{"gitId":"clarencepohh"},"content":"     * Given the ArrayList\u003cTask\u003e containing the Tasks found after a find request,","lastModifiedDate":"2024-03-08"},{"lineNumber":175,"author":{"gitId":"clarencepohh"},"content":"     * prints to the console all the Tasks found.","lastModifiedDate":"2024-03-08"},{"lineNumber":176,"author":{"gitId":"clarencepohh"},"content":"     *","lastModifiedDate":"2024-03-08"},{"lineNumber":177,"author":{"gitId":"clarencepohh"},"content":"     * @param foundTasksList The ArrayList\u003cTask\u003e containing the found tasks.","lastModifiedDate":"2024-03-08"},{"lineNumber":178,"author":{"gitId":"clarencepohh"},"content":"     * @throws HachiException If foundTasksList is empty.","lastModifiedDate":"2024-03-08"},{"lineNumber":179,"author":{"gitId":"clarencepohh"},"content":"     */","lastModifiedDate":"2024-03-08"},{"lineNumber":180,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-03-08"},{"lineNumber":181,"author":{"gitId":"clarencepohh"},"content":"    public void printFoundTasks (ArrayList\u003cTask\u003e foundTasksList) throws HachiException {","lastModifiedDate":"2024-03-01"},{"lineNumber":182,"author":{"gitId":"clarencepohh"},"content":"        HachiException.checkForEmptyFoundTaskList(foundTasksList);","lastModifiedDate":"2024-03-01"},{"lineNumber":183,"author":{"gitId":"clarencepohh"},"content":"        System.out.println(\"I found these matching tasks in your task list: \");","lastModifiedDate":"2024-03-01"},{"lineNumber":184,"author":{"gitId":"clarencepohh"},"content":"        printFromTasksList(foundTasksList);","lastModifiedDate":"2024-03-01"},{"lineNumber":185,"author":{"gitId":"clarencepohh"},"content":"    }","lastModifiedDate":"2024-03-01"},{"lineNumber":186,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-03-01"},{"lineNumber":187,"author":{"gitId":"clarencepohh"},"content":"    /**","lastModifiedDate":"2024-03-08"},{"lineNumber":188,"author":{"gitId":"clarencepohh"},"content":"     * Given an ArrayList\u003cTask\u003e, prints to the console all the Tasks in the ArrayList.","lastModifiedDate":"2024-03-08"},{"lineNumber":189,"author":{"gitId":"clarencepohh"},"content":"     *","lastModifiedDate":"2024-03-08"},{"lineNumber":190,"author":{"gitId":"clarencepohh"},"content":"     * @param tasksList The ArrayList\u003cTask\u003e to be printed.","lastModifiedDate":"2024-03-08"},{"lineNumber":191,"author":{"gitId":"clarencepohh"},"content":"     */","lastModifiedDate":"2024-03-08"},{"lineNumber":192,"author":{"gitId":"clarencepohh"},"content":"","lastModifiedDate":"2024-03-08"},{"lineNumber":193,"author":{"gitId":"clarencepohh"},"content":"    private void printFromTasksList(ArrayList\u003cTask\u003e tasksList) {","lastModifiedDate":"2024-03-01"},{"lineNumber":194,"author":{"gitId":"clarencepohh"},"content":"        tasksList.forEach(task -\u003e {","lastModifiedDate":"2024-03-01"},{"lineNumber":195,"author":{"gitId":"clarencepohh"},"content":"            String taskType \u003d task.getTaskType();","lastModifiedDate":"2024-02-25"},{"lineNumber":196,"author":{"gitId":"clarencepohh"},"content":"            String statusIcon \u003d task.getStatusIcon();","lastModifiedDate":"2024-02-25"},{"lineNumber":197,"author":{"gitId":"clarencepohh"},"content":"            int currentIndex \u003d tasksList.indexOf(task);","lastModifiedDate":"2024-03-01"},{"lineNumber":198,"author":{"gitId":"clarencepohh"},"content":"            System.out.print(\"\\t\" + (currentIndex + 1) + \": \");","lastModifiedDate":"2024-02-25"},{"lineNumber":199,"author":{"gitId":"clarencepohh"},"content":"            System.out.print(\"[\" + taskType + \"] \");","lastModifiedDate":"2024-02-25"},{"lineNumber":200,"author":{"gitId":"clarencepohh"},"content":"            System.out.print(\"[\" + statusIcon + \"] \");","lastModifiedDate":"2024-02-25"},{"lineNumber":201,"author":{"gitId":"clarencepohh"},"content":"            System.out.println(task.getName());","lastModifiedDate":"2024-02-25"},{"lineNumber":202,"author":{"gitId":"clarencepohh"},"content":"        });","lastModifiedDate":"2024-02-25"},{"lineNumber":203,"author":{"gitId":"clarencepohh"},"content":"    }","lastModifiedDate":"2024-02-25"},{"lineNumber":204,"author":{"gitId":"clarencepohh"},"content":"}","lastModifiedDate":"2024-02-06"}],"authorContributionMap":{"clarencepohh":204}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"clarencepohh"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\hachi\\*.java ..\\src\\main\\java\\hachi\\data\\task\\*.java ..\\src\\main\\java\\hachi\\data\\*.java ..\\src\\main\\java\\hachi\\parser\\*.java ..\\src\\main\\java\\hachi\\ui\\*.java","lastModifiedDate":"2024-02-15"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"clarencepohh"},"content":"REM run the program, feed commands from test.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2024-02-07"},{"lineNumber":18,"author":{"gitId":"clarencepohh"},"content":"java -classpath ..\\bin hachi.Hachi \u003c test.txt \u003e ACTUAL.TXT","lastModifiedDate":"2024-02-15"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"clarencepohh":3,"-":18}},{"path":"text-ui-test/test.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"clarencepohh"},"content":"list","lastModifiedDate":"2024-02-07"},{"lineNumber":2,"author":{"gitId":"clarencepohh"},"content":"todo go to school","lastModifiedDate":"2024-02-07"},{"lineNumber":3,"author":{"gitId":"clarencepohh"},"content":"list","lastModifiedDate":"2024-02-07"},{"lineNumber":4,"author":{"gitId":"clarencepohh"},"content":"event chinese new year /from friday /to 15 days after friday","lastModifiedDate":"2024-02-07"},{"lineNumber":5,"author":{"gitId":"clarencepohh"},"content":"list","lastModifiedDate":"2024-02-07"},{"lineNumber":6,"author":{"gitId":"clarencepohh"},"content":"deadline project review /by thursday","lastModifiedDate":"2024-02-07"},{"lineNumber":7,"author":{"gitId":"clarencepohh"},"content":"list","lastModifiedDate":"2024-02-07"},{"lineNumber":8,"author":{"gitId":"clarencepohh"},"content":"mark 1","lastModifiedDate":"2024-02-07"},{"lineNumber":9,"author":{"gitId":"clarencepohh"},"content":"mark 2","lastModifiedDate":"2024-02-07"},{"lineNumber":10,"author":{"gitId":"clarencepohh"},"content":"list","lastModifiedDate":"2024-02-07"},{"lineNumber":11,"author":{"gitId":"clarencepohh"},"content":"unmark 2","lastModifiedDate":"2024-02-07"},{"lineNumber":12,"author":{"gitId":"clarencepohh"},"content":"delete 2","lastModifiedDate":"2024-02-17"},{"lineNumber":13,"author":{"gitId":"clarencepohh"},"content":"list","lastModifiedDate":"2024-02-17"},{"lineNumber":14,"author":{"gitId":"clarencepohh"},"content":"bye","lastModifiedDate":"2024-02-07"}],"authorContributionMap":{"clarencepohh":14}}]
