[{"path":"src/main/java/AddTaskCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"alvinnnnnnnnnn"},"content":"public class AddTaskCommand implements Command {","lastModifiedDate":"2024-03-07"},{"lineNumber":2,"author":{"gitId":"alvinnnnnnnnnn"},"content":"    private final Task task;","lastModifiedDate":"2024-03-07"},{"lineNumber":3,"author":{"gitId":"alvinnnnnnnnnn"},"content":"","lastModifiedDate":"2024-03-07"},{"lineNumber":4,"author":{"gitId":"alvinnnnnnnnnn"},"content":"    public AddTaskCommand(Task task) {","lastModifiedDate":"2024-03-07"},{"lineNumber":5,"author":{"gitId":"alvinnnnnnnnnn"},"content":"        this.task \u003d task;","lastModifiedDate":"2024-03-07"},{"lineNumber":6,"author":{"gitId":"alvinnnnnnnnnn"},"content":"    }","lastModifiedDate":"2024-03-07"},{"lineNumber":7,"author":{"gitId":"alvinnnnnnnnnn"},"content":"","lastModifiedDate":"2024-03-07"},{"lineNumber":8,"author":{"gitId":"alvinnnnnnnnnn"},"content":"    @Override","lastModifiedDate":"2024-03-07"},{"lineNumber":9,"author":{"gitId":"alvinnnnnnnnnn"},"content":"    public void execute(TaskList taskList) {","lastModifiedDate":"2024-03-07"},{"lineNumber":10,"author":{"gitId":"alvinnnnnnnnnn"},"content":"        taskList.addTask(task);","lastModifiedDate":"2024-03-07"},{"lineNumber":11,"author":{"gitId":"alvinnnnnnnnnn"},"content":"        System.out.println(\"Got it. I\u0027ve added this task:\");","lastModifiedDate":"2024-03-07"},{"lineNumber":12,"author":{"gitId":"alvinnnnnnnnnn"},"content":"        System.out.println(task);","lastModifiedDate":"2024-03-07"},{"lineNumber":13,"author":{"gitId":"alvinnnnnnnnnn"},"content":"        System.out.println(\"Now you have \" + taskList.size() + \" tasks in the list.\");","lastModifiedDate":"2024-03-07"},{"lineNumber":14,"author":{"gitId":"alvinnnnnnnnnn"},"content":"    }","lastModifiedDate":"2024-03-07"},{"lineNumber":15,"author":{"gitId":"alvinnnnnnnnnn"},"content":"}","lastModifiedDate":"2024-03-07"},{"lineNumber":16,"author":{"gitId":"alvinnnnnnnnnn"},"content":"","lastModifiedDate":"2024-03-07"}],"authorContributionMap":{"alvinnnnnnnnnn":16}},{"path":"src/main/java/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"alvinnnnnnnnnn"},"content":"public interface Command {","lastModifiedDate":"2024-03-07"},{"lineNumber":2,"author":{"gitId":"alvinnnnnnnnnn"},"content":"    void execute(TaskList taskList);","lastModifiedDate":"2024-03-07"},{"lineNumber":3,"author":{"gitId":"alvinnnnnnnnnn"},"content":"}","lastModifiedDate":"2024-03-07"}],"authorContributionMap":{"alvinnnnnnnnnn":3}},{"path":"src/main/java/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"alvinnnnnnnnnn"},"content":"/**","lastModifiedDate":"2024-03-07"},{"lineNumber":2,"author":{"gitId":"alvinnnnnnnnnn"},"content":" * This class represents a deadline task with a due date.","lastModifiedDate":"2024-03-07"},{"lineNumber":3,"author":{"gitId":"alvinnnnnnnnnn"},"content":" * It inherits from the `Task` class and adds a due date field.","lastModifiedDate":"2024-03-07"},{"lineNumber":4,"author":{"gitId":"alvinnnnnnnnnn"},"content":" */","lastModifiedDate":"2024-03-07"},{"lineNumber":5,"author":{"gitId":"alvinnnnnnnnnn"},"content":"public class Deadline extends Task {","lastModifiedDate":"2024-02-09"},{"lineNumber":6,"author":{"gitId":"alvinnnnnnnnnn"},"content":"","lastModifiedDate":"2024-03-07"},{"lineNumber":7,"author":{"gitId":"alvinnnnnnnnnn"},"content":"    protected String by;","lastModifiedDate":"2024-02-09"},{"lineNumber":8,"author":{"gitId":"alvinnnnnnnnnn"},"content":"","lastModifiedDate":"2024-03-07"},{"lineNumber":9,"author":{"gitId":"alvinnnnnnnnnn"},"content":"    /**","lastModifiedDate":"2024-03-07"},{"lineNumber":10,"author":{"gitId":"alvinnnnnnnnnn"},"content":"     * Constructor for the Deadline class.","lastModifiedDate":"2024-03-07"},{"lineNumber":11,"author":{"gitId":"alvinnnnnnnnnn"},"content":"     *","lastModifiedDate":"2024-03-07"},{"lineNumber":12,"author":{"gitId":"alvinnnnnnnnnn"},"content":"     * @param description the description of the task","lastModifiedDate":"2024-03-07"},{"lineNumber":13,"author":{"gitId":"alvinnnnnnnnnn"},"content":"     * @param by the due date for the task","lastModifiedDate":"2024-03-07"},{"lineNumber":14,"author":{"gitId":"alvinnnnnnnnnn"},"content":"     */","lastModifiedDate":"2024-03-07"},{"lineNumber":15,"author":{"gitId":"alvinnnnnnnnnn"},"content":"    public Deadline(String description, String by) {","lastModifiedDate":"2024-02-09"},{"lineNumber":16,"author":{"gitId":"alvinnnnnnnnnn"},"content":"        super(description);","lastModifiedDate":"2024-02-09"},{"lineNumber":17,"author":{"gitId":"alvinnnnnnnnnn"},"content":"        this.by \u003d by;","lastModifiedDate":"2024-02-09"},{"lineNumber":18,"author":{"gitId":"alvinnnnnnnnnn"},"content":"    }","lastModifiedDate":"2024-02-09"},{"lineNumber":19,"author":{"gitId":"alvinnnnnnnnnn"},"content":"","lastModifiedDate":"2024-03-07"},{"lineNumber":20,"author":{"gitId":"alvinnnnnnnnnn"},"content":"    /**","lastModifiedDate":"2024-03-07"},{"lineNumber":21,"author":{"gitId":"alvinnnnnnnnnn"},"content":"     * Overrides the `toString` method from the `Task` class to provide a specific","lastModifiedDate":"2024-03-07"},{"lineNumber":22,"author":{"gitId":"alvinnnnnnnnnn"},"content":"     * string representation for deadline tasks, including the due date.","lastModifiedDate":"2024-03-07"},{"lineNumber":23,"author":{"gitId":"alvinnnnnnnnnn"},"content":"     *","lastModifiedDate":"2024-03-07"},{"lineNumber":24,"author":{"gitId":"alvinnnnnnnnnn"},"content":"     * @return the string representation of the deadline task","lastModifiedDate":"2024-03-07"},{"lineNumber":25,"author":{"gitId":"alvinnnnnnnnnn"},"content":"     */","lastModifiedDate":"2024-03-07"},{"lineNumber":26,"author":{"gitId":"alvinnnnnnnnnn"},"content":"    @Override","lastModifiedDate":"2024-03-07"},{"lineNumber":27,"author":{"gitId":"alvinnnnnnnnnn"},"content":"    public String toString() {","lastModifiedDate":"2024-02-09"},{"lineNumber":28,"author":{"gitId":"alvinnnnnnnnnn"},"content":"        return \"[D]\" + super.getStatusIcon() + \" \" + super.getDescription() + \" (by: \" + by + \")\";","lastModifiedDate":"2024-02-09"},{"lineNumber":29,"author":{"gitId":"alvinnnnnnnnnn"},"content":"    }","lastModifiedDate":"2024-02-09"},{"lineNumber":30,"author":{"gitId":"alvinnnnnnnnnn"},"content":"","lastModifiedDate":"2024-03-07"},{"lineNumber":31,"author":{"gitId":"alvinnnnnnnnnn"},"content":"    /**","lastModifiedDate":"2024-03-07"},{"lineNumber":32,"author":{"gitId":"alvinnnnnnnnnn"},"content":"     * Implements the `toFileString` method from the `Task` class to provide a string","lastModifiedDate":"2024-03-07"},{"lineNumber":33,"author":{"gitId":"alvinnnnnnnnnn"},"content":"     * representation suitable for storing the deadline task in a file.","lastModifiedDate":"2024-03-07"},{"lineNumber":34,"author":{"gitId":"alvinnnnnnnnnn"},"content":"     *","lastModifiedDate":"2024-03-07"},{"lineNumber":35,"author":{"gitId":"alvinnnnnnnnnn"},"content":"     * @return the string representation of the deadline task for file storage","lastModifiedDate":"2024-03-07"},{"lineNumber":36,"author":{"gitId":"alvinnnnnnnnnn"},"content":"     */","lastModifiedDate":"2024-03-07"},{"lineNumber":37,"author":{"gitId":"alvinnnnnnnnnn"},"content":"    @Override","lastModifiedDate":"2024-03-07"},{"lineNumber":38,"author":{"gitId":"alvinnnnnnnnnn"},"content":"    public String toFileString() {","lastModifiedDate":"2024-03-07"},{"lineNumber":39,"author":{"gitId":"alvinnnnnnnnnn"},"content":"        return \"[D]\" + super.getStatusIcon() + \" \" + super.getDescription() + \" (by: \" + by + \")\";","lastModifiedDate":"2024-03-07"},{"lineNumber":40,"author":{"gitId":"alvinnnnnnnnnn"},"content":"    }","lastModifiedDate":"2024-03-07"},{"lineNumber":41,"author":{"gitId":"alvinnnnnnnnnn"},"content":"}","lastModifiedDate":"2024-02-09"}],"authorContributionMap":{"alvinnnnnnnnnn":41}},{"path":"src/main/java/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"alvinnnnnnnnnn"},"content":"/**","lastModifiedDate":"2024-03-07"},{"lineNumber":2,"author":{"gitId":"alvinnnnnnnnnn"},"content":" * This class represents an event task with a start and end time.","lastModifiedDate":"2024-03-07"},{"lineNumber":3,"author":{"gitId":"alvinnnnnnnnnn"},"content":" * It inherits from the `Task` class and adds start and end time fields.","lastModifiedDate":"2024-03-07"},{"lineNumber":4,"author":{"gitId":"alvinnnnnnnnnn"},"content":" */","lastModifiedDate":"2024-03-07"},{"lineNumber":5,"author":{"gitId":"alvinnnnnnnnnn"},"content":"public class Event extends Task {","lastModifiedDate":"2024-02-09"},{"lineNumber":6,"author":{"gitId":"alvinnnnnnnnnn"},"content":"","lastModifiedDate":"2024-03-07"},{"lineNumber":7,"author":{"gitId":"alvinnnnnnnnnn"},"content":"    protected String from;","lastModifiedDate":"2024-02-09"},{"lineNumber":8,"author":{"gitId":"alvinnnnnnnnnn"},"content":"    protected String to;","lastModifiedDate":"2024-02-09"},{"lineNumber":9,"author":{"gitId":"alvinnnnnnnnnn"},"content":"","lastModifiedDate":"2024-03-07"},{"lineNumber":10,"author":{"gitId":"alvinnnnnnnnnn"},"content":"    /**","lastModifiedDate":"2024-03-07"},{"lineNumber":11,"author":{"gitId":"alvinnnnnnnnnn"},"content":"     * Constructor for the Event class.","lastModifiedDate":"2024-03-07"},{"lineNumber":12,"author":{"gitId":"alvinnnnnnnnnn"},"content":"     *","lastModifiedDate":"2024-03-07"},{"lineNumber":13,"author":{"gitId":"alvinnnnnnnnnn"},"content":"     * @param description the description of the task","lastModifiedDate":"2024-03-07"},{"lineNumber":14,"author":{"gitId":"alvinnnnnnnnnn"},"content":"     * @param from the start time of the event","lastModifiedDate":"2024-03-07"},{"lineNumber":15,"author":{"gitId":"alvinnnnnnnnnn"},"content":"     * @param to the end time of the event","lastModifiedDate":"2024-03-07"},{"lineNumber":16,"author":{"gitId":"alvinnnnnnnnnn"},"content":"     */","lastModifiedDate":"2024-03-07"},{"lineNumber":17,"author":{"gitId":"alvinnnnnnnnnn"},"content":"    public Event(String description, String from, String to) {","lastModifiedDate":"2024-02-09"},{"lineNumber":18,"author":{"gitId":"alvinnnnnnnnnn"},"content":"        super(description);","lastModifiedDate":"2024-02-09"},{"lineNumber":19,"author":{"gitId":"alvinnnnnnnnnn"},"content":"        this.from \u003d from;","lastModifiedDate":"2024-02-09"},{"lineNumber":20,"author":{"gitId":"alvinnnnnnnnnn"},"content":"        this.to \u003d to;","lastModifiedDate":"2024-02-09"},{"lineNumber":21,"author":{"gitId":"alvinnnnnnnnnn"},"content":"    }","lastModifiedDate":"2024-02-09"},{"lineNumber":22,"author":{"gitId":"alvinnnnnnnnnn"},"content":"","lastModifiedDate":"2024-03-07"},{"lineNumber":23,"author":{"gitId":"alvinnnnnnnnnn"},"content":"    /**","lastModifiedDate":"2024-03-07"},{"lineNumber":24,"author":{"gitId":"alvinnnnnnnnnn"},"content":"     * Overrides the `toString` method from the `Task` class to provide a specific","lastModifiedDate":"2024-03-07"},{"lineNumber":25,"author":{"gitId":"alvinnnnnnnnnn"},"content":"     * string representation for event tasks, including the start and end time.","lastModifiedDate":"2024-03-07"},{"lineNumber":26,"author":{"gitId":"alvinnnnnnnnnn"},"content":"     *","lastModifiedDate":"2024-03-07"},{"lineNumber":27,"author":{"gitId":"alvinnnnnnnnnn"},"content":"     * @return the string representation of the event task","lastModifiedDate":"2024-03-07"},{"lineNumber":28,"author":{"gitId":"alvinnnnnnnnnn"},"content":"     */","lastModifiedDate":"2024-03-07"},{"lineNumber":29,"author":{"gitId":"alvinnnnnnnnnn"},"content":"    @Override","lastModifiedDate":"2024-03-07"},{"lineNumber":30,"author":{"gitId":"alvinnnnnnnnnn"},"content":"    public String toString() {","lastModifiedDate":"2024-02-09"},{"lineNumber":31,"author":{"gitId":"alvinnnnnnnnnn"},"content":"        return \"[E]\" + super.getStatusIcon() + \" \" + super.getDescription() + \" (from: \" + from + \" to: \" + to + \")\";","lastModifiedDate":"2024-02-09"},{"lineNumber":32,"author":{"gitId":"alvinnnnnnnnnn"},"content":"    }","lastModifiedDate":"2024-02-09"},{"lineNumber":33,"author":{"gitId":"alvinnnnnnnnnn"},"content":"","lastModifiedDate":"2024-03-07"},{"lineNumber":34,"author":{"gitId":"alvinnnnnnnnnn"},"content":"    /**","lastModifiedDate":"2024-03-07"},{"lineNumber":35,"author":{"gitId":"alvinnnnnnnnnn"},"content":"     * Implements the `toFileString` method from the `Task` class to provide a string","lastModifiedDate":"2024-03-07"},{"lineNumber":36,"author":{"gitId":"alvinnnnnnnnnn"},"content":"     * representation suitable for storing the event task in a file.","lastModifiedDate":"2024-03-07"},{"lineNumber":37,"author":{"gitId":"alvinnnnnnnnnn"},"content":"     *","lastModifiedDate":"2024-03-07"},{"lineNumber":38,"author":{"gitId":"alvinnnnnnnnnn"},"content":"     * @return the string representation of the event task for file storage","lastModifiedDate":"2024-03-07"},{"lineNumber":39,"author":{"gitId":"alvinnnnnnnnnn"},"content":"     */","lastModifiedDate":"2024-03-07"},{"lineNumber":40,"author":{"gitId":"alvinnnnnnnnnn"},"content":"    @Override","lastModifiedDate":"2024-03-07"},{"lineNumber":41,"author":{"gitId":"alvinnnnnnnnnn"},"content":"    public String toFileString() {","lastModifiedDate":"2024-03-07"},{"lineNumber":42,"author":{"gitId":"alvinnnnnnnnnn"},"content":"        return \"[E]\" + super.getStatusIcon() + \" \" + super.getDescription() + \" (from: \" + from + \" to: \" + to + \")\";","lastModifiedDate":"2024-03-07"},{"lineNumber":43,"author":{"gitId":"alvinnnnnnnnnn"},"content":"    }","lastModifiedDate":"2024-03-07"},{"lineNumber":44,"author":{"gitId":"alvinnnnnnnnnn"},"content":"}","lastModifiedDate":"2024-02-09"}],"authorContributionMap":{"alvinnnnnnnnnn":44}},{"path":"src/main/java/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"alvinnnnnnnnnn"},"content":"public class ListCommand implements Command {","lastModifiedDate":"2024-03-07"},{"lineNumber":2,"author":{"gitId":"alvinnnnnnnnnn"},"content":"","lastModifiedDate":"2024-03-07"},{"lineNumber":3,"author":{"gitId":"alvinnnnnnnnnn"},"content":"    @Override","lastModifiedDate":"2024-03-07"},{"lineNumber":4,"author":{"gitId":"alvinnnnnnnnnn"},"content":"    public void execute(TaskList taskList) {","lastModifiedDate":"2024-03-07"},{"lineNumber":5,"author":{"gitId":"alvinnnnnnnnnn"},"content":"        if (taskList.size() \u003d\u003d 0) {","lastModifiedDate":"2024-03-07"},{"lineNumber":6,"author":{"gitId":"alvinnnnnnnnnn"},"content":"            System.out.println(\"There are no tasks in your list. Please input at least one!\");","lastModifiedDate":"2024-03-07"},{"lineNumber":7,"author":{"gitId":"alvinnnnnnnnnn"},"content":"        } else {","lastModifiedDate":"2024-03-07"},{"lineNumber":8,"author":{"gitId":"alvinnnnnnnnnn"},"content":"            System.out.println(\"Here are tasks in your list: \\n\");","lastModifiedDate":"2024-03-07"},{"lineNumber":9,"author":{"gitId":"alvinnnnnnnnnn"},"content":"            for (int i \u003d 0; i \u003c taskList.size(); i++) {","lastModifiedDate":"2024-03-07"},{"lineNumber":10,"author":{"gitId":"alvinnnnnnnnnn"},"content":"                System.out.println((i + 1) + \".\" + taskList.getTask(i));","lastModifiedDate":"2024-03-07"},{"lineNumber":11,"author":{"gitId":"alvinnnnnnnnnn"},"content":"            }","lastModifiedDate":"2024-03-07"},{"lineNumber":12,"author":{"gitId":"alvinnnnnnnnnn"},"content":"        }","lastModifiedDate":"2024-03-07"},{"lineNumber":13,"author":{"gitId":"alvinnnnnnnnnn"},"content":"    }","lastModifiedDate":"2024-03-07"},{"lineNumber":14,"author":{"gitId":"alvinnnnnnnnnn"},"content":"}","lastModifiedDate":"2024-03-07"},{"lineNumber":15,"author":{"gitId":"alvinnnnnnnnnn"},"content":"","lastModifiedDate":"2024-03-07"}],"authorContributionMap":{"alvinnnnnnnnnn":15}},{"path":"src/main/java/MarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"alvinnnnnnnnnn"},"content":"/**","lastModifiedDate":"2024-03-07"},{"lineNumber":2,"author":{"gitId":"alvinnnnnnnnnn"},"content":" * This class represents a command that marks a task as completed in the task list.","lastModifiedDate":"2024-03-07"},{"lineNumber":3,"author":{"gitId":"alvinnnnnnnnnn"},"content":" */","lastModifiedDate":"2024-03-07"},{"lineNumber":4,"author":{"gitId":"alvinnnnnnnnnn"},"content":"public class MarkCommand implements Command {","lastModifiedDate":"2024-03-07"},{"lineNumber":5,"author":{"gitId":"alvinnnnnnnnnn"},"content":"","lastModifiedDate":"2024-03-07"},{"lineNumber":6,"author":{"gitId":"alvinnnnnnnnnn"},"content":"    private final int index;","lastModifiedDate":"2024-03-07"},{"lineNumber":7,"author":{"gitId":"alvinnnnnnnnnn"},"content":"","lastModifiedDate":"2024-03-07"},{"lineNumber":8,"author":{"gitId":"alvinnnnnnnnnn"},"content":"    /**","lastModifiedDate":"2024-03-07"},{"lineNumber":9,"author":{"gitId":"alvinnnnnnnnnn"},"content":"     * Constructor for the MarkCommand class.","lastModifiedDate":"2024-03-07"},{"lineNumber":10,"author":{"gitId":"alvinnnnnnnnnn"},"content":"     *","lastModifiedDate":"2024-03-07"},{"lineNumber":11,"author":{"gitId":"alvinnnnnnnnnn"},"content":"     * @param index the index of the task to be marked","lastModifiedDate":"2024-03-07"},{"lineNumber":12,"author":{"gitId":"alvinnnnnnnnnn"},"content":"     */","lastModifiedDate":"2024-03-07"},{"lineNumber":13,"author":{"gitId":"alvinnnnnnnnnn"},"content":"    public MarkCommand(int index) {","lastModifiedDate":"2024-03-07"},{"lineNumber":14,"author":{"gitId":"alvinnnnnnnnnn"},"content":"        this.index \u003d index;","lastModifiedDate":"2024-03-07"},{"lineNumber":15,"author":{"gitId":"alvinnnnnnnnnn"},"content":"    }","lastModifiedDate":"2024-03-07"},{"lineNumber":16,"author":{"gitId":"alvinnnnnnnnnn"},"content":"","lastModifiedDate":"2024-03-07"},{"lineNumber":17,"author":{"gitId":"alvinnnnnnnnnn"},"content":"    /**","lastModifiedDate":"2024-03-07"},{"lineNumber":18,"author":{"gitId":"alvinnnnnnnnnn"},"content":"     * Executes the command by marking the task at the specified index as completed","lastModifiedDate":"2024-03-07"},{"lineNumber":19,"author":{"gitId":"alvinnnnnnnnnn"},"content":"     * and printing a confirmation message with the task description.","lastModifiedDate":"2024-03-07"},{"lineNumber":20,"author":{"gitId":"alvinnnnnnnnnn"},"content":"     *","lastModifiedDate":"2024-03-07"},{"lineNumber":21,"author":{"gitId":"alvinnnnnnnnnn"},"content":"     * @param taskList the TaskList object containing the tasks","lastModifiedDate":"2024-03-07"},{"lineNumber":22,"author":{"gitId":"alvinnnnnnnnnn"},"content":"     */","lastModifiedDate":"2024-03-07"},{"lineNumber":23,"author":{"gitId":"alvinnnnnnnnnn"},"content":"    @Override","lastModifiedDate":"2024-03-07"},{"lineNumber":24,"author":{"gitId":"alvinnnnnnnnnn"},"content":"    public void execute(TaskList taskList) {","lastModifiedDate":"2024-03-07"},{"lineNumber":25,"author":{"gitId":"alvinnnnnnnnnn"},"content":"        taskList.getTask(index).markList();","lastModifiedDate":"2024-03-07"},{"lineNumber":26,"author":{"gitId":"alvinnnnnnnnnn"},"content":"        System.out.println(\"Nice! I\u0027ve marked this task as done: \");","lastModifiedDate":"2024-03-07"},{"lineNumber":27,"author":{"gitId":"alvinnnnnnnnnn"},"content":"        System.out.println(taskList.getTask(index).getStatusIcon() + \" \" + taskList.getTask(index).getDescription());","lastModifiedDate":"2024-03-07"},{"lineNumber":28,"author":{"gitId":"alvinnnnnnnnnn"},"content":"    }","lastModifiedDate":"2024-03-07"},{"lineNumber":29,"author":{"gitId":"alvinnnnnnnnnn"},"content":"}","lastModifiedDate":"2024-03-07"},{"lineNumber":30,"author":{"gitId":"alvinnnnnnnnnn"},"content":"","lastModifiedDate":"2024-03-07"},{"lineNumber":31,"author":{"gitId":"alvinnnnnnnnnn"},"content":"","lastModifiedDate":"2024-03-07"}],"authorContributionMap":{"alvinnnnnnnnnn":31}},{"path":"src/main/java/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"alvinnnnnnnnnn"},"content":"/**","lastModifiedDate":"2024-03-07"},{"lineNumber":2,"author":{"gitId":"alvinnnnnnnnnn"},"content":" * This class parses user input strings into Command objects to be executed.","lastModifiedDate":"2024-03-07"},{"lineNumber":3,"author":{"gitId":"alvinnnnnnnnnn"},"content":" */","lastModifiedDate":"2024-03-07"},{"lineNumber":4,"author":{"gitId":"alvinnnnnnnnnn"},"content":"public class Parser {","lastModifiedDate":"2024-03-07"},{"lineNumber":5,"author":{"gitId":"alvinnnnnnnnnn"},"content":"    private final String userInput;","lastModifiedDate":"2024-03-07"},{"lineNumber":6,"author":{"gitId":"alvinnnnnnnnnn"},"content":"","lastModifiedDate":"2024-03-07"},{"lineNumber":7,"author":{"gitId":"alvinnnnnnnnnn"},"content":"    /**","lastModifiedDate":"2024-03-07"},{"lineNumber":8,"author":{"gitId":"alvinnnnnnnnnn"},"content":"     * Constructor for the Parser class.","lastModifiedDate":"2024-03-07"},{"lineNumber":9,"author":{"gitId":"alvinnnnnnnnnn"},"content":"     *","lastModifiedDate":"2024-03-07"},{"lineNumber":10,"author":{"gitId":"alvinnnnnnnnnn"},"content":"     * @param userInput the user input string to parse","lastModifiedDate":"2024-03-07"},{"lineNumber":11,"author":{"gitId":"alvinnnnnnnnnn"},"content":"     */","lastModifiedDate":"2024-03-07"},{"lineNumber":12,"author":{"gitId":"alvinnnnnnnnnn"},"content":"    public Parser(String userInput) {","lastModifiedDate":"2024-03-07"},{"lineNumber":13,"author":{"gitId":"alvinnnnnnnnnn"},"content":"        this.userInput \u003d userInput;","lastModifiedDate":"2024-03-07"},{"lineNumber":14,"author":{"gitId":"alvinnnnnnnnnn"},"content":"    }","lastModifiedDate":"2024-03-07"},{"lineNumber":15,"author":{"gitId":"alvinnnnnnnnnn"},"content":"","lastModifiedDate":"2024-03-07"},{"lineNumber":16,"author":{"gitId":"alvinnnnnnnnnn"},"content":"    /**","lastModifiedDate":"2024-03-07"},{"lineNumber":17,"author":{"gitId":"alvinnnnnnnnnn"},"content":"     * Parses the user input string and returns the corresponding Command object,","lastModifiedDate":"2024-03-07"},{"lineNumber":18,"author":{"gitId":"alvinnnnnnnnnn"},"content":"     * or null if the input doesn\u0027t match any recognized commands.","lastModifiedDate":"2024-03-07"},{"lineNumber":19,"author":{"gitId":"alvinnnnnnnnnn"},"content":"     *","lastModifiedDate":"2024-03-07"},{"lineNumber":20,"author":{"gitId":"alvinnnnnnnnnn"},"content":"     * @return the Command object representing the parsed command, or null if not recognized","lastModifiedDate":"2024-03-07"},{"lineNumber":21,"author":{"gitId":"alvinnnnnnnnnn"},"content":"     */","lastModifiedDate":"2024-03-07"},{"lineNumber":22,"author":{"gitId":"alvinnnnnnnnnn"},"content":"    public Command parseCommand() {","lastModifiedDate":"2024-03-07"},{"lineNumber":23,"author":{"gitId":"alvinnnnnnnnnn"},"content":"        if (userInput.startsWith(\"mark\")) {","lastModifiedDate":"2024-03-07"},{"lineNumber":24,"author":{"gitId":"alvinnnnnnnnnn"},"content":"            return new MarkCommand(Integer.parseInt(userInput.substring(5)) - 1);","lastModifiedDate":"2024-03-07"},{"lineNumber":25,"author":{"gitId":"alvinnnnnnnnnn"},"content":"        } else if (userInput.startsWith(\"unmark\")) {","lastModifiedDate":"2024-03-07"},{"lineNumber":26,"author":{"gitId":"alvinnnnnnnnnn"},"content":"            return new UnmarkCommand(Integer.parseInt(userInput.substring(7)) - 1);","lastModifiedDate":"2024-03-07"},{"lineNumber":27,"author":{"gitId":"alvinnnnnnnnnn"},"content":"        } else if (userInput.equalsIgnoreCase(\"list\")) {","lastModifiedDate":"2024-03-07"},{"lineNumber":28,"author":{"gitId":"alvinnnnnnnnnn"},"content":"            return new ListCommand();","lastModifiedDate":"2024-03-07"},{"lineNumber":29,"author":{"gitId":"alvinnnnnnnnnn"},"content":"        } else if (userInput.startsWith(\"todo\")) {","lastModifiedDate":"2024-03-07"},{"lineNumber":30,"author":{"gitId":"alvinnnnnnnnnn"},"content":"            if (userInput.trim().length() \u003e 4) {","lastModifiedDate":"2024-03-07"},{"lineNumber":31,"author":{"gitId":"alvinnnnnnnnnn"},"content":"                String description \u003d userInput.substring(5).trim();","lastModifiedDate":"2024-03-07"},{"lineNumber":32,"author":{"gitId":"alvinnnnnnnnnn"},"content":"                return new AddTaskCommand(new ToDo(description));","lastModifiedDate":"2024-03-07"},{"lineNumber":33,"author":{"gitId":"alvinnnnnnnnnn"},"content":"            }","lastModifiedDate":"2024-03-07"},{"lineNumber":34,"author":{"gitId":"alvinnnnnnnnnn"},"content":"        } else if (userInput.startsWith(\"deadline\")) {","lastModifiedDate":"2024-03-07"},{"lineNumber":35,"author":{"gitId":"alvinnnnnnnnnn"},"content":"            if (userInput.trim().length() \u003e 8) {","lastModifiedDate":"2024-03-07"},{"lineNumber":36,"author":{"gitId":"alvinnnnnnnnnn"},"content":"                String[] parts \u003d userInput.substring(9).split(\"/by\");","lastModifiedDate":"2024-03-07"},{"lineNumber":37,"author":{"gitId":"alvinnnnnnnnnn"},"content":"                String description \u003d parts[0].trim();","lastModifiedDate":"2024-03-07"},{"lineNumber":38,"author":{"gitId":"alvinnnnnnnnnn"},"content":"                String by \u003d parts[1].trim();","lastModifiedDate":"2024-03-07"},{"lineNumber":39,"author":{"gitId":"alvinnnnnnnnnn"},"content":"                return new AddTaskCommand(new Deadline(description, by));","lastModifiedDate":"2024-03-07"},{"lineNumber":40,"author":{"gitId":"alvinnnnnnnnnn"},"content":"            }","lastModifiedDate":"2024-03-07"},{"lineNumber":41,"author":{"gitId":"alvinnnnnnnnnn"},"content":"        } else if (userInput.startsWith(\"event\")) {","lastModifiedDate":"2024-03-07"},{"lineNumber":42,"author":{"gitId":"alvinnnnnnnnnn"},"content":"            if (userInput.trim().length() \u003e 5) {","lastModifiedDate":"2024-03-07"},{"lineNumber":43,"author":{"gitId":"alvinnnnnnnnnn"},"content":"                String[] parts \u003d userInput.substring(6).split(\"/from|/to\");","lastModifiedDate":"2024-03-07"},{"lineNumber":44,"author":{"gitId":"alvinnnnnnnnnn"},"content":"                String description \u003d parts[0].trim();","lastModifiedDate":"2024-03-07"},{"lineNumber":45,"author":{"gitId":"alvinnnnnnnnnn"},"content":"                String from \u003d parts[1].trim();","lastModifiedDate":"2024-03-07"},{"lineNumber":46,"author":{"gitId":"alvinnnnnnnnnn"},"content":"                String to \u003d parts[2].trim();","lastModifiedDate":"2024-03-07"},{"lineNumber":47,"author":{"gitId":"alvinnnnnnnnnn"},"content":"                return new AddTaskCommand(new Event(description, from, to));","lastModifiedDate":"2024-03-07"},{"lineNumber":48,"author":{"gitId":"alvinnnnnnnnnn"},"content":"            }","lastModifiedDate":"2024-03-07"},{"lineNumber":49,"author":{"gitId":"alvinnnnnnnnnn"},"content":"        } else if (userInput.startsWith(\"delete\")) {","lastModifiedDate":"2024-03-07"},{"lineNumber":50,"author":{"gitId":"alvinnnnnnnnnn"},"content":"            return new RemoveTaskCommand(Integer.parseInt(userInput.split(\" \")[1]) - 1);","lastModifiedDate":"2024-03-07"},{"lineNumber":51,"author":{"gitId":"alvinnnnnnnnnn"},"content":"        } else if (userInput.startsWith(\"find\")) {","lastModifiedDate":"2024-03-07"},{"lineNumber":52,"author":{"gitId":"alvinnnnnnnnnn"},"content":"            if (userInput.trim().length() \u003e 5) {","lastModifiedDate":"2024-03-07"},{"lineNumber":53,"author":{"gitId":"alvinnnnnnnnnn"},"content":"                String keyword \u003d userInput.substring(5).trim();","lastModifiedDate":"2024-03-07"},{"lineNumber":54,"author":{"gitId":"alvinnnnnnnnnn"},"content":"                return new SearchCommand(keyword);","lastModifiedDate":"2024-03-07"},{"lineNumber":55,"author":{"gitId":"alvinnnnnnnnnn"},"content":"            }","lastModifiedDate":"2024-03-07"},{"lineNumber":56,"author":{"gitId":"alvinnnnnnnnnn"},"content":"        }","lastModifiedDate":"2024-03-07"},{"lineNumber":57,"author":{"gitId":"alvinnnnnnnnnn"},"content":"        return null;","lastModifiedDate":"2024-03-07"},{"lineNumber":58,"author":{"gitId":"alvinnnnnnnnnn"},"content":"    }","lastModifiedDate":"2024-03-07"},{"lineNumber":59,"author":{"gitId":"alvinnnnnnnnnn"},"content":"}","lastModifiedDate":"2024-03-07"}],"authorContributionMap":{"alvinnnnnnnnnn":59}},{"path":"src/main/java/RemoveTaskCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"alvinnnnnnnnnn"},"content":"public class RemoveTaskCommand implements Command{","lastModifiedDate":"2024-03-07"},{"lineNumber":2,"author":{"gitId":"alvinnnnnnnnnn"},"content":"    private final int index;","lastModifiedDate":"2024-03-07"},{"lineNumber":3,"author":{"gitId":"alvinnnnnnnnnn"},"content":"","lastModifiedDate":"2024-03-07"},{"lineNumber":4,"author":{"gitId":"alvinnnnnnnnnn"},"content":"    public RemoveTaskCommand(int index) {","lastModifiedDate":"2024-03-07"},{"lineNumber":5,"author":{"gitId":"alvinnnnnnnnnn"},"content":"        this.index \u003d index;","lastModifiedDate":"2024-03-07"},{"lineNumber":6,"author":{"gitId":"alvinnnnnnnnnn"},"content":"    }","lastModifiedDate":"2024-03-07"},{"lineNumber":7,"author":{"gitId":"alvinnnnnnnnnn"},"content":"","lastModifiedDate":"2024-03-07"},{"lineNumber":8,"author":{"gitId":"alvinnnnnnnnnn"},"content":"    @Override","lastModifiedDate":"2024-03-07"},{"lineNumber":9,"author":{"gitId":"alvinnnnnnnnnn"},"content":"    public void execute(TaskList taskList) {","lastModifiedDate":"2024-03-07"},{"lineNumber":10,"author":{"gitId":"alvinnnnnnnnnn"},"content":"        Task currentTask \u003d taskList.getTask(index);","lastModifiedDate":"2024-03-07"},{"lineNumber":11,"author":{"gitId":"alvinnnnnnnnnn"},"content":"        taskList.removeTask(index);","lastModifiedDate":"2024-03-07"},{"lineNumber":12,"author":{"gitId":"alvinnnnnnnnnn"},"content":"        System.out.println(\"Noted. I\u0027ve removed this task:\\n\" + \" \" + currentTask +","lastModifiedDate":"2024-03-07"},{"lineNumber":13,"author":{"gitId":"alvinnnnnnnnnn"},"content":"                \"\\nNow you have \" + taskList.size() +\" tasks \" + \"in the list.\\n\");","lastModifiedDate":"2024-03-07"},{"lineNumber":14,"author":{"gitId":"alvinnnnnnnnnn"},"content":"    }","lastModifiedDate":"2024-03-07"},{"lineNumber":15,"author":{"gitId":"alvinnnnnnnnnn"},"content":"}","lastModifiedDate":"2024-03-07"},{"lineNumber":16,"author":{"gitId":"alvinnnnnnnnnn"},"content":"","lastModifiedDate":"2024-03-07"}],"authorContributionMap":{"alvinnnnnnnnnn":16}},{"path":"src/main/java/SearchCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"alvinnnnnnnnnn"},"content":"import java.util.List;","lastModifiedDate":"2024-03-07"},{"lineNumber":2,"author":{"gitId":"alvinnnnnnnnnn"},"content":"","lastModifiedDate":"2024-03-07"},{"lineNumber":3,"author":{"gitId":"alvinnnnnnnnnn"},"content":"public class SearchCommand implements Command {","lastModifiedDate":"2024-03-07"},{"lineNumber":4,"author":{"gitId":"alvinnnnnnnnnn"},"content":"    private final String keyword;","lastModifiedDate":"2024-03-07"},{"lineNumber":5,"author":{"gitId":"alvinnnnnnnnnn"},"content":"","lastModifiedDate":"2024-03-07"},{"lineNumber":6,"author":{"gitId":"alvinnnnnnnnnn"},"content":"    public SearchCommand(String keyword) {","lastModifiedDate":"2024-03-07"},{"lineNumber":7,"author":{"gitId":"alvinnnnnnnnnn"},"content":"        this.keyword \u003d keyword;","lastModifiedDate":"2024-03-07"},{"lineNumber":8,"author":{"gitId":"alvinnnnnnnnnn"},"content":"    }","lastModifiedDate":"2024-03-07"},{"lineNumber":9,"author":{"gitId":"alvinnnnnnnnnn"},"content":"","lastModifiedDate":"2024-03-07"},{"lineNumber":10,"author":{"gitId":"alvinnnnnnnnnn"},"content":"    @Override","lastModifiedDate":"2024-03-07"},{"lineNumber":11,"author":{"gitId":"alvinnnnnnnnnn"},"content":"    public void execute(TaskList taskList) {","lastModifiedDate":"2024-03-07"},{"lineNumber":12,"author":{"gitId":"alvinnnnnnnnnn"},"content":"        List\u003cTask\u003e foundTasks \u003d taskList.searchTasks(keyword);","lastModifiedDate":"2024-03-07"},{"lineNumber":13,"author":{"gitId":"alvinnnnnnnnnn"},"content":"        if (foundTasks.isEmpty()) {","lastModifiedDate":"2024-03-07"},{"lineNumber":14,"author":{"gitId":"alvinnnnnnnnnn"},"content":"            System.out.println(\"No tasks found for the keyword \\\"\" + keyword + \"\\\".\");","lastModifiedDate":"2024-03-07"},{"lineNumber":15,"author":{"gitId":"alvinnnnnnnnnn"},"content":"        } else {","lastModifiedDate":"2024-03-07"},{"lineNumber":16,"author":{"gitId":"alvinnnnnnnnnn"},"content":"            System.out.println(\"Found tasks matching \\\"\" + keyword + \"\\\":\");","lastModifiedDate":"2024-03-07"},{"lineNumber":17,"author":{"gitId":"alvinnnnnnnnnn"},"content":"            for (int i \u003d 0; i \u003c foundTasks.size(); i++) {","lastModifiedDate":"2024-03-07"},{"lineNumber":18,"author":{"gitId":"alvinnnnnnnnnn"},"content":"                System.out.println((i + 1) + \". \" + foundTasks.get(i));","lastModifiedDate":"2024-03-07"},{"lineNumber":19,"author":{"gitId":"alvinnnnnnnnnn"},"content":"            }","lastModifiedDate":"2024-03-07"},{"lineNumber":20,"author":{"gitId":"alvinnnnnnnnnn"},"content":"        }","lastModifiedDate":"2024-03-07"},{"lineNumber":21,"author":{"gitId":"alvinnnnnnnnnn"},"content":"    }","lastModifiedDate":"2024-03-07"},{"lineNumber":22,"author":{"gitId":"alvinnnnnnnnnn"},"content":"}","lastModifiedDate":"2024-03-07"},{"lineNumber":23,"author":{"gitId":"alvinnnnnnnnnn"},"content":"","lastModifiedDate":"2024-03-07"}],"authorContributionMap":{"alvinnnnnnnnnn":23}},{"path":"src/main/java/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"alvinnnnnnnnnn"},"content":"import java.io.*;","lastModifiedDate":"2024-03-07"},{"lineNumber":2,"author":{"gitId":"alvinnnnnnnnnn"},"content":"import java.util.Scanner;","lastModifiedDate":"2024-03-04"},{"lineNumber":3,"author":{"gitId":"alvinnnnnnnnnn"},"content":"import java.io.FileWriter;","lastModifiedDate":"2024-03-07"},{"lineNumber":4,"author":{"gitId":"alvinnnnnnnnnn"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":5,"author":{"gitId":"alvinnnnnnnnnn"},"content":"/* public class Storage {","lastModifiedDate":"2024-03-07"},{"lineNumber":6,"author":{"gitId":"alvinnnnnnnnnn"},"content":"    public static final String FILE_PATH \u003d \"data/wongster.txt\";","lastModifiedDate":"2024-03-07"},{"lineNumber":7,"author":{"gitId":"alvinnnnnnnnnn"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":8,"author":{"gitId":"alvinnnnnnnnnn"},"content":"    public static void createFile() throws IOException {","lastModifiedDate":"2024-03-07"},{"lineNumber":9,"author":{"gitId":"alvinnnnnnnnnn"},"content":"        File folder \u003d new File(\"data\");","lastModifiedDate":"2024-03-04"},{"lineNumber":10,"author":{"gitId":"alvinnnnnnnnnn"},"content":"        folder.mkdir();","lastModifiedDate":"2024-03-04"},{"lineNumber":11,"author":{"gitId":"alvinnnnnnnnnn"},"content":"        File file \u003d new File(FILE_PATH);","lastModifiedDate":"2024-03-04"},{"lineNumber":12,"author":{"gitId":"alvinnnnnnnnnn"},"content":"        file.createNewFile();","lastModifiedDate":"2024-03-04"},{"lineNumber":13,"author":{"gitId":"alvinnnnnnnnnn"},"content":"    }","lastModifiedDate":"2024-03-04"},{"lineNumber":14,"author":{"gitId":"alvinnnnnnnnnn"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":15,"author":{"gitId":"alvinnnnnnnnnn"},"content":"    public static void loadTasks(ArrayList\u003cTask\u003e userList) throws IOException {","lastModifiedDate":"2024-03-07"},{"lineNumber":16,"author":{"gitId":"alvinnnnnnnnnn"},"content":"            // Attempt to read data from the file","lastModifiedDate":"2024-03-07"},{"lineNumber":17,"author":{"gitId":"alvinnnnnnnnnn"},"content":"            Scanner s \u003d new Scanner(FILE_PATH);","lastModifiedDate":"2024-03-07"},{"lineNumber":18,"author":{"gitId":"alvinnnnnnnnnn"},"content":"            // Process each line of the file and add tasks to the list","lastModifiedDate":"2024-03-07"},{"lineNumber":19,"author":{"gitId":"alvinnnnnnnnnn"},"content":"            while (s.hasNextLine()) {","lastModifiedDate":"2024-03-07"},{"lineNumber":20,"author":{"gitId":"alvinnnnnnnnnn"},"content":"                String line  \u003d s.nextLine();","lastModifiedDate":"2024-03-07"},{"lineNumber":21,"author":{"gitId":"alvinnnnnnnnnn"},"content":"                    String by \u003d text.substring(text.indexOf(\"by:\") + 3, text.length() - 1).trim();","lastModifiedDate":"2024-03-07"},{"lineNumber":22,"author":{"gitId":"alvinnnnnnnnnn"},"content":"                    String description \u003d text.substring(0, text.indexOf(\"(by:\")).trim();","lastModifiedDate":"2024-03-07"},{"lineNumber":23,"author":{"gitId":"alvinnnnnnnnnn"},"content":"","lastModifiedDate":"2024-03-07"},{"lineNumber":24,"author":{"gitId":"alvinnnnnnnnnn"},"content":"                    Deadline newTask \u003d new Deadline(description, by);","lastModifiedDate":"2024-03-07"},{"lineNumber":25,"author":{"gitId":"alvinnnnnnnnnn"},"content":"                    newTask.isDone \u003d isDone;","lastModifiedDate":"2024-03-07"},{"lineNumber":26,"author":{"gitId":"alvinnnnnnnnnn"},"content":"                    userList.add(newTask);","lastModifiedDate":"2024-03-07"},{"lineNumber":27,"author":{"gitId":"alvinnnnnnnnnn"},"content":"                } else if (task.startsWith(\"[E]\")) {","lastModifiedDate":"2024-03-07"},{"lineNumber":28,"author":{"gitId":"alvinnnnnnnnnn"},"content":"                    String to \u003d text.substring(text.indexOf(\"to:\") + 3, text.length() - 1).trim();","lastModifiedDate":"2024-03-07"},{"lineNumber":29,"author":{"gitId":"alvinnnnnnnnnn"},"content":"                    String from \u003d text.substring(text.indexOf(\"from:\") + 5, text.indexOf(\"to:\")).trim();","lastModifiedDate":"2024-03-07"},{"lineNumber":30,"author":{"gitId":"alvinnnnnnnnnn"},"content":"                    String description \u003d text.substring(0, text.indexOf(\"(from:\")).trim();","lastModifiedDate":"2024-03-07"},{"lineNumber":31,"author":{"gitId":"alvinnnnnnnnnn"},"content":"","lastModifiedDate":"2024-03-07"},{"lineNumber":32,"author":{"gitId":"alvinnnnnnnnnn"},"content":"                    Event newTask \u003d new Event(description, from, to);","lastModifiedDate":"2024-03-07"},{"lineNumber":33,"author":{"gitId":"alvinnnnnnnnnn"},"content":"                    newTask.isDone \u003d isDone;","lastModifiedDate":"2024-03-07"},{"lineNumber":34,"author":{"gitId":"alvinnnnnnnnnn"},"content":"                    userList.add(newTask);","lastModifiedDate":"2024-03-07"},{"lineNumber":35,"author":{"gitId":"alvinnnnnnnnnn"},"content":"                }","lastModifiedDate":"2024-03-07"},{"lineNumber":36,"author":{"gitId":"alvinnnnnnnnnn"},"content":"","lastModifiedDate":"2024-03-07"},{"lineNumber":37,"author":{"gitId":"alvinnnnnnnnnn"},"content":"            }","lastModifiedDate":"2024-03-07"},{"lineNumber":38,"author":{"gitId":"alvinnnnnnnnnn"},"content":"            s.close();","lastModifiedDate":"2024-03-07"},{"lineNumber":39,"author":{"gitId":"alvinnnnnnnnnn"},"content":"","lastModifiedDate":"2024-03-07"},{"lineNumber":40,"author":{"gitId":"alvinnnnnnnnnn"},"content":"    }","lastModifiedDate":"2024-03-07"},{"lineNumber":41,"author":{"gitId":"alvinnnnnnnnnn"},"content":"","lastModifiedDate":"2024-03-07"},{"lineNumber":42,"author":{"gitId":"alvinnnnnnnnnn"},"content":"    public static void saveTasks(ArrayList\u003cTask\u003e userList) throws IOException {","lastModifiedDate":"2024-03-07"},{"lineNumber":43,"author":{"gitId":"alvinnnnnnnnnn"},"content":"","lastModifiedDate":"2024-03-07"},{"lineNumber":44,"author":{"gitId":"alvinnnnnnnnnn"},"content":"        try (FileWriter fileWriter \u003d new FileWriter(file)) {","lastModifiedDate":"2024-03-07"},{"lineNumber":45,"author":{"gitId":"alvinnnnnnnnnn"},"content":"            for (Task task : userList) {","lastModifiedDate":"2024-03-07"},{"lineNumber":46,"author":{"gitId":"alvinnnnnnnnnn"},"content":"                // Construct the string representation of the task manually","lastModifiedDate":"2024-03-07"},{"lineNumber":47,"author":{"gitId":"alvinnnnnnnnnn"},"content":"                String taskString \u003d \"\";  // Initialize an empty string","lastModifiedDate":"2024-03-07"},{"lineNumber":48,"author":{"gitId":"alvinnnnnnnnnn"},"content":"                // Use instanceof checks and specific logic for each Task type","lastModifiedDate":"2024-03-07"},{"lineNumber":49,"author":{"gitId":"alvinnnnnnnnnn"},"content":"                if (task instanceof ToDo) {","lastModifiedDate":"2024-03-07"},{"lineNumber":50,"author":{"gitId":"alvinnnnnnnnnn"},"content":"                    ToDo todo \u003d (ToDo) task;  // Cast to specific Task type","lastModifiedDate":"2024-03-07"},{"lineNumber":51,"author":{"gitId":"alvinnnnnnnnnn"},"content":"                    taskString \u003d \"[T]\" + (todo.isDone ? \"[X]\" : \"[ ]\") + todo.description;","lastModifiedDate":"2024-03-07"},{"lineNumber":52,"author":{"gitId":"alvinnnnnnnnnn"},"content":"                } else if (task instanceof Deadline) {","lastModifiedDate":"2024-03-07"},{"lineNumber":53,"author":{"gitId":"alvinnnnnnnnnn"},"content":"                    Deadline deadline \u003d (Deadline) task;","lastModifiedDate":"2024-03-07"},{"lineNumber":54,"author":{"gitId":"alvinnnnnnnnnn"},"content":"                    taskString \u003d \"[D]\" + (deadline.isDone ? \"[X]\" : \"[ ]\") + deadline.description + \" (by: \" + deadline.by + \")\";","lastModifiedDate":"2024-03-07"},{"lineNumber":55,"author":{"gitId":"alvinnnnnnnnnn"},"content":"                } else if (task instanceof Event) {","lastModifiedDate":"2024-03-07"},{"lineNumber":56,"author":{"gitId":"alvinnnnnnnnnn"},"content":"                    Event event \u003d (Event) task;","lastModifiedDate":"2024-03-07"},{"lineNumber":57,"author":{"gitId":"alvinnnnnnnnnn"},"content":"                    taskString \u003d \"[E]\" + (event.isDone ? \"[X]\" : \"[ ]\") + event.description + \" (from: \" + event.from + \", to: \" + event.to + \")\";","lastModifiedDate":"2024-03-07"},{"lineNumber":58,"author":{"gitId":"alvinnnnnnnnnn"},"content":"                }","lastModifiedDate":"2024-03-07"},{"lineNumber":59,"author":{"gitId":"alvinnnnnnnnnn"},"content":"                // Add a newline character","lastModifiedDate":"2024-03-07"},{"lineNumber":60,"author":{"gitId":"alvinnnnnnnnnn"},"content":"                taskString +\u003d System.lineSeparator();","lastModifiedDate":"2024-03-07"},{"lineNumber":61,"author":{"gitId":"alvinnnnnnnnnn"},"content":"                // Write the task string to the file","lastModifiedDate":"2024-03-07"},{"lineNumber":62,"author":{"gitId":"alvinnnnnnnnnn"},"content":"                fileWriter.write(taskString);","lastModifiedDate":"2024-03-07"},{"lineNumber":63,"author":{"gitId":"alvinnnnnnnnnn"},"content":"            }","lastModifiedDate":"2024-03-07"},{"lineNumber":64,"author":{"gitId":"alvinnnnnnnnnn"},"content":"        } catch (IOException e) {","lastModifiedDate":"2024-03-07"},{"lineNumber":65,"author":{"gitId":"alvinnnnnnnnnn"},"content":"            System.out.println(\"Error writing data to file: \" + e.getMessage());","lastModifiedDate":"2024-03-07"},{"lineNumber":66,"author":{"gitId":"alvinnnnnnnnnn"},"content":"        }","lastModifiedDate":"2024-03-07"},{"lineNumber":67,"author":{"gitId":"alvinnnnnnnnnn"},"content":"    }","lastModifiedDate":"2024-03-07"},{"lineNumber":68,"author":{"gitId":"alvinnnnnnnnnn"},"content":"","lastModifiedDate":"2024-03-07"},{"lineNumber":69,"author":{"gitId":"alvinnnnnnnnnn"},"content":"","lastModifiedDate":"2024-03-07"},{"lineNumber":70,"author":{"gitId":"alvinnnnnnnnnn"},"content":"","lastModifiedDate":"2024-03-07"},{"lineNumber":71,"author":{"gitId":"alvinnnnnnnnnn"},"content":"} */","lastModifiedDate":"2024-03-07"},{"lineNumber":72,"author":{"gitId":"alvinnnnnnnnnn"},"content":"public class Storage {","lastModifiedDate":"2024-03-07"},{"lineNumber":73,"author":{"gitId":"alvinnnnnnnnnn"},"content":"    public static final String FILE_PATH \u003d \"data/wongster.txt\";","lastModifiedDate":"2024-03-07"},{"lineNumber":74,"author":{"gitId":"alvinnnnnnnnnn"},"content":"","lastModifiedDate":"2024-03-07"},{"lineNumber":75,"author":{"gitId":"alvinnnnnnnnnn"},"content":"    public static void loadTasks(TaskList userList) throws IOException {","lastModifiedDate":"2024-03-07"},{"lineNumber":76,"author":{"gitId":"alvinnnnnnnnnn"},"content":"        File dataFolder \u003d new File(\"data\");","lastModifiedDate":"2024-03-07"},{"lineNumber":77,"author":{"gitId":"alvinnnnnnnnnn"},"content":"        File file \u003d new File(FILE_PATH);","lastModifiedDate":"2024-03-07"},{"lineNumber":78,"author":{"gitId":"alvinnnnnnnnnn"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":79,"author":{"gitId":"alvinnnnnnnnnn"},"content":"        // Check if \"data\" folder exists, create it if not","lastModifiedDate":"2024-03-07"},{"lineNumber":80,"author":{"gitId":"alvinnnnnnnnnn"},"content":"        if (!dataFolder.exists()) {","lastModifiedDate":"2024-03-07"},{"lineNumber":81,"author":{"gitId":"alvinnnnnnnnnn"},"content":"            System.out.println(\"Welcome new user!\");","lastModifiedDate":"2024-03-07"},{"lineNumber":82,"author":{"gitId":"alvinnnnnnnnnn"},"content":"            dataFolder.mkdir();","lastModifiedDate":"2024-03-07"},{"lineNumber":83,"author":{"gitId":"alvinnnnnnnnnn"},"content":"        }","lastModifiedDate":"2024-03-04"},{"lineNumber":84,"author":{"gitId":"alvinnnnnnnnnn"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":85,"author":{"gitId":"alvinnnnnnnnnn"},"content":"        // Check if the file exists and attempt to read tasks","lastModifiedDate":"2024-03-07"},{"lineNumber":86,"author":{"gitId":"alvinnnnnnnnnn"},"content":"        if (file.exists()) {","lastModifiedDate":"2024-03-07"},{"lineNumber":87,"author":{"gitId":"alvinnnnnnnnnn"},"content":"            try (Scanner scanner \u003d new Scanner(file)) {","lastModifiedDate":"2024-03-07"},{"lineNumber":88,"author":{"gitId":"alvinnnnnnnnnn"},"content":"                while (scanner.hasNextLine()) {","lastModifiedDate":"2024-03-07"},{"lineNumber":89,"author":{"gitId":"alvinnnnnnnnnn"},"content":"                    String taskLine \u003d scanner.nextLine();","lastModifiedDate":"2024-03-07"},{"lineNumber":90,"author":{"gitId":"alvinnnnnnnnnn"},"content":"                    if(taskLine.startsWith(\"[T]\")) {","lastModifiedDate":"2024-03-07"},{"lineNumber":91,"author":{"gitId":"alvinnnnnnnnnn"},"content":"                        String description \u003d taskLine.substring(7).trim();","lastModifiedDate":"2024-03-07"},{"lineNumber":92,"author":{"gitId":"alvinnnnnnnnnn"},"content":"                        Task task \u003d new ToDo(description);","lastModifiedDate":"2024-03-07"},{"lineNumber":93,"author":{"gitId":"alvinnnnnnnnnn"},"content":"                        userList.addTask(task);","lastModifiedDate":"2024-03-07"},{"lineNumber":94,"author":{"gitId":"alvinnnnnnnnnn"},"content":"                    } else if (taskLine.startsWith(\"[D]\")) {","lastModifiedDate":"2024-03-07"},{"lineNumber":95,"author":{"gitId":"alvinnnnnnnnnn"},"content":"                        String[] parts \u003d taskLine.substring(7).split(\"\\\\(by:\");","lastModifiedDate":"2024-03-07"},{"lineNumber":96,"author":{"gitId":"alvinnnnnnnnnn"},"content":"                        String description \u003d parts[0].trim();","lastModifiedDate":"2024-03-07"},{"lineNumber":97,"author":{"gitId":"alvinnnnnnnnnn"},"content":"                        String by \u003d parts[1].trim().substring(0, parts[1].length() - 2);","lastModifiedDate":"2024-03-07"},{"lineNumber":98,"author":{"gitId":"alvinnnnnnnnnn"},"content":"                        Task task \u003d new Deadline(description,by);","lastModifiedDate":"2024-03-07"},{"lineNumber":99,"author":{"gitId":"alvinnnnnnnnnn"},"content":"                        userList.addTask(task);","lastModifiedDate":"2024-03-07"},{"lineNumber":100,"author":{"gitId":"alvinnnnnnnnnn"},"content":"                    } else if (taskLine.startsWith(\"[E]\")) {","lastModifiedDate":"2024-03-07"},{"lineNumber":101,"author":{"gitId":"alvinnnnnnnnnn"},"content":"                        String[] parts \u003d taskLine.substring(7).split(\"\\\\(from:\");","lastModifiedDate":"2024-03-07"},{"lineNumber":102,"author":{"gitId":"alvinnnnnnnnnn"},"content":"                        String description \u003d parts[0].trim();","lastModifiedDate":"2024-03-07"},{"lineNumber":103,"author":{"gitId":"alvinnnnnnnnnn"},"content":"                        String[] remainingParts \u003d parts[1].split(\"to:\");","lastModifiedDate":"2024-03-07"},{"lineNumber":104,"author":{"gitId":"alvinnnnnnnnnn"},"content":"                        String from \u003d remainingParts[0].trim();","lastModifiedDate":"2024-03-07"},{"lineNumber":105,"author":{"gitId":"alvinnnnnnnnnn"},"content":"                        String to \u003d remainingParts[1].trim().substring(0, remainingParts[1].length() - 2);","lastModifiedDate":"2024-03-07"},{"lineNumber":106,"author":{"gitId":"alvinnnnnnnnnn"},"content":"                        Task task \u003d new Event(description,from,to);","lastModifiedDate":"2024-03-07"},{"lineNumber":107,"author":{"gitId":"alvinnnnnnnnnn"},"content":"                        userList.addTask(task);","lastModifiedDate":"2024-03-07"},{"lineNumber":108,"author":{"gitId":"alvinnnnnnnnnn"},"content":"                    }","lastModifiedDate":"2024-03-07"},{"lineNumber":109,"author":{"gitId":"alvinnnnnnnnnn"},"content":"                }","lastModifiedDate":"2024-03-07"},{"lineNumber":110,"author":{"gitId":"alvinnnnnnnnnn"},"content":"            } catch (FileNotFoundException e) {","lastModifiedDate":"2024-03-07"},{"lineNumber":111,"author":{"gitId":"alvinnnnnnnnnn"},"content":"                // Shouldn\u0027t happen as we checked file existence before","lastModifiedDate":"2024-03-07"},{"lineNumber":112,"author":{"gitId":"alvinnnnnnnnnn"},"content":"                System.err.println(\"Unexpected error: File not found even after existence check.\");","lastModifiedDate":"2024-03-07"},{"lineNumber":113,"author":{"gitId":"alvinnnnnnnnnn"},"content":"            }","lastModifiedDate":"2024-03-07"},{"lineNumber":114,"author":{"gitId":"alvinnnnnnnnnn"},"content":"        }","lastModifiedDate":"2024-03-07"},{"lineNumber":115,"author":{"gitId":"alvinnnnnnnnnn"},"content":"    }","lastModifiedDate":"2024-03-07"},{"lineNumber":116,"author":{"gitId":"alvinnnnnnnnnn"},"content":"","lastModifiedDate":"2024-03-07"},{"lineNumber":117,"author":{"gitId":"alvinnnnnnnnnn"},"content":"    public static void saveTasks(TaskList userList) throws IOException {","lastModifiedDate":"2024-03-07"},{"lineNumber":118,"author":{"gitId":"alvinnnnnnnnnn"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":119,"author":{"gitId":"alvinnnnnnnnnn"},"content":"        // Use FileWriter with append\u003dtrue for appending mode","lastModifiedDate":"2024-03-07"},{"lineNumber":120,"author":{"gitId":"alvinnnnnnnnnn"},"content":"        FileWriter fileWriter \u003d new FileWriter(FILE_PATH);","lastModifiedDate":"2024-03-04"},{"lineNumber":121,"author":{"gitId":"alvinnnnnnnnnn"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":122,"author":{"gitId":"alvinnnnnnnnnn"},"content":"        for (int i \u003d 0; i \u003c userList.size(); i++) {","lastModifiedDate":"2024-03-07"},{"lineNumber":123,"author":{"gitId":"alvinnnnnnnnnn"},"content":"            fileWriter.write(userList.getTask(i).toFileString() + System.lineSeparator());","lastModifiedDate":"2024-03-07"},{"lineNumber":124,"author":{"gitId":"alvinnnnnnnnnn"},"content":"        }","lastModifiedDate":"2024-03-04"},{"lineNumber":125,"author":{"gitId":"alvinnnnnnnnnn"},"content":"","lastModifiedDate":"2024-03-07"},{"lineNumber":126,"author":{"gitId":"alvinnnnnnnnnn"},"content":"        fileWriter.close();","lastModifiedDate":"2024-03-04"},{"lineNumber":127,"author":{"gitId":"alvinnnnnnnnnn"},"content":"    }","lastModifiedDate":"2024-03-04"},{"lineNumber":128,"author":{"gitId":"alvinnnnnnnnnn"},"content":"","lastModifiedDate":"2024-03-07"},{"lineNumber":129,"author":{"gitId":"alvinnnnnnnnnn"},"content":"}","lastModifiedDate":"2024-03-04"}],"authorContributionMap":{"alvinnnnnnnnnn":129}},{"path":"src/main/java/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"alvinnnnnnnnnn"},"content":"/**","lastModifiedDate":"2024-03-07"},{"lineNumber":2,"author":{"gitId":"alvinnnnnnnnnn"},"content":" * This abstract class represents a generic task in the task list.","lastModifiedDate":"2024-03-07"},{"lineNumber":3,"author":{"gitId":"alvinnnnnnnnnn"},"content":" * It provides basic functionalities such as setting the description,","lastModifiedDate":"2024-03-07"},{"lineNumber":4,"author":{"gitId":"alvinnnnnnnnnn"},"content":" * marking/unmarking the task as completed, and retrieving the status icon.","lastModifiedDate":"2024-03-07"},{"lineNumber":5,"author":{"gitId":"alvinnnnnnnnnn"},"content":" *","lastModifiedDate":"2024-03-07"},{"lineNumber":6,"author":{"gitId":"alvinnnnnnnnnn"},"content":" * Subclasses like `ToDo`, `Deadline`, and `Event` implement specific","lastModifiedDate":"2024-03-07"},{"lineNumber":7,"author":{"gitId":"alvinnnnnnnnnn"},"content":" * functionalities for different task types.","lastModifiedDate":"2024-03-07"},{"lineNumber":8,"author":{"gitId":"alvinnnnnnnnnn"},"content":" */","lastModifiedDate":"2024-03-07"},{"lineNumber":9,"author":{"gitId":"alvinnnnnnnnnn"},"content":"public abstract class Task {","lastModifiedDate":"2024-03-07"},{"lineNumber":10,"author":{"gitId":"alvinnnnnnnnnn"},"content":"    protected String description;","lastModifiedDate":"2024-02-09"},{"lineNumber":11,"author":{"gitId":"alvinnnnnnnnnn"},"content":"    protected boolean isDone;","lastModifiedDate":"2024-02-09"},{"lineNumber":12,"author":{"gitId":"alvinnnnnnnnnn"},"content":"    protected boolean isEmpty;","lastModifiedDate":"2024-03-04"},{"lineNumber":13,"author":{"gitId":"alvinnnnnnnnnn"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":14,"author":{"gitId":"alvinnnnnnnnnn"},"content":"    /**","lastModifiedDate":"2024-03-07"},{"lineNumber":15,"author":{"gitId":"alvinnnnnnnnnn"},"content":"     * Constructor for the Task class.","lastModifiedDate":"2024-03-07"},{"lineNumber":16,"author":{"gitId":"alvinnnnnnnnnn"},"content":"     *","lastModifiedDate":"2024-03-07"},{"lineNumber":17,"author":{"gitId":"alvinnnnnnnnnn"},"content":"     * @param description the description of the task","lastModifiedDate":"2024-03-07"},{"lineNumber":18,"author":{"gitId":"alvinnnnnnnnnn"},"content":"     */","lastModifiedDate":"2024-03-07"},{"lineNumber":19,"author":{"gitId":"alvinnnnnnnnnn"},"content":"    public Task(String description) {","lastModifiedDate":"2024-02-09"},{"lineNumber":20,"author":{"gitId":"alvinnnnnnnnnn"},"content":"        this.description \u003d description;","lastModifiedDate":"2024-02-09"},{"lineNumber":21,"author":{"gitId":"alvinnnnnnnnnn"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2024-02-09"},{"lineNumber":22,"author":{"gitId":"alvinnnnnnnnnn"},"content":"        this.isEmpty \u003d description.trim().isEmpty();","lastModifiedDate":"2024-03-07"},{"lineNumber":23,"author":{"gitId":"alvinnnnnnnnnn"},"content":"    }","lastModifiedDate":"2024-02-09"},{"lineNumber":24,"author":{"gitId":"alvinnnnnnnnnn"},"content":"","lastModifiedDate":"2024-03-07"},{"lineNumber":25,"author":{"gitId":"alvinnnnnnnnnn"},"content":"    /**","lastModifiedDate":"2024-03-07"},{"lineNumber":26,"author":{"gitId":"alvinnnnnnnnnn"},"content":"     * Returns the status icon of the task, \"[X]\" for completed and \"[ ]\" for not completed.","lastModifiedDate":"2024-03-07"},{"lineNumber":27,"author":{"gitId":"alvinnnnnnnnnn"},"content":"     *","lastModifiedDate":"2024-03-07"},{"lineNumber":28,"author":{"gitId":"alvinnnnnnnnnn"},"content":"     * @return the status icon string","lastModifiedDate":"2024-03-07"},{"lineNumber":29,"author":{"gitId":"alvinnnnnnnnnn"},"content":"     */","lastModifiedDate":"2024-03-07"},{"lineNumber":30,"author":{"gitId":"alvinnnnnnnnnn"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2024-02-09"},{"lineNumber":31,"author":{"gitId":"alvinnnnnnnnnn"},"content":"        return (isDone ? \"[X]\" : \"[ ]\");","lastModifiedDate":"2024-02-09"},{"lineNumber":32,"author":{"gitId":"alvinnnnnnnnnn"},"content":"    }","lastModifiedDate":"2024-02-09"},{"lineNumber":33,"author":{"gitId":"alvinnnnnnnnnn"},"content":"","lastModifiedDate":"2024-02-09"},{"lineNumber":34,"author":{"gitId":"alvinnnnnnnnnn"},"content":"    /**","lastModifiedDate":"2024-03-07"},{"lineNumber":35,"author":{"gitId":"alvinnnnnnnnnn"},"content":"     * Marks the task as completed by setting the `isDone` flag to true.","lastModifiedDate":"2024-03-07"},{"lineNumber":36,"author":{"gitId":"alvinnnnnnnnnn"},"content":"     */","lastModifiedDate":"2024-03-07"},{"lineNumber":37,"author":{"gitId":"alvinnnnnnnnnn"},"content":"    public void markList() {","lastModifiedDate":"2024-02-09"},{"lineNumber":38,"author":{"gitId":"alvinnnnnnnnnn"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2024-02-09"},{"lineNumber":39,"author":{"gitId":"alvinnnnnnnnnn"},"content":"    }","lastModifiedDate":"2024-02-09"},{"lineNumber":40,"author":{"gitId":"alvinnnnnnnnnn"},"content":"","lastModifiedDate":"2024-02-09"},{"lineNumber":41,"author":{"gitId":"alvinnnnnnnnnn"},"content":"    /**","lastModifiedDate":"2024-03-07"},{"lineNumber":42,"author":{"gitId":"alvinnnnnnnnnn"},"content":"     * Unmarks the task as completed by setting the `isDone` flag to false.","lastModifiedDate":"2024-03-07"},{"lineNumber":43,"author":{"gitId":"alvinnnnnnnnnn"},"content":"     */","lastModifiedDate":"2024-03-07"},{"lineNumber":44,"author":{"gitId":"alvinnnnnnnnnn"},"content":"    public void unmarkList() {","lastModifiedDate":"2024-02-09"},{"lineNumber":45,"author":{"gitId":"alvinnnnnnnnnn"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2024-02-09"},{"lineNumber":46,"author":{"gitId":"alvinnnnnnnnnn"},"content":"    }","lastModifiedDate":"2024-02-09"},{"lineNumber":47,"author":{"gitId":"alvinnnnnnnnnn"},"content":"","lastModifiedDate":"2024-02-09"},{"lineNumber":48,"author":{"gitId":"alvinnnnnnnnnn"},"content":"    /**","lastModifiedDate":"2024-03-07"},{"lineNumber":49,"author":{"gitId":"alvinnnnnnnnnn"},"content":"     * Gets the description of the task.","lastModifiedDate":"2024-03-07"},{"lineNumber":50,"author":{"gitId":"alvinnnnnnnnnn"},"content":"     *","lastModifiedDate":"2024-03-07"},{"lineNumber":51,"author":{"gitId":"alvinnnnnnnnnn"},"content":"     * @return the description of the task","lastModifiedDate":"2024-03-07"},{"lineNumber":52,"author":{"gitId":"alvinnnnnnnnnn"},"content":"     */","lastModifiedDate":"2024-03-07"},{"lineNumber":53,"author":{"gitId":"alvinnnnnnnnnn"},"content":"    public String getDescription() {","lastModifiedDate":"2024-02-09"},{"lineNumber":54,"author":{"gitId":"alvinnnnnnnnnn"},"content":"        return description;","lastModifiedDate":"2024-02-09"},{"lineNumber":55,"author":{"gitId":"alvinnnnnnnnnn"},"content":"    }","lastModifiedDate":"2024-02-09"},{"lineNumber":56,"author":{"gitId":"alvinnnnnnnnnn"},"content":"","lastModifiedDate":"2024-03-07"},{"lineNumber":57,"author":{"gitId":"alvinnnnnnnnnn"},"content":"    /**","lastModifiedDate":"2024-03-07"},{"lineNumber":58,"author":{"gitId":"alvinnnnnnnnnn"},"content":"     * Abstract method to convert the task to a string representation suitable for storing in a file.","lastModifiedDate":"2024-03-07"},{"lineNumber":59,"author":{"gitId":"alvinnnnnnnnnn"},"content":"     * Subclasses should implement this method to provide their specific format.","lastModifiedDate":"2024-03-07"},{"lineNumber":60,"author":{"gitId":"alvinnnnnnnnnn"},"content":"     *","lastModifiedDate":"2024-03-07"},{"lineNumber":61,"author":{"gitId":"alvinnnnnnnnnn"},"content":"     * @return the string representation of the task for file storage","lastModifiedDate":"2024-03-07"},{"lineNumber":62,"author":{"gitId":"alvinnnnnnnnnn"},"content":"     */","lastModifiedDate":"2024-03-07"},{"lineNumber":63,"author":{"gitId":"alvinnnnnnnnnn"},"content":"    public abstract String toFileString();","lastModifiedDate":"2024-03-07"},{"lineNumber":64,"author":{"gitId":"alvinnnnnnnnnn"},"content":"}","lastModifiedDate":"2024-02-09"}],"authorContributionMap":{"alvinnnnnnnnnn":64}},{"path":"src/main/java/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"alvinnnnnnnnnn"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-03-07"},{"lineNumber":2,"author":{"gitId":"alvinnnnnnnnnn"},"content":"import java.util.List;","lastModifiedDate":"2024-03-07"},{"lineNumber":3,"author":{"gitId":"alvinnnnnnnnnn"},"content":"","lastModifiedDate":"2024-03-07"},{"lineNumber":4,"author":{"gitId":"alvinnnnnnnnnn"},"content":"/**","lastModifiedDate":"2024-03-07"},{"lineNumber":5,"author":{"gitId":"alvinnnnnnnnnn"},"content":" * This class represents a list of tasks. It provides methods to add, remove,","lastModifiedDate":"2024-03-07"},{"lineNumber":6,"author":{"gitId":"alvinnnnnnnnnn"},"content":" * access, and search for tasks.","lastModifiedDate":"2024-03-07"},{"lineNumber":7,"author":{"gitId":"alvinnnnnnnnnn"},"content":" */","lastModifiedDate":"2024-03-07"},{"lineNumber":8,"author":{"gitId":"alvinnnnnnnnnn"},"content":"public class TaskList {","lastModifiedDate":"2024-03-07"},{"lineNumber":9,"author":{"gitId":"alvinnnnnnnnnn"},"content":"","lastModifiedDate":"2024-03-07"},{"lineNumber":10,"author":{"gitId":"alvinnnnnnnnnn"},"content":"    private final ArrayList\u003cTask\u003e tasks;","lastModifiedDate":"2024-03-07"},{"lineNumber":11,"author":{"gitId":"alvinnnnnnnnnn"},"content":"","lastModifiedDate":"2024-03-07"},{"lineNumber":12,"author":{"gitId":"alvinnnnnnnnnn"},"content":"    /**","lastModifiedDate":"2024-03-07"},{"lineNumber":13,"author":{"gitId":"alvinnnnnnnnnn"},"content":"     * Constructor for the TaskList class. Initializes an empty ArrayList for tasks.","lastModifiedDate":"2024-03-07"},{"lineNumber":14,"author":{"gitId":"alvinnnnnnnnnn"},"content":"     */","lastModifiedDate":"2024-03-07"},{"lineNumber":15,"author":{"gitId":"alvinnnnnnnnnn"},"content":"    public TaskList() {","lastModifiedDate":"2024-03-07"},{"lineNumber":16,"author":{"gitId":"alvinnnnnnnnnn"},"content":"        this.tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-03-07"},{"lineNumber":17,"author":{"gitId":"alvinnnnnnnnnn"},"content":"    }","lastModifiedDate":"2024-03-07"},{"lineNumber":18,"author":{"gitId":"alvinnnnnnnnnn"},"content":"","lastModifiedDate":"2024-03-07"},{"lineNumber":19,"author":{"gitId":"alvinnnnnnnnnn"},"content":"    /**","lastModifiedDate":"2024-03-07"},{"lineNumber":20,"author":{"gitId":"alvinnnnnnnnnn"},"content":"     * Adds a new task to the end of the task list.","lastModifiedDate":"2024-03-07"},{"lineNumber":21,"author":{"gitId":"alvinnnnnnnnnn"},"content":"     *","lastModifiedDate":"2024-03-07"},{"lineNumber":22,"author":{"gitId":"alvinnnnnnnnnn"},"content":"     * @param task the Task object to be added","lastModifiedDate":"2024-03-07"},{"lineNumber":23,"author":{"gitId":"alvinnnnnnnnnn"},"content":"     */","lastModifiedDate":"2024-03-07"},{"lineNumber":24,"author":{"gitId":"alvinnnnnnnnnn"},"content":"    public void addTask(Task task) {","lastModifiedDate":"2024-03-07"},{"lineNumber":25,"author":{"gitId":"alvinnnnnnnnnn"},"content":"        tasks.add(task);","lastModifiedDate":"2024-03-07"},{"lineNumber":26,"author":{"gitId":"alvinnnnnnnnnn"},"content":"    }","lastModifiedDate":"2024-03-07"},{"lineNumber":27,"author":{"gitId":"alvinnnnnnnnnn"},"content":"","lastModifiedDate":"2024-03-07"},{"lineNumber":28,"author":{"gitId":"alvinnnnnnnnnn"},"content":"    /**","lastModifiedDate":"2024-03-07"},{"lineNumber":29,"author":{"gitId":"alvinnnnnnnnnn"},"content":"     * Gets the task at the specified index from the task list.","lastModifiedDate":"2024-03-07"},{"lineNumber":30,"author":{"gitId":"alvinnnnnnnnnn"},"content":"     *","lastModifiedDate":"2024-03-07"},{"lineNumber":31,"author":{"gitId":"alvinnnnnnnnnn"},"content":"     * @param index the index of the task to be retrieved","lastModifiedDate":"2024-03-07"},{"lineNumber":32,"author":{"gitId":"alvinnnnnnnnnn"},"content":"     * @return the Task object at the specified index","lastModifiedDate":"2024-03-07"},{"lineNumber":33,"author":{"gitId":"alvinnnnnnnnnn"},"content":"     * @throws IndexOutOfBoundsException if the index is out of bounds","lastModifiedDate":"2024-03-07"},{"lineNumber":34,"author":{"gitId":"alvinnnnnnnnnn"},"content":"     */","lastModifiedDate":"2024-03-07"},{"lineNumber":35,"author":{"gitId":"alvinnnnnnnnnn"},"content":"    public Task getTask(int index) {","lastModifiedDate":"2024-03-07"},{"lineNumber":36,"author":{"gitId":"alvinnnnnnnnnn"},"content":"        return tasks.get(index);","lastModifiedDate":"2024-03-07"},{"lineNumber":37,"author":{"gitId":"alvinnnnnnnnnn"},"content":"    }","lastModifiedDate":"2024-03-07"},{"lineNumber":38,"author":{"gitId":"alvinnnnnnnnnn"},"content":"","lastModifiedDate":"2024-03-07"},{"lineNumber":39,"author":{"gitId":"alvinnnnnnnnnn"},"content":"    /**","lastModifiedDate":"2024-03-07"},{"lineNumber":40,"author":{"gitId":"alvinnnnnnnnnn"},"content":"     * Returns the number of tasks in the list.","lastModifiedDate":"2024-03-07"},{"lineNumber":41,"author":{"gitId":"alvinnnnnnnnnn"},"content":"     *","lastModifiedDate":"2024-03-07"},{"lineNumber":42,"author":{"gitId":"alvinnnnnnnnnn"},"content":"     * @return the size of the task list","lastModifiedDate":"2024-03-07"},{"lineNumber":43,"author":{"gitId":"alvinnnnnnnnnn"},"content":"     */","lastModifiedDate":"2024-03-07"},{"lineNumber":44,"author":{"gitId":"alvinnnnnnnnnn"},"content":"    public int size() {","lastModifiedDate":"2024-03-07"},{"lineNumber":45,"author":{"gitId":"alvinnnnnnnnnn"},"content":"        return tasks.size();","lastModifiedDate":"2024-03-07"},{"lineNumber":46,"author":{"gitId":"alvinnnnnnnnnn"},"content":"    }","lastModifiedDate":"2024-03-07"},{"lineNumber":47,"author":{"gitId":"alvinnnnnnnnnn"},"content":"","lastModifiedDate":"2024-03-07"},{"lineNumber":48,"author":{"gitId":"alvinnnnnnnnnn"},"content":"    /**","lastModifiedDate":"2024-03-07"},{"lineNumber":49,"author":{"gitId":"alvinnnnnnnnnn"},"content":"     * Removes the task at the specified index from the task list.","lastModifiedDate":"2024-03-07"},{"lineNumber":50,"author":{"gitId":"alvinnnnnnnnnn"},"content":"     *","lastModifiedDate":"2024-03-07"},{"lineNumber":51,"author":{"gitId":"alvinnnnnnnnnn"},"content":"     * @param index the index of the task to be removed","lastModifiedDate":"2024-03-07"},{"lineNumber":52,"author":{"gitId":"alvinnnnnnnnnn"},"content":"     * @throws IndexOutOfBoundsException if the index is out of bounds","lastModifiedDate":"2024-03-07"},{"lineNumber":53,"author":{"gitId":"alvinnnnnnnnnn"},"content":"     */","lastModifiedDate":"2024-03-07"},{"lineNumber":54,"author":{"gitId":"alvinnnnnnnnnn"},"content":"    public void removeTask(int index) {","lastModifiedDate":"2024-03-07"},{"lineNumber":55,"author":{"gitId":"alvinnnnnnnnnn"},"content":"        tasks.remove(index);","lastModifiedDate":"2024-03-07"},{"lineNumber":56,"author":{"gitId":"alvinnnnnnnnnn"},"content":"    }","lastModifiedDate":"2024-03-07"},{"lineNumber":57,"author":{"gitId":"alvinnnnnnnnnn"},"content":"","lastModifiedDate":"2024-03-07"},{"lineNumber":58,"author":{"gitId":"alvinnnnnnnnnn"},"content":"    /**","lastModifiedDate":"2024-03-07"},{"lineNumber":59,"author":{"gitId":"alvinnnnnnnnnn"},"content":"     * Searches for tasks containing the specified keyword in their description","lastModifiedDate":"2024-03-07"},{"lineNumber":60,"author":{"gitId":"alvinnnnnnnnnn"},"content":"     * (case-insensitive) and returns a list of matching tasks.","lastModifiedDate":"2024-03-07"},{"lineNumber":61,"author":{"gitId":"alvinnnnnnnnnn"},"content":"     *","lastModifiedDate":"2024-03-07"},{"lineNumber":62,"author":{"gitId":"alvinnnnnnnnnn"},"content":"     * @param keyword the keyword to search for","lastModifiedDate":"2024-03-07"},{"lineNumber":63,"author":{"gitId":"alvinnnnnnnnnn"},"content":"     * @return a list of tasks containing the keyword in their description","lastModifiedDate":"2024-03-07"},{"lineNumber":64,"author":{"gitId":"alvinnnnnnnnnn"},"content":"     */","lastModifiedDate":"2024-03-07"},{"lineNumber":65,"author":{"gitId":"alvinnnnnnnnnn"},"content":"    public List\u003cTask\u003e searchTasks(String keyword) {","lastModifiedDate":"2024-03-07"},{"lineNumber":66,"author":{"gitId":"alvinnnnnnnnnn"},"content":"        List\u003cTask\u003e foundTasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-03-07"},{"lineNumber":67,"author":{"gitId":"alvinnnnnnnnnn"},"content":"        for (Task task : tasks) {","lastModifiedDate":"2024-03-07"},{"lineNumber":68,"author":{"gitId":"alvinnnnnnnnnn"},"content":"            // Implement search logic to check for keyword in task description and other relevant fields","lastModifiedDate":"2024-03-07"},{"lineNumber":69,"author":{"gitId":"alvinnnnnnnnnn"},"content":"            if (task.getDescription().toLowerCase().contains(keyword.toLowerCase())) {","lastModifiedDate":"2024-03-07"},{"lineNumber":70,"author":{"gitId":"alvinnnnnnnnnn"},"content":"                foundTasks.add(task);","lastModifiedDate":"2024-03-07"},{"lineNumber":71,"author":{"gitId":"alvinnnnnnnnnn"},"content":"            }","lastModifiedDate":"2024-03-07"},{"lineNumber":72,"author":{"gitId":"alvinnnnnnnnnn"},"content":"        }","lastModifiedDate":"2024-03-07"},{"lineNumber":73,"author":{"gitId":"alvinnnnnnnnnn"},"content":"        return foundTasks;","lastModifiedDate":"2024-03-07"},{"lineNumber":74,"author":{"gitId":"alvinnnnnnnnnn"},"content":"    }","lastModifiedDate":"2024-03-07"},{"lineNumber":75,"author":{"gitId":"alvinnnnnnnnnn"},"content":"}","lastModifiedDate":"2024-03-07"}],"authorContributionMap":{"alvinnnnnnnnnn":75}},{"path":"src/main/java/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"alvinnnnnnnnnn"},"content":"/**","lastModifiedDate":"2024-03-07"},{"lineNumber":2,"author":{"gitId":"alvinnnnnnnnnn"},"content":" * This class represents a simple to-do task without any specific deadline or time frame.","lastModifiedDate":"2024-03-07"},{"lineNumber":3,"author":{"gitId":"alvinnnnnnnnnn"},"content":" * It inherits from the `Task` class and does not add any additional fields.","lastModifiedDate":"2024-03-07"},{"lineNumber":4,"author":{"gitId":"alvinnnnnnnnnn"},"content":" */","lastModifiedDate":"2024-03-07"},{"lineNumber":5,"author":{"gitId":"alvinnnnnnnnnn"},"content":"public class ToDo extends Task {","lastModifiedDate":"2024-02-09"},{"lineNumber":6,"author":{"gitId":"alvinnnnnnnnnn"},"content":"","lastModifiedDate":"2024-03-07"},{"lineNumber":7,"author":{"gitId":"alvinnnnnnnnnn"},"content":"    /**","lastModifiedDate":"2024-03-07"},{"lineNumber":8,"author":{"gitId":"alvinnnnnnnnnn"},"content":"     * Constructor for the ToDo class.","lastModifiedDate":"2024-03-07"},{"lineNumber":9,"author":{"gitId":"alvinnnnnnnnnn"},"content":"     *","lastModifiedDate":"2024-03-07"},{"lineNumber":10,"author":{"gitId":"alvinnnnnnnnnn"},"content":"     * @param description the description of the task","lastModifiedDate":"2024-03-07"},{"lineNumber":11,"author":{"gitId":"alvinnnnnnnnnn"},"content":"     */","lastModifiedDate":"2024-03-07"},{"lineNumber":12,"author":{"gitId":"alvinnnnnnnnnn"},"content":"    public ToDo(String description) {","lastModifiedDate":"2024-02-09"},{"lineNumber":13,"author":{"gitId":"alvinnnnnnnnnn"},"content":"        super(description);","lastModifiedDate":"2024-02-09"},{"lineNumber":14,"author":{"gitId":"alvinnnnnnnnnn"},"content":"    }","lastModifiedDate":"2024-02-09"},{"lineNumber":15,"author":{"gitId":"alvinnnnnnnnnn"},"content":"","lastModifiedDate":"2024-03-07"},{"lineNumber":16,"author":{"gitId":"alvinnnnnnnnnn"},"content":"    /**","lastModifiedDate":"2024-03-07"},{"lineNumber":17,"author":{"gitId":"alvinnnnnnnnnn"},"content":"     * Overrides the `toString` method from the `Task` class to provide a specific","lastModifiedDate":"2024-03-07"},{"lineNumber":18,"author":{"gitId":"alvinnnnnnnnnn"},"content":"     * string representation for to-do tasks, with a simpler format.","lastModifiedDate":"2024-03-07"},{"lineNumber":19,"author":{"gitId":"alvinnnnnnnnnn"},"content":"     *","lastModifiedDate":"2024-03-07"},{"lineNumber":20,"author":{"gitId":"alvinnnnnnnnnn"},"content":"     * @return the string representation of the to-do task","lastModifiedDate":"2024-03-07"},{"lineNumber":21,"author":{"gitId":"alvinnnnnnnnnn"},"content":"     */","lastModifiedDate":"2024-03-07"},{"lineNumber":22,"author":{"gitId":"alvinnnnnnnnnn"},"content":"    @Override","lastModifiedDate":"2024-03-07"},{"lineNumber":23,"author":{"gitId":"alvinnnnnnnnnn"},"content":"    public String toString() {","lastModifiedDate":"2024-02-09"},{"lineNumber":24,"author":{"gitId":"alvinnnnnnnnnn"},"content":"        return \"[T]\" + super.getStatusIcon() + \" \" + super.getDescription();","lastModifiedDate":"2024-02-09"},{"lineNumber":25,"author":{"gitId":"alvinnnnnnnnnn"},"content":"    }","lastModifiedDate":"2024-02-09"},{"lineNumber":26,"author":{"gitId":"alvinnnnnnnnnn"},"content":"","lastModifiedDate":"2024-03-07"},{"lineNumber":27,"author":{"gitId":"alvinnnnnnnnnn"},"content":"    /**","lastModifiedDate":"2024-03-07"},{"lineNumber":28,"author":{"gitId":"alvinnnnnnnnnn"},"content":"     * Implements the `toFileString` method from the `Task` class to provide a string","lastModifiedDate":"2024-03-07"},{"lineNumber":29,"author":{"gitId":"alvinnnnnnnnnn"},"content":"     * representation suitable for storing the to-do task in a file.","lastModifiedDate":"2024-03-07"},{"lineNumber":30,"author":{"gitId":"alvinnnnnnnnnn"},"content":"     *","lastModifiedDate":"2024-03-07"},{"lineNumber":31,"author":{"gitId":"alvinnnnnnnnnn"},"content":"     * @return the string representation of the to-do task for file storage","lastModifiedDate":"2024-03-07"},{"lineNumber":32,"author":{"gitId":"alvinnnnnnnnnn"},"content":"     */","lastModifiedDate":"2024-03-07"},{"lineNumber":33,"author":{"gitId":"alvinnnnnnnnnn"},"content":"    @Override","lastModifiedDate":"2024-03-07"},{"lineNumber":34,"author":{"gitId":"alvinnnnnnnnnn"},"content":"    public String toFileString() {","lastModifiedDate":"2024-03-07"},{"lineNumber":35,"author":{"gitId":"alvinnnnnnnnnn"},"content":"        return \"[T]\" + super.getStatusIcon() + \" \" + super.getDescription();","lastModifiedDate":"2024-03-07"},{"lineNumber":36,"author":{"gitId":"alvinnnnnnnnnn"},"content":"    }","lastModifiedDate":"2024-03-07"},{"lineNumber":37,"author":{"gitId":"alvinnnnnnnnnn"},"content":"}","lastModifiedDate":"2024-02-09"}],"authorContributionMap":{"alvinnnnnnnnnn":37}},{"path":"src/main/java/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"alvinnnnnnnnnn"},"content":"import java.io.IOException;","lastModifiedDate":"2024-03-07"},{"lineNumber":2,"author":{"gitId":"alvinnnnnnnnnn"},"content":"import java.util.Scanner;","lastModifiedDate":"2024-03-07"},{"lineNumber":3,"author":{"gitId":"alvinnnnnnnnnn"},"content":"","lastModifiedDate":"2024-03-07"},{"lineNumber":4,"author":{"gitId":"alvinnnnnnnnnn"},"content":"/**","lastModifiedDate":"2024-03-07"},{"lineNumber":5,"author":{"gitId":"alvinnnnnnnnnn"},"content":" * This class represents the user interface (UI) for the task management application.","lastModifiedDate":"2024-03-07"},{"lineNumber":6,"author":{"gitId":"alvinnnnnnnnnn"},"content":" * It interacts with the user, takes input commands, and interacts with the `TaskList`","lastModifiedDate":"2024-03-07"},{"lineNumber":7,"author":{"gitId":"alvinnnnnnnnnn"},"content":" * to manage tasks.","lastModifiedDate":"2024-03-07"},{"lineNumber":8,"author":{"gitId":"alvinnnnnnnnnn"},"content":" */","lastModifiedDate":"2024-03-07"},{"lineNumber":9,"author":{"gitId":"alvinnnnnnnnnn"},"content":"public class Ui {","lastModifiedDate":"2024-03-07"},{"lineNumber":10,"author":{"gitId":"alvinnnnnnnnnn"},"content":"","lastModifiedDate":"2024-03-07"},{"lineNumber":11,"author":{"gitId":"alvinnnnnnnnnn"},"content":"    private final Scanner scanner;","lastModifiedDate":"2024-03-07"},{"lineNumber":12,"author":{"gitId":"alvinnnnnnnnnn"},"content":"","lastModifiedDate":"2024-03-07"},{"lineNumber":13,"author":{"gitId":"alvinnnnnnnnnn"},"content":"    private final TaskList taskList;","lastModifiedDate":"2024-03-07"},{"lineNumber":14,"author":{"gitId":"alvinnnnnnnnnn"},"content":"","lastModifiedDate":"2024-03-07"},{"lineNumber":15,"author":{"gitId":"alvinnnnnnnnnn"},"content":"    /**","lastModifiedDate":"2024-03-07"},{"lineNumber":16,"author":{"gitId":"alvinnnnnnnnnn"},"content":"     * Constructor for the Ui class.","lastModifiedDate":"2024-03-07"},{"lineNumber":17,"author":{"gitId":"alvinnnnnnnnnn"},"content":"     *","lastModifiedDate":"2024-03-07"},{"lineNumber":18,"author":{"gitId":"alvinnnnnnnnnn"},"content":"     * @param taskList the TaskList object to be used by the UI","lastModifiedDate":"2024-03-07"},{"lineNumber":19,"author":{"gitId":"alvinnnnnnnnnn"},"content":"     */","lastModifiedDate":"2024-03-07"},{"lineNumber":20,"author":{"gitId":"alvinnnnnnnnnn"},"content":"    public Ui(TaskList taskList) {","lastModifiedDate":"2024-03-07"},{"lineNumber":21,"author":{"gitId":"alvinnnnnnnnnn"},"content":"        this.scanner \u003d new Scanner(System.in);","lastModifiedDate":"2024-03-07"},{"lineNumber":22,"author":{"gitId":"alvinnnnnnnnnn"},"content":"        this.taskList \u003d taskList;","lastModifiedDate":"2024-03-07"},{"lineNumber":23,"author":{"gitId":"alvinnnnnnnnnn"},"content":"    }","lastModifiedDate":"2024-03-07"},{"lineNumber":24,"author":{"gitId":"alvinnnnnnnnnn"},"content":"","lastModifiedDate":"2024-03-07"},{"lineNumber":25,"author":{"gitId":"alvinnnnnnnnnn"},"content":"    /**","lastModifiedDate":"2024-03-07"},{"lineNumber":26,"author":{"gitId":"alvinnnnnnnnnn"},"content":"     * Starts the user interface loop, continuously prompting the user for commands","lastModifiedDate":"2024-03-07"},{"lineNumber":27,"author":{"gitId":"alvinnnnnnnnnn"},"content":"     * until the user enters \"bye\" to exit.","lastModifiedDate":"2024-03-07"},{"lineNumber":28,"author":{"gitId":"alvinnnnnnnnnn"},"content":"     */","lastModifiedDate":"2024-03-07"},{"lineNumber":29,"author":{"gitId":"alvinnnnnnnnnn"},"content":"    public void start() {","lastModifiedDate":"2024-03-07"},{"lineNumber":30,"author":{"gitId":"alvinnnnnnnnnn"},"content":"        System.out.println(\"Hello! I\u0027m Wongster\\nWhat can I do for you?\\n\");","lastModifiedDate":"2024-03-07"},{"lineNumber":31,"author":{"gitId":"alvinnnnnnnnnn"},"content":"","lastModifiedDate":"2024-03-07"},{"lineNumber":32,"author":{"gitId":"alvinnnnnnnnnn"},"content":"        try {","lastModifiedDate":"2024-03-07"},{"lineNumber":33,"author":{"gitId":"alvinnnnnnnnnn"},"content":"            Storage.loadTasks(taskList); // Load tasks from file (optional)","lastModifiedDate":"2024-03-07"},{"lineNumber":34,"author":{"gitId":"alvinnnnnnnnnn"},"content":"        } catch (IOException e) {","lastModifiedDate":"2024-03-07"},{"lineNumber":35,"author":{"gitId":"alvinnnnnnnnnn"},"content":"            System.out.println(\"ERROR OCCURRED during loading tasks.\");","lastModifiedDate":"2024-03-07"},{"lineNumber":36,"author":{"gitId":"alvinnnnnnnnnn"},"content":"        }","lastModifiedDate":"2024-03-07"},{"lineNumber":37,"author":{"gitId":"alvinnnnnnnnnn"},"content":"","lastModifiedDate":"2024-03-07"},{"lineNumber":38,"author":{"gitId":"alvinnnnnnnnnn"},"content":"        while (true) {","lastModifiedDate":"2024-03-07"},{"lineNumber":39,"author":{"gitId":"alvinnnnnnnnnn"},"content":"            String userInput \u003d scanner.nextLine();","lastModifiedDate":"2024-03-07"},{"lineNumber":40,"author":{"gitId":"alvinnnnnnnnnn"},"content":"            handleCommand(userInput);","lastModifiedDate":"2024-03-07"},{"lineNumber":41,"author":{"gitId":"alvinnnnnnnnnn"},"content":"","lastModifiedDate":"2024-03-07"},{"lineNumber":42,"author":{"gitId":"alvinnnnnnnnnn"},"content":"            if (userInput.equalsIgnoreCase(\"bye\")) {","lastModifiedDate":"2024-03-07"},{"lineNumber":43,"author":{"gitId":"alvinnnnnnnnnn"},"content":"                System.out.println(\"Bye. Hope to see you again soon!\");","lastModifiedDate":"2024-03-07"},{"lineNumber":44,"author":{"gitId":"alvinnnnnnnnnn"},"content":"                try {","lastModifiedDate":"2024-03-07"},{"lineNumber":45,"author":{"gitId":"alvinnnnnnnnnn"},"content":"                    Storage.saveTasks(taskList); // Save tasks to file (optional)","lastModifiedDate":"2024-03-07"},{"lineNumber":46,"author":{"gitId":"alvinnnnnnnnnn"},"content":"                } catch (IOException e) {","lastModifiedDate":"2024-03-07"},{"lineNumber":47,"author":{"gitId":"alvinnnnnnnnnn"},"content":"                    System.out.println(\"ERROR SAVING FILE.\");","lastModifiedDate":"2024-03-07"},{"lineNumber":48,"author":{"gitId":"alvinnnnnnnnnn"},"content":"                }","lastModifiedDate":"2024-03-07"},{"lineNumber":49,"author":{"gitId":"alvinnnnnnnnnn"},"content":"                break;","lastModifiedDate":"2024-03-07"},{"lineNumber":50,"author":{"gitId":"alvinnnnnnnnnn"},"content":"            }","lastModifiedDate":"2024-03-07"},{"lineNumber":51,"author":{"gitId":"alvinnnnnnnnnn"},"content":"        }","lastModifiedDate":"2024-03-07"},{"lineNumber":52,"author":{"gitId":"alvinnnnnnnnnn"},"content":"","lastModifiedDate":"2024-03-07"},{"lineNumber":53,"author":{"gitId":"alvinnnnnnnnnn"},"content":"        scanner.close();","lastModifiedDate":"2024-03-07"},{"lineNumber":54,"author":{"gitId":"alvinnnnnnnnnn"},"content":"    }","lastModifiedDate":"2024-03-07"},{"lineNumber":55,"author":{"gitId":"alvinnnnnnnnnn"},"content":"","lastModifiedDate":"2024-03-07"},{"lineNumber":56,"author":{"gitId":"alvinnnnnnnnnn"},"content":"    private void handleCommand(String userInput) {","lastModifiedDate":"2024-03-07"},{"lineNumber":57,"author":{"gitId":"alvinnnnnnnnnn"},"content":"        Parser parser \u003d new Parser(userInput);","lastModifiedDate":"2024-03-07"},{"lineNumber":58,"author":{"gitId":"alvinnnnnnnnnn"},"content":"        Command command \u003d parser.parseCommand();","lastModifiedDate":"2024-03-07"},{"lineNumber":59,"author":{"gitId":"alvinnnnnnnnnn"},"content":"","lastModifiedDate":"2024-03-07"},{"lineNumber":60,"author":{"gitId":"alvinnnnnnnnnn"},"content":"        if (command !\u003d null) {","lastModifiedDate":"2024-03-07"},{"lineNumber":61,"author":{"gitId":"alvinnnnnnnnnn"},"content":"            command.execute(taskList);","lastModifiedDate":"2024-03-07"},{"lineNumber":62,"author":{"gitId":"alvinnnnnnnnnn"},"content":"        } else {","lastModifiedDate":"2024-03-07"},{"lineNumber":63,"author":{"gitId":"alvinnnnnnnnnn"},"content":"            if (!userInput.equalsIgnoreCase(\"bye\")) {","lastModifiedDate":"2024-03-07"},{"lineNumber":64,"author":{"gitId":"alvinnnnnnnnnn"},"content":"                System.out.println(\"Please input a proper task!\");","lastModifiedDate":"2024-03-07"},{"lineNumber":65,"author":{"gitId":"alvinnnnnnnnnn"},"content":"                System.out.println(\"Help: Tasks start with todo, deadline or event.\");","lastModifiedDate":"2024-03-07"},{"lineNumber":66,"author":{"gitId":"alvinnnnnnnnnn"},"content":"            }","lastModifiedDate":"2024-03-07"},{"lineNumber":67,"author":{"gitId":"alvinnnnnnnnnn"},"content":"        }","lastModifiedDate":"2024-03-07"},{"lineNumber":68,"author":{"gitId":"alvinnnnnnnnnn"},"content":"    }","lastModifiedDate":"2024-03-07"},{"lineNumber":69,"author":{"gitId":"alvinnnnnnnnnn"},"content":"}","lastModifiedDate":"2024-03-07"}],"authorContributionMap":{"alvinnnnnnnnnn":69}},{"path":"src/main/java/UnmarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"alvinnnnnnnnnn"},"content":"public class UnmarkCommand implements Command {","lastModifiedDate":"2024-03-07"},{"lineNumber":2,"author":{"gitId":"alvinnnnnnnnnn"},"content":"    private final int index;","lastModifiedDate":"2024-03-07"},{"lineNumber":3,"author":{"gitId":"alvinnnnnnnnnn"},"content":"","lastModifiedDate":"2024-03-07"},{"lineNumber":4,"author":{"gitId":"alvinnnnnnnnnn"},"content":"    public UnmarkCommand(int index) {","lastModifiedDate":"2024-03-07"},{"lineNumber":5,"author":{"gitId":"alvinnnnnnnnnn"},"content":"        this.index \u003d index;","lastModifiedDate":"2024-03-07"},{"lineNumber":6,"author":{"gitId":"alvinnnnnnnnnn"},"content":"    }","lastModifiedDate":"2024-03-07"},{"lineNumber":7,"author":{"gitId":"alvinnnnnnnnnn"},"content":"","lastModifiedDate":"2024-03-07"},{"lineNumber":8,"author":{"gitId":"alvinnnnnnnnnn"},"content":"    @Override","lastModifiedDate":"2024-03-07"},{"lineNumber":9,"author":{"gitId":"alvinnnnnnnnnn"},"content":"    public void execute(TaskList taskList) {","lastModifiedDate":"2024-03-07"},{"lineNumber":10,"author":{"gitId":"alvinnnnnnnnnn"},"content":"        taskList.getTask(index).unmarkList();","lastModifiedDate":"2024-03-07"},{"lineNumber":11,"author":{"gitId":"alvinnnnnnnnnn"},"content":"        System.out.println(\"OK, I\u0027ve marked this task as not done yet: \");","lastModifiedDate":"2024-03-07"},{"lineNumber":12,"author":{"gitId":"alvinnnnnnnnnn"},"content":"        System.out.println(taskList.getTask(index).getStatusIcon() + \" \" + taskList.getTask(index).getDescription());","lastModifiedDate":"2024-03-07"},{"lineNumber":13,"author":{"gitId":"alvinnnnnnnnnn"},"content":"    }","lastModifiedDate":"2024-03-07"},{"lineNumber":14,"author":{"gitId":"alvinnnnnnnnnn"},"content":"}","lastModifiedDate":"2024-03-07"},{"lineNumber":15,"author":{"gitId":"alvinnnnnnnnnn"},"content":"","lastModifiedDate":"2024-03-07"}],"authorContributionMap":{"alvinnnnnnnnnn":15}},{"path":"src/main/java/Wongster.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"alvinnnnnnnnnn"},"content":"import java.io.IOException;","lastModifiedDate":"2024-03-04"},{"lineNumber":2,"author":{"gitId":"alvinnnnnnnnnn"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":3,"author":{"gitId":"alvinnnnnnnnnn"},"content":"public class Wongster {","lastModifiedDate":"2024-02-06"},{"lineNumber":4,"author":{"gitId":"alvinnnnnnnnnn"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":5,"author":{"gitId":"alvinnnnnnnnnn"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2024-03-07"},{"lineNumber":6,"author":{"gitId":"alvinnnnnnnnnn"},"content":"        TaskList taskList \u003d new TaskList();","lastModifiedDate":"2024-03-07"},{"lineNumber":7,"author":{"gitId":"alvinnnnnnnnnn"},"content":"        Ui ui \u003d new Ui(taskList);","lastModifiedDate":"2024-03-07"},{"lineNumber":8,"author":{"gitId":"alvinnnnnnnnnn"},"content":"        ui.start();","lastModifiedDate":"2024-03-07"},{"lineNumber":9,"author":{"gitId":"alvinnnnnnnnnn"},"content":"    }","lastModifiedDate":"2024-01-30"},{"lineNumber":10,"author":{"gitId":"alvinnnnnnnnnn"},"content":"}","lastModifiedDate":"2024-01-30"}],"authorContributionMap":{"alvinnnnnnnnnn":10}}]
