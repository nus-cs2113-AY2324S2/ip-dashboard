[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"LWachtel1"},"content":"# chatman project template","lastModifiedDate":"2024-03-18"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it.","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2021-01-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`.","lastModifiedDate":"2021-01-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2021-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29"},{"lineNumber":16,"author":{"gitId":"LWachtel1"},"content":"3. After that, locate the `src/main/java/chatman.java` file, right-click it, and choose `Run chatman.main()` (if the code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something like the below as the output:","lastModifiedDate":"2024-03-18"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"   Hello from","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    ____        _        ","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ ","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"LWachtel1":2,"-":22}},{"path":"src/main/java/chatman/ChatMan.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LWachtel1"},"content":"package chatman;","lastModifiedDate":"2024-03-18"},{"lineNumber":2,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":3,"author":{"gitId":"LWachtel1"},"content":"import chatman.commands.GreetCommand;","lastModifiedDate":"2024-03-18"},{"lineNumber":4,"author":{"gitId":"LWachtel1"},"content":"import chatman.tasks.Task;","lastModifiedDate":"2024-03-18"},{"lineNumber":5,"author":{"gitId":"LWachtel1"},"content":"import chatman.utility.CommandReader;","lastModifiedDate":"2024-03-18"},{"lineNumber":6,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":7,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":8,"author":{"gitId":"LWachtel1"},"content":"import java.util.Scanner;","lastModifiedDate":"2024-02-09"},{"lineNumber":9,"author":{"gitId":"LWachtel1"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-02-10"},{"lineNumber":10,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-02-09"},{"lineNumber":11,"author":{"gitId":"LWachtel1"},"content":"/**","lastModifiedDate":"2024-03-18"},{"lineNumber":12,"author":{"gitId":"LWachtel1"},"content":" * Provides entry point for ChatMan.","lastModifiedDate":"2024-03-18"},{"lineNumber":13,"author":{"gitId":"LWachtel1"},"content":" *","lastModifiedDate":"2024-03-18"},{"lineNumber":14,"author":{"gitId":"LWachtel1"},"content":" * @author LWachtel1","lastModifiedDate":"2024-03-18"},{"lineNumber":15,"author":{"gitId":"LWachtel1"},"content":" * */","lastModifiedDate":"2024-03-18"},{"lineNumber":16,"author":{"gitId":"LWachtel1"},"content":"public class ChatMan {","lastModifiedDate":"2024-03-18"},{"lineNumber":17,"author":{"gitId":"LWachtel1"},"content":"    public static final int MAX_NUM_TASKS \u003d 100; //maximum number of tasks to be stored at once","lastModifiedDate":"2024-03-18"},{"lineNumber":18,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-02-10"},{"lineNumber":19,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":20,"author":{"gitId":"LWachtel1"},"content":"    private static ArrayList\u003cTask\u003e storedTasks \u003d new ArrayList\u003c\u003e(); //provides storage for task objects","lastModifiedDate":"2024-03-20"},{"lineNumber":21,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":22,"author":{"gitId":"LWachtel1"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":23,"author":{"gitId":"LWachtel1"},"content":"     * Provides access to current list of stored tasks by returning arraylist reference.","lastModifiedDate":"2024-03-20"},{"lineNumber":24,"author":{"gitId":"LWachtel1"},"content":"     *","lastModifiedDate":"2024-03-20"},{"lineNumber":25,"author":{"gitId":"LWachtel1"},"content":"     * @return Reference to arraylist containing currently stored tasks.","lastModifiedDate":"2024-03-20"},{"lineNumber":26,"author":{"gitId":"LWachtel1"},"content":"     **/","lastModifiedDate":"2024-03-20"},{"lineNumber":27,"author":{"gitId":"LWachtel1"},"content":"    public static ArrayList\u003cTask\u003e accessTasks() {","lastModifiedDate":"2024-03-20"},{"lineNumber":28,"author":{"gitId":"LWachtel1"},"content":"        return storedTasks;","lastModifiedDate":"2024-03-20"},{"lineNumber":29,"author":{"gitId":"LWachtel1"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":30,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":31,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-02-21"},{"lineNumber":32,"author":{"gitId":"LWachtel1"},"content":"    /**","lastModifiedDate":"2024-02-27"},{"lineNumber":33,"author":{"gitId":"LWachtel1"},"content":"     * Prints greeting for user upon initial program execution then instantiates CommandReader object and calls read","lastModifiedDate":"2024-03-18"},{"lineNumber":34,"author":{"gitId":"LWachtel1"},"content":"     * () to trigger ChatMan loop execution.","lastModifiedDate":"2024-03-18"},{"lineNumber":35,"author":{"gitId":"LWachtel1"},"content":"     **/","lastModifiedDate":"2024-03-18"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2019-07-29"},{"lineNumber":37,"author":{"gitId":"LWachtel1"},"content":"        GreetCommand hello\u003d new GreetCommand(\" \");","lastModifiedDate":"2024-03-18"},{"lineNumber":38,"author":{"gitId":"LWachtel1"},"content":"        hello.perform();","lastModifiedDate":"2024-03-18"},{"lineNumber":39,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":40,"author":{"gitId":"LWachtel1"},"content":"        CommandReader chatbot\u003d new CommandReader();","lastModifiedDate":"2024-03-18"},{"lineNumber":41,"author":{"gitId":"LWachtel1"},"content":"        chatbot.read();","lastModifiedDate":"2024-03-18"},{"lineNumber":42,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-02-02"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":44,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"LWachtel1":41,"-":3}},{"path":"src/main/java/chatman/commands/ByeCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LWachtel1"},"content":"package chatman.commands;","lastModifiedDate":"2024-03-18"},{"lineNumber":2,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":3,"author":{"gitId":"LWachtel1"},"content":"import chatman.exceptions.IncorrectArgumentNumException;","lastModifiedDate":"2024-03-20"},{"lineNumber":4,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":5,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":6,"author":{"gitId":"LWachtel1"},"content":"/**","lastModifiedDate":"2024-03-18"},{"lineNumber":7,"author":{"gitId":"LWachtel1"},"content":" * Implements functionality to enable ChatMan response to user-entered \"bye\" command.","lastModifiedDate":"2024-03-18"},{"lineNumber":8,"author":{"gitId":"LWachtel1"},"content":" *","lastModifiedDate":"2024-03-18"},{"lineNumber":9,"author":{"gitId":"LWachtel1"},"content":" * @author LWachtel1","lastModifiedDate":"2024-03-18"},{"lineNumber":10,"author":{"gitId":"LWachtel1"},"content":" * */","lastModifiedDate":"2024-03-18"},{"lineNumber":11,"author":{"gitId":"LWachtel1"},"content":"public class ByeCommand extends Command{","lastModifiedDate":"2024-03-18"},{"lineNumber":12,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":13,"author":{"gitId":"LWachtel1"},"content":"    /**","lastModifiedDate":"2024-03-18"},{"lineNumber":14,"author":{"gitId":"LWachtel1"},"content":"     * Constructor for ByeCommand; invokes superclass constructor.","lastModifiedDate":"2024-03-18"},{"lineNumber":15,"author":{"gitId":"LWachtel1"},"content":"     *","lastModifiedDate":"2024-03-18"},{"lineNumber":16,"author":{"gitId":"LWachtel1"},"content":"     * @param userCommand Receives and stores user-entered command (from CommandParser object) to use in perform()","lastModifiedDate":"2024-03-18"},{"lineNumber":17,"author":{"gitId":"LWachtel1"},"content":"     * method.","lastModifiedDate":"2024-03-18"},{"lineNumber":18,"author":{"gitId":"LWachtel1"},"content":"     * */","lastModifiedDate":"2024-03-18"},{"lineNumber":19,"author":{"gitId":"LWachtel1"},"content":"    public ByeCommand(String userCommand) {","lastModifiedDate":"2024-03-18"},{"lineNumber":20,"author":{"gitId":"LWachtel1"},"content":"        super(userCommand);","lastModifiedDate":"2024-03-18"},{"lineNumber":21,"author":{"gitId":"LWachtel1"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":22,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":23,"author":{"gitId":"LWachtel1"},"content":"    /**","lastModifiedDate":"2024-03-18"},{"lineNumber":24,"author":{"gitId":"LWachtel1"},"content":"     * Prints goodbye message for ChatMan user; called if they enter \"bye\" command with no arguments.","lastModifiedDate":"2024-03-18"},{"lineNumber":25,"author":{"gitId":"LWachtel1"},"content":"     *","lastModifiedDate":"2024-03-18"},{"lineNumber":26,"author":{"gitId":"LWachtel1"},"content":"     * @throws IncorrectArgumentNumException If \"bye\" command entered with any additional arguments.","lastModifiedDate":"2024-03-20"},{"lineNumber":27,"author":{"gitId":"LWachtel1"},"content":"     */","lastModifiedDate":"2024-03-18"},{"lineNumber":28,"author":{"gitId":"LWachtel1"},"content":"    @Override","lastModifiedDate":"2024-03-18"},{"lineNumber":29,"author":{"gitId":"LWachtel1"},"content":"    public void perform() throws IncorrectArgumentNumException {","lastModifiedDate":"2024-03-20"},{"lineNumber":30,"author":{"gitId":"LWachtel1"},"content":"        String[] fullCommand\u003d userCommand.split(\" \");","lastModifiedDate":"2024-03-18"},{"lineNumber":31,"author":{"gitId":"LWachtel1"},"content":"        if (fullCommand.length \u003e 1) {","lastModifiedDate":"2024-03-18"},{"lineNumber":32,"author":{"gitId":"LWachtel1"},"content":"            String erroneousInput\u003d userCommand.replaceAll(\"(?i)BYE\", \"\");","lastModifiedDate":"2024-03-20"},{"lineNumber":33,"author":{"gitId":"LWachtel1"},"content":"            throw new IncorrectArgumentNumException(\"BYE\", erroneousInput);","lastModifiedDate":"2024-03-20"},{"lineNumber":34,"author":{"gitId":"LWachtel1"},"content":"        }","lastModifiedDate":"2024-03-18"},{"lineNumber":35,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":36,"author":{"gitId":"LWachtel1"},"content":"        System.out.printf(\"%s%n\", \"____________________________________________________________\");","lastModifiedDate":"2024-03-18"},{"lineNumber":37,"author":{"gitId":"LWachtel1"},"content":"        System.out.printf(\"%s%n\", \"Bye. Hope to see you again soon!\");","lastModifiedDate":"2024-03-18"},{"lineNumber":38,"author":{"gitId":"LWachtel1"},"content":"        System.out.printf(\"%s%n\", \"____________________________________________________________\");","lastModifiedDate":"2024-03-18"},{"lineNumber":39,"author":{"gitId":"LWachtel1"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":40,"author":{"gitId":"LWachtel1"},"content":"}","lastModifiedDate":"2024-03-18"}],"authorContributionMap":{"LWachtel1":40}},{"path":"src/main/java/chatman/commands/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LWachtel1"},"content":"package chatman.commands;","lastModifiedDate":"2024-03-18"},{"lineNumber":2,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":3,"author":{"gitId":"LWachtel1"},"content":"import chatman.exceptions.*;","lastModifiedDate":"2024-03-20"},{"lineNumber":4,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":5,"author":{"gitId":"LWachtel1"},"content":"/**","lastModifiedDate":"2024-03-18"},{"lineNumber":6,"author":{"gitId":"LWachtel1"},"content":" * Implements Command abstract class as template for all Command-type classes.","lastModifiedDate":"2024-03-18"},{"lineNumber":7,"author":{"gitId":"LWachtel1"},"content":" *","lastModifiedDate":"2024-03-18"},{"lineNumber":8,"author":{"gitId":"LWachtel1"},"content":" * @author LWachtel1","lastModifiedDate":"2024-03-18"},{"lineNumber":9,"author":{"gitId":"LWachtel1"},"content":" * */","lastModifiedDate":"2024-03-18"},{"lineNumber":10,"author":{"gitId":"LWachtel1"},"content":"public abstract class Command {","lastModifiedDate":"2024-03-18"},{"lineNumber":11,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":12,"author":{"gitId":"LWachtel1"},"content":"    protected String userCommand;","lastModifiedDate":"2024-03-18"},{"lineNumber":13,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":14,"author":{"gitId":"LWachtel1"},"content":"    /**","lastModifiedDate":"2024-03-18"},{"lineNumber":15,"author":{"gitId":"LWachtel1"},"content":"     * Constructor for Command abstract class; invoked by its concrete subclasses using super() method call.","lastModifiedDate":"2024-03-18"},{"lineNumber":16,"author":{"gitId":"LWachtel1"},"content":"     *","lastModifiedDate":"2024-03-18"},{"lineNumber":17,"author":{"gitId":"LWachtel1"},"content":"     * @param userCommand Receives and stores user-entered command (from CommandParser object) to use in perform()","lastModifiedDate":"2024-03-18"},{"lineNumber":18,"author":{"gitId":"LWachtel1"},"content":"     * method where implemented.","lastModifiedDate":"2024-03-18"},{"lineNumber":19,"author":{"gitId":"LWachtel1"},"content":"     * */","lastModifiedDate":"2024-03-18"},{"lineNumber":20,"author":{"gitId":"LWachtel1"},"content":"    public Command(String userCommand) {","lastModifiedDate":"2024-03-18"},{"lineNumber":21,"author":{"gitId":"LWachtel1"},"content":"        this.userCommand \u003d userCommand;","lastModifiedDate":"2024-03-18"},{"lineNumber":22,"author":{"gitId":"LWachtel1"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":23,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":24,"author":{"gitId":"LWachtel1"},"content":"    /**","lastModifiedDate":"2024-03-18"},{"lineNumber":25,"author":{"gitId":"LWachtel1"},"content":"     * Executes intended action of corresponding user-entered command; abstract method to be implemented by concrete","lastModifiedDate":"2024-03-18"},{"lineNumber":26,"author":{"gitId":"LWachtel1"},"content":"     * subclasses.","lastModifiedDate":"2024-03-18"},{"lineNumber":27,"author":{"gitId":"LWachtel1"},"content":"     *","lastModifiedDate":"2024-03-18"},{"lineNumber":28,"author":{"gitId":"LWachtel1"},"content":"     * @throws FullListException If task arraylist size equals MAX_NUM_TASKS when attempting to add Todo, Deadline","lastModifiedDate":"2024-03-18"},{"lineNumber":29,"author":{"gitId":"LWachtel1"},"content":"     * or Event.","lastModifiedDate":"2024-03-18"},{"lineNumber":30,"author":{"gitId":"LWachtel1"},"content":"     * @throws IncorrectArgumentNumException If command is provided with incorrect number of arguments.","lastModifiedDate":"2024-03-20"},{"lineNumber":31,"author":{"gitId":"LWachtel1"},"content":"     * @throws IncorrectMarkUnmarkException If MarkUnmarkCommand provided with non-numerical index or with numerical","lastModifiedDate":"2024-03-18"},{"lineNumber":32,"author":{"gitId":"LWachtel1"},"content":"     * index beyond task arraylist size.","lastModifiedDate":"2024-03-18"},{"lineNumber":33,"author":{"gitId":"LWachtel1"},"content":"     * @throws EmptyListException If list of stored tasks is currently empty.","lastModifiedDate":"2024-03-20"},{"lineNumber":34,"author":{"gitId":"LWachtel1"},"content":"     * @throws IncorrectFormatException If command is entered without required formatting of arguments.","lastModifiedDate":"2024-03-20"},{"lineNumber":35,"author":{"gitId":"LWachtel1"},"content":"     * */","lastModifiedDate":"2024-03-18"},{"lineNumber":36,"author":{"gitId":"LWachtel1"},"content":"    public abstract void perform () throws IncorrectArgumentNumException, IncorrectMarkUnmarkException,","lastModifiedDate":"2024-03-20"},{"lineNumber":37,"author":{"gitId":"LWachtel1"},"content":"            FullListException, EmptyListException, IncorrectFormatException;","lastModifiedDate":"2024-03-20"},{"lineNumber":38,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":39,"author":{"gitId":"LWachtel1"},"content":"}","lastModifiedDate":"2024-03-18"}],"authorContributionMap":{"LWachtel1":39}},{"path":"src/main/java/chatman/commands/DeadlineCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LWachtel1"},"content":"package chatman.commands;","lastModifiedDate":"2024-03-18"},{"lineNumber":2,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":3,"author":{"gitId":"LWachtel1"},"content":"import chatman.ChatMan;","lastModifiedDate":"2024-03-18"},{"lineNumber":4,"author":{"gitId":"LWachtel1"},"content":"import chatman.exceptions.FullListException;","lastModifiedDate":"2024-03-18"},{"lineNumber":5,"author":{"gitId":"LWachtel1"},"content":"import chatman.exceptions.IncorrectArgumentNumException;","lastModifiedDate":"2024-03-18"},{"lineNumber":6,"author":{"gitId":"LWachtel1"},"content":"import chatman.exceptions.IncorrectFormatException;","lastModifiedDate":"2024-03-20"},{"lineNumber":7,"author":{"gitId":"LWachtel1"},"content":"import chatman.tasks.Deadline;","lastModifiedDate":"2024-03-18"},{"lineNumber":8,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":9,"author":{"gitId":"LWachtel1"},"content":"/**","lastModifiedDate":"2024-03-18"},{"lineNumber":10,"author":{"gitId":"LWachtel1"},"content":" * Implements functionality to enable ChatMan response to user-entered \"deadline DESCRIPTION /by  DEADLINE\" command.","lastModifiedDate":"2024-03-18"},{"lineNumber":11,"author":{"gitId":"LWachtel1"},"content":" *","lastModifiedDate":"2024-03-18"},{"lineNumber":12,"author":{"gitId":"LWachtel1"},"content":" * @author LWachtel1","lastModifiedDate":"2024-03-18"},{"lineNumber":13,"author":{"gitId":"LWachtel1"},"content":" * */","lastModifiedDate":"2024-03-18"},{"lineNumber":14,"author":{"gitId":"LWachtel1"},"content":"public class DeadlineCommand extends TaskCommand{","lastModifiedDate":"2024-03-18"},{"lineNumber":15,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":16,"author":{"gitId":"LWachtel1"},"content":"    /**","lastModifiedDate":"2024-03-18"},{"lineNumber":17,"author":{"gitId":"LWachtel1"},"content":"     * Constructor for DeadlineCommand; invokes superclass constructor.","lastModifiedDate":"2024-03-18"},{"lineNumber":18,"author":{"gitId":"LWachtel1"},"content":"     *","lastModifiedDate":"2024-03-18"},{"lineNumber":19,"author":{"gitId":"LWachtel1"},"content":"     * @param userCommand Receives and stores user-entered command (from CommandParser object) to use in perform()","lastModifiedDate":"2024-03-18"},{"lineNumber":20,"author":{"gitId":"LWachtel1"},"content":"     * method.","lastModifiedDate":"2024-03-18"},{"lineNumber":21,"author":{"gitId":"LWachtel1"},"content":"     * */","lastModifiedDate":"2024-03-18"},{"lineNumber":22,"author":{"gitId":"LWachtel1"},"content":"    public DeadlineCommand(String userCommand) {","lastModifiedDate":"2024-03-18"},{"lineNumber":23,"author":{"gitId":"LWachtel1"},"content":"        super(userCommand);","lastModifiedDate":"2024-03-18"},{"lineNumber":24,"author":{"gitId":"LWachtel1"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":25,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":26,"author":{"gitId":"LWachtel1"},"content":"    /**","lastModifiedDate":"2024-03-18"},{"lineNumber":27,"author":{"gitId":"LWachtel1"},"content":"     * Parses deadline command into its arguments, description and date-time Strings, then instantiates new Deadline","lastModifiedDate":"2024-03-18"},{"lineNumber":28,"author":{"gitId":"LWachtel1"},"content":"     * object and adds this to task arraylist.","lastModifiedDate":"2024-03-18"},{"lineNumber":29,"author":{"gitId":"LWachtel1"},"content":"     *","lastModifiedDate":"2024-03-18"},{"lineNumber":30,"author":{"gitId":"LWachtel1"},"content":"     * @throws FullListException If task arraylist size equals MAX_NUM_TASKS when attempting to add new Deadline object.","lastModifiedDate":"2024-03-18"},{"lineNumber":31,"author":{"gitId":"LWachtel1"},"content":"     * @throws IncorrectArgumentNumException If command provided with incorrect number of arguments.","lastModifiedDate":"2024-03-18"},{"lineNumber":32,"author":{"gitId":"LWachtel1"},"content":"     * @throws IncorrectFormatException If command is entered without required formatting of arguments.","lastModifiedDate":"2024-03-20"},{"lineNumber":33,"author":{"gitId":"LWachtel1"},"content":"     * */","lastModifiedDate":"2024-03-18"},{"lineNumber":34,"author":{"gitId":"LWachtel1"},"content":"    public void perform() throws FullListException, IncorrectArgumentNumException, IncorrectFormatException {","lastModifiedDate":"2024-03-20"},{"lineNumber":35,"author":{"gitId":"LWachtel1"},"content":"        String[] deadLineCommand \u003d userCommand.split(\"/\",2);","lastModifiedDate":"2024-03-20"},{"lineNumber":36,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":37,"author":{"gitId":"LWachtel1"},"content":"        if (deadLineCommand.length !\u003d 2) {","lastModifiedDate":"2024-03-18"},{"lineNumber":38,"author":{"gitId":"LWachtel1"},"content":"            throw new IncorrectArgumentNumException(\"DEADLINE\", userCommand);","lastModifiedDate":"2024-03-20"},{"lineNumber":39,"author":{"gitId":"LWachtel1"},"content":"        }","lastModifiedDate":"2024-03-18"},{"lineNumber":40,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":41,"author":{"gitId":"LWachtel1"},"content":"        //checks for any additional / which would mean unnecessary arguments","lastModifiedDate":"2024-03-20"},{"lineNumber":42,"author":{"gitId":"LWachtel1"},"content":"        int argumentCount \u003d 0;","lastModifiedDate":"2024-03-20"},{"lineNumber":43,"author":{"gitId":"LWachtel1"},"content":"        for (String argument: deadLineCommand) {","lastModifiedDate":"2024-03-20"},{"lineNumber":44,"author":{"gitId":"LWachtel1"},"content":"            //removes leading and trailing whitespace to prevent failure of \"by\" guard clause \u0026 date argument extraction","lastModifiedDate":"2024-03-20"},{"lineNumber":45,"author":{"gitId":"LWachtel1"},"content":"            deadLineCommand[argumentCount] \u003d deadLineCommand[argumentCount].trim();","lastModifiedDate":"2024-03-20"},{"lineNumber":46,"author":{"gitId":"LWachtel1"},"content":"            if (argument.contains(\"/\")) {","lastModifiedDate":"2024-03-20"},{"lineNumber":47,"author":{"gitId":"LWachtel1"},"content":"                throw new IncorrectArgumentNumException(\"DEADLINE\", argument);","lastModifiedDate":"2024-03-20"},{"lineNumber":48,"author":{"gitId":"LWachtel1"},"content":"            }","lastModifiedDate":"2024-03-20"},{"lineNumber":49,"author":{"gitId":"LWachtel1"},"content":"            argumentCount++;","lastModifiedDate":"2024-03-20"},{"lineNumber":50,"author":{"gitId":"LWachtel1"},"content":"        }","lastModifiedDate":"2024-03-20"},{"lineNumber":51,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":52,"author":{"gitId":"LWachtel1"},"content":"        if (!deadLineCommand[1].startsWith(\"by\")) {","lastModifiedDate":"2024-03-20"},{"lineNumber":53,"author":{"gitId":"LWachtel1"},"content":"            throw new IncorrectFormatException(\"DEADLINE\", deadLineCommand[1]);","lastModifiedDate":"2024-03-20"},{"lineNumber":54,"author":{"gitId":"LWachtel1"},"content":"        }","lastModifiedDate":"2024-03-20"},{"lineNumber":55,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":56,"author":{"gitId":"LWachtel1"},"content":"        if (ChatMan.accessTasks().size() \u003d\u003d ChatMan.MAX_NUM_TASKS) {","lastModifiedDate":"2024-03-20"},{"lineNumber":57,"author":{"gitId":"LWachtel1"},"content":"            throw new FullListException(\"DEADLINE\", userCommand);","lastModifiedDate":"2024-03-20"},{"lineNumber":58,"author":{"gitId":"LWachtel1"},"content":"        }","lastModifiedDate":"2024-03-18"},{"lineNumber":59,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":60,"author":{"gitId":"LWachtel1"},"content":"        String deadLineDesc \u003d deadLineCommand[0].replaceAll(\"(?i)DEADLINE\", \"\").trim();","lastModifiedDate":"2024-03-20"},{"lineNumber":61,"author":{"gitId":"LWachtel1"},"content":"        String by \u003d deadLineCommand[1].replaceAll(\"(?i)BY\", \"\").trim();","lastModifiedDate":"2024-03-20"},{"lineNumber":62,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":63,"author":{"gitId":"LWachtel1"},"content":"        if (deadLineDesc.isEmpty() || by.isEmpty()) {","lastModifiedDate":"2024-03-20"},{"lineNumber":64,"author":{"gitId":"LWachtel1"},"content":"            throw new IncorrectFormatException(\"DEADLINE\", userCommand);","lastModifiedDate":"2024-03-20"},{"lineNumber":65,"author":{"gitId":"LWachtel1"},"content":"        }","lastModifiedDate":"2024-03-20"},{"lineNumber":66,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":67,"author":{"gitId":"LWachtel1"},"content":"        ChatMan.accessTasks().add(new Deadline(deadLineDesc, by));","lastModifiedDate":"2024-03-20"},{"lineNumber":68,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":69,"author":{"gitId":"LWachtel1"},"content":"        super.replyAddedTask();","lastModifiedDate":"2024-03-18"},{"lineNumber":70,"author":{"gitId":"LWachtel1"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":71,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":72,"author":{"gitId":"LWachtel1"},"content":"}","lastModifiedDate":"2024-03-18"}],"authorContributionMap":{"LWachtel1":72}},{"path":"src/main/java/chatman/commands/EventCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LWachtel1"},"content":"package chatman.commands;","lastModifiedDate":"2024-03-18"},{"lineNumber":2,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":3,"author":{"gitId":"LWachtel1"},"content":"import chatman.ChatMan;","lastModifiedDate":"2024-03-18"},{"lineNumber":4,"author":{"gitId":"LWachtel1"},"content":"import chatman.exceptions.FullListException;","lastModifiedDate":"2024-03-18"},{"lineNumber":5,"author":{"gitId":"LWachtel1"},"content":"import chatman.exceptions.IncorrectArgumentNumException;","lastModifiedDate":"2024-03-18"},{"lineNumber":6,"author":{"gitId":"LWachtel1"},"content":"import chatman.exceptions.IncorrectFormatException;","lastModifiedDate":"2024-03-20"},{"lineNumber":7,"author":{"gitId":"LWachtel1"},"content":"import chatman.tasks.Event;","lastModifiedDate":"2024-03-18"},{"lineNumber":8,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":9,"author":{"gitId":"LWachtel1"},"content":"/**","lastModifiedDate":"2024-03-18"},{"lineNumber":10,"author":{"gitId":"LWachtel1"},"content":" * Implements functionality to enable ChatMan response to user-entered \"event DESCRIPTION /from  START /to END\" command.","lastModifiedDate":"2024-03-18"},{"lineNumber":11,"author":{"gitId":"LWachtel1"},"content":" *","lastModifiedDate":"2024-03-18"},{"lineNumber":12,"author":{"gitId":"LWachtel1"},"content":" * @author LWachtel1","lastModifiedDate":"2024-03-18"},{"lineNumber":13,"author":{"gitId":"LWachtel1"},"content":" * */","lastModifiedDate":"2024-03-18"},{"lineNumber":14,"author":{"gitId":"LWachtel1"},"content":"public class EventCommand extends TaskCommand {","lastModifiedDate":"2024-03-18"},{"lineNumber":15,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":16,"author":{"gitId":"LWachtel1"},"content":"    /**","lastModifiedDate":"2024-03-18"},{"lineNumber":17,"author":{"gitId":"LWachtel1"},"content":"     * Constructor for EventCommand; invokes superclass constructor.","lastModifiedDate":"2024-03-18"},{"lineNumber":18,"author":{"gitId":"LWachtel1"},"content":"     *","lastModifiedDate":"2024-03-18"},{"lineNumber":19,"author":{"gitId":"LWachtel1"},"content":"     * @param userCommand Receives and stores user-entered command (from CommandParser object) to use in perform()","lastModifiedDate":"2024-03-18"},{"lineNumber":20,"author":{"gitId":"LWachtel1"},"content":"     * method.","lastModifiedDate":"2024-03-18"},{"lineNumber":21,"author":{"gitId":"LWachtel1"},"content":"     * */","lastModifiedDate":"2024-03-18"},{"lineNumber":22,"author":{"gitId":"LWachtel1"},"content":"    public EventCommand(String userCommand) {","lastModifiedDate":"2024-03-18"},{"lineNumber":23,"author":{"gitId":"LWachtel1"},"content":"        super(userCommand);","lastModifiedDate":"2024-03-18"},{"lineNumber":24,"author":{"gitId":"LWachtel1"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":25,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":26,"author":{"gitId":"LWachtel1"},"content":"    /**","lastModifiedDate":"2024-03-18"},{"lineNumber":27,"author":{"gitId":"LWachtel1"},"content":"     * Parses event command into its arguments, description, from \u0026 to date-time Strings, then instantiates new Event","lastModifiedDate":"2024-03-18"},{"lineNumber":28,"author":{"gitId":"LWachtel1"},"content":"     * object and adds this to task arraylist.","lastModifiedDate":"2024-03-18"},{"lineNumber":29,"author":{"gitId":"LWachtel1"},"content":"     *","lastModifiedDate":"2024-03-18"},{"lineNumber":30,"author":{"gitId":"LWachtel1"},"content":"     * @throws FullListException If task arraylist size equals MAX_NUM_TASKS when attempting to add new Event object.","lastModifiedDate":"2024-03-18"},{"lineNumber":31,"author":{"gitId":"LWachtel1"},"content":"     * @throws IncorrectArgumentNumException If command provided with incorrect number of arguments.","lastModifiedDate":"2024-03-18"},{"lineNumber":32,"author":{"gitId":"LWachtel1"},"content":"     * @throws IncorrectFormatException If command is entered without required formatting of arguments.","lastModifiedDate":"2024-03-20"},{"lineNumber":33,"author":{"gitId":"LWachtel1"},"content":"     * */","lastModifiedDate":"2024-03-18"},{"lineNumber":34,"author":{"gitId":"LWachtel1"},"content":"    @Override","lastModifiedDate":"2024-03-18"},{"lineNumber":35,"author":{"gitId":"LWachtel1"},"content":"    public void perform() throws FullListException, IncorrectArgumentNumException, IncorrectFormatException {","lastModifiedDate":"2024-03-20"},{"lineNumber":36,"author":{"gitId":"LWachtel1"},"content":"        String[] eventCommand \u003d userCommand.split(\"/\",3);","lastModifiedDate":"2024-03-20"},{"lineNumber":37,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":38,"author":{"gitId":"LWachtel1"},"content":"        if (eventCommand.length !\u003d 3) {","lastModifiedDate":"2024-03-20"},{"lineNumber":39,"author":{"gitId":"LWachtel1"},"content":"            throw new IncorrectArgumentNumException(\"EVENT\", userCommand);","lastModifiedDate":"2024-03-20"},{"lineNumber":40,"author":{"gitId":"LWachtel1"},"content":"        }","lastModifiedDate":"2024-03-20"},{"lineNumber":41,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":42,"author":{"gitId":"LWachtel1"},"content":"        int argumentCount \u003d 0;","lastModifiedDate":"2024-03-20"},{"lineNumber":43,"author":{"gitId":"LWachtel1"},"content":"        for (String argument: eventCommand) {","lastModifiedDate":"2024-03-20"},{"lineNumber":44,"author":{"gitId":"LWachtel1"},"content":"            //removes leading and trailing whitespace to prevent failure of next guard clauses \u0026 date-times extraction","lastModifiedDate":"2024-03-20"},{"lineNumber":45,"author":{"gitId":"LWachtel1"},"content":"            eventCommand[argumentCount] \u003d eventCommand[argumentCount].trim();","lastModifiedDate":"2024-03-20"},{"lineNumber":46,"author":{"gitId":"LWachtel1"},"content":"            if (argument.contains(\"/\")) {","lastModifiedDate":"2024-03-20"},{"lineNumber":47,"author":{"gitId":"LWachtel1"},"content":"                throw new IncorrectArgumentNumException(\"EVENT\", argument);","lastModifiedDate":"2024-03-20"},{"lineNumber":48,"author":{"gitId":"LWachtel1"},"content":"            }","lastModifiedDate":"2024-03-20"},{"lineNumber":49,"author":{"gitId":"LWachtel1"},"content":"            argumentCount++;","lastModifiedDate":"2024-03-20"},{"lineNumber":50,"author":{"gitId":"LWachtel1"},"content":"        }","lastModifiedDate":"2024-03-20"},{"lineNumber":51,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":52,"author":{"gitId":"LWachtel1"},"content":"        if (!eventCommand[1].startsWith(\"from\")) {","lastModifiedDate":"2024-03-20"},{"lineNumber":53,"author":{"gitId":"LWachtel1"},"content":"            throw new IncorrectFormatException(\"EVENT\", eventCommand[1]);","lastModifiedDate":"2024-03-20"},{"lineNumber":54,"author":{"gitId":"LWachtel1"},"content":"        }","lastModifiedDate":"2024-03-20"},{"lineNumber":55,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":56,"author":{"gitId":"LWachtel1"},"content":"        if (!eventCommand[2].startsWith(\"to\")) {","lastModifiedDate":"2024-03-20"},{"lineNumber":57,"author":{"gitId":"LWachtel1"},"content":"            throw new IncorrectFormatException(\"EVENT\", eventCommand[2]);","lastModifiedDate":"2024-03-20"},{"lineNumber":58,"author":{"gitId":"LWachtel1"},"content":"        }","lastModifiedDate":"2024-03-20"},{"lineNumber":59,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":60,"author":{"gitId":"LWachtel1"},"content":"        if (ChatMan.accessTasks().size() \u003d\u003d ChatMan.MAX_NUM_TASKS) {","lastModifiedDate":"2024-03-20"},{"lineNumber":61,"author":{"gitId":"LWachtel1"},"content":"            throw new FullListException(\"EVENT\", userCommand);","lastModifiedDate":"2024-03-20"},{"lineNumber":62,"author":{"gitId":"LWachtel1"},"content":"        }","lastModifiedDate":"2024-03-18"},{"lineNumber":63,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":64,"author":{"gitId":"LWachtel1"},"content":"        String eventDesc \u003d eventCommand[0].replaceAll(\"(?i)EVENT\", \"\").trim();","lastModifiedDate":"2024-03-20"},{"lineNumber":65,"author":{"gitId":"LWachtel1"},"content":"        String from \u003d eventCommand[1].replaceAll(\"(?i)FROM\", \"\").trim();","lastModifiedDate":"2024-03-20"},{"lineNumber":66,"author":{"gitId":"LWachtel1"},"content":"        String to \u003d eventCommand[2].replaceAll(\"(?i)TO\", \"\").trim();","lastModifiedDate":"2024-03-20"},{"lineNumber":67,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":68,"author":{"gitId":"LWachtel1"},"content":"        if (eventDesc.isEmpty() || from.isEmpty() || to.isEmpty()) {","lastModifiedDate":"2024-03-20"},{"lineNumber":69,"author":{"gitId":"LWachtel1"},"content":"            throw new IncorrectFormatException(\"EVENT\", userCommand);","lastModifiedDate":"2024-03-20"},{"lineNumber":70,"author":{"gitId":"LWachtel1"},"content":"        }","lastModifiedDate":"2024-03-20"},{"lineNumber":71,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":72,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":73,"author":{"gitId":"LWachtel1"},"content":"        ChatMan.accessTasks().add(new Event(eventDesc, from, to));","lastModifiedDate":"2024-03-20"},{"lineNumber":74,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":75,"author":{"gitId":"LWachtel1"},"content":"        super.replyAddedTask();","lastModifiedDate":"2024-03-18"},{"lineNumber":76,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":77,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":78,"author":{"gitId":"LWachtel1"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":79,"author":{"gitId":"LWachtel1"},"content":"}","lastModifiedDate":"2024-03-18"}],"authorContributionMap":{"LWachtel1":79}},{"path":"src/main/java/chatman/commands/GreetCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LWachtel1"},"content":"package chatman.commands;","lastModifiedDate":"2024-03-18"},{"lineNumber":2,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":3,"author":{"gitId":"LWachtel1"},"content":"/**","lastModifiedDate":"2024-03-18"},{"lineNumber":4,"author":{"gitId":"LWachtel1"},"content":" * Implements initial ChatMan greeting when user runs program.","lastModifiedDate":"2024-03-18"},{"lineNumber":5,"author":{"gitId":"LWachtel1"},"content":" *","lastModifiedDate":"2024-03-18"},{"lineNumber":6,"author":{"gitId":"LWachtel1"},"content":" * @author LWachtel1","lastModifiedDate":"2024-03-18"},{"lineNumber":7,"author":{"gitId":"LWachtel1"},"content":" * */","lastModifiedDate":"2024-03-18"},{"lineNumber":8,"author":{"gitId":"LWachtel1"},"content":"public class GreetCommand extends Command {","lastModifiedDate":"2024-03-18"},{"lineNumber":9,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":10,"author":{"gitId":"LWachtel1"},"content":"    /**","lastModifiedDate":"2024-03-18"},{"lineNumber":11,"author":{"gitId":"LWachtel1"},"content":"     * Constructor for GreetCommand; invokes superclass constructor.","lastModifiedDate":"2024-03-18"},{"lineNumber":12,"author":{"gitId":"LWachtel1"},"content":"     *","lastModifiedDate":"2024-03-18"},{"lineNumber":13,"author":{"gitId":"LWachtel1"},"content":"     * @param userCommand String parameter required as result of being extended from Command abstract superclass.","lastModifiedDate":"2024-03-18"},{"lineNumber":14,"author":{"gitId":"LWachtel1"},"content":"     *","lastModifiedDate":"2024-03-18"},{"lineNumber":15,"author":{"gitId":"LWachtel1"},"content":"     * */","lastModifiedDate":"2024-03-18"},{"lineNumber":16,"author":{"gitId":"LWachtel1"},"content":"    public GreetCommand(String userCommand) {","lastModifiedDate":"2024-03-18"},{"lineNumber":17,"author":{"gitId":"LWachtel1"},"content":"        super(userCommand);","lastModifiedDate":"2024-03-18"},{"lineNumber":18,"author":{"gitId":"LWachtel1"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":19,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":20,"author":{"gitId":"LWachtel1"},"content":"    /**","lastModifiedDate":"2024-03-18"},{"lineNumber":21,"author":{"gitId":"LWachtel1"},"content":"     * Prints greeting for ChatMan user upon initial program execution; cannot be invoked by user-entered command","lastModifiedDate":"2024-03-18"},{"lineNumber":22,"author":{"gitId":"LWachtel1"},"content":"     * after this point.","lastModifiedDate":"2024-03-18"},{"lineNumber":23,"author":{"gitId":"LWachtel1"},"content":"     *","lastModifiedDate":"2024-03-18"},{"lineNumber":24,"author":{"gitId":"LWachtel1"},"content":"     */","lastModifiedDate":"2024-03-18"},{"lineNumber":25,"author":{"gitId":"LWachtel1"},"content":"    @Override","lastModifiedDate":"2024-03-18"},{"lineNumber":26,"author":{"gitId":"LWachtel1"},"content":"    public void perform() {","lastModifiedDate":"2024-03-18"},{"lineNumber":27,"author":{"gitId":"LWachtel1"},"content":"        System.out.printf(\"%s%n\", \"____________________________________________________________\");","lastModifiedDate":"2024-03-18"},{"lineNumber":28,"author":{"gitId":"LWachtel1"},"content":"        System.out.printf(\"%s%n\", \"Hello! I\u0027m CHAT-MAN\");","lastModifiedDate":"2024-03-18"},{"lineNumber":29,"author":{"gitId":"LWachtel1"},"content":"        System.out.printf(\"%s%n\", \"What can I do for you?\");","lastModifiedDate":"2024-03-18"},{"lineNumber":30,"author":{"gitId":"LWachtel1"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":31,"author":{"gitId":"LWachtel1"},"content":"}","lastModifiedDate":"2024-03-18"}],"authorContributionMap":{"LWachtel1":31}},{"path":"src/main/java/chatman/commands/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LWachtel1"},"content":"package chatman.commands;","lastModifiedDate":"2024-03-18"},{"lineNumber":2,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":3,"author":{"gitId":"LWachtel1"},"content":"import chatman.ChatMan;","lastModifiedDate":"2024-03-18"},{"lineNumber":4,"author":{"gitId":"LWachtel1"},"content":"import chatman.exceptions.EmptyListException;","lastModifiedDate":"2024-03-20"},{"lineNumber":5,"author":{"gitId":"LWachtel1"},"content":"import chatman.exceptions.IncorrectArgumentNumException;","lastModifiedDate":"2024-03-20"},{"lineNumber":6,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":7,"author":{"gitId":"LWachtel1"},"content":"/**","lastModifiedDate":"2024-03-18"},{"lineNumber":8,"author":{"gitId":"LWachtel1"},"content":" * Implements ChatMan\u0027s ability to list all currently stored tasks.","lastModifiedDate":"2024-03-18"},{"lineNumber":9,"author":{"gitId":"LWachtel1"},"content":" *","lastModifiedDate":"2024-03-18"},{"lineNumber":10,"author":{"gitId":"LWachtel1"},"content":" * @author LWachtel1","lastModifiedDate":"2024-03-18"},{"lineNumber":11,"author":{"gitId":"LWachtel1"},"content":" * */","lastModifiedDate":"2024-03-18"},{"lineNumber":12,"author":{"gitId":"LWachtel1"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2024-03-18"},{"lineNumber":13,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":14,"author":{"gitId":"LWachtel1"},"content":"    /**","lastModifiedDate":"2024-03-18"},{"lineNumber":15,"author":{"gitId":"LWachtel1"},"content":"     * Constructor for ListCommand; invokes superclass constructor.","lastModifiedDate":"2024-03-18"},{"lineNumber":16,"author":{"gitId":"LWachtel1"},"content":"     *","lastModifiedDate":"2024-03-18"},{"lineNumber":17,"author":{"gitId":"LWachtel1"},"content":"     * @param userCommand Receives and stores user-entered command (from CommandParser object) to use in perform()","lastModifiedDate":"2024-03-18"},{"lineNumber":18,"author":{"gitId":"LWachtel1"},"content":"     * method.","lastModifiedDate":"2024-03-18"},{"lineNumber":19,"author":{"gitId":"LWachtel1"},"content":"     * */","lastModifiedDate":"2024-03-18"},{"lineNumber":20,"author":{"gitId":"LWachtel1"},"content":"    public ListCommand(String userCommand) {","lastModifiedDate":"2024-03-18"},{"lineNumber":21,"author":{"gitId":"LWachtel1"},"content":"        super(userCommand);","lastModifiedDate":"2024-03-18"},{"lineNumber":22,"author":{"gitId":"LWachtel1"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":23,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":24,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":25,"author":{"gitId":"LWachtel1"},"content":"    /**","lastModifiedDate":"2024-03-18"},{"lineNumber":26,"author":{"gitId":"LWachtel1"},"content":"     * Prints String returned by object\u0027s respective toString() method call for each object in task arraylist.","lastModifiedDate":"2024-03-18"},{"lineNumber":27,"author":{"gitId":"LWachtel1"},"content":"     *","lastModifiedDate":"2024-03-18"},{"lineNumber":28,"author":{"gitId":"LWachtel1"},"content":"     * @throws IncorrectArgumentNumException If ListCommand object provided with any additional arguments.","lastModifiedDate":"2024-03-20"},{"lineNumber":29,"author":{"gitId":"LWachtel1"},"content":"     * @throws EmptyListException If list of stored tasks is currently empty.","lastModifiedDate":"2024-03-20"},{"lineNumber":30,"author":{"gitId":"LWachtel1"},"content":"     * */","lastModifiedDate":"2024-03-18"},{"lineNumber":31,"author":{"gitId":"LWachtel1"},"content":"    @Override","lastModifiedDate":"2024-03-18"},{"lineNumber":32,"author":{"gitId":"LWachtel1"},"content":"    public void perform() throws IncorrectArgumentNumException, EmptyListException {","lastModifiedDate":"2024-03-20"},{"lineNumber":33,"author":{"gitId":"LWachtel1"},"content":"        String[] fullCommand \u003d userCommand.split(\" \");","lastModifiedDate":"2024-03-18"},{"lineNumber":34,"author":{"gitId":"LWachtel1"},"content":"        if (fullCommand.length \u003e 1) {","lastModifiedDate":"2024-03-18"},{"lineNumber":35,"author":{"gitId":"LWachtel1"},"content":"            String erroneousInput \u003d userCommand.split(\" \",2)[1];","lastModifiedDate":"2024-03-20"},{"lineNumber":36,"author":{"gitId":"LWachtel1"},"content":"            throw new IncorrectArgumentNumException(\"LIST\", erroneousInput);","lastModifiedDate":"2024-03-20"},{"lineNumber":37,"author":{"gitId":"LWachtel1"},"content":"        }","lastModifiedDate":"2024-03-18"},{"lineNumber":38,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":39,"author":{"gitId":"LWachtel1"},"content":"        if (ChatMan.accessTasks().isEmpty()) {","lastModifiedDate":"2024-03-20"},{"lineNumber":40,"author":{"gitId":"LWachtel1"},"content":"            throw new EmptyListException(\"LIST\", userCommand);","lastModifiedDate":"2024-03-20"},{"lineNumber":41,"author":{"gitId":"LWachtel1"},"content":"        }","lastModifiedDate":"2024-03-20"},{"lineNumber":42,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":43,"author":{"gitId":"LWachtel1"},"content":"        System.out.printf(\"%s%n\", \"____________________________________________________________\");","lastModifiedDate":"2024-03-18"},{"lineNumber":44,"author":{"gitId":"LWachtel1"},"content":"        for (int i \u003d 0; i \u003c ChatMan.accessTasks().size(); i++) {","lastModifiedDate":"2024-03-20"},{"lineNumber":45,"author":{"gitId":"LWachtel1"},"content":"            System.out.printf(\"%d.%s%n\", (i + 1), ChatMan.accessTasks().get(i).toString());","lastModifiedDate":"2024-03-20"},{"lineNumber":46,"author":{"gitId":"LWachtel1"},"content":"        }","lastModifiedDate":"2024-03-18"},{"lineNumber":47,"author":{"gitId":"LWachtel1"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":48,"author":{"gitId":"LWachtel1"},"content":"}","lastModifiedDate":"2024-03-18"}],"authorContributionMap":{"LWachtel1":48}},{"path":"src/main/java/chatman/commands/MarkUnmarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LWachtel1"},"content":"package chatman.commands;","lastModifiedDate":"2024-03-18"},{"lineNumber":2,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":3,"author":{"gitId":"LWachtel1"},"content":"import chatman.ChatMan;","lastModifiedDate":"2024-03-18"},{"lineNumber":4,"author":{"gitId":"LWachtel1"},"content":"import chatman.exceptions.EmptyListException;","lastModifiedDate":"2024-03-20"},{"lineNumber":5,"author":{"gitId":"LWachtel1"},"content":"import chatman.exceptions.IncorrectArgumentNumException;","lastModifiedDate":"2024-03-18"},{"lineNumber":6,"author":{"gitId":"LWachtel1"},"content":"import chatman.exceptions.IncorrectMarkUnmarkException;","lastModifiedDate":"2024-03-18"},{"lineNumber":7,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":8,"author":{"gitId":"LWachtel1"},"content":"/**","lastModifiedDate":"2024-03-18"},{"lineNumber":9,"author":{"gitId":"LWachtel1"},"content":" * Implements ChatMan\u0027s ability to mark/unmark any currently stored task.","lastModifiedDate":"2024-03-18"},{"lineNumber":10,"author":{"gitId":"LWachtel1"},"content":" *","lastModifiedDate":"2024-03-18"},{"lineNumber":11,"author":{"gitId":"LWachtel1"},"content":" * @author LWachtel1","lastModifiedDate":"2024-03-18"},{"lineNumber":12,"author":{"gitId":"LWachtel1"},"content":" * */","lastModifiedDate":"2024-03-18"},{"lineNumber":13,"author":{"gitId":"LWachtel1"},"content":"public class MarkUnmarkCommand extends Command {","lastModifiedDate":"2024-03-18"},{"lineNumber":14,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":15,"author":{"gitId":"LWachtel1"},"content":"    /**","lastModifiedDate":"2024-03-18"},{"lineNumber":16,"author":{"gitId":"LWachtel1"},"content":"     * Constructor for MarkUnmarkCommand; invokes superclass constructor.","lastModifiedDate":"2024-03-18"},{"lineNumber":17,"author":{"gitId":"LWachtel1"},"content":"     *","lastModifiedDate":"2024-03-18"},{"lineNumber":18,"author":{"gitId":"LWachtel1"},"content":"     * @param userCommand Receives and stores user-entered command (from CommandParser object) to use in perform()","lastModifiedDate":"2024-03-18"},{"lineNumber":19,"author":{"gitId":"LWachtel1"},"content":"     * method.","lastModifiedDate":"2024-03-18"},{"lineNumber":20,"author":{"gitId":"LWachtel1"},"content":"     * */","lastModifiedDate":"2024-03-18"},{"lineNumber":21,"author":{"gitId":"LWachtel1"},"content":"    public MarkUnmarkCommand(String userCommand) {","lastModifiedDate":"2024-03-18"},{"lineNumber":22,"author":{"gitId":"LWachtel1"},"content":"        super(userCommand);","lastModifiedDate":"2024-03-18"},{"lineNumber":23,"author":{"gitId":"LWachtel1"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":24,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":25,"author":{"gitId":"LWachtel1"},"content":"    /**","lastModifiedDate":"2024-03-18"},{"lineNumber":26,"author":{"gitId":"LWachtel1"},"content":"     * Parses mark/unmark command into command and index to mark/unmark, then accesses task object at given index","lastModifiedDate":"2024-03-18"},{"lineNumber":27,"author":{"gitId":"LWachtel1"},"content":"     * (if valid) \u0026 calls instance method setDone() with true or false argument depending on choice of mark or unmark.","lastModifiedDate":"2024-03-18"},{"lineNumber":28,"author":{"gitId":"LWachtel1"},"content":"     *","lastModifiedDate":"2024-03-18"},{"lineNumber":29,"author":{"gitId":"LWachtel1"},"content":"     * @throws IncorrectArgumentNumException If command provided with incorrect number of arguments.","lastModifiedDate":"2024-03-18"},{"lineNumber":30,"author":{"gitId":"LWachtel1"},"content":"     * @throws IncorrectMarkUnmarkException If command provided with non-numerical argument or index outside of bounds","lastModifiedDate":"2024-03-18"},{"lineNumber":31,"author":{"gitId":"LWachtel1"},"content":"     * of task arraylist.","lastModifiedDate":"2024-03-18"},{"lineNumber":32,"author":{"gitId":"LWachtel1"},"content":"     * @throws EmptyListException If list of stored tasks is currently empty.","lastModifiedDate":"2024-03-20"},{"lineNumber":33,"author":{"gitId":"LWachtel1"},"content":"     * */","lastModifiedDate":"2024-03-18"},{"lineNumber":34,"author":{"gitId":"LWachtel1"},"content":"    @Override","lastModifiedDate":"2024-03-18"},{"lineNumber":35,"author":{"gitId":"LWachtel1"},"content":"    public void perform() throws IncorrectArgumentNumException, IncorrectMarkUnmarkException, EmptyListException {","lastModifiedDate":"2024-03-20"},{"lineNumber":36,"author":{"gitId":"LWachtel1"},"content":"        String[] markUnmarkCommand \u003d userCommand.split(\" \");","lastModifiedDate":"2024-03-18"},{"lineNumber":37,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":38,"author":{"gitId":"LWachtel1"},"content":"        if (markUnmarkCommand.length !\u003d 2) {","lastModifiedDate":"2024-03-18"},{"lineNumber":39,"author":{"gitId":"LWachtel1"},"content":"            throw new IncorrectArgumentNumException(\"MARKUNMARK\", userCommand);","lastModifiedDate":"2024-03-20"},{"lineNumber":40,"author":{"gitId":"LWachtel1"},"content":"        }","lastModifiedDate":"2024-03-18"},{"lineNumber":41,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":42,"author":{"gitId":"LWachtel1"},"content":"        if (ChatMan.accessTasks().isEmpty()) {","lastModifiedDate":"2024-03-20"},{"lineNumber":43,"author":{"gitId":"LWachtel1"},"content":"            throw new EmptyListException(\"MARKUNMARK\", userCommand);","lastModifiedDate":"2024-03-20"},{"lineNumber":44,"author":{"gitId":"LWachtel1"},"content":"        }","lastModifiedDate":"2024-03-20"},{"lineNumber":45,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":46,"author":{"gitId":"LWachtel1"},"content":"        String position \u003d markUnmarkCommand[1];","lastModifiedDate":"2024-03-18"},{"lineNumber":47,"author":{"gitId":"LWachtel1"},"content":"        int storageIndex \u003d 0;","lastModifiedDate":"2024-03-18"},{"lineNumber":48,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":49,"author":{"gitId":"LWachtel1"},"content":"        try {","lastModifiedDate":"2024-03-18"},{"lineNumber":50,"author":{"gitId":"LWachtel1"},"content":"            storageIndex \u003d Integer.parseInt(position) - 1;","lastModifiedDate":"2024-03-18"},{"lineNumber":51,"author":{"gitId":"LWachtel1"},"content":"            if (storageIndex + 1 \u003e ChatMan.accessTasks().size() || storageIndex \u003c\u003d 0) {","lastModifiedDate":"2024-03-20"},{"lineNumber":52,"author":{"gitId":"LWachtel1"},"content":"                throw new IncorrectMarkUnmarkException(\"MARKUNMARK\",position);","lastModifiedDate":"2024-03-20"},{"lineNumber":53,"author":{"gitId":"LWachtel1"},"content":"            }","lastModifiedDate":"2024-03-18"},{"lineNumber":54,"author":{"gitId":"LWachtel1"},"content":"        } catch(NumberFormatException exception) {","lastModifiedDate":"2024-03-18"},{"lineNumber":55,"author":{"gitId":"LWachtel1"},"content":"            throw new IncorrectMarkUnmarkException(\"MARKUNMARK\",position);","lastModifiedDate":"2024-03-20"},{"lineNumber":56,"author":{"gitId":"LWachtel1"},"content":"        }","lastModifiedDate":"2024-03-18"},{"lineNumber":57,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":58,"author":{"gitId":"LWachtel1"},"content":"        switch (markUnmarkCommand[0].toUpperCase()) {","lastModifiedDate":"2024-03-18"},{"lineNumber":59,"author":{"gitId":"LWachtel1"},"content":"        case \"MARK\":","lastModifiedDate":"2024-03-18"},{"lineNumber":60,"author":{"gitId":"LWachtel1"},"content":"            ChatMan.accessTasks().get(storageIndex).setDone(true);","lastModifiedDate":"2024-03-20"},{"lineNumber":61,"author":{"gitId":"LWachtel1"},"content":"            System.out.printf(\"%s%n\", \"____________________________________________________________\");","lastModifiedDate":"2024-03-18"},{"lineNumber":62,"author":{"gitId":"LWachtel1"},"content":"            System.out.printf(\"Nice! I\u0027ve marked this task as done:%n%s%n\",","lastModifiedDate":"2024-03-18"},{"lineNumber":63,"author":{"gitId":"LWachtel1"},"content":"                   ChatMan.accessTasks().get(storageIndex).toString());","lastModifiedDate":"2024-03-20"},{"lineNumber":64,"author":{"gitId":"LWachtel1"},"content":"            break;","lastModifiedDate":"2024-03-18"},{"lineNumber":65,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":66,"author":{"gitId":"LWachtel1"},"content":"        case \"UNMARK\":","lastModifiedDate":"2024-03-18"},{"lineNumber":67,"author":{"gitId":"LWachtel1"},"content":"            ChatMan.accessTasks().get(storageIndex).setDone(false);","lastModifiedDate":"2024-03-20"},{"lineNumber":68,"author":{"gitId":"LWachtel1"},"content":"            System.out.printf(\"%s%n\", \"____________________________________________________________\");","lastModifiedDate":"2024-03-18"},{"lineNumber":69,"author":{"gitId":"LWachtel1"},"content":"            System.out.printf(\"OK, I\u0027ve marked this task as not done yet:%n%s%n\",","lastModifiedDate":"2024-03-18"},{"lineNumber":70,"author":{"gitId":"LWachtel1"},"content":"                    ChatMan.accessTasks().get(storageIndex).toString());","lastModifiedDate":"2024-03-20"},{"lineNumber":71,"author":{"gitId":"LWachtel1"},"content":"            break;","lastModifiedDate":"2024-03-18"},{"lineNumber":72,"author":{"gitId":"LWachtel1"},"content":"        }","lastModifiedDate":"2024-03-18"},{"lineNumber":73,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":74,"author":{"gitId":"LWachtel1"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":75,"author":{"gitId":"LWachtel1"},"content":"}","lastModifiedDate":"2024-03-18"},{"lineNumber":76,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-18"}],"authorContributionMap":{"LWachtel1":76}},{"path":"src/main/java/chatman/commands/TaskCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LWachtel1"},"content":"package chatman.commands;","lastModifiedDate":"2024-03-18"},{"lineNumber":2,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":3,"author":{"gitId":"LWachtel1"},"content":"import chatman.ChatMan;","lastModifiedDate":"2024-03-18"},{"lineNumber":4,"author":{"gitId":"LWachtel1"},"content":"import chatman.tasks.Task;","lastModifiedDate":"2024-03-18"},{"lineNumber":5,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":6,"author":{"gitId":"LWachtel1"},"content":"/**","lastModifiedDate":"2024-03-18"},{"lineNumber":7,"author":{"gitId":"LWachtel1"},"content":" * Implements TaskCommand abstract class as template for all subclasses implementing task-related command functionality.","lastModifiedDate":"2024-03-18"},{"lineNumber":8,"author":{"gitId":"LWachtel1"},"content":" *","lastModifiedDate":"2024-03-18"},{"lineNumber":9,"author":{"gitId":"LWachtel1"},"content":" * @author LWachtel1","lastModifiedDate":"2024-03-18"},{"lineNumber":10,"author":{"gitId":"LWachtel1"},"content":" * */","lastModifiedDate":"2024-03-18"},{"lineNumber":11,"author":{"gitId":"LWachtel1"},"content":"public abstract class TaskCommand extends Command {","lastModifiedDate":"2024-03-18"},{"lineNumber":12,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":13,"author":{"gitId":"LWachtel1"},"content":"    /**","lastModifiedDate":"2024-03-18"},{"lineNumber":14,"author":{"gitId":"LWachtel1"},"content":"     * Constructor for abstract TaskCommand class that it inherited from abstract Command superclass; invoked by its","lastModifiedDate":"2024-03-18"},{"lineNumber":15,"author":{"gitId":"LWachtel1"},"content":"     * concrete subclasses using super() method call.","lastModifiedDate":"2024-03-18"},{"lineNumber":16,"author":{"gitId":"LWachtel1"},"content":"     *","lastModifiedDate":"2024-03-18"},{"lineNumber":17,"author":{"gitId":"LWachtel1"},"content":"     * @param userCommand Receives and stores user-entered command (from CommandParser object) to use in perform()","lastModifiedDate":"2024-03-18"},{"lineNumber":18,"author":{"gitId":"LWachtel1"},"content":"     * method where implemented.","lastModifiedDate":"2024-03-18"},{"lineNumber":19,"author":{"gitId":"LWachtel1"},"content":"     * */","lastModifiedDate":"2024-03-18"},{"lineNumber":20,"author":{"gitId":"LWachtel1"},"content":"    public TaskCommand(String userCommand) {","lastModifiedDate":"2024-03-18"},{"lineNumber":21,"author":{"gitId":"LWachtel1"},"content":"        super(userCommand);","lastModifiedDate":"2024-03-18"},{"lineNumber":22,"author":{"gitId":"LWachtel1"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":23,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":24,"author":{"gitId":"LWachtel1"},"content":"    /**","lastModifiedDate":"2024-03-18"},{"lineNumber":25,"author":{"gitId":"LWachtel1"},"content":"     * Prints String representation of task object just added to task arraylist; inherited by TaskCommand subclasses","lastModifiedDate":"2024-03-18"},{"lineNumber":26,"author":{"gitId":"LWachtel1"},"content":"     * and called from their respective perform() methods during execution.","lastModifiedDate":"2024-03-18"},{"lineNumber":27,"author":{"gitId":"LWachtel1"},"content":"     * */","lastModifiedDate":"2024-03-18"},{"lineNumber":28,"author":{"gitId":"LWachtel1"},"content":"    public void replyAddedTask() {","lastModifiedDate":"2024-03-18"},{"lineNumber":29,"author":{"gitId":"LWachtel1"},"content":"        Task addedTask \u003d ChatMan.accessTasks().get(ChatMan.accessTasks().size() - 1);","lastModifiedDate":"2024-03-20"},{"lineNumber":30,"author":{"gitId":"LWachtel1"},"content":"        int size \u003d ChatMan.accessTasks().size();","lastModifiedDate":"2024-03-20"},{"lineNumber":31,"author":{"gitId":"LWachtel1"},"content":"        System.out.printf(\"Got it. I\u0027ve added this task:%n%s%nNow you have %d tasks in the list.%n\",","lastModifiedDate":"2024-03-18"},{"lineNumber":32,"author":{"gitId":"LWachtel1"},"content":"                addedTask.toString(), size);","lastModifiedDate":"2024-03-18"},{"lineNumber":33,"author":{"gitId":"LWachtel1"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":34,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":35,"author":{"gitId":"LWachtel1"},"content":"}","lastModifiedDate":"2024-03-18"}],"authorContributionMap":{"LWachtel1":35}},{"path":"src/main/java/chatman/commands/TodoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LWachtel1"},"content":"package chatman.commands;","lastModifiedDate":"2024-03-18"},{"lineNumber":2,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":3,"author":{"gitId":"LWachtel1"},"content":"import chatman.ChatMan;","lastModifiedDate":"2024-03-18"},{"lineNumber":4,"author":{"gitId":"LWachtel1"},"content":"import chatman.exceptions.FullListException;","lastModifiedDate":"2024-03-18"},{"lineNumber":5,"author":{"gitId":"LWachtel1"},"content":"import chatman.exceptions.IncorrectArgumentNumException;","lastModifiedDate":"2024-03-18"},{"lineNumber":6,"author":{"gitId":"LWachtel1"},"content":"import chatman.exceptions.IncorrectFormatException;","lastModifiedDate":"2024-03-20"},{"lineNumber":7,"author":{"gitId":"LWachtel1"},"content":"import chatman.tasks.Todo;","lastModifiedDate":"2024-03-18"},{"lineNumber":8,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":9,"author":{"gitId":"LWachtel1"},"content":"/**","lastModifiedDate":"2024-03-18"},{"lineNumber":10,"author":{"gitId":"LWachtel1"},"content":" * Implements functionality to enable ChatMan response to user-entered \"todo DESCRIPTION\" command.","lastModifiedDate":"2024-03-18"},{"lineNumber":11,"author":{"gitId":"LWachtel1"},"content":" *","lastModifiedDate":"2024-03-18"},{"lineNumber":12,"author":{"gitId":"LWachtel1"},"content":" * @author LWachtel1","lastModifiedDate":"2024-03-18"},{"lineNumber":13,"author":{"gitId":"LWachtel1"},"content":" */","lastModifiedDate":"2024-03-20"},{"lineNumber":14,"author":{"gitId":"LWachtel1"},"content":"public class TodoCommand extends TaskCommand {","lastModifiedDate":"2024-03-18"},{"lineNumber":15,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":16,"author":{"gitId":"LWachtel1"},"content":"    /**","lastModifiedDate":"2024-03-18"},{"lineNumber":17,"author":{"gitId":"LWachtel1"},"content":"     * Constructor for Todocommand; invokes superclass constructor.","lastModifiedDate":"2024-03-18"},{"lineNumber":18,"author":{"gitId":"LWachtel1"},"content":"     *","lastModifiedDate":"2024-03-18"},{"lineNumber":19,"author":{"gitId":"LWachtel1"},"content":"     * @param userCommand Receives and stores user-entered command (from CommandParser object) to use in perform()","lastModifiedDate":"2024-03-18"},{"lineNumber":20,"author":{"gitId":"LWachtel1"},"content":"     * method.","lastModifiedDate":"2024-03-18"},{"lineNumber":21,"author":{"gitId":"LWachtel1"},"content":"     */","lastModifiedDate":"2024-03-20"},{"lineNumber":22,"author":{"gitId":"LWachtel1"},"content":"    public TodoCommand(String userCommand) {","lastModifiedDate":"2024-03-18"},{"lineNumber":23,"author":{"gitId":"LWachtel1"},"content":"        super(userCommand);","lastModifiedDate":"2024-03-18"},{"lineNumber":24,"author":{"gitId":"LWachtel1"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":25,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":26,"author":{"gitId":"LWachtel1"},"content":"    /**","lastModifiedDate":"2024-03-18"},{"lineNumber":27,"author":{"gitId":"LWachtel1"},"content":"     * Parses todo command to extract its description, then instantiates new Todo object \u0026 adds this to task arraylist.","lastModifiedDate":"2024-03-18"},{"lineNumber":28,"author":{"gitId":"LWachtel1"},"content":"     *","lastModifiedDate":"2024-03-18"},{"lineNumber":29,"author":{"gitId":"LWachtel1"},"content":"     * @throws FullListException If task arraylist size equals MAX_NUM_TASKS when attempting to add new Todo object.","lastModifiedDate":"2024-03-18"},{"lineNumber":30,"author":{"gitId":"LWachtel1"},"content":"     * @throws IncorrectArgumentNumException If command provided with incorrect number of arguments.","lastModifiedDate":"2024-03-18"},{"lineNumber":31,"author":{"gitId":"LWachtel1"},"content":"     * */","lastModifiedDate":"2024-03-18"},{"lineNumber":32,"author":{"gitId":"LWachtel1"},"content":"    @Override","lastModifiedDate":"2024-03-18"},{"lineNumber":33,"author":{"gitId":"LWachtel1"},"content":"    public void perform() throws IncorrectArgumentNumException, FullListException, IncorrectFormatException {","lastModifiedDate":"2024-03-20"},{"lineNumber":34,"author":{"gitId":"LWachtel1"},"content":"        String[] toDoCommand \u003d userCommand.split(\" \", 2);","lastModifiedDate":"2024-03-18"},{"lineNumber":35,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":36,"author":{"gitId":"LWachtel1"},"content":"        //Ensures an argument has been provided (todo DESC_ARG)","lastModifiedDate":"2024-03-20"},{"lineNumber":37,"author":{"gitId":"LWachtel1"},"content":"        if (toDoCommand.length !\u003d 2) {","lastModifiedDate":"2024-03-18"},{"lineNumber":38,"author":{"gitId":"LWachtel1"},"content":"            throw new IncorrectArgumentNumException(\"TODO\",userCommand);","lastModifiedDate":"2024-03-20"},{"lineNumber":39,"author":{"gitId":"LWachtel1"},"content":"        }","lastModifiedDate":"2024-03-18"},{"lineNumber":40,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":41,"author":{"gitId":"LWachtel1"},"content":"        //checks for any / which would mean unnecessary arguments","lastModifiedDate":"2024-03-20"},{"lineNumber":42,"author":{"gitId":"LWachtel1"},"content":"        for (String argument: toDoCommand) {","lastModifiedDate":"2024-03-20"},{"lineNumber":43,"author":{"gitId":"LWachtel1"},"content":"            if (argument.contains(\"/\")) {","lastModifiedDate":"2024-03-20"},{"lineNumber":44,"author":{"gitId":"LWachtel1"},"content":"                throw new IncorrectArgumentNumException(\"TODO\", argument);","lastModifiedDate":"2024-03-20"},{"lineNumber":45,"author":{"gitId":"LWachtel1"},"content":"            }","lastModifiedDate":"2024-03-20"},{"lineNumber":46,"author":{"gitId":"LWachtel1"},"content":"        }","lastModifiedDate":"2024-03-20"},{"lineNumber":47,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":48,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":49,"author":{"gitId":"LWachtel1"},"content":"        if (ChatMan.accessTasks().size() \u003d\u003d ChatMan.MAX_NUM_TASKS) {","lastModifiedDate":"2024-03-20"},{"lineNumber":50,"author":{"gitId":"LWachtel1"},"content":"            throw new FullListException(\"TODO\", userCommand);","lastModifiedDate":"2024-03-20"},{"lineNumber":51,"author":{"gitId":"LWachtel1"},"content":"        }","lastModifiedDate":"2024-03-18"},{"lineNumber":52,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":53,"author":{"gitId":"LWachtel1"},"content":"        String toDoDesc \u003d toDoCommand[1].trim();","lastModifiedDate":"2024-03-20"},{"lineNumber":54,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":55,"author":{"gitId":"LWachtel1"},"content":"        if (toDoDesc.isEmpty()) {","lastModifiedDate":"2024-03-20"},{"lineNumber":56,"author":{"gitId":"LWachtel1"},"content":"            throw new IncorrectFormatException(\"TODO\", userCommand);","lastModifiedDate":"2024-03-20"},{"lineNumber":57,"author":{"gitId":"LWachtel1"},"content":"        }","lastModifiedDate":"2024-03-20"},{"lineNumber":58,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":59,"author":{"gitId":"LWachtel1"},"content":"        ChatMan.accessTasks().add(new Todo(toDoDesc));","lastModifiedDate":"2024-03-20"},{"lineNumber":60,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":61,"author":{"gitId":"LWachtel1"},"content":"        super.replyAddedTask();","lastModifiedDate":"2024-03-18"},{"lineNumber":62,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":63,"author":{"gitId":"LWachtel1"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":64,"author":{"gitId":"LWachtel1"},"content":"}","lastModifiedDate":"2024-03-18"}],"authorContributionMap":{"LWachtel1":64}},{"path":"src/main/java/chatman/exceptions/ChatManException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LWachtel1"},"content":"package chatman.exceptions;","lastModifiedDate":"2024-03-18"},{"lineNumber":2,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":3,"author":{"gitId":"LWachtel1"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-03-20"},{"lineNumber":4,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":5,"author":{"gitId":"LWachtel1"},"content":"/**","lastModifiedDate":"2024-03-18"},{"lineNumber":6,"author":{"gitId":"LWachtel1"},"content":" * Implements custom abstract exception class for ChatMan-related exceptions to inherit from.","lastModifiedDate":"2024-03-18"},{"lineNumber":7,"author":{"gitId":"LWachtel1"},"content":" *","lastModifiedDate":"2024-03-18"},{"lineNumber":8,"author":{"gitId":"LWachtel1"},"content":" * @author LWachtel1","lastModifiedDate":"2024-03-18"},{"lineNumber":9,"author":{"gitId":"LWachtel1"},"content":" * */","lastModifiedDate":"2024-03-18"},{"lineNumber":10,"author":{"gitId":"LWachtel1"},"content":"public abstract class ChatManException extends Exception {","lastModifiedDate":"2024-03-18"},{"lineNumber":11,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":12,"author":{"gitId":"LWachtel1"},"content":"    private String commandType;","lastModifiedDate":"2024-03-20"},{"lineNumber":13,"author":{"gitId":"LWachtel1"},"content":"    private String erroneousInput;","lastModifiedDate":"2024-03-20"},{"lineNumber":14,"author":{"gitId":"LWachtel1"},"content":"    /**","lastModifiedDate":"2024-03-18"},{"lineNumber":15,"author":{"gitId":"LWachtel1"},"content":"     * Constructor for ChatManException class.","lastModifiedDate":"2024-03-18"},{"lineNumber":16,"author":{"gitId":"LWachtel1"},"content":"     *","lastModifiedDate":"2024-03-20"},{"lineNumber":17,"author":{"gitId":"LWachtel1"},"content":"     * @param commandType Command type entered by user for which exception was thrown.","lastModifiedDate":"2024-03-20"},{"lineNumber":18,"author":{"gitId":"LWachtel1"},"content":"     * @param erroneousInput String storing specific problem with user input which resulted in exception.","lastModifiedDate":"2024-03-20"},{"lineNumber":19,"author":{"gitId":"LWachtel1"},"content":"     **/","lastModifiedDate":"2024-03-18"},{"lineNumber":20,"author":{"gitId":"LWachtel1"},"content":"    public ChatManException(String commandType, String erroneousInput) {","lastModifiedDate":"2024-03-20"},{"lineNumber":21,"author":{"gitId":"LWachtel1"},"content":"        this.commandType \u003d commandType;","lastModifiedDate":"2024-03-20"},{"lineNumber":22,"author":{"gitId":"LWachtel1"},"content":"        this.erroneousInput \u003d erroneousInput;","lastModifiedDate":"2024-03-20"},{"lineNumber":23,"author":{"gitId":"LWachtel1"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":24,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":25,"author":{"gitId":"LWachtel1"},"content":"    /**","lastModifiedDate":"2024-03-18"},{"lineNumber":26,"author":{"gitId":"LWachtel1"},"content":"     * Provides abstract method to be overriden by concrete subclasses, which each prints own","lastModifiedDate":"2024-03-18"},{"lineNumber":27,"author":{"gitId":"LWachtel1"},"content":"     * exception-specific error message.","lastModifiedDate":"2024-03-18"},{"lineNumber":28,"author":{"gitId":"LWachtel1"},"content":"     * */","lastModifiedDate":"2024-03-18"},{"lineNumber":29,"author":{"gitId":"LWachtel1"},"content":"    public abstract void sendErrorMsg();","lastModifiedDate":"2024-03-18"},{"lineNumber":30,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":31,"author":{"gitId":"LWachtel1"},"content":"    public String getCommandType() {","lastModifiedDate":"2024-03-20"},{"lineNumber":32,"author":{"gitId":"LWachtel1"},"content":"        return commandType;","lastModifiedDate":"2024-03-20"},{"lineNumber":33,"author":{"gitId":"LWachtel1"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":34,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":35,"author":{"gitId":"LWachtel1"},"content":"    public String getErroneousInput() {","lastModifiedDate":"2024-03-20"},{"lineNumber":36,"author":{"gitId":"LWachtel1"},"content":"        return erroneousInput;","lastModifiedDate":"2024-03-20"},{"lineNumber":37,"author":{"gitId":"LWachtel1"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":38,"author":{"gitId":"LWachtel1"},"content":"}","lastModifiedDate":"2024-03-18"}],"authorContributionMap":{"LWachtel1":38}},{"path":"src/main/java/chatman/exceptions/EmptyListException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LWachtel1"},"content":"package chatman.exceptions;","lastModifiedDate":"2024-03-20"},{"lineNumber":2,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":3,"author":{"gitId":"LWachtel1"},"content":"/**","lastModifiedDate":"2024-03-20"},{"lineNumber":4,"author":{"gitId":"LWachtel1"},"content":" * Implements custom exception class instantiated when command entered acts on empty list.","lastModifiedDate":"2024-03-20"},{"lineNumber":5,"author":{"gitId":"LWachtel1"},"content":" *","lastModifiedDate":"2024-03-20"},{"lineNumber":6,"author":{"gitId":"LWachtel1"},"content":" * @author LWachtel1","lastModifiedDate":"2024-03-20"},{"lineNumber":7,"author":{"gitId":"LWachtel1"},"content":" * */","lastModifiedDate":"2024-03-20"},{"lineNumber":8,"author":{"gitId":"LWachtel1"},"content":"public class EmptyListException extends ChatManException {","lastModifiedDate":"2024-03-20"},{"lineNumber":9,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":10,"author":{"gitId":"LWachtel1"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":11,"author":{"gitId":"LWachtel1"},"content":"     * Constructor for EmptyListException class.","lastModifiedDate":"2024-03-20"},{"lineNumber":12,"author":{"gitId":"LWachtel1"},"content":"     *","lastModifiedDate":"2024-03-20"},{"lineNumber":13,"author":{"gitId":"LWachtel1"},"content":"     * @param commandType Command type entered by user for which exception was thrown.","lastModifiedDate":"2024-03-20"},{"lineNumber":14,"author":{"gitId":"LWachtel1"},"content":"     * @param erroneousInput String storing specific problem with user input which resulted in exception.","lastModifiedDate":"2024-03-20"},{"lineNumber":15,"author":{"gitId":"LWachtel1"},"content":"     **/","lastModifiedDate":"2024-03-20"},{"lineNumber":16,"author":{"gitId":"LWachtel1"},"content":"    public EmptyListException(String commandType, String erroneousInput) {","lastModifiedDate":"2024-03-20"},{"lineNumber":17,"author":{"gitId":"LWachtel1"},"content":"        super(commandType, erroneousInput);","lastModifiedDate":"2024-03-20"},{"lineNumber":18,"author":{"gitId":"LWachtel1"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":19,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":20,"author":{"gitId":"LWachtel1"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":21,"author":{"gitId":"LWachtel1"},"content":"     * Prints error message notifying user that list is empty so command cannot be performed.","lastModifiedDate":"2024-03-20"},{"lineNumber":22,"author":{"gitId":"LWachtel1"},"content":"     * */","lastModifiedDate":"2024-03-20"},{"lineNumber":23,"author":{"gitId":"LWachtel1"},"content":"    @Override","lastModifiedDate":"2024-03-20"},{"lineNumber":24,"author":{"gitId":"LWachtel1"},"content":"    public void sendErrorMsg() {","lastModifiedDate":"2024-03-20"},{"lineNumber":25,"author":{"gitId":"LWachtel1"},"content":"        System.out.printf(\"%s%n%n\", \"____________________________________________________________\");","lastModifiedDate":"2024-03-20"},{"lineNumber":26,"author":{"gitId":"LWachtel1"},"content":"        System.out.printf(\"The stored list of tasks is currently empty.\"","lastModifiedDate":"2024-03-20"},{"lineNumber":27,"author":{"gitId":"LWachtel1"},"content":"                + \"\\nSo, the entered command \u0027%s\u0027 cannot be performed\\n\", super.getErroneousInput());","lastModifiedDate":"2024-03-20"},{"lineNumber":28,"author":{"gitId":"LWachtel1"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":29,"author":{"gitId":"LWachtel1"},"content":"}","lastModifiedDate":"2024-03-20"}],"authorContributionMap":{"LWachtel1":29}},{"path":"src/main/java/chatman/exceptions/FalseCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LWachtel1"},"content":"package chatman.exceptions;","lastModifiedDate":"2024-03-18"},{"lineNumber":2,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":3,"author":{"gitId":"LWachtel1"},"content":"/**","lastModifiedDate":"2024-03-18"},{"lineNumber":4,"author":{"gitId":"LWachtel1"},"content":" * Implements custom exception class instantiated when unrecognised command is entered by user.","lastModifiedDate":"2024-03-18"},{"lineNumber":5,"author":{"gitId":"LWachtel1"},"content":" *","lastModifiedDate":"2024-03-18"},{"lineNumber":6,"author":{"gitId":"LWachtel1"},"content":" * @author LWachtel1","lastModifiedDate":"2024-03-18"},{"lineNumber":7,"author":{"gitId":"LWachtel1"},"content":" * */","lastModifiedDate":"2024-03-18"},{"lineNumber":8,"author":{"gitId":"LWachtel1"},"content":"public class FalseCommandException extends ChatManException{","lastModifiedDate":"2024-03-18"},{"lineNumber":9,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":10,"author":{"gitId":"LWachtel1"},"content":"    /**","lastModifiedDate":"2024-03-18"},{"lineNumber":11,"author":{"gitId":"LWachtel1"},"content":"     * Constructor for FalseCommandException class.","lastModifiedDate":"2024-03-18"},{"lineNumber":12,"author":{"gitId":"LWachtel1"},"content":"     *","lastModifiedDate":"2024-03-20"},{"lineNumber":13,"author":{"gitId":"LWachtel1"},"content":"     * @param commandType Command type entered by user for which exception was thrown.","lastModifiedDate":"2024-03-20"},{"lineNumber":14,"author":{"gitId":"LWachtel1"},"content":"     * @param erroneousInput String storing specific problem with user input which resulted in exception.","lastModifiedDate":"2024-03-20"},{"lineNumber":15,"author":{"gitId":"LWachtel1"},"content":"     **/","lastModifiedDate":"2024-03-18"},{"lineNumber":16,"author":{"gitId":"LWachtel1"},"content":"    public FalseCommandException(String commandType, String erroneousInput) {","lastModifiedDate":"2024-03-20"},{"lineNumber":17,"author":{"gitId":"LWachtel1"},"content":"        super(commandType, erroneousInput);","lastModifiedDate":"2024-03-20"},{"lineNumber":18,"author":{"gitId":"LWachtel1"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":19,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":20,"author":{"gitId":"LWachtel1"},"content":"    /**","lastModifiedDate":"2024-03-18"},{"lineNumber":21,"author":{"gitId":"LWachtel1"},"content":"     * Prints error message notifying user they have entered an unrecognised command then prompts","lastModifiedDate":"2024-03-18"},{"lineNumber":22,"author":{"gitId":"LWachtel1"},"content":"     * valid re-entry.","lastModifiedDate":"2024-03-18"},{"lineNumber":23,"author":{"gitId":"LWachtel1"},"content":"     * */","lastModifiedDate":"2024-03-18"},{"lineNumber":24,"author":{"gitId":"LWachtel1"},"content":"    @Override","lastModifiedDate":"2024-03-18"},{"lineNumber":25,"author":{"gitId":"LWachtel1"},"content":"    public void sendErrorMsg() {","lastModifiedDate":"2024-03-18"},{"lineNumber":26,"author":{"gitId":"LWachtel1"},"content":"        System.out.printf(\"%s%n%n\", \"____________________________________________________________\");","lastModifiedDate":"2024-03-18"},{"lineNumber":27,"author":{"gitId":"LWachtel1"},"content":"        System.out.printf(\"Unrecognised command entered \u0027%s\u0027 of command type \u0027%s\u0027.\"","lastModifiedDate":"2024-03-20"},{"lineNumber":28,"author":{"gitId":"LWachtel1"},"content":"                + \"\\nPlease re-enter a recognised command.\", super.getErroneousInput(), super.getCommandType());","lastModifiedDate":"2024-03-20"},{"lineNumber":29,"author":{"gitId":"LWachtel1"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":30,"author":{"gitId":"LWachtel1"},"content":"}","lastModifiedDate":"2024-03-18"}],"authorContributionMap":{"LWachtel1":30}},{"path":"src/main/java/chatman/exceptions/FullListException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LWachtel1"},"content":"package chatman.exceptions;","lastModifiedDate":"2024-03-18"},{"lineNumber":2,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":3,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":4,"author":{"gitId":"LWachtel1"},"content":"/**","lastModifiedDate":"2024-03-18"},{"lineNumber":5,"author":{"gitId":"LWachtel1"},"content":" * Implements custom exception class instantiated when number of stored tasks is at maximum and","lastModifiedDate":"2024-03-18"},{"lineNumber":6,"author":{"gitId":"LWachtel1"},"content":" * user-entered command attempts to add another.","lastModifiedDate":"2024-03-18"},{"lineNumber":7,"author":{"gitId":"LWachtel1"},"content":" *","lastModifiedDate":"2024-03-18"},{"lineNumber":8,"author":{"gitId":"LWachtel1"},"content":" * @author LWachtel1","lastModifiedDate":"2024-03-18"},{"lineNumber":9,"author":{"gitId":"LWachtel1"},"content":" * */","lastModifiedDate":"2024-03-18"},{"lineNumber":10,"author":{"gitId":"LWachtel1"},"content":"public class FullListException extends ChatManException{","lastModifiedDate":"2024-03-18"},{"lineNumber":11,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":12,"author":{"gitId":"LWachtel1"},"content":"    /**","lastModifiedDate":"2024-03-18"},{"lineNumber":13,"author":{"gitId":"LWachtel1"},"content":"     * Constructor for FullListException class.","lastModifiedDate":"2024-03-18"},{"lineNumber":14,"author":{"gitId":"LWachtel1"},"content":"     *","lastModifiedDate":"2024-03-20"},{"lineNumber":15,"author":{"gitId":"LWachtel1"},"content":"     * @param commandType Command type entered by user for which exception was thrown.","lastModifiedDate":"2024-03-20"},{"lineNumber":16,"author":{"gitId":"LWachtel1"},"content":"     * @param erroneousInput String storing specific problem with user input which resulted in exception.","lastModifiedDate":"2024-03-20"},{"lineNumber":17,"author":{"gitId":"LWachtel1"},"content":"     **/","lastModifiedDate":"2024-03-18"},{"lineNumber":18,"author":{"gitId":"LWachtel1"},"content":"    public FullListException(String commandType, String erroneousInput) {","lastModifiedDate":"2024-03-20"},{"lineNumber":19,"author":{"gitId":"LWachtel1"},"content":"        super(commandType, erroneousInput);","lastModifiedDate":"2024-03-20"},{"lineNumber":20,"author":{"gitId":"LWachtel1"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":21,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":22,"author":{"gitId":"LWachtel1"},"content":"    /**","lastModifiedDate":"2024-03-18"},{"lineNumber":23,"author":{"gitId":"LWachtel1"},"content":"     * Prints error message notifying user number of stored tasks is at maximum.","lastModifiedDate":"2024-03-18"},{"lineNumber":24,"author":{"gitId":"LWachtel1"},"content":"     * */","lastModifiedDate":"2024-03-18"},{"lineNumber":25,"author":{"gitId":"LWachtel1"},"content":"    @Override","lastModifiedDate":"2024-03-18"},{"lineNumber":26,"author":{"gitId":"LWachtel1"},"content":"    public void sendErrorMsg() {","lastModifiedDate":"2024-03-18"},{"lineNumber":27,"author":{"gitId":"LWachtel1"},"content":"        System.out.printf(\"%s%n%n\", \"____________________________________________________________\");","lastModifiedDate":"2024-03-18"},{"lineNumber":28,"author":{"gitId":"LWachtel1"},"content":"        System.out.println(\"List of tasks is full.\\nCannot add anymore.\");","lastModifiedDate":"2024-03-18"},{"lineNumber":29,"author":{"gitId":"LWachtel1"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":30,"author":{"gitId":"LWachtel1"},"content":"}","lastModifiedDate":"2024-03-18"}],"authorContributionMap":{"LWachtel1":30}},{"path":"src/main/java/chatman/exceptions/IncorrectArgumentNumException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LWachtel1"},"content":"package chatman.exceptions;","lastModifiedDate":"2024-03-18"},{"lineNumber":2,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":3,"author":{"gitId":"LWachtel1"},"content":"/**","lastModifiedDate":"2024-03-18"},{"lineNumber":4,"author":{"gitId":"LWachtel1"},"content":" * Implements custom exception class instantiated when command is entered with incorrect number of arguments.","lastModifiedDate":"2024-03-18"},{"lineNumber":5,"author":{"gitId":"LWachtel1"},"content":" *","lastModifiedDate":"2024-03-18"},{"lineNumber":6,"author":{"gitId":"LWachtel1"},"content":" * @author LWachtel1","lastModifiedDate":"2024-03-18"},{"lineNumber":7,"author":{"gitId":"LWachtel1"},"content":" * */","lastModifiedDate":"2024-03-18"},{"lineNumber":8,"author":{"gitId":"LWachtel1"},"content":"public class IncorrectArgumentNumException extends ChatManException{","lastModifiedDate":"2024-03-18"},{"lineNumber":9,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":10,"author":{"gitId":"LWachtel1"},"content":"    /**","lastModifiedDate":"2024-03-18"},{"lineNumber":11,"author":{"gitId":"LWachtel1"},"content":"     * Constructor for IncorrectArgumentNumException class.","lastModifiedDate":"2024-03-18"},{"lineNumber":12,"author":{"gitId":"LWachtel1"},"content":"     *","lastModifiedDate":"2024-03-20"},{"lineNumber":13,"author":{"gitId":"LWachtel1"},"content":"     * @param commandType Command type entered by user for which exception was thrown.","lastModifiedDate":"2024-03-20"},{"lineNumber":14,"author":{"gitId":"LWachtel1"},"content":"     * @param erroneousInput String storing specific problem with user input which resulted in exception.","lastModifiedDate":"2024-03-20"},{"lineNumber":15,"author":{"gitId":"LWachtel1"},"content":"     **/","lastModifiedDate":"2024-03-18"},{"lineNumber":16,"author":{"gitId":"LWachtel1"},"content":"    public IncorrectArgumentNumException(String commandType, String erroneousInput) {","lastModifiedDate":"2024-03-20"},{"lineNumber":17,"author":{"gitId":"LWachtel1"},"content":"        super(commandType, erroneousInput);","lastModifiedDate":"2024-03-20"},{"lineNumber":18,"author":{"gitId":"LWachtel1"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":19,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":20,"author":{"gitId":"LWachtel1"},"content":"    /**","lastModifiedDate":"2024-03-18"},{"lineNumber":21,"author":{"gitId":"LWachtel1"},"content":"     * Prints error message notifying user they have entered a command with incorrect number of arguments then prompts","lastModifiedDate":"2024-03-18"},{"lineNumber":22,"author":{"gitId":"LWachtel1"},"content":"     * valid re-entry.","lastModifiedDate":"2024-03-18"},{"lineNumber":23,"author":{"gitId":"LWachtel1"},"content":"     * */","lastModifiedDate":"2024-03-18"},{"lineNumber":24,"author":{"gitId":"LWachtel1"},"content":"    @Override","lastModifiedDate":"2024-03-18"},{"lineNumber":25,"author":{"gitId":"LWachtel1"},"content":"    public void sendErrorMsg() {","lastModifiedDate":"2024-03-18"},{"lineNumber":26,"author":{"gitId":"LWachtel1"},"content":"        System.out.printf(\"%s%n%n\", \"____________________________________________________________\");","lastModifiedDate":"2024-03-18"},{"lineNumber":27,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":28,"author":{"gitId":"LWachtel1"},"content":"        switch (super.getCommandType()) {","lastModifiedDate":"2024-03-20"},{"lineNumber":29,"author":{"gitId":"LWachtel1"},"content":"        case \"BYE\":","lastModifiedDate":"2024-03-20"},{"lineNumber":30,"author":{"gitId":"LWachtel1"},"content":"            System.out.printf(\"Command \u0027bye\u0027 entered with unnecessary arguments:\u0027%s\u0027\"","lastModifiedDate":"2024-03-20"},{"lineNumber":31,"author":{"gitId":"LWachtel1"},"content":"                    + \"\\nPlease re-enter with 0 arguments \"","lastModifiedDate":"2024-03-20"},{"lineNumber":32,"author":{"gitId":"LWachtel1"},"content":"                    + \"\\nFormat: \u0027bye\u0027\\n\", super.getErroneousInput());","lastModifiedDate":"2024-03-20"},{"lineNumber":33,"author":{"gitId":"LWachtel1"},"content":"            break;","lastModifiedDate":"2024-03-20"},{"lineNumber":34,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":35,"author":{"gitId":"LWachtel1"},"content":"        case \"LIST\":","lastModifiedDate":"2024-03-20"},{"lineNumber":36,"author":{"gitId":"LWachtel1"},"content":"            System.out.printf(\"Command \u0027list\u0027 entered with unnecessary arguments:\u0027%s\u0027\"","lastModifiedDate":"2024-03-20"},{"lineNumber":37,"author":{"gitId":"LWachtel1"},"content":"                    + \"\\nPlease re-enter with 0 arguments \"","lastModifiedDate":"2024-03-20"},{"lineNumber":38,"author":{"gitId":"LWachtel1"},"content":"                    + \"\\nFormat: \u0027list\u0027\\n\", super.getErroneousInput());","lastModifiedDate":"2024-03-20"},{"lineNumber":39,"author":{"gitId":"LWachtel1"},"content":"            break;","lastModifiedDate":"2024-03-20"},{"lineNumber":40,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":41,"author":{"gitId":"LWachtel1"},"content":"        case \"TODO\":","lastModifiedDate":"2024-03-20"},{"lineNumber":42,"author":{"gitId":"LWachtel1"},"content":"            System.out.printf(\"Command \u0027todo\u0027 entered with incorrect number of arguments:\u0027%s\u0027\"","lastModifiedDate":"2024-03-20"},{"lineNumber":43,"author":{"gitId":"LWachtel1"},"content":"                            + \"\\nPlease re-enter with 1 argument\"","lastModifiedDate":"2024-03-20"},{"lineNumber":44,"author":{"gitId":"LWachtel1"},"content":"                            + \"\\nFormat: \u0027deadline DESC_ARG\u0027\\n\",","lastModifiedDate":"2024-03-20"},{"lineNumber":45,"author":{"gitId":"LWachtel1"},"content":"                    super.getErroneousInput());","lastModifiedDate":"2024-03-20"},{"lineNumber":46,"author":{"gitId":"LWachtel1"},"content":"            break;","lastModifiedDate":"2024-03-20"},{"lineNumber":47,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":48,"author":{"gitId":"LWachtel1"},"content":"        case \"DEADLINE\":","lastModifiedDate":"2024-03-20"},{"lineNumber":49,"author":{"gitId":"LWachtel1"},"content":"            System.out.printf(\"Command \u0027deadline\u0027 entered with incorrect number of arguments:\u0027%s\u0027\"","lastModifiedDate":"2024-03-20"},{"lineNumber":50,"author":{"gitId":"LWachtel1"},"content":"                    + \"\\nPlease re-enter with 2 arguments separated by 1 /\"","lastModifiedDate":"2024-03-20"},{"lineNumber":51,"author":{"gitId":"LWachtel1"},"content":"                    + \"\\nFormat: \u0027deadline DESC_ARG /by DEADLINE_ARG\u0027\\n\",","lastModifiedDate":"2024-03-20"},{"lineNumber":52,"author":{"gitId":"LWachtel1"},"content":"                    super.getErroneousInput());","lastModifiedDate":"2024-03-20"},{"lineNumber":53,"author":{"gitId":"LWachtel1"},"content":"            break;","lastModifiedDate":"2024-03-20"},{"lineNumber":54,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":55,"author":{"gitId":"LWachtel1"},"content":"        case \"EVENT\":","lastModifiedDate":"2024-03-20"},{"lineNumber":56,"author":{"gitId":"LWachtel1"},"content":"            System.out.printf(\"Command \u0027event\u0027 entered with incorrect number of arguments:\u0027%s\u0027\"","lastModifiedDate":"2024-03-20"},{"lineNumber":57,"author":{"gitId":"LWachtel1"},"content":"                            + \"\\nPlease re-enter with 3 arguments separated by 2 /\"","lastModifiedDate":"2024-03-20"},{"lineNumber":58,"author":{"gitId":"LWachtel1"},"content":"                            + \"\\nFormat: \u0027event DESC_ARG /from START_ARG /to END_ARG\u0027\\n\",","lastModifiedDate":"2024-03-20"},{"lineNumber":59,"author":{"gitId":"LWachtel1"},"content":"                    super.getErroneousInput());","lastModifiedDate":"2024-03-20"},{"lineNumber":60,"author":{"gitId":"LWachtel1"},"content":"            break;","lastModifiedDate":"2024-03-20"},{"lineNumber":61,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":62,"author":{"gitId":"LWachtel1"},"content":"        case \"MARKUNMARK\":","lastModifiedDate":"2024-03-20"},{"lineNumber":63,"author":{"gitId":"LWachtel1"},"content":"            System.out.printf(\"Command \u0027mark/unmark\u0027 entered with incorrect number of arguments:\u0027%s\u0027\"","lastModifiedDate":"2024-03-20"},{"lineNumber":64,"author":{"gitId":"LWachtel1"},"content":"                            + \"\\nPlease re-enter with 1 argument\"","lastModifiedDate":"2024-03-20"},{"lineNumber":65,"author":{"gitId":"LWachtel1"},"content":"                            + \"\\nFormat: \u0027mark POSITION_ARG\u0027 OR \u0027unmark POSITION_ARG\u0027\\n\",","lastModifiedDate":"2024-03-20"},{"lineNumber":66,"author":{"gitId":"LWachtel1"},"content":"                    super.getErroneousInput());","lastModifiedDate":"2024-03-20"},{"lineNumber":67,"author":{"gitId":"LWachtel1"},"content":"            break;","lastModifiedDate":"2024-03-20"},{"lineNumber":68,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":69,"author":{"gitId":"LWachtel1"},"content":"        default:","lastModifiedDate":"2024-03-20"},{"lineNumber":70,"author":{"gitId":"LWachtel1"},"content":"            break;","lastModifiedDate":"2024-03-20"},{"lineNumber":71,"author":{"gitId":"LWachtel1"},"content":"        }","lastModifiedDate":"2024-03-20"},{"lineNumber":72,"author":{"gitId":"LWachtel1"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":73,"author":{"gitId":"LWachtel1"},"content":"}","lastModifiedDate":"2024-03-18"}],"authorContributionMap":{"LWachtel1":73}},{"path":"src/main/java/chatman/exceptions/IncorrectFormatException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LWachtel1"},"content":"package chatman.exceptions;","lastModifiedDate":"2024-03-20"},{"lineNumber":2,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":3,"author":{"gitId":"LWachtel1"},"content":"/**","lastModifiedDate":"2024-03-20"},{"lineNumber":4,"author":{"gitId":"LWachtel1"},"content":" * Implements custom exception class instantiated when user-entered command lacks required format for arguments.","lastModifiedDate":"2024-03-20"},{"lineNumber":5,"author":{"gitId":"LWachtel1"},"content":" *","lastModifiedDate":"2024-03-20"},{"lineNumber":6,"author":{"gitId":"LWachtel1"},"content":" * @author LWachtel1","lastModifiedDate":"2024-03-20"},{"lineNumber":7,"author":{"gitId":"LWachtel1"},"content":" * */","lastModifiedDate":"2024-03-20"},{"lineNumber":8,"author":{"gitId":"LWachtel1"},"content":"public class IncorrectFormatException extends ChatManException {","lastModifiedDate":"2024-03-20"},{"lineNumber":9,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":10,"author":{"gitId":"LWachtel1"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":11,"author":{"gitId":"LWachtel1"},"content":"     * Constructor for IncorrectFormatException class.","lastModifiedDate":"2024-03-20"},{"lineNumber":12,"author":{"gitId":"LWachtel1"},"content":"     *","lastModifiedDate":"2024-03-20"},{"lineNumber":13,"author":{"gitId":"LWachtel1"},"content":"     * @param commandType Command type entered by user for which exception was thrown.","lastModifiedDate":"2024-03-20"},{"lineNumber":14,"author":{"gitId":"LWachtel1"},"content":"     * @param erroneousInput String storing specific problem with user input which resulted in exception.","lastModifiedDate":"2024-03-20"},{"lineNumber":15,"author":{"gitId":"LWachtel1"},"content":"     **/","lastModifiedDate":"2024-03-20"},{"lineNumber":16,"author":{"gitId":"LWachtel1"},"content":"    public IncorrectFormatException(String commandType, String erroneousInput) {","lastModifiedDate":"2024-03-20"},{"lineNumber":17,"author":{"gitId":"LWachtel1"},"content":"        super(commandType, erroneousInput);","lastModifiedDate":"2024-03-20"},{"lineNumber":18,"author":{"gitId":"LWachtel1"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":19,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":20,"author":{"gitId":"LWachtel1"},"content":"    /**","lastModifiedDate":"2024-03-20"},{"lineNumber":21,"author":{"gitId":"LWachtel1"},"content":"     * Prints error message notifying user that command has been entered with incorrect formatting.","lastModifiedDate":"2024-03-20"},{"lineNumber":22,"author":{"gitId":"LWachtel1"},"content":"     * */","lastModifiedDate":"2024-03-20"},{"lineNumber":23,"author":{"gitId":"LWachtel1"},"content":"    @Override","lastModifiedDate":"2024-03-20"},{"lineNumber":24,"author":{"gitId":"LWachtel1"},"content":"    public void sendErrorMsg() {","lastModifiedDate":"2024-03-20"},{"lineNumber":25,"author":{"gitId":"LWachtel1"},"content":"        System.out.printf(\"%s%n%n\", \"____________________________________________________________\");","lastModifiedDate":"2024-03-20"},{"lineNumber":26,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":27,"author":{"gitId":"LWachtel1"},"content":"        switch (super.getCommandType()) {","lastModifiedDate":"2024-03-20"},{"lineNumber":28,"author":{"gitId":"LWachtel1"},"content":"        case \"TODO\":","lastModifiedDate":"2024-03-20"},{"lineNumber":29,"author":{"gitId":"LWachtel1"},"content":"            System.out.printf(\"Command \u0027todo\u0027 entered with incorrect formatting:\u0027%s\u0027\"","lastModifiedDate":"2024-03-20"},{"lineNumber":30,"author":{"gitId":"LWachtel1"},"content":"                            + \"\\nPlease re-enter with valid formatting (no blank arguments)\"","lastModifiedDate":"2024-03-20"},{"lineNumber":31,"author":{"gitId":"LWachtel1"},"content":"                            + \"\\nFormat: \u0027deadline DESC_ARG\u0027\\n\",","lastModifiedDate":"2024-03-20"},{"lineNumber":32,"author":{"gitId":"LWachtel1"},"content":"                    super.getErroneousInput());","lastModifiedDate":"2024-03-20"},{"lineNumber":33,"author":{"gitId":"LWachtel1"},"content":"            break;","lastModifiedDate":"2024-03-20"},{"lineNumber":34,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":35,"author":{"gitId":"LWachtel1"},"content":"        case \"DEADLINE\":","lastModifiedDate":"2024-03-20"},{"lineNumber":36,"author":{"gitId":"LWachtel1"},"content":"            System.out.printf(\"Command \u0027deadline\u0027 entered with incorrect formatting:\u0027%s\u0027\"","lastModifiedDate":"2024-03-20"},{"lineNumber":37,"author":{"gitId":"LWachtel1"},"content":"                            + \"\\nPlease re-enter with valid formatting (no blank arguments)\"","lastModifiedDate":"2024-03-20"},{"lineNumber":38,"author":{"gitId":"LWachtel1"},"content":"                            + \"\\nFormat: \u0027deadline DESC_ARG /by DEADLINE_ARG\u0027\\n\",","lastModifiedDate":"2024-03-20"},{"lineNumber":39,"author":{"gitId":"LWachtel1"},"content":"                    super.getErroneousInput());","lastModifiedDate":"2024-03-20"},{"lineNumber":40,"author":{"gitId":"LWachtel1"},"content":"            break;","lastModifiedDate":"2024-03-20"},{"lineNumber":41,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":42,"author":{"gitId":"LWachtel1"},"content":"        case \"EVENT\":","lastModifiedDate":"2024-03-20"},{"lineNumber":43,"author":{"gitId":"LWachtel1"},"content":"            System.out.printf(\"Command \u0027event\u0027 entered with incorrect formatting:\u0027%s\u0027\"","lastModifiedDate":"2024-03-20"},{"lineNumber":44,"author":{"gitId":"LWachtel1"},"content":"                            + \"\\nPlease re-enter with valid formatting (no blank arguments)\"","lastModifiedDate":"2024-03-20"},{"lineNumber":45,"author":{"gitId":"LWachtel1"},"content":"                            + \"\\nFormat: \u0027event DESC_ARG /from START_ARG /to END_ARG\u0027\\n\",","lastModifiedDate":"2024-03-20"},{"lineNumber":46,"author":{"gitId":"LWachtel1"},"content":"                    super.getErroneousInput());","lastModifiedDate":"2024-03-20"},{"lineNumber":47,"author":{"gitId":"LWachtel1"},"content":"            break;","lastModifiedDate":"2024-03-20"},{"lineNumber":48,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-20"},{"lineNumber":49,"author":{"gitId":"LWachtel1"},"content":"        default:","lastModifiedDate":"2024-03-20"},{"lineNumber":50,"author":{"gitId":"LWachtel1"},"content":"            break;","lastModifiedDate":"2024-03-20"},{"lineNumber":51,"author":{"gitId":"LWachtel1"},"content":"        }","lastModifiedDate":"2024-03-20"},{"lineNumber":52,"author":{"gitId":"LWachtel1"},"content":"    }","lastModifiedDate":"2024-03-20"},{"lineNumber":53,"author":{"gitId":"LWachtel1"},"content":"}","lastModifiedDate":"2024-03-20"}],"authorContributionMap":{"LWachtel1":53}},{"path":"src/main/java/chatman/exceptions/IncorrectMarkUnmarkException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LWachtel1"},"content":"package chatman.exceptions;","lastModifiedDate":"2024-03-18"},{"lineNumber":2,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":3,"author":{"gitId":"LWachtel1"},"content":"/**","lastModifiedDate":"2024-03-18"},{"lineNumber":4,"author":{"gitId":"LWachtel1"},"content":" * Implements custom exception class instantiated when user enters mark/unmark command with non-numerical index or","lastModifiedDate":"2024-03-18"},{"lineNumber":5,"author":{"gitId":"LWachtel1"},"content":" * out-of-bounds numerical index.","lastModifiedDate":"2024-03-18"},{"lineNumber":6,"author":{"gitId":"LWachtel1"},"content":" *","lastModifiedDate":"2024-03-18"},{"lineNumber":7,"author":{"gitId":"LWachtel1"},"content":" * @author LWachtel1","lastModifiedDate":"2024-03-18"},{"lineNumber":8,"author":{"gitId":"LWachtel1"},"content":" * */","lastModifiedDate":"2024-03-18"},{"lineNumber":9,"author":{"gitId":"LWachtel1"},"content":"public class IncorrectMarkUnmarkException extends ChatManException {","lastModifiedDate":"2024-03-18"},{"lineNumber":10,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":11,"author":{"gitId":"LWachtel1"},"content":"    /**","lastModifiedDate":"2024-03-18"},{"lineNumber":12,"author":{"gitId":"LWachtel1"},"content":"     * Constructor for IncorrectMarkUnmarkException class.","lastModifiedDate":"2024-03-18"},{"lineNumber":13,"author":{"gitId":"LWachtel1"},"content":"     *","lastModifiedDate":"2024-03-20"},{"lineNumber":14,"author":{"gitId":"LWachtel1"},"content":"     * @param commandType Command type entered by user for which exception was thrown.","lastModifiedDate":"2024-03-20"},{"lineNumber":15,"author":{"gitId":"LWachtel1"},"content":"     * @param erroneousInput String storing specific problem with user input which resulted in exception.","lastModifiedDate":"2024-03-20"},{"lineNumber":16,"author":{"gitId":"LWachtel1"},"content":"     **/","lastModifiedDate":"2024-03-18"},{"lineNumber":17,"author":{"gitId":"LWachtel1"},"content":"    public IncorrectMarkUnmarkException(String commandType, String erroneousInput) {","lastModifiedDate":"2024-03-20"},{"lineNumber":18,"author":{"gitId":"LWachtel1"},"content":"        super(commandType, erroneousInput);","lastModifiedDate":"2024-03-20"},{"lineNumber":19,"author":{"gitId":"LWachtel1"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":20,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":21,"author":{"gitId":"LWachtel1"},"content":"    /**","lastModifiedDate":"2024-03-18"},{"lineNumber":22,"author":{"gitId":"LWachtel1"},"content":"     * Prints error message notifying user index for mark/unmark command was not valid for use then prompts valid","lastModifiedDate":"2024-03-18"},{"lineNumber":23,"author":{"gitId":"LWachtel1"},"content":"     * re-entry.","lastModifiedDate":"2024-03-18"},{"lineNumber":24,"author":{"gitId":"LWachtel1"},"content":"     * */","lastModifiedDate":"2024-03-18"},{"lineNumber":25,"author":{"gitId":"LWachtel1"},"content":"    @Override","lastModifiedDate":"2024-03-18"},{"lineNumber":26,"author":{"gitId":"LWachtel1"},"content":"    public void sendErrorMsg() {","lastModifiedDate":"2024-03-18"},{"lineNumber":27,"author":{"gitId":"LWachtel1"},"content":"        System.out.printf(\"%s%n%n\", \"____________________________________________________________\");","lastModifiedDate":"2024-03-18"},{"lineNumber":28,"author":{"gitId":"LWachtel1"},"content":"        System.out.printf(\"mark/unmark Command has incorrect position value provided:\u0027%s\u0027.\"","lastModifiedDate":"2024-03-20"},{"lineNumber":29,"author":{"gitId":"LWachtel1"},"content":"                + \"\\nPlease re-enter with a valid numerical position within list bounds.\\n\",super.getErroneousInput());","lastModifiedDate":"2024-03-20"},{"lineNumber":30,"author":{"gitId":"LWachtel1"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":31,"author":{"gitId":"LWachtel1"},"content":"}","lastModifiedDate":"2024-03-18"}],"authorContributionMap":{"LWachtel1":31}},{"path":"src/main/java/chatman/tasks/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LWachtel1"},"content":"package chatman.tasks;","lastModifiedDate":"2024-03-18"},{"lineNumber":2,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":3,"author":{"gitId":"LWachtel1"},"content":"/**","lastModifiedDate":"2024-03-18"},{"lineNumber":4,"author":{"gitId":"LWachtel1"},"content":" * Implements template for any task with a deadline.","lastModifiedDate":"2024-03-18"},{"lineNumber":5,"author":{"gitId":"LWachtel1"},"content":" *","lastModifiedDate":"2024-03-18"},{"lineNumber":6,"author":{"gitId":"LWachtel1"},"content":" * @author LWachtel1","lastModifiedDate":"2024-03-18"},{"lineNumber":7,"author":{"gitId":"LWachtel1"},"content":" * */","lastModifiedDate":"2024-03-18"},{"lineNumber":8,"author":{"gitId":"LWachtel1"},"content":"public class Deadline extends Task {","lastModifiedDate":"2024-03-18"},{"lineNumber":9,"author":{"gitId":"LWachtel1"},"content":"    private String deadlineSymbol \u003d \"[D]\";","lastModifiedDate":"2024-03-18"},{"lineNumber":10,"author":{"gitId":"LWachtel1"},"content":"    private String by;","lastModifiedDate":"2024-03-18"},{"lineNumber":11,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":12,"author":{"gitId":"LWachtel1"},"content":"    /**","lastModifiedDate":"2024-03-18"},{"lineNumber":13,"author":{"gitId":"LWachtel1"},"content":"     * Constructor for Deadline class.","lastModifiedDate":"2024-03-18"},{"lineNumber":14,"author":{"gitId":"LWachtel1"},"content":"     *","lastModifiedDate":"2024-03-18"},{"lineNumber":15,"author":{"gitId":"LWachtel1"},"content":"     * @param description Description of task (that has deadline).","lastModifiedDate":"2024-03-18"},{"lineNumber":16,"author":{"gitId":"LWachtel1"},"content":"     * @param by Deadline date in String form.","lastModifiedDate":"2024-03-18"},{"lineNumber":17,"author":{"gitId":"LWachtel1"},"content":"     */","lastModifiedDate":"2024-03-18"},{"lineNumber":18,"author":{"gitId":"LWachtel1"},"content":"    public Deadline(String description, String by) {","lastModifiedDate":"2024-03-18"},{"lineNumber":19,"author":{"gitId":"LWachtel1"},"content":"        super(description);","lastModifiedDate":"2024-03-18"},{"lineNumber":20,"author":{"gitId":"LWachtel1"},"content":"        this.by \u003d by;","lastModifiedDate":"2024-03-18"},{"lineNumber":21,"author":{"gitId":"LWachtel1"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":22,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":23,"author":{"gitId":"LWachtel1"},"content":"    /**","lastModifiedDate":"2024-03-18"},{"lineNumber":24,"author":{"gitId":"LWachtel1"},"content":"     * Returns Deadline subclass label, completion checkbox, task description, and deadline date as 1 String.","lastModifiedDate":"2024-03-18"},{"lineNumber":25,"author":{"gitId":"LWachtel1"},"content":"     *","lastModifiedDate":"2024-03-18"},{"lineNumber":26,"author":{"gitId":"LWachtel1"},"content":"     * @return String representation of Deadline: [D], [X] or [ ], task description, deadline date as string.","lastModifiedDate":"2024-03-18"},{"lineNumber":27,"author":{"gitId":"LWachtel1"},"content":"     */","lastModifiedDate":"2024-03-18"},{"lineNumber":28,"author":{"gitId":"LWachtel1"},"content":"    @Override","lastModifiedDate":"2024-03-18"},{"lineNumber":29,"author":{"gitId":"LWachtel1"},"content":"    public String toString() {","lastModifiedDate":"2024-03-18"},{"lineNumber":30,"author":{"gitId":"LWachtel1"},"content":"        return deadlineSymbol + super.toString() + \" (by: \" + by + \")\";","lastModifiedDate":"2024-03-18"},{"lineNumber":31,"author":{"gitId":"LWachtel1"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":32,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":33,"author":{"gitId":"LWachtel1"},"content":"}","lastModifiedDate":"2024-03-18"}],"authorContributionMap":{"LWachtel1":33}},{"path":"src/main/java/chatman/tasks/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LWachtel1"},"content":"package chatman.tasks;","lastModifiedDate":"2024-03-18"},{"lineNumber":2,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":3,"author":{"gitId":"LWachtel1"},"content":"/**","lastModifiedDate":"2024-03-18"},{"lineNumber":4,"author":{"gitId":"LWachtel1"},"content":" * Implements template for any task with start and end date-times.","lastModifiedDate":"2024-03-18"},{"lineNumber":5,"author":{"gitId":"LWachtel1"},"content":" *","lastModifiedDate":"2024-03-18"},{"lineNumber":6,"author":{"gitId":"LWachtel1"},"content":" * @author LWachtel1","lastModifiedDate":"2024-03-18"},{"lineNumber":7,"author":{"gitId":"LWachtel1"},"content":" * */","lastModifiedDate":"2024-03-18"},{"lineNumber":8,"author":{"gitId":"LWachtel1"},"content":"public class Event extends Task {","lastModifiedDate":"2024-03-18"},{"lineNumber":9,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":10,"author":{"gitId":"LWachtel1"},"content":"    private String eventSymbol \u003d \"[E]\";","lastModifiedDate":"2024-03-18"},{"lineNumber":11,"author":{"gitId":"LWachtel1"},"content":"    private String startDateTime;","lastModifiedDate":"2024-03-18"},{"lineNumber":12,"author":{"gitId":"LWachtel1"},"content":"    private String endDateTime;","lastModifiedDate":"2024-03-18"},{"lineNumber":13,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":14,"author":{"gitId":"LWachtel1"},"content":"    /**","lastModifiedDate":"2024-03-18"},{"lineNumber":15,"author":{"gitId":"LWachtel1"},"content":"     * Constructor for Event class","lastModifiedDate":"2024-03-18"},{"lineNumber":16,"author":{"gitId":"LWachtel1"},"content":"     *","lastModifiedDate":"2024-03-18"},{"lineNumber":17,"author":{"gitId":"LWachtel1"},"content":"     * @param description Description of task (that has specified start and end date-times)","lastModifiedDate":"2024-03-18"},{"lineNumber":18,"author":{"gitId":"LWachtel1"},"content":"     * @param from Starting date-time for event","lastModifiedDate":"2024-03-18"},{"lineNumber":19,"author":{"gitId":"LWachtel1"},"content":"     * @param to Ending date-time for event","lastModifiedDate":"2024-03-18"},{"lineNumber":20,"author":{"gitId":"LWachtel1"},"content":"     */","lastModifiedDate":"2024-03-18"},{"lineNumber":21,"author":{"gitId":"LWachtel1"},"content":"    public Event(String description, String from, String to) {","lastModifiedDate":"2024-03-18"},{"lineNumber":22,"author":{"gitId":"LWachtel1"},"content":"        super(description);","lastModifiedDate":"2024-03-18"},{"lineNumber":23,"author":{"gitId":"LWachtel1"},"content":"        startDateTime \u003d from;","lastModifiedDate":"2024-03-18"},{"lineNumber":24,"author":{"gitId":"LWachtel1"},"content":"        endDateTime \u003d to;","lastModifiedDate":"2024-03-18"},{"lineNumber":25,"author":{"gitId":"LWachtel1"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":26,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":27,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":28,"author":{"gitId":"LWachtel1"},"content":"    /**","lastModifiedDate":"2024-03-18"},{"lineNumber":29,"author":{"gitId":"LWachtel1"},"content":"     * Returns Event subclass label, completion checkbox, task description, and start \u0026 end date-times as 1 String.","lastModifiedDate":"2024-03-18"},{"lineNumber":30,"author":{"gitId":"LWachtel1"},"content":"     *","lastModifiedDate":"2024-03-18"},{"lineNumber":31,"author":{"gitId":"LWachtel1"},"content":"     * @return String representation of Event: [E], [X] or [ ], task description, start \u0026 end date-time Strings.","lastModifiedDate":"2024-03-18"},{"lineNumber":32,"author":{"gitId":"LWachtel1"},"content":"     */","lastModifiedDate":"2024-03-18"},{"lineNumber":33,"author":{"gitId":"LWachtel1"},"content":"    @Override","lastModifiedDate":"2024-03-18"},{"lineNumber":34,"author":{"gitId":"LWachtel1"},"content":"    public String toString() {","lastModifiedDate":"2024-03-18"},{"lineNumber":35,"author":{"gitId":"LWachtel1"},"content":"        return eventSymbol + super.toString() + \" (from: \" + startDateTime + \" to: \" + endDateTime + \")\";","lastModifiedDate":"2024-03-18"},{"lineNumber":36,"author":{"gitId":"LWachtel1"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":37,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":38,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":39,"author":{"gitId":"LWachtel1"},"content":"}","lastModifiedDate":"2024-03-18"}],"authorContributionMap":{"LWachtel1":39}},{"path":"src/main/java/chatman/tasks/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LWachtel1"},"content":"package chatman.tasks;","lastModifiedDate":"2024-03-18"},{"lineNumber":2,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":3,"author":{"gitId":"LWachtel1"},"content":"/**","lastModifiedDate":"2024-03-18"},{"lineNumber":4,"author":{"gitId":"LWachtel1"},"content":" * Implements template with behaviours required of any task, regardless of subclass.","lastModifiedDate":"2024-03-18"},{"lineNumber":5,"author":{"gitId":"LWachtel1"},"content":" *","lastModifiedDate":"2024-03-18"},{"lineNumber":6,"author":{"gitId":"LWachtel1"},"content":" * @author LWachtel1","lastModifiedDate":"2024-03-18"},{"lineNumber":7,"author":{"gitId":"LWachtel1"},"content":" * */","lastModifiedDate":"2024-03-18"},{"lineNumber":8,"author":{"gitId":"LWachtel1"},"content":"public class Task {","lastModifiedDate":"2024-03-18"},{"lineNumber":9,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":10,"author":{"gitId":"LWachtel1"},"content":"    private String description;","lastModifiedDate":"2024-03-18"},{"lineNumber":11,"author":{"gitId":"LWachtel1"},"content":"    private boolean isDone;","lastModifiedDate":"2024-03-18"},{"lineNumber":12,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":13,"author":{"gitId":"LWachtel1"},"content":"    /**","lastModifiedDate":"2024-03-18"},{"lineNumber":14,"author":{"gitId":"LWachtel1"},"content":"     * Constructor for Task.","lastModifiedDate":"2024-03-18"},{"lineNumber":15,"author":{"gitId":"LWachtel1"},"content":"     *","lastModifiedDate":"2024-03-18"},{"lineNumber":16,"author":{"gitId":"LWachtel1"},"content":"     * @param description Description of task.","lastModifiedDate":"2024-03-18"},{"lineNumber":17,"author":{"gitId":"LWachtel1"},"content":"     */","lastModifiedDate":"2024-03-18"},{"lineNumber":18,"author":{"gitId":"LWachtel1"},"content":"    public Task(String description) {","lastModifiedDate":"2024-03-18"},{"lineNumber":19,"author":{"gitId":"LWachtel1"},"content":"        this.description \u003d description;","lastModifiedDate":"2024-03-18"},{"lineNumber":20,"author":{"gitId":"LWachtel1"},"content":"        isDone \u003d false;","lastModifiedDate":"2024-03-18"},{"lineNumber":21,"author":{"gitId":"LWachtel1"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":22,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":23,"author":{"gitId":"LWachtel1"},"content":"    public String getDescription() {","lastModifiedDate":"2024-03-18"},{"lineNumber":24,"author":{"gitId":"LWachtel1"},"content":"        return description;","lastModifiedDate":"2024-03-18"},{"lineNumber":25,"author":{"gitId":"LWachtel1"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":26,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":27,"author":{"gitId":"LWachtel1"},"content":"    public void setDone(boolean isDone) {","lastModifiedDate":"2024-03-18"},{"lineNumber":28,"author":{"gitId":"LWachtel1"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2024-03-18"},{"lineNumber":29,"author":{"gitId":"LWachtel1"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":30,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":31,"author":{"gitId":"LWachtel1"},"content":"    /**","lastModifiedDate":"2024-03-18"},{"lineNumber":32,"author":{"gitId":"LWachtel1"},"content":"     *  Returns checkbox representation completion status of task stored in task list.","lastModifiedDate":"2024-03-18"},{"lineNumber":33,"author":{"gitId":"LWachtel1"},"content":"     *","lastModifiedDate":"2024-03-18"},{"lineNumber":34,"author":{"gitId":"LWachtel1"},"content":"     * @return String \"[X]\" or \"[ ]\" depending on whether instance member isDone contains true or false.","lastModifiedDate":"2024-03-18"},{"lineNumber":35,"author":{"gitId":"LWachtel1"},"content":"     */","lastModifiedDate":"2024-03-18"},{"lineNumber":36,"author":{"gitId":"LWachtel1"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2024-03-18"},{"lineNumber":37,"author":{"gitId":"LWachtel1"},"content":"        return (isDone ? \"[X]\" : \"[ ]\"); // marks completed task (i.e., isDone is set to true) with [X]","lastModifiedDate":"2024-03-18"},{"lineNumber":38,"author":{"gitId":"LWachtel1"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":39,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":40,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":41,"author":{"gitId":"LWachtel1"},"content":"    /**","lastModifiedDate":"2024-03-18"},{"lineNumber":42,"author":{"gitId":"LWachtel1"},"content":"     * Returns completion checkbox and task description as 1 String","lastModifiedDate":"2024-03-18"},{"lineNumber":43,"author":{"gitId":"LWachtel1"},"content":"     *","lastModifiedDate":"2024-03-18"},{"lineNumber":44,"author":{"gitId":"LWachtel1"},"content":"     * @return [X] or [ ], task description","lastModifiedDate":"2024-03-18"},{"lineNumber":45,"author":{"gitId":"LWachtel1"},"content":"     */","lastModifiedDate":"2024-03-18"},{"lineNumber":46,"author":{"gitId":"LWachtel1"},"content":"    public String toString() {","lastModifiedDate":"2024-03-18"},{"lineNumber":47,"author":{"gitId":"LWachtel1"},"content":"        return getStatusIcon() + getDescription();","lastModifiedDate":"2024-03-18"},{"lineNumber":48,"author":{"gitId":"LWachtel1"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":49,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":50,"author":{"gitId":"LWachtel1"},"content":"}","lastModifiedDate":"2024-03-18"}],"authorContributionMap":{"LWachtel1":50}},{"path":"src/main/java/chatman/tasks/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LWachtel1"},"content":"package chatman.tasks;","lastModifiedDate":"2024-03-18"},{"lineNumber":2,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":3,"author":{"gitId":"LWachtel1"},"content":"/**","lastModifiedDate":"2024-03-18"},{"lineNumber":4,"author":{"gitId":"LWachtel1"},"content":" * Implements template for any task with no provided timings.","lastModifiedDate":"2024-03-18"},{"lineNumber":5,"author":{"gitId":"LWachtel1"},"content":" *","lastModifiedDate":"2024-03-18"},{"lineNumber":6,"author":{"gitId":"LWachtel1"},"content":" * @author LWachtel1","lastModifiedDate":"2024-03-18"},{"lineNumber":7,"author":{"gitId":"LWachtel1"},"content":" * */","lastModifiedDate":"2024-03-18"},{"lineNumber":8,"author":{"gitId":"LWachtel1"},"content":"public class Todo extends Task {","lastModifiedDate":"2024-03-18"},{"lineNumber":9,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":10,"author":{"gitId":"LWachtel1"},"content":"    private String todoSymbol \u003d \"[T]\";","lastModifiedDate":"2024-03-18"},{"lineNumber":11,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":12,"author":{"gitId":"LWachtel1"},"content":"    /**","lastModifiedDate":"2024-03-18"},{"lineNumber":13,"author":{"gitId":"LWachtel1"},"content":"     * Constructor for Todo.","lastModifiedDate":"2024-03-18"},{"lineNumber":14,"author":{"gitId":"LWachtel1"},"content":"     *","lastModifiedDate":"2024-03-18"},{"lineNumber":15,"author":{"gitId":"LWachtel1"},"content":"     * @param description Description of task.","lastModifiedDate":"2024-03-18"},{"lineNumber":16,"author":{"gitId":"LWachtel1"},"content":"     */","lastModifiedDate":"2024-03-18"},{"lineNumber":17,"author":{"gitId":"LWachtel1"},"content":"    public Todo(String description) {","lastModifiedDate":"2024-03-18"},{"lineNumber":18,"author":{"gitId":"LWachtel1"},"content":"        super(description);","lastModifiedDate":"2024-03-18"},{"lineNumber":19,"author":{"gitId":"LWachtel1"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":20,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":21,"author":{"gitId":"LWachtel1"},"content":"    /**","lastModifiedDate":"2024-03-18"},{"lineNumber":22,"author":{"gitId":"LWachtel1"},"content":"     * Returns Todo subclass label, completion checkbox, and task description as 1 String.","lastModifiedDate":"2024-03-18"},{"lineNumber":23,"author":{"gitId":"LWachtel1"},"content":"     *","lastModifiedDate":"2024-03-18"},{"lineNumber":24,"author":{"gitId":"LWachtel1"},"content":"     * @return String representation of Todo: [T], [X] or [ ], task description.","lastModifiedDate":"2024-03-18"},{"lineNumber":25,"author":{"gitId":"LWachtel1"},"content":"     */","lastModifiedDate":"2024-03-18"},{"lineNumber":26,"author":{"gitId":"LWachtel1"},"content":"    @Override","lastModifiedDate":"2024-03-18"},{"lineNumber":27,"author":{"gitId":"LWachtel1"},"content":"    public String toString() {","lastModifiedDate":"2024-03-18"},{"lineNumber":28,"author":{"gitId":"LWachtel1"},"content":"        return todoSymbol + super.toString();","lastModifiedDate":"2024-03-18"},{"lineNumber":29,"author":{"gitId":"LWachtel1"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":30,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":31,"author":{"gitId":"LWachtel1"},"content":"}","lastModifiedDate":"2024-03-18"}],"authorContributionMap":{"LWachtel1":31}},{"path":"src/main/java/chatman/utility/CommandParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LWachtel1"},"content":"package chatman.utility;","lastModifiedDate":"2024-03-18"},{"lineNumber":2,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":3,"author":{"gitId":"LWachtel1"},"content":"import chatman.commands.Command;","lastModifiedDate":"2024-03-18"},{"lineNumber":4,"author":{"gitId":"LWachtel1"},"content":"import chatman.commands.ByeCommand;","lastModifiedDate":"2024-03-18"},{"lineNumber":5,"author":{"gitId":"LWachtel1"},"content":"import chatman.commands.ListCommand;","lastModifiedDate":"2024-03-18"},{"lineNumber":6,"author":{"gitId":"LWachtel1"},"content":"import chatman.commands.MarkUnmarkCommand;","lastModifiedDate":"2024-03-18"},{"lineNumber":7,"author":{"gitId":"LWachtel1"},"content":"import chatman.commands.TodoCommand;","lastModifiedDate":"2024-03-18"},{"lineNumber":8,"author":{"gitId":"LWachtel1"},"content":"import chatman.commands.DeadlineCommand;","lastModifiedDate":"2024-03-18"},{"lineNumber":9,"author":{"gitId":"LWachtel1"},"content":"import chatman.commands.EventCommand;","lastModifiedDate":"2024-03-18"},{"lineNumber":10,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":11,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":12,"author":{"gitId":"LWachtel1"},"content":"import chatman.exceptions.*;","lastModifiedDate":"2024-03-20"},{"lineNumber":13,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":14,"author":{"gitId":"LWachtel1"},"content":"import java.util.Arrays;","lastModifiedDate":"2024-03-18"},{"lineNumber":15,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":16,"author":{"gitId":"LWachtel1"},"content":"/**","lastModifiedDate":"2024-03-18"},{"lineNumber":17,"author":{"gitId":"LWachtel1"},"content":" * Implements command parser.","lastModifiedDate":"2024-03-18"},{"lineNumber":18,"author":{"gitId":"LWachtel1"},"content":" *","lastModifiedDate":"2024-03-18"},{"lineNumber":19,"author":{"gitId":"LWachtel1"},"content":" * @author LWachtel1","lastModifiedDate":"2024-03-18"},{"lineNumber":20,"author":{"gitId":"LWachtel1"},"content":" * */","lastModifiedDate":"2024-03-18"},{"lineNumber":21,"author":{"gitId":"LWachtel1"},"content":"public class CommandParser {","lastModifiedDate":"2024-03-18"},{"lineNumber":22,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":23,"author":{"gitId":"LWachtel1"},"content":"    private static final String[] RECOGNISED_COMMANDS \u003d {\"BYE\", \"LIST\", \"MARK\", \"UNMARK\", \"TODO\",","lastModifiedDate":"2024-03-18"},{"lineNumber":24,"author":{"gitId":"LWachtel1"},"content":"            \"DEADLINE\", \"EVENT\"};","lastModifiedDate":"2024-03-18"},{"lineNumber":25,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":26,"author":{"gitId":"LWachtel1"},"content":"    /**","lastModifiedDate":"2024-03-18"},{"lineNumber":27,"author":{"gitId":"LWachtel1"},"content":"     * Constructor for CommandParser.","lastModifiedDate":"2024-03-18"},{"lineNumber":28,"author":{"gitId":"LWachtel1"},"content":"     */","lastModifiedDate":"2024-03-18"},{"lineNumber":29,"author":{"gitId":"LWachtel1"},"content":"    public CommandParser() {","lastModifiedDate":"2024-03-18"},{"lineNumber":30,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":31,"author":{"gitId":"LWachtel1"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":32,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":33,"author":{"gitId":"LWachtel1"},"content":"    /**","lastModifiedDate":"2024-03-18"},{"lineNumber":34,"author":{"gitId":"LWachtel1"},"content":"     * Extracts command type from user text input and then instantiates object of corresponding class.","lastModifiedDate":"2024-03-18"},{"lineNumber":35,"author":{"gitId":"LWachtel1"},"content":"     * Calls object\u0027s perform() method to execute desired ChatMan command.","lastModifiedDate":"2024-03-18"},{"lineNumber":36,"author":{"gitId":"LWachtel1"},"content":"     * Returns reference of object to instance of CommandReader class.","lastModifiedDate":"2024-03-18"},{"lineNumber":37,"author":{"gitId":"LWachtel1"},"content":"     *","lastModifiedDate":"2024-03-18"},{"lineNumber":38,"author":{"gitId":"LWachtel1"},"content":"     *","lastModifiedDate":"2024-03-18"},{"lineNumber":39,"author":{"gitId":"LWachtel1"},"content":"     * @param receivedCommand Raw text input from user, intended to represent a chatbot command.","lastModifiedDate":"2024-03-18"},{"lineNumber":40,"author":{"gitId":"LWachtel1"},"content":"     * @return Reference to instantiated object corresponding to command.","lastModifiedDate":"2024-03-18"},{"lineNumber":41,"author":{"gitId":"LWachtel1"},"content":"     * @throws FalseCommandException If command type entered is unrecognised.","lastModifiedDate":"2024-03-18"},{"lineNumber":42,"author":{"gitId":"LWachtel1"},"content":"     * @throws FullListException If task arraylist size equals MAX_NUM_TASKS when attempting to add Todo, Deadline","lastModifiedDate":"2024-03-18"},{"lineNumber":43,"author":{"gitId":"LWachtel1"},"content":"     * or Event.","lastModifiedDate":"2024-03-18"},{"lineNumber":44,"author":{"gitId":"LWachtel1"},"content":"     * @throws IncorrectArgumentNumException If a command is provided with incorrect number of arguments.","lastModifiedDate":"2024-03-20"},{"lineNumber":45,"author":{"gitId":"LWachtel1"},"content":"     * @throws IncorrectMarkUnmarkException If MarkUnmarkCommand provided with non-numerical index or with numerical","lastModifiedDate":"2024-03-18"},{"lineNumber":46,"author":{"gitId":"LWachtel1"},"content":"     * index beyond task arraylist size.","lastModifiedDate":"2024-03-18"},{"lineNumber":47,"author":{"gitId":"LWachtel1"},"content":"     * @throws EmptyListException If list of stored tasks is currently empty.","lastModifiedDate":"2024-03-20"},{"lineNumber":48,"author":{"gitId":"LWachtel1"},"content":"     * @throws IncorrectFormatException If command is entered without required formatting of arguments.","lastModifiedDate":"2024-03-20"},{"lineNumber":49,"author":{"gitId":"LWachtel1"},"content":"     * */","lastModifiedDate":"2024-03-20"},{"lineNumber":50,"author":{"gitId":"LWachtel1"},"content":"    public Command parse(String receivedCommand) throws FalseCommandException, FullListException,","lastModifiedDate":"2024-03-20"},{"lineNumber":51,"author":{"gitId":"LWachtel1"},"content":"            IncorrectArgumentNumException, IncorrectMarkUnmarkException, EmptyListException, IncorrectFormatException {","lastModifiedDate":"2024-03-20"},{"lineNumber":52,"author":{"gitId":"LWachtel1"},"content":"        Command commandToReturn \u003d null;","lastModifiedDate":"2024-03-18"},{"lineNumber":53,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":54,"author":{"gitId":"LWachtel1"},"content":"        String[] fullCommand \u003d receivedCommand.split(\" \");","lastModifiedDate":"2024-03-18"},{"lineNumber":55,"author":{"gitId":"LWachtel1"},"content":"        String commandType \u003d fullCommand[0].toUpperCase(); //first word assumed to specify type of command","lastModifiedDate":"2024-03-18"},{"lineNumber":56,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        //@@author LWachtel1-reused","lastModifiedDate":"2024-03-18"},{"lineNumber":58,"author":{"gitId":"-"},"content":"        //Reused from https://stackoverflow.com/questions/1128723/how-do-i-determine-whether-an-array-contains-a-particular-value-in-java","lastModifiedDate":"2024-03-18"},{"lineNumber":59,"author":{"gitId":"-"},"content":"        //with minor modifications","lastModifiedDate":"2024-03-18"},{"lineNumber":60,"author":{"gitId":"-"},"content":"        boolean isValidCommand \u003d Arrays.asList(RECOGNISED_COMMANDS).contains(commandType);","lastModifiedDate":"2024-03-18"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        //@@author","lastModifiedDate":"2024-03-18"},{"lineNumber":62,"author":{"gitId":"LWachtel1"},"content":"        if (!isValidCommand) {","lastModifiedDate":"2024-03-18"},{"lineNumber":63,"author":{"gitId":"LWachtel1"},"content":"            //FalseCommandException caught by read() method of CommandReader object","lastModifiedDate":"2024-03-18"},{"lineNumber":64,"author":{"gitId":"LWachtel1"},"content":"            throw new FalseCommandException(commandType,receivedCommand);","lastModifiedDate":"2024-03-20"},{"lineNumber":65,"author":{"gitId":"LWachtel1"},"content":"        }","lastModifiedDate":"2024-03-18"},{"lineNumber":66,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":67,"author":{"gitId":"LWachtel1"},"content":"        switch (commandType) {","lastModifiedDate":"2024-03-18"},{"lineNumber":68,"author":{"gitId":"LWachtel1"},"content":"        case \"BYE\":","lastModifiedDate":"2024-03-18"},{"lineNumber":69,"author":{"gitId":"LWachtel1"},"content":"            ByeCommand exit \u003d new ByeCommand(receivedCommand);","lastModifiedDate":"2024-03-18"},{"lineNumber":70,"author":{"gitId":"LWachtel1"},"content":"            exit.perform();","lastModifiedDate":"2024-03-18"},{"lineNumber":71,"author":{"gitId":"LWachtel1"},"content":"            commandToReturn \u003d exit;","lastModifiedDate":"2024-03-18"},{"lineNumber":72,"author":{"gitId":"LWachtel1"},"content":"            break;","lastModifiedDate":"2024-03-18"},{"lineNumber":73,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":74,"author":{"gitId":"LWachtel1"},"content":"        case \"LIST\":","lastModifiedDate":"2024-03-18"},{"lineNumber":75,"author":{"gitId":"LWachtel1"},"content":"            ListCommand list \u003d new ListCommand(receivedCommand);","lastModifiedDate":"2024-03-18"},{"lineNumber":76,"author":{"gitId":"LWachtel1"},"content":"            list.perform();","lastModifiedDate":"2024-03-18"},{"lineNumber":77,"author":{"gitId":"LWachtel1"},"content":"            commandToReturn \u003d list;","lastModifiedDate":"2024-03-18"},{"lineNumber":78,"author":{"gitId":"LWachtel1"},"content":"            break;","lastModifiedDate":"2024-03-18"},{"lineNumber":79,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":80,"author":{"gitId":"LWachtel1"},"content":"        case \"MARK\":","lastModifiedDate":"2024-03-18"},{"lineNumber":81,"author":{"gitId":"LWachtel1"},"content":"            //Fallthrough","lastModifiedDate":"2024-03-18"},{"lineNumber":82,"author":{"gitId":"LWachtel1"},"content":"        case \"UNMARK\":","lastModifiedDate":"2024-03-18"},{"lineNumber":83,"author":{"gitId":"LWachtel1"},"content":"            MarkUnmarkCommand listMarker \u003d new MarkUnmarkCommand(receivedCommand);","lastModifiedDate":"2024-03-18"},{"lineNumber":84,"author":{"gitId":"LWachtel1"},"content":"            listMarker.perform();","lastModifiedDate":"2024-03-18"},{"lineNumber":85,"author":{"gitId":"LWachtel1"},"content":"            commandToReturn \u003d listMarker;","lastModifiedDate":"2024-03-18"},{"lineNumber":86,"author":{"gitId":"LWachtel1"},"content":"            break;","lastModifiedDate":"2024-03-18"},{"lineNumber":87,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":88,"author":{"gitId":"LWachtel1"},"content":"        case \"TODO\":","lastModifiedDate":"2024-03-18"},{"lineNumber":89,"author":{"gitId":"LWachtel1"},"content":"            TodoCommand toDo \u003d new TodoCommand(receivedCommand);","lastModifiedDate":"2024-03-18"},{"lineNumber":90,"author":{"gitId":"LWachtel1"},"content":"            toDo.perform();","lastModifiedDate":"2024-03-18"},{"lineNumber":91,"author":{"gitId":"LWachtel1"},"content":"            commandToReturn \u003d toDo;","lastModifiedDate":"2024-03-18"},{"lineNumber":92,"author":{"gitId":"LWachtel1"},"content":"            break;","lastModifiedDate":"2024-03-18"},{"lineNumber":93,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":94,"author":{"gitId":"LWachtel1"},"content":"        case \"DEADLINE\":","lastModifiedDate":"2024-03-18"},{"lineNumber":95,"author":{"gitId":"LWachtel1"},"content":"            DeadlineCommand deadLine \u003d new DeadlineCommand(receivedCommand);","lastModifiedDate":"2024-03-18"},{"lineNumber":96,"author":{"gitId":"LWachtel1"},"content":"            deadLine.perform();","lastModifiedDate":"2024-03-18"},{"lineNumber":97,"author":{"gitId":"LWachtel1"},"content":"            commandToReturn \u003d deadLine;","lastModifiedDate":"2024-03-18"},{"lineNumber":98,"author":{"gitId":"LWachtel1"},"content":"            break;","lastModifiedDate":"2024-03-18"},{"lineNumber":99,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":100,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":101,"author":{"gitId":"LWachtel1"},"content":"        case \"EVENT\":","lastModifiedDate":"2024-03-18"},{"lineNumber":102,"author":{"gitId":"LWachtel1"},"content":"            EventCommand event \u003d new EventCommand(receivedCommand);","lastModifiedDate":"2024-03-18"},{"lineNumber":103,"author":{"gitId":"LWachtel1"},"content":"            event.perform();","lastModifiedDate":"2024-03-18"},{"lineNumber":104,"author":{"gitId":"LWachtel1"},"content":"            commandToReturn \u003d event;","lastModifiedDate":"2024-03-18"},{"lineNumber":105,"author":{"gitId":"LWachtel1"},"content":"            break;","lastModifiedDate":"2024-03-18"},{"lineNumber":106,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":107,"author":{"gitId":"LWachtel1"},"content":"        default:","lastModifiedDate":"2024-03-18"},{"lineNumber":108,"author":{"gitId":"LWachtel1"},"content":"            break;","lastModifiedDate":"2024-03-18"},{"lineNumber":109,"author":{"gitId":"LWachtel1"},"content":"        }","lastModifiedDate":"2024-03-18"},{"lineNumber":110,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":111,"author":{"gitId":"LWachtel1"},"content":"        return commandToReturn;","lastModifiedDate":"2024-03-18"},{"lineNumber":112,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":113,"author":{"gitId":"LWachtel1"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":114,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":115,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":116,"author":{"gitId":"LWachtel1"},"content":"}","lastModifiedDate":"2024-03-18"}],"authorContributionMap":{"LWachtel1":111,"-":5}},{"path":"src/main/java/chatman/utility/CommandReader.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LWachtel1"},"content":"package chatman.utility;","lastModifiedDate":"2024-03-18"},{"lineNumber":2,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":3,"author":{"gitId":"LWachtel1"},"content":"import chatman.exceptions.*;","lastModifiedDate":"2024-03-18"},{"lineNumber":4,"author":{"gitId":"LWachtel1"},"content":"import chatman.commands.*;","lastModifiedDate":"2024-03-18"},{"lineNumber":5,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":6,"author":{"gitId":"LWachtel1"},"content":"import java.util.Scanner;","lastModifiedDate":"2024-03-18"},{"lineNumber":7,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":8,"author":{"gitId":"LWachtel1"},"content":"/**","lastModifiedDate":"2024-03-18"},{"lineNumber":9,"author":{"gitId":"LWachtel1"},"content":" * Implements functionality to continuously read in user input and trigger input parsing and subsequent execution of","lastModifiedDate":"2024-03-18"},{"lineNumber":10,"author":{"gitId":"LWachtel1"},"content":" * valid commands.","lastModifiedDate":"2024-03-18"},{"lineNumber":11,"author":{"gitId":"LWachtel1"},"content":" *","lastModifiedDate":"2024-03-18"},{"lineNumber":12,"author":{"gitId":"LWachtel1"},"content":" * @author LWachtel1","lastModifiedDate":"2024-03-18"},{"lineNumber":13,"author":{"gitId":"LWachtel1"},"content":" * */","lastModifiedDate":"2024-03-18"},{"lineNumber":14,"author":{"gitId":"LWachtel1"},"content":"public class CommandReader {","lastModifiedDate":"2024-03-18"},{"lineNumber":15,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":16,"author":{"gitId":"LWachtel1"},"content":"    public CommandReader() {","lastModifiedDate":"2024-03-18"},{"lineNumber":17,"author":{"gitId":"LWachtel1"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":18,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":19,"author":{"gitId":"LWachtel1"},"content":"    /**","lastModifiedDate":"2024-03-18"},{"lineNumber":20,"author":{"gitId":"LWachtel1"},"content":"     * Provides main loop of ChatMan; reads user input and instantiates CommandParser object to parse input \u0026","lastModifiedDate":"2024-03-18"},{"lineNumber":21,"author":{"gitId":"LWachtel1"},"content":"     * instantiate appropriate Command subclass object to perform corresponding command.","lastModifiedDate":"2024-03-18"},{"lineNumber":22,"author":{"gitId":"LWachtel1"},"content":"     * Also provides exception handlers to catch all exceptions thrown from subsequent method calls.","lastModifiedDate":"2024-03-18"},{"lineNumber":23,"author":{"gitId":"LWachtel1"},"content":"     **/","lastModifiedDate":"2024-03-18"},{"lineNumber":24,"author":{"gitId":"LWachtel1"},"content":"    public void read() {","lastModifiedDate":"2024-03-18"},{"lineNumber":25,"author":{"gitId":"LWachtel1"},"content":"        Scanner commandReader \u003d new Scanner(System.in);","lastModifiedDate":"2024-03-18"},{"lineNumber":26,"author":{"gitId":"LWachtel1"},"content":"        String userCommand;","lastModifiedDate":"2024-03-18"},{"lineNumber":27,"author":{"gitId":"LWachtel1"},"content":"        boolean shouldExitLoop \u003d false;","lastModifiedDate":"2024-03-18"},{"lineNumber":28,"author":{"gitId":"LWachtel1"},"content":"        CommandParser parser \u003d new CommandParser();","lastModifiedDate":"2024-03-18"},{"lineNumber":29,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":30,"author":{"gitId":"LWachtel1"},"content":"        while (!shouldExitLoop) {","lastModifiedDate":"2024-03-18"},{"lineNumber":31,"author":{"gitId":"LWachtel1"},"content":"            System.out.printf(\"%s%n%n\", \"____________________________________________________________\");","lastModifiedDate":"2024-03-18"},{"lineNumber":32,"author":{"gitId":"LWachtel1"},"content":"            userCommand \u003d commandReader.nextLine();","lastModifiedDate":"2024-03-18"},{"lineNumber":33,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":34,"author":{"gitId":"LWachtel1"},"content":"            try {","lastModifiedDate":"2024-03-18"},{"lineNumber":35,"author":{"gitId":"LWachtel1"},"content":"                Command performedCommand \u003d parser.parse(userCommand);","lastModifiedDate":"2024-03-18"},{"lineNumber":36,"author":{"gitId":"LWachtel1"},"content":"                if (performedCommand instanceof ByeCommand) {","lastModifiedDate":"2024-03-18"},{"lineNumber":37,"author":{"gitId":"LWachtel1"},"content":"                    shouldExitLoop \u003d true;","lastModifiedDate":"2024-03-18"},{"lineNumber":38,"author":{"gitId":"LWachtel1"},"content":"                }","lastModifiedDate":"2024-03-18"},{"lineNumber":39,"author":{"gitId":"LWachtel1"},"content":"            } catch (FalseCommandException e) {","lastModifiedDate":"2024-03-18"},{"lineNumber":40,"author":{"gitId":"LWachtel1"},"content":"                e.sendErrorMsg();","lastModifiedDate":"2024-03-18"},{"lineNumber":41,"author":{"gitId":"LWachtel1"},"content":"            } catch (FullListException e) {","lastModifiedDate":"2024-03-18"},{"lineNumber":42,"author":{"gitId":"LWachtel1"},"content":"                e.sendErrorMsg();","lastModifiedDate":"2024-03-18"},{"lineNumber":43,"author":{"gitId":"LWachtel1"},"content":"            } catch (IncorrectArgumentNumException e) {","lastModifiedDate":"2024-03-18"},{"lineNumber":44,"author":{"gitId":"LWachtel1"},"content":"                e.sendErrorMsg();","lastModifiedDate":"2024-03-18"},{"lineNumber":45,"author":{"gitId":"LWachtel1"},"content":"            } catch (IncorrectMarkUnmarkException e) {","lastModifiedDate":"2024-03-18"},{"lineNumber":46,"author":{"gitId":"LWachtel1"},"content":"                e.sendErrorMsg();","lastModifiedDate":"2024-03-18"},{"lineNumber":47,"author":{"gitId":"LWachtel1"},"content":"            } catch (EmptyListException e) {","lastModifiedDate":"2024-03-20"},{"lineNumber":48,"author":{"gitId":"LWachtel1"},"content":"                e.sendErrorMsg();","lastModifiedDate":"2024-03-20"},{"lineNumber":49,"author":{"gitId":"LWachtel1"},"content":"            } catch (IncorrectFormatException e) {","lastModifiedDate":"2024-03-20"},{"lineNumber":50,"author":{"gitId":"LWachtel1"},"content":"                e.sendErrorMsg();","lastModifiedDate":"2024-03-20"},{"lineNumber":51,"author":{"gitId":"LWachtel1"},"content":"            }","lastModifiedDate":"2024-03-18"},{"lineNumber":52,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-03-18"},{"lineNumber":53,"author":{"gitId":"LWachtel1"},"content":"        }","lastModifiedDate":"2024-03-18"},{"lineNumber":54,"author":{"gitId":"LWachtel1"},"content":"    }","lastModifiedDate":"2024-03-18"},{"lineNumber":55,"author":{"gitId":"LWachtel1"},"content":"}","lastModifiedDate":"2024-03-18"}],"authorContributionMap":{"LWachtel1":55}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"LWachtel1"},"content":"list","lastModifiedDate":"2024-02-27"},{"lineNumber":2,"author":{"gitId":"LWachtel1"},"content":"list","lastModifiedDate":"2024-02-27"},{"lineNumber":3,"author":{"gitId":"LWachtel1"},"content":"todo respond to S","lastModifiedDate":"2024-02-27"},{"lineNumber":4,"author":{"gitId":"LWachtel1"},"content":"mark 2","lastModifiedDate":"2024-02-27"},{"lineNumber":5,"author":{"gitId":"LWachtel1"},"content":"event buy groceries /from Monday 4pm /to 6pm","lastModifiedDate":"2024-02-27"},{"lineNumber":6,"author":{"gitId":"LWachtel1"},"content":"mark 2","lastModifiedDate":"2024-02-27"},{"lineNumber":7,"author":{"gitId":"LWachtel1"},"content":"unmark 2","lastModifiedDate":"2024-02-27"},{"lineNumber":8,"author":{"gitId":"LWachtel1"},"content":"deadline return library book /by 1st March","lastModifiedDate":"2024-02-27"},{"lineNumber":9,"author":{"gitId":"LWachtel1"},"content":"list","lastModifiedDate":"2024-02-27"},{"lineNumber":10,"author":{"gitId":"LWachtel1"},"content":"bye","lastModifiedDate":"2024-02-27"},{"lineNumber":11,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-02-27"},{"lineNumber":12,"author":{"gitId":"LWachtel1"},"content":"","lastModifiedDate":"2024-02-27"}],"authorContributionMap":{"LWachtel1":12}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"LWachtel1"},"content":"javac  -cp ..\\src\\main\\java\\ -Xlint:none -d ..\\bin ..\\src\\main\\java\\chatman\\*.java ..\\src\\main\\java\\chatman\\commands\\*.java ..\\src\\main\\java\\chatman\\exceptions\\*.java ..\\src\\main\\java\\chatman\\tasks\\*.java ..\\src\\main\\java\\chatman\\utility\\*.java","lastModifiedDate":"2024-03-18"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"LWachtel1"},"content":"REM no error here, errorlevel \u003d\u003d 0g","lastModifiedDate":"2024-03-18"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"LWachtel1":2,"-":19}}]
