[{"path":"data/list.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"edwardhumi"},"content":"T/1/Shopping","lastModifiedDate":"2024-03-03"},{"lineNumber":2,"author":{"gitId":"edwardhumi"},"content":"E/0/Party/Monday/Sunday","lastModifiedDate":"2024-02-20"},{"lineNumber":3,"author":{"gitId":"edwardhumi"},"content":"D/1/Assignments/Tuesday","lastModifiedDate":"2024-03-03"}],"authorContributionMap":{"edwardhumi":3}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"edwardhumi"},"content":"# Humi User Guide","lastModifiedDate":"2024-03-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":3,"author":{"gitId":"-"},"content":"## Features","lastModifiedDate":"2019-07-29"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":5,"author":{"gitId":"edwardhumi"},"content":"### List all tasks: list","lastModifiedDate":"2024-03-04"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":7,"author":{"gitId":"edwardhumi"},"content":"Prints all saved tasks in the list","lastModifiedDate":"2024-03-04"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":9,"author":{"gitId":"edwardhumi"},"content":"Format: `list`","lastModifiedDate":"2024-03-04"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":12,"author":{"gitId":"edwardhumi"},"content":"### Add Todo task: todo","lastModifiedDate":"2024-03-04"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":14,"author":{"gitId":"edwardhumi"},"content":"Adds a todo task to the task list","lastModifiedDate":"2024-03-04"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":16,"author":{"gitId":"edwardhumi"},"content":"Format: `todo TASK`","lastModifiedDate":"2024-03-04"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":18,"author":{"gitId":"edwardhumi"},"content":"Example: `todo Shopping`","lastModifiedDate":"2024-03-04"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":21,"author":{"gitId":"edwardhumi"},"content":"### Add Deadline task: deadline","lastModifiedDate":"2024-03-04"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":23,"author":{"gitId":"edwardhumi"},"content":"Adds a deadline task to the task list\u003cbr/\u003e","lastModifiedDate":"2024-03-04"},{"lineNumber":24,"author":{"gitId":"edwardhumi"},"content":"Dates in the format of yyyy-mm-dd hh:mm will be reformatted into MMM-dd-yyyy hh:mm AM/PM (e.g. `2024-10-15 18:30` -\u003e `Oct 15 2024 06:30 PM`)","lastModifiedDate":"2024-03-04"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":26,"author":{"gitId":"edwardhumi"},"content":"Format: `deadline TASK /by DEADLINE`","lastModifiedDate":"2024-03-04"},{"lineNumber":27,"author":{"gitId":"edwardhumi"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":28,"author":{"gitId":"edwardhumi"},"content":"Examples: ","lastModifiedDate":"2024-03-04"},{"lineNumber":29,"author":{"gitId":"edwardhumi"},"content":"- `deadline Assignment /by 2024-10-15 18:30`","lastModifiedDate":"2024-03-04"},{"lineNumber":30,"author":{"gitId":"edwardhumi"},"content":"- `deadline Lab report /by Tuesday`","lastModifiedDate":"2024-03-04"},{"lineNumber":31,"author":{"gitId":"edwardhumi"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":32,"author":{"gitId":"edwardhumi"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":33,"author":{"gitId":"edwardhumi"},"content":"### Adding a Event: event","lastModifiedDate":"2024-03-04"},{"lineNumber":34,"author":{"gitId":"edwardhumi"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":35,"author":{"gitId":"edwardhumi"},"content":"Adds an event task to the task list\u003cbr/\u003e","lastModifiedDate":"2024-03-04"},{"lineNumber":36,"author":{"gitId":"edwardhumi"},"content":"Dates in the format of yyyy-mm-dd hh:mm will be reformatted into MMM-dd-yyyy hh:mm AM/PM (e.g. `2024-10-15 18:30` -\u003e `Oct 15 2024 06:30 PM`)","lastModifiedDate":"2024-03-04"},{"lineNumber":37,"author":{"gitId":"edwardhumi"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":38,"author":{"gitId":"edwardhumi"},"content":"Format: `event TASK /from START /to END`","lastModifiedDate":"2024-03-04"},{"lineNumber":39,"author":{"gitId":"edwardhumi"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":40,"author":{"gitId":"edwardhumi"},"content":"Examples:","lastModifiedDate":"2024-03-04"},{"lineNumber":41,"author":{"gitId":"edwardhumi"},"content":"- `event PGP Party /from 2024-10-15 18:30 /to 19:30`","lastModifiedDate":"2024-03-04"},{"lineNumber":42,"author":{"gitId":"edwardhumi"},"content":"- `event Career Fair /from Tuesday /to Friday`","lastModifiedDate":"2024-03-04"},{"lineNumber":43,"author":{"gitId":"edwardhumi"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":44,"author":{"gitId":"edwardhumi"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":45,"author":{"gitId":"edwardhumi"},"content":"### Mark task: mark","lastModifiedDate":"2024-03-04"},{"lineNumber":46,"author":{"gitId":"edwardhumi"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":47,"author":{"gitId":"edwardhumi"},"content":"Sets a particular task in the task list as done","lastModifiedDate":"2024-03-04"},{"lineNumber":48,"author":{"gitId":"edwardhumi"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":49,"author":{"gitId":"edwardhumi"},"content":"Format: `mark INDEX`","lastModifiedDate":"2024-03-04"},{"lineNumber":50,"author":{"gitId":"edwardhumi"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":51,"author":{"gitId":"edwardhumi"},"content":"Example: `mark 4`","lastModifiedDate":"2024-03-04"},{"lineNumber":52,"author":{"gitId":"edwardhumi"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":53,"author":{"gitId":"edwardhumi"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":54,"author":{"gitId":"edwardhumi"},"content":"### Unmark task: unmark","lastModifiedDate":"2024-03-04"},{"lineNumber":55,"author":{"gitId":"edwardhumi"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":56,"author":{"gitId":"edwardhumi"},"content":"Sets a particular task in the task list as not done","lastModifiedDate":"2024-03-04"},{"lineNumber":57,"author":{"gitId":"edwardhumi"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":58,"author":{"gitId":"edwardhumi"},"content":"Format: `unmark INDEX`","lastModifiedDate":"2024-03-04"},{"lineNumber":59,"author":{"gitId":"edwardhumi"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":60,"author":{"gitId":"edwardhumi"},"content":"Example: `unmark 3`","lastModifiedDate":"2024-03-04"},{"lineNumber":61,"author":{"gitId":"edwardhumi"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":62,"author":{"gitId":"edwardhumi"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":63,"author":{"gitId":"edwardhumi"},"content":"### Delete task: delete","lastModifiedDate":"2024-03-04"},{"lineNumber":64,"author":{"gitId":"edwardhumi"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":65,"author":{"gitId":"edwardhumi"},"content":"Deletes a particular task from the task list","lastModifiedDate":"2024-03-04"},{"lineNumber":66,"author":{"gitId":"edwardhumi"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":67,"author":{"gitId":"edwardhumi"},"content":"Format: `delete INDEX`","lastModifiedDate":"2024-03-04"},{"lineNumber":68,"author":{"gitId":"edwardhumi"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":69,"author":{"gitId":"edwardhumi"},"content":"Example: `delete 2`","lastModifiedDate":"2024-03-04"},{"lineNumber":70,"author":{"gitId":"edwardhumi"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":71,"author":{"gitId":"edwardhumi"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":72,"author":{"gitId":"edwardhumi"},"content":"### Find task: find","lastModifiedDate":"2024-03-04"},{"lineNumber":73,"author":{"gitId":"edwardhumi"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":74,"author":{"gitId":"edwardhumi"},"content":"Finds all tasks that contain a particular keyword from the task list","lastModifiedDate":"2024-03-04"},{"lineNumber":75,"author":{"gitId":"edwardhumi"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":76,"author":{"gitId":"edwardhumi"},"content":"Format: `find KEYWORD`","lastModifiedDate":"2024-03-04"},{"lineNumber":77,"author":{"gitId":"edwardhumi"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":78,"author":{"gitId":"edwardhumi"},"content":"Example: `find assignment`","lastModifiedDate":"2024-03-04"}],"authorContributionMap":{"edwardhumi":64,"-":14}},{"path":"src/main/java/humi/DeadlineTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"edwardhumi"},"content":"package humi;","lastModifiedDate":"2024-02-12"},{"lineNumber":2,"author":{"gitId":"edwardhumi"},"content":"","lastModifiedDate":"2024-02-12"},{"lineNumber":3,"author":{"gitId":"edwardhumi"},"content":"/**","lastModifiedDate":"2024-03-04"},{"lineNumber":4,"author":{"gitId":"edwardhumi"},"content":" * Represents the deadline task containing task type, mark, description,","lastModifiedDate":"2024-03-04"},{"lineNumber":5,"author":{"gitId":"edwardhumi"},"content":" * and deadline","lastModifiedDate":"2024-03-04"},{"lineNumber":6,"author":{"gitId":"edwardhumi"},"content":" */","lastModifiedDate":"2024-03-04"},{"lineNumber":7,"author":{"gitId":"edwardhumi"},"content":"public class DeadlineTask extends Task {","lastModifiedDate":"2024-02-03"},{"lineNumber":8,"author":{"gitId":"edwardhumi"},"content":"    public String deadline;","lastModifiedDate":"2024-02-03"},{"lineNumber":9,"author":{"gitId":"edwardhumi"},"content":"    DeadlineTask(String description, String deadline) {","lastModifiedDate":"2024-02-03"},{"lineNumber":10,"author":{"gitId":"edwardhumi"},"content":"        this.taskType \u003d TaskType.DEADLINE;","lastModifiedDate":"2024-02-10"},{"lineNumber":11,"author":{"gitId":"edwardhumi"},"content":"        this.description \u003d description;","lastModifiedDate":"2024-02-03"},{"lineNumber":12,"author":{"gitId":"edwardhumi"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2024-02-03"},{"lineNumber":13,"author":{"gitId":"edwardhumi"},"content":"        this.deadline \u003d deadline;","lastModifiedDate":"2024-02-03"},{"lineNumber":14,"author":{"gitId":"edwardhumi"},"content":"        Ui.printAddDeadline(description, deadline);","lastModifiedDate":"2024-03-04"},{"lineNumber":15,"author":{"gitId":"edwardhumi"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":16,"author":{"gitId":"edwardhumi"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":17,"author":{"gitId":"edwardhumi"},"content":"    DeadlineTask(String description, String deadline, boolean isDone) {","lastModifiedDate":"2024-02-20"},{"lineNumber":18,"author":{"gitId":"edwardhumi"},"content":"        this.taskType \u003d TaskType.DEADLINE;","lastModifiedDate":"2024-02-20"},{"lineNumber":19,"author":{"gitId":"edwardhumi"},"content":"        this.description \u003d description;","lastModifiedDate":"2024-02-20"},{"lineNumber":20,"author":{"gitId":"edwardhumi"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2024-02-20"},{"lineNumber":21,"author":{"gitId":"edwardhumi"},"content":"        this.deadline \u003d deadline;","lastModifiedDate":"2024-02-20"},{"lineNumber":22,"author":{"gitId":"edwardhumi"},"content":"    }","lastModifiedDate":"2024-02-20"},{"lineNumber":23,"author":{"gitId":"edwardhumi"},"content":"","lastModifiedDate":"2024-02-20"},{"lineNumber":24,"author":{"gitId":"edwardhumi"},"content":"    /**","lastModifiedDate":"2024-03-04"},{"lineNumber":25,"author":{"gitId":"edwardhumi"},"content":"     * Prints the full format of the deadline task","lastModifiedDate":"2024-03-04"},{"lineNumber":26,"author":{"gitId":"edwardhumi"},"content":"     */","lastModifiedDate":"2024-03-04"},{"lineNumber":27,"author":{"gitId":"edwardhumi"},"content":"    @Override","lastModifiedDate":"2024-02-03"},{"lineNumber":28,"author":{"gitId":"edwardhumi"},"content":"    public void print() {","lastModifiedDate":"2024-02-03"},{"lineNumber":29,"author":{"gitId":"edwardhumi"},"content":"        printTaskType();","lastModifiedDate":"2024-02-10"},{"lineNumber":30,"author":{"gitId":"edwardhumi"},"content":"        printMark();","lastModifiedDate":"2024-02-10"},{"lineNumber":31,"author":{"gitId":"edwardhumi"},"content":"        System.out.println(description + \" by: \" + this.deadline);","lastModifiedDate":"2024-02-10"},{"lineNumber":32,"author":{"gitId":"edwardhumi"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":33,"author":{"gitId":"edwardhumi"},"content":"}","lastModifiedDate":"2024-02-03"}],"authorContributionMap":{"edwardhumi":33}},{"path":"src/main/java/humi/EventTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"edwardhumi"},"content":"package humi;","lastModifiedDate":"2024-02-12"},{"lineNumber":2,"author":{"gitId":"edwardhumi"},"content":"","lastModifiedDate":"2024-02-12"},{"lineNumber":3,"author":{"gitId":"edwardhumi"},"content":"/**","lastModifiedDate":"2024-03-04"},{"lineNumber":4,"author":{"gitId":"edwardhumi"},"content":" * Represents the event task containing task type, mark, description,","lastModifiedDate":"2024-03-04"},{"lineNumber":5,"author":{"gitId":"edwardhumi"},"content":" * start date, and end date","lastModifiedDate":"2024-03-04"},{"lineNumber":6,"author":{"gitId":"edwardhumi"},"content":" */","lastModifiedDate":"2024-03-04"},{"lineNumber":7,"author":{"gitId":"edwardhumi"},"content":"public class EventTask extends Task{","lastModifiedDate":"2024-02-03"},{"lineNumber":8,"author":{"gitId":"edwardhumi"},"content":"    public String startDate;","lastModifiedDate":"2024-02-03"},{"lineNumber":9,"author":{"gitId":"edwardhumi"},"content":"    public String endDate;","lastModifiedDate":"2024-02-03"},{"lineNumber":10,"author":{"gitId":"edwardhumi"},"content":"    EventTask(String description, String startDate, String endDate) {","lastModifiedDate":"2024-02-03"},{"lineNumber":11,"author":{"gitId":"edwardhumi"},"content":"        this.taskType \u003d TaskType.EVENT;","lastModifiedDate":"2024-02-10"},{"lineNumber":12,"author":{"gitId":"edwardhumi"},"content":"        this.description \u003d description;","lastModifiedDate":"2024-02-03"},{"lineNumber":13,"author":{"gitId":"edwardhumi"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2024-02-03"},{"lineNumber":14,"author":{"gitId":"edwardhumi"},"content":"        this.startDate \u003d startDate;","lastModifiedDate":"2024-02-03"},{"lineNumber":15,"author":{"gitId":"edwardhumi"},"content":"        this.endDate \u003d endDate;","lastModifiedDate":"2024-02-03"},{"lineNumber":16,"author":{"gitId":"edwardhumi"},"content":"        Ui.printAddEvent(description, startDate, endDate);","lastModifiedDate":"2024-03-04"},{"lineNumber":17,"author":{"gitId":"edwardhumi"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":18,"author":{"gitId":"edwardhumi"},"content":"","lastModifiedDate":"2024-02-03"},{"lineNumber":19,"author":{"gitId":"edwardhumi"},"content":"    EventTask(String description, String startDate, String endDate, boolean isDone) {","lastModifiedDate":"2024-02-20"},{"lineNumber":20,"author":{"gitId":"edwardhumi"},"content":"        this.taskType \u003d TaskType.EVENT;","lastModifiedDate":"2024-02-20"},{"lineNumber":21,"author":{"gitId":"edwardhumi"},"content":"        this.description \u003d description;","lastModifiedDate":"2024-02-20"},{"lineNumber":22,"author":{"gitId":"edwardhumi"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2024-02-20"},{"lineNumber":23,"author":{"gitId":"edwardhumi"},"content":"        this.startDate \u003d startDate;","lastModifiedDate":"2024-02-20"},{"lineNumber":24,"author":{"gitId":"edwardhumi"},"content":"        this.endDate \u003d endDate;","lastModifiedDate":"2024-02-20"},{"lineNumber":25,"author":{"gitId":"edwardhumi"},"content":"    }","lastModifiedDate":"2024-02-20"},{"lineNumber":26,"author":{"gitId":"edwardhumi"},"content":"","lastModifiedDate":"2024-02-20"},{"lineNumber":27,"author":{"gitId":"edwardhumi"},"content":"    /**","lastModifiedDate":"2024-03-04"},{"lineNumber":28,"author":{"gitId":"edwardhumi"},"content":"     * Prints the full format of the event task","lastModifiedDate":"2024-03-04"},{"lineNumber":29,"author":{"gitId":"edwardhumi"},"content":"     */","lastModifiedDate":"2024-03-04"},{"lineNumber":30,"author":{"gitId":"edwardhumi"},"content":"    @Override","lastModifiedDate":"2024-02-03"},{"lineNumber":31,"author":{"gitId":"edwardhumi"},"content":"    public void print() {","lastModifiedDate":"2024-02-03"},{"lineNumber":32,"author":{"gitId":"edwardhumi"},"content":"        printTaskType();","lastModifiedDate":"2024-02-10"},{"lineNumber":33,"author":{"gitId":"edwardhumi"},"content":"        printMark();","lastModifiedDate":"2024-02-10"},{"lineNumber":34,"author":{"gitId":"edwardhumi"},"content":"        System.out.println(description + \" from: \" + startDate + \" to: \" + endDate);","lastModifiedDate":"2024-02-10"},{"lineNumber":35,"author":{"gitId":"edwardhumi"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":36,"author":{"gitId":"edwardhumi"},"content":"}","lastModifiedDate":"2024-02-03"}],"authorContributionMap":{"edwardhumi":36}},{"path":"src/main/java/humi/Humi.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"edwardhumi"},"content":"package humi;","lastModifiedDate":"2024-02-12"},{"lineNumber":2,"author":{"gitId":"edwardhumi"},"content":"","lastModifiedDate":"2024-02-12"},{"lineNumber":3,"author":{"gitId":"edwardhumi"},"content":"import java.io.IOException;","lastModifiedDate":"2024-02-20"},{"lineNumber":4,"author":{"gitId":"edwardhumi"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-02-20"},{"lineNumber":5,"author":{"gitId":"edwardhumi"},"content":"import java.util.Scanner;","lastModifiedDate":"2024-01-31"},{"lineNumber":6,"author":{"gitId":"edwardhumi"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2024-02-20"},{"lineNumber":7,"author":{"gitId":"edwardhumi"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":8,"author":{"gitId":"edwardhumi"},"content":"/**","lastModifiedDate":"2024-03-04"},{"lineNumber":9,"author":{"gitId":"edwardhumi"},"content":" * Entry point of the Address Book application.","lastModifiedDate":"2024-03-04"},{"lineNumber":10,"author":{"gitId":"edwardhumi"},"content":" * Initializes the application and starts the interaction with the user.","lastModifiedDate":"2024-03-04"},{"lineNumber":11,"author":{"gitId":"edwardhumi"},"content":" */","lastModifiedDate":"2024-03-04"},{"lineNumber":12,"author":{"gitId":"edwardhumi"},"content":"public class Humi {","lastModifiedDate":"2024-01-31"},{"lineNumber":13,"author":{"gitId":"edwardhumi"},"content":"    private static Ui ui;","lastModifiedDate":"2024-03-03"},{"lineNumber":14,"author":{"gitId":"edwardhumi"},"content":"    private static TaskManager taskManager;","lastModifiedDate":"2024-03-03"},{"lineNumber":15,"author":{"gitId":"edwardhumi"},"content":"    private static Storage storage;","lastModifiedDate":"2024-03-03"},{"lineNumber":16,"author":{"gitId":"edwardhumi"},"content":"","lastModifiedDate":"2024-02-20"},{"lineNumber":17,"author":{"gitId":"edwardhumi"},"content":"    public Humi(String folderPath, String filePath) {","lastModifiedDate":"2024-03-04"},{"lineNumber":18,"author":{"gitId":"edwardhumi"},"content":"        ui \u003d new Ui();","lastModifiedDate":"2024-03-03"},{"lineNumber":19,"author":{"gitId":"edwardhumi"},"content":"        storage \u003d new Storage();","lastModifiedDate":"2024-03-03"},{"lineNumber":20,"author":{"gitId":"edwardhumi"},"content":"        taskManager \u003d new TaskManager(storage);","lastModifiedDate":"2024-03-03"},{"lineNumber":21,"author":{"gitId":"edwardhumi"},"content":"        try {","lastModifiedDate":"2024-02-20"},{"lineNumber":22,"author":{"gitId":"edwardhumi"},"content":"            ArrayList\u003cString\u003e inputFile \u003d storage.readFile(filePath);","lastModifiedDate":"2024-03-04"},{"lineNumber":23,"author":{"gitId":"edwardhumi"},"content":"            if (!inputFile.isEmpty()) {","lastModifiedDate":"2024-02-20"},{"lineNumber":24,"author":{"gitId":"edwardhumi"},"content":"                for (String s : inputFile) {","lastModifiedDate":"2024-03-03"},{"lineNumber":25,"author":{"gitId":"edwardhumi"},"content":"                    taskManager.loadTask(s);","lastModifiedDate":"2024-03-03"},{"lineNumber":26,"author":{"gitId":"edwardhumi"},"content":"                    storage.appendTextContent(s);","lastModifiedDate":"2024-03-03"},{"lineNumber":27,"author":{"gitId":"edwardhumi"},"content":"                }","lastModifiedDate":"2024-02-20"},{"lineNumber":28,"author":{"gitId":"edwardhumi"},"content":"            }","lastModifiedDate":"2024-02-20"},{"lineNumber":29,"author":{"gitId":"edwardhumi"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2024-02-20"},{"lineNumber":30,"author":{"gitId":"edwardhumi"},"content":"            System.out.println(\"File not found, attempting to create file.\");","lastModifiedDate":"2024-02-20"},{"lineNumber":31,"author":{"gitId":"edwardhumi"},"content":"            storage.createFile(folderPath, filePath);","lastModifiedDate":"2024-03-04"},{"lineNumber":32,"author":{"gitId":"edwardhumi"},"content":"        }","lastModifiedDate":"2024-02-20"},{"lineNumber":33,"author":{"gitId":"edwardhumi"},"content":"    }","lastModifiedDate":"2024-02-20"},{"lineNumber":34,"author":{"gitId":"edwardhumi"},"content":"","lastModifiedDate":"2024-02-20"},{"lineNumber":35,"author":{"gitId":"edwardhumi"},"content":"    /**","lastModifiedDate":"2024-03-04"},{"lineNumber":36,"author":{"gitId":"edwardhumi"},"content":"     * Read user input and handle command until the program terminates.","lastModifiedDate":"2024-03-04"},{"lineNumber":37,"author":{"gitId":"edwardhumi"},"content":"     * Save data in the text file when the user type \"bye\".","lastModifiedDate":"2024-03-04"},{"lineNumber":38,"author":{"gitId":"edwardhumi"},"content":"     */","lastModifiedDate":"2024-03-04"},{"lineNumber":39,"author":{"gitId":"edwardhumi"},"content":"    public void run() {","lastModifiedDate":"2024-03-04"},{"lineNumber":40,"author":{"gitId":"edwardhumi"},"content":"        ui.printWelcome();","lastModifiedDate":"2024-03-04"},{"lineNumber":41,"author":{"gitId":"edwardhumi"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":42,"author":{"gitId":"edwardhumi"},"content":"        // read user input","lastModifiedDate":"2024-03-03"},{"lineNumber":43,"author":{"gitId":"edwardhumi"},"content":"        Scanner in \u003d new Scanner(System.in);","lastModifiedDate":"2024-01-31"},{"lineNumber":44,"author":{"gitId":"edwardhumi"},"content":"        String input \u003d in.nextLine();","lastModifiedDate":"2024-01-31"},{"lineNumber":45,"author":{"gitId":"edwardhumi"},"content":"        while (!input.equals(\"bye\")) {","lastModifiedDate":"2024-01-31"},{"lineNumber":46,"author":{"gitId":"edwardhumi"},"content":"            taskManager.handleCommand(input);","lastModifiedDate":"2024-02-03"},{"lineNumber":47,"author":{"gitId":"edwardhumi"},"content":"            input \u003d in.nextLine();","lastModifiedDate":"2024-01-31"},{"lineNumber":48,"author":{"gitId":"edwardhumi"},"content":"        }","lastModifiedDate":"2024-01-31"},{"lineNumber":49,"author":{"gitId":"edwardhumi"},"content":"","lastModifiedDate":"2024-02-10"},{"lineNumber":50,"author":{"gitId":"edwardhumi"},"content":"        // write text file","lastModifiedDate":"2024-02-20"},{"lineNumber":51,"author":{"gitId":"edwardhumi"},"content":"        try {","lastModifiedDate":"2024-02-20"},{"lineNumber":52,"author":{"gitId":"edwardhumi"},"content":"            storage.writeFile(\"data/list.txt\", storage.textContent);","lastModifiedDate":"2024-03-03"},{"lineNumber":53,"author":{"gitId":"edwardhumi"},"content":"        } catch (IOException e) {","lastModifiedDate":"2024-02-20"},{"lineNumber":54,"author":{"gitId":"edwardhumi"},"content":"            System.out.println(\"Something went wrong: \" + e.getMessage());","lastModifiedDate":"2024-02-20"},{"lineNumber":55,"author":{"gitId":"edwardhumi"},"content":"        }","lastModifiedDate":"2024-02-20"},{"lineNumber":56,"author":{"gitId":"edwardhumi"},"content":"","lastModifiedDate":"2024-02-20"},{"lineNumber":57,"author":{"gitId":"edwardhumi"},"content":"        ui.printExit();","lastModifiedDate":"2024-03-03"},{"lineNumber":58,"author":{"gitId":"edwardhumi"},"content":"    }","lastModifiedDate":"2024-03-03"},{"lineNumber":59,"author":{"gitId":"edwardhumi"},"content":"","lastModifiedDate":"2024-03-03"},{"lineNumber":60,"author":{"gitId":"edwardhumi"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2024-03-03"},{"lineNumber":61,"author":{"gitId":"edwardhumi"},"content":"        new Humi(\"./data\", \"data/list.txt\").run();","lastModifiedDate":"2024-03-04"},{"lineNumber":62,"author":{"gitId":"edwardhumi"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":63,"author":{"gitId":"edwardhumi"},"content":"}","lastModifiedDate":"2024-01-31"}],"authorContributionMap":{"edwardhumi":63}},{"path":"src/main/java/humi/HumiException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"edwardhumi"},"content":"package humi;","lastModifiedDate":"2024-02-12"},{"lineNumber":2,"author":{"gitId":"edwardhumi"},"content":"","lastModifiedDate":"2024-02-12"},{"lineNumber":3,"author":{"gitId":"edwardhumi"},"content":"public class HumiException extends Exception{","lastModifiedDate":"2024-02-12"},{"lineNumber":4,"author":{"gitId":"edwardhumi"},"content":"    String message;","lastModifiedDate":"2024-02-12"},{"lineNumber":5,"author":{"gitId":"edwardhumi"},"content":"    HumiException(String message) {","lastModifiedDate":"2024-02-12"},{"lineNumber":6,"author":{"gitId":"edwardhumi"},"content":"        this.message \u003d message;","lastModifiedDate":"2024-02-12"},{"lineNumber":7,"author":{"gitId":"edwardhumi"},"content":"    }","lastModifiedDate":"2024-02-12"},{"lineNumber":8,"author":{"gitId":"edwardhumi"},"content":"}","lastModifiedDate":"2024-02-12"}],"authorContributionMap":{"edwardhumi":8}},{"path":"src/main/java/humi/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"edwardhumi"},"content":"package humi;","lastModifiedDate":"2024-03-03"},{"lineNumber":2,"author":{"gitId":"edwardhumi"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-03-03"},{"lineNumber":3,"author":{"gitId":"edwardhumi"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2024-03-03"},{"lineNumber":4,"author":{"gitId":"edwardhumi"},"content":"import java.time.temporal.ChronoUnit;","lastModifiedDate":"2024-03-03"},{"lineNumber":5,"author":{"gitId":"edwardhumi"},"content":"import java.text.ParseException;","lastModifiedDate":"2024-03-03"},{"lineNumber":6,"author":{"gitId":"edwardhumi"},"content":"import java.text.SimpleDateFormat;","lastModifiedDate":"2024-03-03"},{"lineNumber":7,"author":{"gitId":"edwardhumi"},"content":"","lastModifiedDate":"2024-03-03"},{"lineNumber":8,"author":{"gitId":"edwardhumi"},"content":"/**","lastModifiedDate":"2024-03-04"},{"lineNumber":9,"author":{"gitId":"edwardhumi"},"content":" * Parse elements of the input command","lastModifiedDate":"2024-03-04"},{"lineNumber":10,"author":{"gitId":"edwardhumi"},"content":" */","lastModifiedDate":"2024-03-04"},{"lineNumber":11,"author":{"gitId":"edwardhumi"},"content":"public class Parser {","lastModifiedDate":"2024-03-03"},{"lineNumber":12,"author":{"gitId":"edwardhumi"},"content":"    public static String todoDescription;","lastModifiedDate":"2024-03-03"},{"lineNumber":13,"author":{"gitId":"edwardhumi"},"content":"    public static String deadlineDescription;","lastModifiedDate":"2024-03-03"},{"lineNumber":14,"author":{"gitId":"edwardhumi"},"content":"    public static String deadlineDate;","lastModifiedDate":"2024-03-03"},{"lineNumber":15,"author":{"gitId":"edwardhumi"},"content":"    public static String eventDescription;","lastModifiedDate":"2024-03-03"},{"lineNumber":16,"author":{"gitId":"edwardhumi"},"content":"    public static String eventStartDate;","lastModifiedDate":"2024-03-03"},{"lineNumber":17,"author":{"gitId":"edwardhumi"},"content":"    public static String eventEndDate;","lastModifiedDate":"2024-03-03"},{"lineNumber":18,"author":{"gitId":"edwardhumi"},"content":"    public static int taskIndex;","lastModifiedDate":"2024-03-03"},{"lineNumber":19,"author":{"gitId":"edwardhumi"},"content":"","lastModifiedDate":"2024-03-03"},{"lineNumber":20,"author":{"gitId":"edwardhumi"},"content":"    /**","lastModifiedDate":"2024-03-04"},{"lineNumber":21,"author":{"gitId":"edwardhumi"},"content":"     * Determines the type of the command and passes it to the corresponding parser.","lastModifiedDate":"2024-03-04"},{"lineNumber":22,"author":{"gitId":"edwardhumi"},"content":"     * @param command Input received from the user","lastModifiedDate":"2024-03-04"},{"lineNumber":23,"author":{"gitId":"edwardhumi"},"content":"     * @throws HumiException If invalid command is received","lastModifiedDate":"2024-03-04"},{"lineNumber":24,"author":{"gitId":"edwardhumi"},"content":"     */","lastModifiedDate":"2024-03-04"},{"lineNumber":25,"author":{"gitId":"edwardhumi"},"content":"    public static void parseCommand(String command) throws HumiException {","lastModifiedDate":"2024-03-03"},{"lineNumber":26,"author":{"gitId":"edwardhumi"},"content":"        if (command.startsWith(\"todo\")) {","lastModifiedDate":"2024-03-03"},{"lineNumber":27,"author":{"gitId":"edwardhumi"},"content":"            parseTodo(command);","lastModifiedDate":"2024-03-03"},{"lineNumber":28,"author":{"gitId":"edwardhumi"},"content":"        } else if (command.startsWith(\"deadline\")) {","lastModifiedDate":"2024-03-03"},{"lineNumber":29,"author":{"gitId":"edwardhumi"},"content":"            parseDeadline(command);","lastModifiedDate":"2024-03-03"},{"lineNumber":30,"author":{"gitId":"edwardhumi"},"content":"        } else if (command.startsWith(\"event\")) {","lastModifiedDate":"2024-03-03"},{"lineNumber":31,"author":{"gitId":"edwardhumi"},"content":"            parseEvent(command);","lastModifiedDate":"2024-03-03"},{"lineNumber":32,"author":{"gitId":"edwardhumi"},"content":"        } else if (command.startsWith(\"mark\")) {","lastModifiedDate":"2024-03-03"},{"lineNumber":33,"author":{"gitId":"edwardhumi"},"content":"            taskIndex \u003d Integer.parseInt(command.substring(5));","lastModifiedDate":"2024-03-03"},{"lineNumber":34,"author":{"gitId":"edwardhumi"},"content":"        } else if (command.startsWith(\"unmark\")) {","lastModifiedDate":"2024-03-03"},{"lineNumber":35,"author":{"gitId":"edwardhumi"},"content":"            taskIndex \u003d Integer.parseInt(command.substring(7));","lastModifiedDate":"2024-03-03"},{"lineNumber":36,"author":{"gitId":"edwardhumi"},"content":"        } else if (command.startsWith(\"delete\")) {","lastModifiedDate":"2024-03-03"},{"lineNumber":37,"author":{"gitId":"edwardhumi"},"content":"            taskIndex \u003d Integer.parseInt(command.substring(7));","lastModifiedDate":"2024-03-03"},{"lineNumber":38,"author":{"gitId":"edwardhumi"},"content":"        } else {","lastModifiedDate":"2024-03-03"},{"lineNumber":39,"author":{"gitId":"edwardhumi"},"content":"            throw new HumiException(\"Failed parsing command.\");","lastModifiedDate":"2024-03-03"},{"lineNumber":40,"author":{"gitId":"edwardhumi"},"content":"        }","lastModifiedDate":"2024-03-03"},{"lineNumber":41,"author":{"gitId":"edwardhumi"},"content":"    }","lastModifiedDate":"2024-03-03"},{"lineNumber":42,"author":{"gitId":"edwardhumi"},"content":"","lastModifiedDate":"2024-03-03"},{"lineNumber":43,"author":{"gitId":"edwardhumi"},"content":"    /**","lastModifiedDate":"2024-03-04"},{"lineNumber":44,"author":{"gitId":"edwardhumi"},"content":"     * Parse todo task and set the todoDescription to the corresponding task description.","lastModifiedDate":"2024-03-04"},{"lineNumber":45,"author":{"gitId":"edwardhumi"},"content":"     * @param command Todo command input received from the user","lastModifiedDate":"2024-03-04"},{"lineNumber":46,"author":{"gitId":"edwardhumi"},"content":"     * @throws HumiException If the task description is empty","lastModifiedDate":"2024-03-04"},{"lineNumber":47,"author":{"gitId":"edwardhumi"},"content":"     */","lastModifiedDate":"2024-03-04"},{"lineNumber":48,"author":{"gitId":"edwardhumi"},"content":"    private static void parseTodo(String command) throws HumiException {","lastModifiedDate":"2024-03-03"},{"lineNumber":49,"author":{"gitId":"edwardhumi"},"content":"        String trimmedCommand \u003d command.trim();","lastModifiedDate":"2024-03-03"},{"lineNumber":50,"author":{"gitId":"edwardhumi"},"content":"        if (trimmedCommand.length() \u003e 4) {","lastModifiedDate":"2024-03-03"},{"lineNumber":51,"author":{"gitId":"edwardhumi"},"content":"            todoDescription \u003d trimmedCommand.substring(5);","lastModifiedDate":"2024-03-03"},{"lineNumber":52,"author":{"gitId":"edwardhumi"},"content":"        } else {","lastModifiedDate":"2024-03-03"},{"lineNumber":53,"author":{"gitId":"edwardhumi"},"content":"            throw new HumiException(\"Description of a todo cannot be empty.\");","lastModifiedDate":"2024-03-03"},{"lineNumber":54,"author":{"gitId":"edwardhumi"},"content":"        }","lastModifiedDate":"2024-03-03"},{"lineNumber":55,"author":{"gitId":"edwardhumi"},"content":"    }","lastModifiedDate":"2024-03-03"},{"lineNumber":56,"author":{"gitId":"edwardhumi"},"content":"","lastModifiedDate":"2024-03-03"},{"lineNumber":57,"author":{"gitId":"edwardhumi"},"content":"    /**","lastModifiedDate":"2024-03-04"},{"lineNumber":58,"author":{"gitId":"edwardhumi"},"content":"     * Parse deadline task and set the deadlineDescription and deadlineDate","lastModifiedDate":"2024-03-04"},{"lineNumber":59,"author":{"gitId":"edwardhumi"},"content":"     * to the corresponding task description and deadline date.","lastModifiedDate":"2024-03-04"},{"lineNumber":60,"author":{"gitId":"edwardhumi"},"content":"     * @param command Deadline command input received from the user","lastModifiedDate":"2024-03-04"},{"lineNumber":61,"author":{"gitId":"edwardhumi"},"content":"     * @throws HumiException If there is no description or deadline date","lastModifiedDate":"2024-03-04"},{"lineNumber":62,"author":{"gitId":"edwardhumi"},"content":"     */","lastModifiedDate":"2024-03-04"},{"lineNumber":63,"author":{"gitId":"edwardhumi"},"content":"    private static void parseDeadline(String command) throws HumiException {","lastModifiedDate":"2024-03-03"},{"lineNumber":64,"author":{"gitId":"edwardhumi"},"content":"        String trimmedCommand \u003d command.trim();","lastModifiedDate":"2024-03-03"},{"lineNumber":65,"author":{"gitId":"edwardhumi"},"content":"        if (trimmedCommand.length() \u003e 8) {","lastModifiedDate":"2024-03-03"},{"lineNumber":66,"author":{"gitId":"edwardhumi"},"content":"            String[] splitArray \u003d trimmedCommand.split(\"/\");","lastModifiedDate":"2024-03-03"},{"lineNumber":67,"author":{"gitId":"edwardhumi"},"content":"            if (splitArray.length \u003e\u003d 2) {","lastModifiedDate":"2024-03-03"},{"lineNumber":68,"author":{"gitId":"edwardhumi"},"content":"                deadlineDescription \u003d splitArray[0].substring(9).trim();","lastModifiedDate":"2024-03-03"},{"lineNumber":69,"author":{"gitId":"edwardhumi"},"content":"                deadlineDate \u003d splitArray[1].substring(3).trim();","lastModifiedDate":"2024-03-03"},{"lineNumber":70,"author":{"gitId":"edwardhumi"},"content":"                deadlineDate \u003d parseDateAndTime(deadlineDate);","lastModifiedDate":"2024-03-03"},{"lineNumber":71,"author":{"gitId":"edwardhumi"},"content":"            } else {","lastModifiedDate":"2024-03-03"},{"lineNumber":72,"author":{"gitId":"edwardhumi"},"content":"                throw new HumiException(\"Please specify the deadline date.\");","lastModifiedDate":"2024-03-03"},{"lineNumber":73,"author":{"gitId":"edwardhumi"},"content":"            }","lastModifiedDate":"2024-03-03"},{"lineNumber":74,"author":{"gitId":"edwardhumi"},"content":"        } else {","lastModifiedDate":"2024-03-03"},{"lineNumber":75,"author":{"gitId":"edwardhumi"},"content":"            throw new HumiException(\"Description of a deadline cannot be empty.\");","lastModifiedDate":"2024-03-03"},{"lineNumber":76,"author":{"gitId":"edwardhumi"},"content":"        }","lastModifiedDate":"2024-03-03"},{"lineNumber":77,"author":{"gitId":"edwardhumi"},"content":"    }","lastModifiedDate":"2024-03-03"},{"lineNumber":78,"author":{"gitId":"edwardhumi"},"content":"","lastModifiedDate":"2024-03-03"},{"lineNumber":79,"author":{"gitId":"edwardhumi"},"content":"    /**","lastModifiedDate":"2024-03-04"},{"lineNumber":80,"author":{"gitId":"edwardhumi"},"content":"     * Parse event task and set the eventDescription, eventStartDate, eventEndDate","lastModifiedDate":"2024-03-04"},{"lineNumber":81,"author":{"gitId":"edwardhumi"},"content":"     * to the corresponding task description, starting date, and ending date.","lastModifiedDate":"2024-03-04"},{"lineNumber":82,"author":{"gitId":"edwardhumi"},"content":"     * @param command Event command input received from the user","lastModifiedDate":"2024-03-04"},{"lineNumber":83,"author":{"gitId":"edwardhumi"},"content":"     * @throws HumiException If there is no description, start date, or end date","lastModifiedDate":"2024-03-04"},{"lineNumber":84,"author":{"gitId":"edwardhumi"},"content":"     */","lastModifiedDate":"2024-03-04"},{"lineNumber":85,"author":{"gitId":"edwardhumi"},"content":"    private static void parseEvent(String command) throws HumiException {","lastModifiedDate":"2024-03-03"},{"lineNumber":86,"author":{"gitId":"edwardhumi"},"content":"        String trimmedCommand \u003d command.trim();","lastModifiedDate":"2024-03-03"},{"lineNumber":87,"author":{"gitId":"edwardhumi"},"content":"        if (trimmedCommand.length() \u003e 5) {","lastModifiedDate":"2024-03-03"},{"lineNumber":88,"author":{"gitId":"edwardhumi"},"content":"            String[] splitArray \u003d trimmedCommand.split(\"/\");","lastModifiedDate":"2024-03-03"},{"lineNumber":89,"author":{"gitId":"edwardhumi"},"content":"            if (splitArray.length \u003e\u003d 3) {","lastModifiedDate":"2024-03-03"},{"lineNumber":90,"author":{"gitId":"edwardhumi"},"content":"                eventDescription \u003d splitArray[0].substring(6).trim();","lastModifiedDate":"2024-03-03"},{"lineNumber":91,"author":{"gitId":"edwardhumi"},"content":"                eventStartDate \u003d splitArray[1].substring(5).trim();","lastModifiedDate":"2024-03-03"},{"lineNumber":92,"author":{"gitId":"edwardhumi"},"content":"                eventStartDate \u003d Parser.parseDateAndTime(eventStartDate);","lastModifiedDate":"2024-03-03"},{"lineNumber":93,"author":{"gitId":"edwardhumi"},"content":"                eventEndDate \u003d splitArray[2].substring(3).trim();","lastModifiedDate":"2024-03-03"},{"lineNumber":94,"author":{"gitId":"edwardhumi"},"content":"                eventEndDate \u003d Parser.parseDateAndTime(eventEndDate);","lastModifiedDate":"2024-03-03"},{"lineNumber":95,"author":{"gitId":"edwardhumi"},"content":"            } else {","lastModifiedDate":"2024-03-03"},{"lineNumber":96,"author":{"gitId":"edwardhumi"},"content":"                throw new HumiException(\"Please specify both the start date and end date\");","lastModifiedDate":"2024-03-03"},{"lineNumber":97,"author":{"gitId":"edwardhumi"},"content":"            }","lastModifiedDate":"2024-03-03"},{"lineNumber":98,"author":{"gitId":"edwardhumi"},"content":"        } else {","lastModifiedDate":"2024-03-03"},{"lineNumber":99,"author":{"gitId":"edwardhumi"},"content":"            throw new HumiException(\"Description of an event cannot be empty.\");","lastModifiedDate":"2024-03-03"},{"lineNumber":100,"author":{"gitId":"edwardhumi"},"content":"        }","lastModifiedDate":"2024-03-03"},{"lineNumber":101,"author":{"gitId":"edwardhumi"},"content":"    }","lastModifiedDate":"2024-03-03"},{"lineNumber":102,"author":{"gitId":"edwardhumi"},"content":"","lastModifiedDate":"2024-03-03"},{"lineNumber":103,"author":{"gitId":"edwardhumi"},"content":"    /**","lastModifiedDate":"2024-03-04"},{"lineNumber":104,"author":{"gitId":"edwardhumi"},"content":"     * Convert each command to text format that will be saved in the data folder","lastModifiedDate":"2024-03-04"},{"lineNumber":105,"author":{"gitId":"edwardhumi"},"content":"     * @param command Input command received from the user","lastModifiedDate":"2024-03-04"},{"lineNumber":106,"author":{"gitId":"edwardhumi"},"content":"     * @return Command in text format","lastModifiedDate":"2024-03-04"},{"lineNumber":107,"author":{"gitId":"edwardhumi"},"content":"     */","lastModifiedDate":"2024-03-04"},{"lineNumber":108,"author":{"gitId":"edwardhumi"},"content":"    public static String convertCommandToText (String command) {","lastModifiedDate":"2024-03-03"},{"lineNumber":109,"author":{"gitId":"edwardhumi"},"content":"        String trimmedCommand \u003d command.trim();","lastModifiedDate":"2024-03-03"},{"lineNumber":110,"author":{"gitId":"edwardhumi"},"content":"        String text \u003d \"\";","lastModifiedDate":"2024-03-03"},{"lineNumber":111,"author":{"gitId":"edwardhumi"},"content":"        if (command.startsWith(\"todo\")) {","lastModifiedDate":"2024-03-03"},{"lineNumber":112,"author":{"gitId":"edwardhumi"},"content":"            String description \u003d trimmedCommand.substring(5);","lastModifiedDate":"2024-03-03"},{"lineNumber":113,"author":{"gitId":"edwardhumi"},"content":"            text \u003d \"T/0/\" + description;","lastModifiedDate":"2024-03-03"},{"lineNumber":114,"author":{"gitId":"edwardhumi"},"content":"        } else if (command.startsWith(\"deadline\")) {","lastModifiedDate":"2024-03-03"},{"lineNumber":115,"author":{"gitId":"edwardhumi"},"content":"            String[] splitArray \u003d trimmedCommand.split(\"/\");","lastModifiedDate":"2024-03-03"},{"lineNumber":116,"author":{"gitId":"edwardhumi"},"content":"            String description \u003d splitArray[0].substring(9);","lastModifiedDate":"2024-03-03"},{"lineNumber":117,"author":{"gitId":"edwardhumi"},"content":"            String deadline \u003d splitArray[1].substring(3);","lastModifiedDate":"2024-03-03"},{"lineNumber":118,"author":{"gitId":"edwardhumi"},"content":"            text \u003d \"D/0/\" + description + \"/\" + deadline;","lastModifiedDate":"2024-03-03"},{"lineNumber":119,"author":{"gitId":"edwardhumi"},"content":"        } else if (command.startsWith(\"event\")) {","lastModifiedDate":"2024-03-03"},{"lineNumber":120,"author":{"gitId":"edwardhumi"},"content":"            String[] splitArray \u003d trimmedCommand.split(\"/\");","lastModifiedDate":"2024-03-03"},{"lineNumber":121,"author":{"gitId":"edwardhumi"},"content":"            String description \u003d splitArray[0].substring(6);","lastModifiedDate":"2024-03-03"},{"lineNumber":122,"author":{"gitId":"edwardhumi"},"content":"            String startDate \u003d splitArray[1].substring(5);","lastModifiedDate":"2024-03-03"},{"lineNumber":123,"author":{"gitId":"edwardhumi"},"content":"            String endDate \u003d splitArray[2].substring(3);","lastModifiedDate":"2024-03-03"},{"lineNumber":124,"author":{"gitId":"edwardhumi"},"content":"            text \u003d \"E/0/\" + description + \"/\" + startDate + \"/\" + endDate;","lastModifiedDate":"2024-03-03"},{"lineNumber":125,"author":{"gitId":"edwardhumi"},"content":"        }","lastModifiedDate":"2024-03-03"},{"lineNumber":126,"author":{"gitId":"edwardhumi"},"content":"        return text;","lastModifiedDate":"2024-03-03"},{"lineNumber":127,"author":{"gitId":"edwardhumi"},"content":"    }","lastModifiedDate":"2024-03-03"},{"lineNumber":128,"author":{"gitId":"edwardhumi"},"content":"","lastModifiedDate":"2024-03-03"},{"lineNumber":129,"author":{"gitId":"edwardhumi"},"content":"    /**","lastModifiedDate":"2024-03-04"},{"lineNumber":130,"author":{"gitId":"edwardhumi"},"content":"     * Determines whether the given input string is a valid date.","lastModifiedDate":"2024-03-04"},{"lineNumber":131,"author":{"gitId":"edwardhumi"},"content":"     * @param input Input string to be checked","lastModifiedDate":"2024-03-04"},{"lineNumber":132,"author":{"gitId":"edwardhumi"},"content":"     * @return true if the given string is a valid date, false otherwise","lastModifiedDate":"2024-03-04"},{"lineNumber":133,"author":{"gitId":"edwardhumi"},"content":"     */","lastModifiedDate":"2024-03-04"},{"lineNumber":134,"author":{"gitId":"edwardhumi"},"content":"    public static boolean isValidDate(String input) {","lastModifiedDate":"2024-03-03"},{"lineNumber":135,"author":{"gitId":"edwardhumi"},"content":"        SimpleDateFormat dateFormat \u003d new SimpleDateFormat(\"yyyy-MM-dd\");","lastModifiedDate":"2024-03-03"},{"lineNumber":136,"author":{"gitId":"edwardhumi"},"content":"        dateFormat.setLenient(false);","lastModifiedDate":"2024-03-03"},{"lineNumber":137,"author":{"gitId":"edwardhumi"},"content":"        try {","lastModifiedDate":"2024-03-03"},{"lineNumber":138,"author":{"gitId":"edwardhumi"},"content":"            dateFormat.parse(input.trim());","lastModifiedDate":"2024-03-03"},{"lineNumber":139,"author":{"gitId":"edwardhumi"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2024-03-03"},{"lineNumber":140,"author":{"gitId":"edwardhumi"},"content":"            return false;","lastModifiedDate":"2024-03-03"},{"lineNumber":141,"author":{"gitId":"edwardhumi"},"content":"        }","lastModifiedDate":"2024-03-03"},{"lineNumber":142,"author":{"gitId":"edwardhumi"},"content":"        return true;","lastModifiedDate":"2024-03-03"},{"lineNumber":143,"author":{"gitId":"edwardhumi"},"content":"    }","lastModifiedDate":"2024-03-03"},{"lineNumber":144,"author":{"gitId":"edwardhumi"},"content":"","lastModifiedDate":"2024-03-03"},{"lineNumber":145,"author":{"gitId":"edwardhumi"},"content":"    /**","lastModifiedDate":"2024-03-04"},{"lineNumber":146,"author":{"gitId":"edwardhumi"},"content":"     * Formats the input date to MMM d yyyy (e.g. Oct 15 2019)","lastModifiedDate":"2024-03-04"},{"lineNumber":147,"author":{"gitId":"edwardhumi"},"content":"     * @param input Input string to be formatted","lastModifiedDate":"2024-03-04"},{"lineNumber":148,"author":{"gitId":"edwardhumi"},"content":"     * @return date in the format of MMM d yyyy if the given input is a valid date,","lastModifiedDate":"2024-03-04"},{"lineNumber":149,"author":{"gitId":"edwardhumi"},"content":"     * returns the initial string otherwise.","lastModifiedDate":"2024-03-04"},{"lineNumber":150,"author":{"gitId":"edwardhumi"},"content":"     */","lastModifiedDate":"2024-03-04"},{"lineNumber":151,"author":{"gitId":"edwardhumi"},"content":"    public static String parseDate(String input) {","lastModifiedDate":"2024-03-03"},{"lineNumber":152,"author":{"gitId":"edwardhumi"},"content":"        if (input.length() \u003c 10) {","lastModifiedDate":"2024-03-03"},{"lineNumber":153,"author":{"gitId":"edwardhumi"},"content":"            return input;","lastModifiedDate":"2024-03-03"},{"lineNumber":154,"author":{"gitId":"edwardhumi"},"content":"        }","lastModifiedDate":"2024-03-03"},{"lineNumber":155,"author":{"gitId":"edwardhumi"},"content":"        String date \u003d input.substring(0, 10);","lastModifiedDate":"2024-03-03"},{"lineNumber":156,"author":{"gitId":"edwardhumi"},"content":"        if (isValidDate(date)) {","lastModifiedDate":"2024-03-03"},{"lineNumber":157,"author":{"gitId":"edwardhumi"},"content":"            LocalDate d \u003d LocalDate.parse(date);","lastModifiedDate":"2024-03-03"},{"lineNumber":158,"author":{"gitId":"edwardhumi"},"content":"            return d.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));","lastModifiedDate":"2024-03-03"},{"lineNumber":159,"author":{"gitId":"edwardhumi"},"content":"        }","lastModifiedDate":"2024-03-03"},{"lineNumber":160,"author":{"gitId":"edwardhumi"},"content":"        return date;","lastModifiedDate":"2024-03-03"},{"lineNumber":161,"author":{"gitId":"edwardhumi"},"content":"    }","lastModifiedDate":"2024-03-03"},{"lineNumber":162,"author":{"gitId":"edwardhumi"},"content":"","lastModifiedDate":"2024-03-03"},{"lineNumber":163,"author":{"gitId":"edwardhumi"},"content":"    /**","lastModifiedDate":"2024-03-04"},{"lineNumber":164,"author":{"gitId":"edwardhumi"},"content":"     * Determines whether the given input string is a valid time.","lastModifiedDate":"2024-03-04"},{"lineNumber":165,"author":{"gitId":"edwardhumi"},"content":"     * @param input Input string to be checked","lastModifiedDate":"2024-03-04"},{"lineNumber":166,"author":{"gitId":"edwardhumi"},"content":"     * @return true if the given string is a valid time, false otherwise","lastModifiedDate":"2024-03-04"},{"lineNumber":167,"author":{"gitId":"edwardhumi"},"content":"     */","lastModifiedDate":"2024-03-04"},{"lineNumber":168,"author":{"gitId":"edwardhumi"},"content":"    public static boolean isValidTime(String input) {","lastModifiedDate":"2024-03-03"},{"lineNumber":169,"author":{"gitId":"edwardhumi"},"content":"        SimpleDateFormat dateFormat \u003d new SimpleDateFormat(\"HH:mm\");","lastModifiedDate":"2024-03-03"},{"lineNumber":170,"author":{"gitId":"edwardhumi"},"content":"        dateFormat.setLenient(false);","lastModifiedDate":"2024-03-03"},{"lineNumber":171,"author":{"gitId":"edwardhumi"},"content":"        try {","lastModifiedDate":"2024-03-03"},{"lineNumber":172,"author":{"gitId":"edwardhumi"},"content":"            dateFormat.parse(input.trim());","lastModifiedDate":"2024-03-03"},{"lineNumber":173,"author":{"gitId":"edwardhumi"},"content":"        } catch (ParseException pe) {","lastModifiedDate":"2024-03-03"},{"lineNumber":174,"author":{"gitId":"edwardhumi"},"content":"            return false;","lastModifiedDate":"2024-03-03"},{"lineNumber":175,"author":{"gitId":"edwardhumi"},"content":"        }","lastModifiedDate":"2024-03-03"},{"lineNumber":176,"author":{"gitId":"edwardhumi"},"content":"        return true;","lastModifiedDate":"2024-03-03"},{"lineNumber":177,"author":{"gitId":"edwardhumi"},"content":"    }","lastModifiedDate":"2024-03-03"},{"lineNumber":178,"author":{"gitId":"edwardhumi"},"content":"","lastModifiedDate":"2024-03-03"},{"lineNumber":179,"author":{"gitId":"edwardhumi"},"content":"    /**","lastModifiedDate":"2024-03-04"},{"lineNumber":180,"author":{"gitId":"edwardhumi"},"content":"     * Formats the input time to hh:mm AM/PM format","lastModifiedDate":"2024-03-04"},{"lineNumber":181,"author":{"gitId":"edwardhumi"},"content":"     * @param input Input string to be formatted","lastModifiedDate":"2024-03-04"},{"lineNumber":182,"author":{"gitId":"edwardhumi"},"content":"     * @return time in the format of hh:mm if the given input is a valid time,","lastModifiedDate":"2024-03-04"},{"lineNumber":183,"author":{"gitId":"edwardhumi"},"content":"     * returns the initial string otherwise.","lastModifiedDate":"2024-03-04"},{"lineNumber":184,"author":{"gitId":"edwardhumi"},"content":"     */","lastModifiedDate":"2024-03-04"},{"lineNumber":185,"author":{"gitId":"edwardhumi"},"content":"    public static String parseTime(String input) {","lastModifiedDate":"2024-03-03"},{"lineNumber":186,"author":{"gitId":"edwardhumi"},"content":"        if (input.length() \u003c 5) {","lastModifiedDate":"2024-03-03"},{"lineNumber":187,"author":{"gitId":"edwardhumi"},"content":"            return input;","lastModifiedDate":"2024-03-03"},{"lineNumber":188,"author":{"gitId":"edwardhumi"},"content":"        }","lastModifiedDate":"2024-03-03"},{"lineNumber":189,"author":{"gitId":"edwardhumi"},"content":"        String time \u003d (isValidDate(input) \u0026\u0026 input.length() \u003e 11)? input.substring(11) : input.substring(0, 5);","lastModifiedDate":"2024-03-03"},{"lineNumber":190,"author":{"gitId":"edwardhumi"},"content":"        if (isValidTime(time)) {","lastModifiedDate":"2024-03-03"},{"lineNumber":191,"author":{"gitId":"edwardhumi"},"content":"            // Parsing hours, minutes and seconds in array","lastModifiedDate":"2024-03-03"},{"lineNumber":192,"author":{"gitId":"edwardhumi"},"content":"            String[] arr \u003d time.split(\":\");","lastModifiedDate":"2024-03-03"},{"lineNumber":193,"author":{"gitId":"edwardhumi"},"content":"","lastModifiedDate":"2024-03-03"},{"lineNumber":194,"author":{"gitId":"edwardhumi"},"content":"            // Converting hours into integer","lastModifiedDate":"2024-03-03"},{"lineNumber":195,"author":{"gitId":"edwardhumi"},"content":"            int hh \u003d Integer.parseInt(arr[0]);","lastModifiedDate":"2024-03-03"},{"lineNumber":196,"author":{"gitId":"edwardhumi"},"content":"            String format;","lastModifiedDate":"2024-03-03"},{"lineNumber":197,"author":{"gitId":"edwardhumi"},"content":"","lastModifiedDate":"2024-03-03"},{"lineNumber":198,"author":{"gitId":"edwardhumi"},"content":"            if (hh \u003e 12) {","lastModifiedDate":"2024-03-03"},{"lineNumber":199,"author":{"gitId":"edwardhumi"},"content":"                hh -\u003d 12;","lastModifiedDate":"2024-03-03"},{"lineNumber":200,"author":{"gitId":"edwardhumi"},"content":"                format \u003d \"PM\";","lastModifiedDate":"2024-03-03"},{"lineNumber":201,"author":{"gitId":"edwardhumi"},"content":"            }","lastModifiedDate":"2024-03-03"},{"lineNumber":202,"author":{"gitId":"edwardhumi"},"content":"            else if (hh \u003d\u003d 00) {","lastModifiedDate":"2024-03-03"},{"lineNumber":203,"author":{"gitId":"edwardhumi"},"content":"                hh \u003d 12;","lastModifiedDate":"2024-03-03"},{"lineNumber":204,"author":{"gitId":"edwardhumi"},"content":"                format \u003d \"AM\";","lastModifiedDate":"2024-03-03"},{"lineNumber":205,"author":{"gitId":"edwardhumi"},"content":"            }","lastModifiedDate":"2024-03-03"},{"lineNumber":206,"author":{"gitId":"edwardhumi"},"content":"            else if (hh \u003d\u003d 12) {","lastModifiedDate":"2024-03-03"},{"lineNumber":207,"author":{"gitId":"edwardhumi"},"content":"                hh \u003d 12;","lastModifiedDate":"2024-03-03"},{"lineNumber":208,"author":{"gitId":"edwardhumi"},"content":"                format \u003d \"PM\";","lastModifiedDate":"2024-03-03"},{"lineNumber":209,"author":{"gitId":"edwardhumi"},"content":"            }","lastModifiedDate":"2024-03-03"},{"lineNumber":210,"author":{"gitId":"edwardhumi"},"content":"            else {","lastModifiedDate":"2024-03-03"},{"lineNumber":211,"author":{"gitId":"edwardhumi"},"content":"                format \u003d \"AM\";","lastModifiedDate":"2024-03-03"},{"lineNumber":212,"author":{"gitId":"edwardhumi"},"content":"            }","lastModifiedDate":"2024-03-03"},{"lineNumber":213,"author":{"gitId":"edwardhumi"},"content":"","lastModifiedDate":"2024-03-03"},{"lineNumber":214,"author":{"gitId":"edwardhumi"},"content":"            // Converting hh to String and padding it with 0 on left side","lastModifiedDate":"2024-03-03"},{"lineNumber":215,"author":{"gitId":"edwardhumi"},"content":"            String hour \u003d String.format(\"%02d\", hh);","lastModifiedDate":"2024-03-03"},{"lineNumber":216,"author":{"gitId":"edwardhumi"},"content":"            String minute \u003d arr[1];","lastModifiedDate":"2024-03-03"},{"lineNumber":217,"author":{"gitId":"edwardhumi"},"content":"","lastModifiedDate":"2024-03-03"},{"lineNumber":218,"author":{"gitId":"edwardhumi"},"content":"            time \u003d hour + \":\" + minute + \" \" + format;","lastModifiedDate":"2024-03-03"},{"lineNumber":219,"author":{"gitId":"edwardhumi"},"content":"            return time;","lastModifiedDate":"2024-03-03"},{"lineNumber":220,"author":{"gitId":"edwardhumi"},"content":"        }","lastModifiedDate":"2024-03-03"},{"lineNumber":221,"author":{"gitId":"edwardhumi"},"content":"        return time;","lastModifiedDate":"2024-03-03"},{"lineNumber":222,"author":{"gitId":"edwardhumi"},"content":"    }","lastModifiedDate":"2024-03-03"},{"lineNumber":223,"author":{"gitId":"edwardhumi"},"content":"","lastModifiedDate":"2024-03-03"},{"lineNumber":224,"author":{"gitId":"edwardhumi"},"content":"    /**","lastModifiedDate":"2024-03-04"},{"lineNumber":225,"author":{"gitId":"edwardhumi"},"content":"     * Parse both date and time from the given input","lastModifiedDate":"2024-03-04"},{"lineNumber":226,"author":{"gitId":"edwardhumi"},"content":"     * @param input Input string to be formatted","lastModifiedDate":"2024-03-04"},{"lineNumber":227,"author":{"gitId":"edwardhumi"},"content":"     * @return Formatted string in the form of MMM d yyyy hh:mm AM/PM","lastModifiedDate":"2024-03-04"},{"lineNumber":228,"author":{"gitId":"edwardhumi"},"content":"     */","lastModifiedDate":"2024-03-04"},{"lineNumber":229,"author":{"gitId":"edwardhumi"},"content":"    public static String parseDateAndTime(String input) {","lastModifiedDate":"2024-03-03"},{"lineNumber":230,"author":{"gitId":"edwardhumi"},"content":"        if (input.length() \u003c 5) {","lastModifiedDate":"2024-03-03"},{"lineNumber":231,"author":{"gitId":"edwardhumi"},"content":"            return input;","lastModifiedDate":"2024-03-03"},{"lineNumber":232,"author":{"gitId":"edwardhumi"},"content":"        }","lastModifiedDate":"2024-03-03"},{"lineNumber":233,"author":{"gitId":"edwardhumi"},"content":"        String time \u003d (isValidDate(input) \u0026\u0026 input.length() \u003e 11)? input.substring(11) : input.substring(0, 5);","lastModifiedDate":"2024-03-03"},{"lineNumber":234,"author":{"gitId":"edwardhumi"},"content":"        if (isValidDate(input) \u0026\u0026 isValidTime(time)) {","lastModifiedDate":"2024-03-03"},{"lineNumber":235,"author":{"gitId":"edwardhumi"},"content":"            return parseDate(input) + \" \" + parseTime(input);","lastModifiedDate":"2024-03-03"},{"lineNumber":236,"author":{"gitId":"edwardhumi"},"content":"        }","lastModifiedDate":"2024-03-03"},{"lineNumber":237,"author":{"gitId":"edwardhumi"},"content":"        else if (isValidDate(input)) {","lastModifiedDate":"2024-03-03"},{"lineNumber":238,"author":{"gitId":"edwardhumi"},"content":"            return parseDate(input);","lastModifiedDate":"2024-03-03"},{"lineNumber":239,"author":{"gitId":"edwardhumi"},"content":"        }","lastModifiedDate":"2024-03-03"},{"lineNumber":240,"author":{"gitId":"edwardhumi"},"content":"        else if (isValidTime(input)) {","lastModifiedDate":"2024-03-03"},{"lineNumber":241,"author":{"gitId":"edwardhumi"},"content":"            return parseTime(input);","lastModifiedDate":"2024-03-03"},{"lineNumber":242,"author":{"gitId":"edwardhumi"},"content":"        }","lastModifiedDate":"2024-03-03"},{"lineNumber":243,"author":{"gitId":"edwardhumi"},"content":"        return input;","lastModifiedDate":"2024-03-03"},{"lineNumber":244,"author":{"gitId":"edwardhumi"},"content":"    }","lastModifiedDate":"2024-03-03"},{"lineNumber":245,"author":{"gitId":"edwardhumi"},"content":"}","lastModifiedDate":"2024-03-03"}],"authorContributionMap":{"edwardhumi":245}},{"path":"src/main/java/humi/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"edwardhumi"},"content":"package humi;","lastModifiedDate":"2024-02-20"},{"lineNumber":2,"author":{"gitId":"edwardhumi"},"content":"","lastModifiedDate":"2024-02-20"},{"lineNumber":3,"author":{"gitId":"edwardhumi"},"content":"import java.io.File;","lastModifiedDate":"2024-02-20"},{"lineNumber":4,"author":{"gitId":"edwardhumi"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2024-02-20"},{"lineNumber":5,"author":{"gitId":"edwardhumi"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-02-20"},{"lineNumber":6,"author":{"gitId":"edwardhumi"},"content":"import java.util.Scanner;","lastModifiedDate":"2024-02-20"},{"lineNumber":7,"author":{"gitId":"edwardhumi"},"content":"import java.io.FileWriter;","lastModifiedDate":"2024-02-20"},{"lineNumber":8,"author":{"gitId":"edwardhumi"},"content":"import java.io.IOException;","lastModifiedDate":"2024-02-20"},{"lineNumber":9,"author":{"gitId":"edwardhumi"},"content":"","lastModifiedDate":"2024-02-20"},{"lineNumber":10,"author":{"gitId":"edwardhumi"},"content":"/**","lastModifiedDate":"2024-03-04"},{"lineNumber":11,"author":{"gitId":"edwardhumi"},"content":" * Storage system used to create and save the data text file","lastModifiedDate":"2024-03-04"},{"lineNumber":12,"author":{"gitId":"edwardhumi"},"content":" */","lastModifiedDate":"2024-03-04"},{"lineNumber":13,"author":{"gitId":"edwardhumi"},"content":"public class Storage {","lastModifiedDate":"2024-03-03"},{"lineNumber":14,"author":{"gitId":"edwardhumi"},"content":"    public String textContent;","lastModifiedDate":"2024-03-03"},{"lineNumber":15,"author":{"gitId":"edwardhumi"},"content":"","lastModifiedDate":"2024-02-20"},{"lineNumber":16,"author":{"gitId":"edwardhumi"},"content":"    Storage() {","lastModifiedDate":"2024-03-03"},{"lineNumber":17,"author":{"gitId":"edwardhumi"},"content":"        textContent \u003d \"\";","lastModifiedDate":"2024-03-03"},{"lineNumber":18,"author":{"gitId":"edwardhumi"},"content":"    }","lastModifiedDate":"2024-03-03"},{"lineNumber":19,"author":{"gitId":"edwardhumi"},"content":"","lastModifiedDate":"2024-03-03"},{"lineNumber":20,"author":{"gitId":"edwardhumi"},"content":"    /**","lastModifiedDate":"2024-03-04"},{"lineNumber":21,"author":{"gitId":"edwardhumi"},"content":"     * Append the contents to a single string that will be saved","lastModifiedDate":"2024-03-04"},{"lineNumber":22,"author":{"gitId":"edwardhumi"},"content":"     * @param content","lastModifiedDate":"2024-03-04"},{"lineNumber":23,"author":{"gitId":"edwardhumi"},"content":"     */","lastModifiedDate":"2024-03-04"},{"lineNumber":24,"author":{"gitId":"edwardhumi"},"content":"    public void appendTextContent(String content) {","lastModifiedDate":"2024-03-03"},{"lineNumber":25,"author":{"gitId":"edwardhumi"},"content":"        textContent +\u003d (content + \u0027\\n\u0027);","lastModifiedDate":"2024-02-20"},{"lineNumber":26,"author":{"gitId":"edwardhumi"},"content":"    }","lastModifiedDate":"2024-02-20"},{"lineNumber":27,"author":{"gitId":"edwardhumi"},"content":"","lastModifiedDate":"2024-02-20"},{"lineNumber":28,"author":{"gitId":"edwardhumi"},"content":"    /**","lastModifiedDate":"2024-03-04"},{"lineNumber":29,"author":{"gitId":"edwardhumi"},"content":"     * Creates new folder and file if both did not exist","lastModifiedDate":"2024-03-04"},{"lineNumber":30,"author":{"gitId":"edwardhumi"},"content":"     * @param folderPath Path of the folder","lastModifiedDate":"2024-03-04"},{"lineNumber":31,"author":{"gitId":"edwardhumi"},"content":"     * @param filePath Path of the file","lastModifiedDate":"2024-03-04"},{"lineNumber":32,"author":{"gitId":"edwardhumi"},"content":"     */","lastModifiedDate":"2024-03-04"},{"lineNumber":33,"author":{"gitId":"edwardhumi"},"content":"    public void createFile(String folderPath, String filePath) {","lastModifiedDate":"2024-03-04"},{"lineNumber":34,"author":{"gitId":"edwardhumi"},"content":"        try {","lastModifiedDate":"2024-03-04"},{"lineNumber":35,"author":{"gitId":"edwardhumi"},"content":"            File dataFolder \u003d new File(folderPath);","lastModifiedDate":"2024-03-04"},{"lineNumber":36,"author":{"gitId":"edwardhumi"},"content":"            if (!dataFolder.exists()) {","lastModifiedDate":"2024-03-04"},{"lineNumber":37,"author":{"gitId":"edwardhumi"},"content":"                System.out.println(\"Folder not found, attempting to create folder.\");","lastModifiedDate":"2024-03-04"},{"lineNumber":38,"author":{"gitId":"edwardhumi"},"content":"                if (dataFolder.mkdirs()) {","lastModifiedDate":"2024-03-04"},{"lineNumber":39,"author":{"gitId":"edwardhumi"},"content":"                    System.out.println(\"Data folder has been created successfully.\");","lastModifiedDate":"2024-03-04"},{"lineNumber":40,"author":{"gitId":"edwardhumi"},"content":"                } else {","lastModifiedDate":"2024-03-04"},{"lineNumber":41,"author":{"gitId":"edwardhumi"},"content":"                    System.err.println(\"Failed to create data folder.\");","lastModifiedDate":"2024-03-04"},{"lineNumber":42,"author":{"gitId":"edwardhumi"},"content":"                }","lastModifiedDate":"2024-03-04"},{"lineNumber":43,"author":{"gitId":"edwardhumi"},"content":"            }","lastModifiedDate":"2024-03-04"},{"lineNumber":44,"author":{"gitId":"edwardhumi"},"content":"            File textFile \u003d new File(filePath);","lastModifiedDate":"2024-03-04"},{"lineNumber":45,"author":{"gitId":"edwardhumi"},"content":"            if (textFile.createNewFile()) {","lastModifiedDate":"2024-03-04"},{"lineNumber":46,"author":{"gitId":"edwardhumi"},"content":"                System.out.println(\"File has been created.\");","lastModifiedDate":"2024-03-04"},{"lineNumber":47,"author":{"gitId":"edwardhumi"},"content":"            }","lastModifiedDate":"2024-03-04"},{"lineNumber":48,"author":{"gitId":"edwardhumi"},"content":"        } catch (IOException err) {","lastModifiedDate":"2024-03-04"},{"lineNumber":49,"author":{"gitId":"edwardhumi"},"content":"            System.out.println(\"Failed to create file.\");","lastModifiedDate":"2024-03-04"},{"lineNumber":50,"author":{"gitId":"edwardhumi"},"content":"        }","lastModifiedDate":"2024-03-04"},{"lineNumber":51,"author":{"gitId":"edwardhumi"},"content":"    }","lastModifiedDate":"2024-03-04"},{"lineNumber":52,"author":{"gitId":"edwardhumi"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":53,"author":{"gitId":"edwardhumi"},"content":"    /**","lastModifiedDate":"2024-03-04"},{"lineNumber":54,"author":{"gitId":"edwardhumi"},"content":"     * Load the saved file and convert it into list of text formatted commands","lastModifiedDate":"2024-03-04"},{"lineNumber":55,"author":{"gitId":"edwardhumi"},"content":"     * @param filePath Path of the file","lastModifiedDate":"2024-03-04"},{"lineNumber":56,"author":{"gitId":"edwardhumi"},"content":"     * @return List of text formatted commands","lastModifiedDate":"2024-03-04"},{"lineNumber":57,"author":{"gitId":"edwardhumi"},"content":"     * @throws FileNotFoundException If the file does not exist","lastModifiedDate":"2024-03-04"},{"lineNumber":58,"author":{"gitId":"edwardhumi"},"content":"     */","lastModifiedDate":"2024-03-04"},{"lineNumber":59,"author":{"gitId":"edwardhumi"},"content":"    public ArrayList\u003cString\u003e readFile(String filePath) throws FileNotFoundException {","lastModifiedDate":"2024-03-03"},{"lineNumber":60,"author":{"gitId":"edwardhumi"},"content":"        ArrayList\u003cString\u003e input \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-02-20"},{"lineNumber":61,"author":{"gitId":"edwardhumi"},"content":"        File file \u003d new File(filePath);","lastModifiedDate":"2024-03-03"},{"lineNumber":62,"author":{"gitId":"edwardhumi"},"content":"        Scanner s \u003d new Scanner(file);","lastModifiedDate":"2024-03-03"},{"lineNumber":63,"author":{"gitId":"edwardhumi"},"content":"        while (s.hasNext()) {","lastModifiedDate":"2024-02-20"},{"lineNumber":64,"author":{"gitId":"edwardhumi"},"content":"            input.add(s.nextLine());","lastModifiedDate":"2024-02-20"},{"lineNumber":65,"author":{"gitId":"edwardhumi"},"content":"        }","lastModifiedDate":"2024-02-20"},{"lineNumber":66,"author":{"gitId":"edwardhumi"},"content":"        s.close();","lastModifiedDate":"2024-02-20"},{"lineNumber":67,"author":{"gitId":"edwardhumi"},"content":"        return input;","lastModifiedDate":"2024-02-20"},{"lineNumber":68,"author":{"gitId":"edwardhumi"},"content":"    }","lastModifiedDate":"2024-02-20"},{"lineNumber":69,"author":{"gitId":"edwardhumi"},"content":"","lastModifiedDate":"2024-02-20"},{"lineNumber":70,"author":{"gitId":"edwardhumi"},"content":"    /**","lastModifiedDate":"2024-03-04"},{"lineNumber":71,"author":{"gitId":"edwardhumi"},"content":"     * Write the given string to the text file","lastModifiedDate":"2024-03-04"},{"lineNumber":72,"author":{"gitId":"edwardhumi"},"content":"     * @param filePath Path of the text file","lastModifiedDate":"2024-03-04"},{"lineNumber":73,"author":{"gitId":"edwardhumi"},"content":"     * @param textToAdd String to be written","lastModifiedDate":"2024-03-04"},{"lineNumber":74,"author":{"gitId":"edwardhumi"},"content":"     * @throws IOException If there is any error encountered","lastModifiedDate":"2024-03-04"},{"lineNumber":75,"author":{"gitId":"edwardhumi"},"content":"     */","lastModifiedDate":"2024-03-04"},{"lineNumber":76,"author":{"gitId":"edwardhumi"},"content":"    public void writeFile(String filePath, String textToAdd) throws IOException {","lastModifiedDate":"2024-03-03"},{"lineNumber":77,"author":{"gitId":"edwardhumi"},"content":"        FileWriter fw \u003d new FileWriter(filePath);","lastModifiedDate":"2024-02-20"},{"lineNumber":78,"author":{"gitId":"edwardhumi"},"content":"        fw.write(textToAdd);","lastModifiedDate":"2024-02-20"},{"lineNumber":79,"author":{"gitId":"edwardhumi"},"content":"        fw.close();","lastModifiedDate":"2024-02-20"},{"lineNumber":80,"author":{"gitId":"edwardhumi"},"content":"    }","lastModifiedDate":"2024-02-20"},{"lineNumber":81,"author":{"gitId":"edwardhumi"},"content":"","lastModifiedDate":"2024-02-20"},{"lineNumber":82,"author":{"gitId":"edwardhumi"},"content":"    /**","lastModifiedDate":"2024-03-04"},{"lineNumber":83,"author":{"gitId":"edwardhumi"},"content":"     * Change the mark of a particular task in the text file","lastModifiedDate":"2024-03-04"},{"lineNumber":84,"author":{"gitId":"edwardhumi"},"content":"     * @param isDone Mark of the task","lastModifiedDate":"2024-03-04"},{"lineNumber":85,"author":{"gitId":"edwardhumi"},"content":"     * @param index Index of the task","lastModifiedDate":"2024-03-04"},{"lineNumber":86,"author":{"gitId":"edwardhumi"},"content":"     */","lastModifiedDate":"2024-03-04"},{"lineNumber":87,"author":{"gitId":"edwardhumi"},"content":"    public void markText(boolean isDone, int index) {","lastModifiedDate":"2024-03-03"},{"lineNumber":88,"author":{"gitId":"edwardhumi"},"content":"        String[] textArray \u003d textContent.split(\"\\n\");","lastModifiedDate":"2024-02-20"},{"lineNumber":89,"author":{"gitId":"edwardhumi"},"content":"        String mark \u003d isDone ? \"1\" : \"0\";","lastModifiedDate":"2024-02-20"},{"lineNumber":90,"author":{"gitId":"edwardhumi"},"content":"        String newString \u003d textArray[index-1].substring(0, 2) + mark + textArray[index-1].substring(3);","lastModifiedDate":"2024-02-20"},{"lineNumber":91,"author":{"gitId":"edwardhumi"},"content":"        textArray[index-1] \u003d newString;","lastModifiedDate":"2024-02-20"},{"lineNumber":92,"author":{"gitId":"edwardhumi"},"content":"        textContent \u003d \"\";","lastModifiedDate":"2024-02-20"},{"lineNumber":93,"author":{"gitId":"edwardhumi"},"content":"        for (int i \u003d 0; i \u003c textArray.length; i++) {","lastModifiedDate":"2024-02-20"},{"lineNumber":94,"author":{"gitId":"edwardhumi"},"content":"            appendTextContent(textArray[i]);","lastModifiedDate":"2024-03-03"},{"lineNumber":95,"author":{"gitId":"edwardhumi"},"content":"        }","lastModifiedDate":"2024-02-20"},{"lineNumber":96,"author":{"gitId":"edwardhumi"},"content":"    }","lastModifiedDate":"2024-02-20"},{"lineNumber":97,"author":{"gitId":"edwardhumi"},"content":"","lastModifiedDate":"2024-02-20"},{"lineNumber":98,"author":{"gitId":"edwardhumi"},"content":"    /**","lastModifiedDate":"2024-03-04"},{"lineNumber":99,"author":{"gitId":"edwardhumi"},"content":"     * Delete a particular task from the text file","lastModifiedDate":"2024-03-04"},{"lineNumber":100,"author":{"gitId":"edwardhumi"},"content":"     * @param index Index of the task","lastModifiedDate":"2024-03-04"},{"lineNumber":101,"author":{"gitId":"edwardhumi"},"content":"     */","lastModifiedDate":"2024-03-04"},{"lineNumber":102,"author":{"gitId":"edwardhumi"},"content":"    public void deleteText(int index) {","lastModifiedDate":"2024-03-03"},{"lineNumber":103,"author":{"gitId":"edwardhumi"},"content":"        String[] textArray \u003d textContent.split(\"\\n\");","lastModifiedDate":"2024-02-20"},{"lineNumber":104,"author":{"gitId":"edwardhumi"},"content":"        textContent \u003d \"\";","lastModifiedDate":"2024-02-20"},{"lineNumber":105,"author":{"gitId":"edwardhumi"},"content":"        for (int i \u003d 0; i \u003c textArray.length; i++) {","lastModifiedDate":"2024-02-20"},{"lineNumber":106,"author":{"gitId":"edwardhumi"},"content":"            if (i !\u003d index - 1) {","lastModifiedDate":"2024-02-20"},{"lineNumber":107,"author":{"gitId":"edwardhumi"},"content":"                appendTextContent(textArray[i]);","lastModifiedDate":"2024-02-20"},{"lineNumber":108,"author":{"gitId":"edwardhumi"},"content":"            }","lastModifiedDate":"2024-02-20"},{"lineNumber":109,"author":{"gitId":"edwardhumi"},"content":"        }","lastModifiedDate":"2024-02-20"},{"lineNumber":110,"author":{"gitId":"edwardhumi"},"content":"    }","lastModifiedDate":"2024-02-20"},{"lineNumber":111,"author":{"gitId":"edwardhumi"},"content":"}","lastModifiedDate":"2024-02-20"}],"authorContributionMap":{"edwardhumi":111}},{"path":"src/main/java/humi/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"edwardhumi"},"content":"package humi;","lastModifiedDate":"2024-02-12"},{"lineNumber":2,"author":{"gitId":"edwardhumi"},"content":"","lastModifiedDate":"2024-02-12"},{"lineNumber":3,"author":{"gitId":"edwardhumi"},"content":"/**","lastModifiedDate":"2024-03-04"},{"lineNumber":4,"author":{"gitId":"edwardhumi"},"content":" * Represents the task containing task type, mark, and description","lastModifiedDate":"2024-03-04"},{"lineNumber":5,"author":{"gitId":"edwardhumi"},"content":" */","lastModifiedDate":"2024-03-04"},{"lineNumber":6,"author":{"gitId":"edwardhumi"},"content":"public class Task {","lastModifiedDate":"2024-01-31"},{"lineNumber":7,"author":{"gitId":"edwardhumi"},"content":"    public String description;","lastModifiedDate":"2024-01-31"},{"lineNumber":8,"author":{"gitId":"edwardhumi"},"content":"    public Boolean isDone;","lastModifiedDate":"2024-01-31"},{"lineNumber":9,"author":{"gitId":"edwardhumi"},"content":"    public TaskType taskType;","lastModifiedDate":"2024-02-10"},{"lineNumber":10,"author":{"gitId":"edwardhumi"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":11,"author":{"gitId":"edwardhumi"},"content":"    Task() {","lastModifiedDate":"2024-01-31"},{"lineNumber":12,"author":{"gitId":"edwardhumi"},"content":"        this.description \u003d \"\";","lastModifiedDate":"2024-02-03"},{"lineNumber":13,"author":{"gitId":"edwardhumi"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2024-02-03"},{"lineNumber":14,"author":{"gitId":"edwardhumi"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":15,"author":{"gitId":"edwardhumi"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":16,"author":{"gitId":"edwardhumi"},"content":"    /**","lastModifiedDate":"2024-03-04"},{"lineNumber":17,"author":{"gitId":"edwardhumi"},"content":"     * Prints the formatted task type","lastModifiedDate":"2024-03-04"},{"lineNumber":18,"author":{"gitId":"edwardhumi"},"content":"     */","lastModifiedDate":"2024-03-04"},{"lineNumber":19,"author":{"gitId":"edwardhumi"},"content":"    public void printTaskType() {","lastModifiedDate":"2024-02-10"},{"lineNumber":20,"author":{"gitId":"edwardhumi"},"content":"        switch (taskType) {","lastModifiedDate":"2024-02-10"},{"lineNumber":21,"author":{"gitId":"edwardhumi"},"content":"        case TODO:","lastModifiedDate":"2024-02-10"},{"lineNumber":22,"author":{"gitId":"edwardhumi"},"content":"            System.out.print(\"[T]\");","lastModifiedDate":"2024-02-10"},{"lineNumber":23,"author":{"gitId":"edwardhumi"},"content":"            break;","lastModifiedDate":"2024-02-10"},{"lineNumber":24,"author":{"gitId":"edwardhumi"},"content":"        case DEADLINE:","lastModifiedDate":"2024-02-10"},{"lineNumber":25,"author":{"gitId":"edwardhumi"},"content":"            System.out.print(\"[D]\");","lastModifiedDate":"2024-02-10"},{"lineNumber":26,"author":{"gitId":"edwardhumi"},"content":"            break;","lastModifiedDate":"2024-02-10"},{"lineNumber":27,"author":{"gitId":"edwardhumi"},"content":"        case EVENT:","lastModifiedDate":"2024-02-10"},{"lineNumber":28,"author":{"gitId":"edwardhumi"},"content":"            System.out.print(\"[E]\");","lastModifiedDate":"2024-02-10"},{"lineNumber":29,"author":{"gitId":"edwardhumi"},"content":"            break;","lastModifiedDate":"2024-02-10"},{"lineNumber":30,"author":{"gitId":"edwardhumi"},"content":"        }","lastModifiedDate":"2024-02-10"},{"lineNumber":31,"author":{"gitId":"edwardhumi"},"content":"    }","lastModifiedDate":"2024-02-10"},{"lineNumber":32,"author":{"gitId":"edwardhumi"},"content":"","lastModifiedDate":"2024-02-10"},{"lineNumber":33,"author":{"gitId":"edwardhumi"},"content":"    /**","lastModifiedDate":"2024-03-04"},{"lineNumber":34,"author":{"gitId":"edwardhumi"},"content":"     * Prints the formatted mark","lastModifiedDate":"2024-03-04"},{"lineNumber":35,"author":{"gitId":"edwardhumi"},"content":"     */","lastModifiedDate":"2024-03-04"},{"lineNumber":36,"author":{"gitId":"edwardhumi"},"content":"    public void printMark() {","lastModifiedDate":"2024-02-10"},{"lineNumber":37,"author":{"gitId":"edwardhumi"},"content":"        String mark \u003d (isDone) ? \"[X] \" : \"[ ] \";","lastModifiedDate":"2024-01-31"},{"lineNumber":38,"author":{"gitId":"edwardhumi"},"content":"        System.out.print(mark);","lastModifiedDate":"2024-02-10"},{"lineNumber":39,"author":{"gitId":"edwardhumi"},"content":"    }","lastModifiedDate":"2024-02-10"},{"lineNumber":40,"author":{"gitId":"edwardhumi"},"content":"","lastModifiedDate":"2024-02-10"},{"lineNumber":41,"author":{"gitId":"edwardhumi"},"content":"    /**","lastModifiedDate":"2024-03-04"},{"lineNumber":42,"author":{"gitId":"edwardhumi"},"content":"     * Prints the full format of the task","lastModifiedDate":"2024-03-04"},{"lineNumber":43,"author":{"gitId":"edwardhumi"},"content":"     */","lastModifiedDate":"2024-03-04"},{"lineNumber":44,"author":{"gitId":"edwardhumi"},"content":"    public void print() {","lastModifiedDate":"2024-02-10"},{"lineNumber":45,"author":{"gitId":"edwardhumi"},"content":"        printTaskType();","lastModifiedDate":"2024-02-10"},{"lineNumber":46,"author":{"gitId":"edwardhumi"},"content":"        printMark();","lastModifiedDate":"2024-02-10"},{"lineNumber":47,"author":{"gitId":"edwardhumi"},"content":"        System.out.println(description);","lastModifiedDate":"2024-02-10"},{"lineNumber":48,"author":{"gitId":"edwardhumi"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":49,"author":{"gitId":"edwardhumi"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":50,"author":{"gitId":"edwardhumi"},"content":"    /**","lastModifiedDate":"2024-03-04"},{"lineNumber":51,"author":{"gitId":"edwardhumi"},"content":"     * Mark the task as done and print the message","lastModifiedDate":"2024-03-04"},{"lineNumber":52,"author":{"gitId":"edwardhumi"},"content":"     */","lastModifiedDate":"2024-03-04"},{"lineNumber":53,"author":{"gitId":"edwardhumi"},"content":"    public void mark() {","lastModifiedDate":"2024-01-31"},{"lineNumber":54,"author":{"gitId":"edwardhumi"},"content":"        isDone \u003d true;","lastModifiedDate":"2024-01-31"},{"lineNumber":55,"author":{"gitId":"edwardhumi"},"content":"        System.out.println(Ui.LINE);","lastModifiedDate":"2024-03-03"},{"lineNumber":56,"author":{"gitId":"edwardhumi"},"content":"        System.out.print(\"     Nice! I\u0027ve marked this task as done:\\n     \");","lastModifiedDate":"2024-02-10"},{"lineNumber":57,"author":{"gitId":"edwardhumi"},"content":"        printTaskType();","lastModifiedDate":"2024-02-10"},{"lineNumber":58,"author":{"gitId":"edwardhumi"},"content":"        printMark();","lastModifiedDate":"2024-02-10"},{"lineNumber":59,"author":{"gitId":"edwardhumi"},"content":"        System.out.println(description);","lastModifiedDate":"2024-02-10"},{"lineNumber":60,"author":{"gitId":"edwardhumi"},"content":"        System.out.println(Ui.LINE);","lastModifiedDate":"2024-03-03"},{"lineNumber":61,"author":{"gitId":"edwardhumi"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":62,"author":{"gitId":"edwardhumi"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":63,"author":{"gitId":"edwardhumi"},"content":"    /**","lastModifiedDate":"2024-03-04"},{"lineNumber":64,"author":{"gitId":"edwardhumi"},"content":"     * Mark the task as not done and print the message","lastModifiedDate":"2024-03-04"},{"lineNumber":65,"author":{"gitId":"edwardhumi"},"content":"     */","lastModifiedDate":"2024-03-04"},{"lineNumber":66,"author":{"gitId":"edwardhumi"},"content":"    public void unmark() {","lastModifiedDate":"2024-01-31"},{"lineNumber":67,"author":{"gitId":"edwardhumi"},"content":"        isDone \u003d false;","lastModifiedDate":"2024-01-31"},{"lineNumber":68,"author":{"gitId":"edwardhumi"},"content":"        System.out.println(Ui.LINE);","lastModifiedDate":"2024-03-03"},{"lineNumber":69,"author":{"gitId":"edwardhumi"},"content":"        System.out.print(\"     OK, I\u0027ve marked this task as not done yet:\\n     \");","lastModifiedDate":"2024-02-10"},{"lineNumber":70,"author":{"gitId":"edwardhumi"},"content":"        printTaskType();","lastModifiedDate":"2024-02-10"},{"lineNumber":71,"author":{"gitId":"edwardhumi"},"content":"        printMark();","lastModifiedDate":"2024-02-10"},{"lineNumber":72,"author":{"gitId":"edwardhumi"},"content":"        System.out.println(description);","lastModifiedDate":"2024-02-10"},{"lineNumber":73,"author":{"gitId":"edwardhumi"},"content":"        System.out.println(Ui.LINE);","lastModifiedDate":"2024-03-03"},{"lineNumber":74,"author":{"gitId":"edwardhumi"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":75,"author":{"gitId":"edwardhumi"},"content":"}","lastModifiedDate":"2024-01-31"}],"authorContributionMap":{"edwardhumi":75}},{"path":"src/main/java/humi/TaskManager.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"edwardhumi"},"content":"package humi;","lastModifiedDate":"2024-02-12"},{"lineNumber":2,"author":{"gitId":"edwardhumi"},"content":"","lastModifiedDate":"2024-02-12"},{"lineNumber":3,"author":{"gitId":"edwardhumi"},"content":"import java.io.File;","lastModifiedDate":"2024-02-20"},{"lineNumber":4,"author":{"gitId":"edwardhumi"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-02-20"},{"lineNumber":5,"author":{"gitId":"edwardhumi"},"content":"","lastModifiedDate":"2024-02-20"},{"lineNumber":6,"author":{"gitId":"edwardhumi"},"content":"/**","lastModifiedDate":"2024-03-04"},{"lineNumber":7,"author":{"gitId":"edwardhumi"},"content":" * Task management to keep track of the task list and number of tasks","lastModifiedDate":"2024-03-04"},{"lineNumber":8,"author":{"gitId":"edwardhumi"},"content":" */","lastModifiedDate":"2024-03-04"},{"lineNumber":9,"author":{"gitId":"edwardhumi"},"content":"public class TaskManager {","lastModifiedDate":"2024-02-03"},{"lineNumber":10,"author":{"gitId":"edwardhumi"},"content":"    ArrayList\u003cTask\u003e taskList;","lastModifiedDate":"2024-02-20"},{"lineNumber":11,"author":{"gitId":"edwardhumi"},"content":"    public static int taskCount;","lastModifiedDate":"2024-02-03"},{"lineNumber":12,"author":{"gitId":"edwardhumi"},"content":"    Storage storage;","lastModifiedDate":"2024-03-03"},{"lineNumber":13,"author":{"gitId":"edwardhumi"},"content":"","lastModifiedDate":"2024-02-20"},{"lineNumber":14,"author":{"gitId":"edwardhumi"},"content":"    TaskManager(Storage storage) {","lastModifiedDate":"2024-03-03"},{"lineNumber":15,"author":{"gitId":"edwardhumi"},"content":"        this.taskList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-03-03"},{"lineNumber":16,"author":{"gitId":"edwardhumi"},"content":"        taskCount \u003d 0;","lastModifiedDate":"2024-02-03"},{"lineNumber":17,"author":{"gitId":"edwardhumi"},"content":"        this.storage \u003d storage;","lastModifiedDate":"2024-03-03"},{"lineNumber":18,"author":{"gitId":"edwardhumi"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":19,"author":{"gitId":"edwardhumi"},"content":"","lastModifiedDate":"2024-02-20"},{"lineNumber":20,"author":{"gitId":"edwardhumi"},"content":"    /**","lastModifiedDate":"2024-03-04"},{"lineNumber":21,"author":{"gitId":"edwardhumi"},"content":"     * Determines the type of the command and passes it to the corresponding","lastModifiedDate":"2024-03-04"},{"lineNumber":22,"author":{"gitId":"edwardhumi"},"content":"     * command handler.","lastModifiedDate":"2024-03-04"},{"lineNumber":23,"author":{"gitId":"edwardhumi"},"content":"     * @param command Input command received from the user","lastModifiedDate":"2024-03-04"},{"lineNumber":24,"author":{"gitId":"edwardhumi"},"content":"     */","lastModifiedDate":"2024-03-04"},{"lineNumber":25,"author":{"gitId":"edwardhumi"},"content":"    public void handleCommand(String command) {","lastModifiedDate":"2024-02-03"},{"lineNumber":26,"author":{"gitId":"edwardhumi"},"content":"        if (command.equals(\"list\")) {","lastModifiedDate":"2024-02-03"},{"lineNumber":27,"author":{"gitId":"edwardhumi"},"content":"            handleList();","lastModifiedDate":"2024-02-10"},{"lineNumber":28,"author":{"gitId":"edwardhumi"},"content":"        } else if (command.startsWith(\"todo\")) {","lastModifiedDate":"2024-02-10"},{"lineNumber":29,"author":{"gitId":"edwardhumi"},"content":"            handleTodo(command);","lastModifiedDate":"2024-02-10"},{"lineNumber":30,"author":{"gitId":"edwardhumi"},"content":"        } else if (command.startsWith(\"deadline\")) {","lastModifiedDate":"2024-02-10"},{"lineNumber":31,"author":{"gitId":"edwardhumi"},"content":"            handleDeadline(command);","lastModifiedDate":"2024-02-10"},{"lineNumber":32,"author":{"gitId":"edwardhumi"},"content":"        } else if (command.startsWith(\"event\")) {","lastModifiedDate":"2024-02-10"},{"lineNumber":33,"author":{"gitId":"edwardhumi"},"content":"            handleEvent(command);","lastModifiedDate":"2024-02-10"},{"lineNumber":34,"author":{"gitId":"edwardhumi"},"content":"        } else if (command.startsWith(\"mark\")) {","lastModifiedDate":"2024-02-10"},{"lineNumber":35,"author":{"gitId":"edwardhumi"},"content":"            handleMark(command);","lastModifiedDate":"2024-03-03"},{"lineNumber":36,"author":{"gitId":"edwardhumi"},"content":"        } else if (command.startsWith(\"unmark\")) {","lastModifiedDate":"2024-02-10"},{"lineNumber":37,"author":{"gitId":"edwardhumi"},"content":"            handleUnmark(command);","lastModifiedDate":"2024-03-03"},{"lineNumber":38,"author":{"gitId":"edwardhumi"},"content":"        } else if (command.startsWith(\"delete\")) {","lastModifiedDate":"2024-02-20"},{"lineNumber":39,"author":{"gitId":"edwardhumi"},"content":"            handleDelete(command);","lastModifiedDate":"2024-02-20"},{"lineNumber":40,"author":{"gitId":"edwardhumi"},"content":"        } else if (command.startsWith(\"find\")) {","lastModifiedDate":"2024-03-03"},{"lineNumber":41,"author":{"gitId":"edwardhumi"},"content":"            handleFind(command);","lastModifiedDate":"2024-03-03"},{"lineNumber":42,"author":{"gitId":"edwardhumi"},"content":"        } else {","lastModifiedDate":"2024-02-10"},{"lineNumber":43,"author":{"gitId":"edwardhumi"},"content":"            System.out.println(\"Invalid input. What is \" + command + \"?\");","lastModifiedDate":"2024-02-10"},{"lineNumber":44,"author":{"gitId":"edwardhumi"},"content":"        }","lastModifiedDate":"2024-02-10"},{"lineNumber":45,"author":{"gitId":"edwardhumi"},"content":"    }","lastModifiedDate":"2024-02-10"},{"lineNumber":46,"author":{"gitId":"edwardhumi"},"content":"","lastModifiedDate":"2024-02-10"},{"lineNumber":47,"author":{"gitId":"edwardhumi"},"content":"    /**","lastModifiedDate":"2024-03-04"},{"lineNumber":48,"author":{"gitId":"edwardhumi"},"content":"     * Print out all the tasks in the list.","lastModifiedDate":"2024-03-04"},{"lineNumber":49,"author":{"gitId":"edwardhumi"},"content":"     */","lastModifiedDate":"2024-03-04"},{"lineNumber":50,"author":{"gitId":"edwardhumi"},"content":"    private void handleList() {","lastModifiedDate":"2024-03-03"},{"lineNumber":51,"author":{"gitId":"edwardhumi"},"content":"        System.out.println(Ui.LINE);","lastModifiedDate":"2024-03-03"},{"lineNumber":52,"author":{"gitId":"edwardhumi"},"content":"        System.out.println(\"    Here are the tasks in your list\");","lastModifiedDate":"2024-03-03"},{"lineNumber":53,"author":{"gitId":"edwardhumi"},"content":"        for (int i \u003d 0; i \u003c taskCount; i++) {","lastModifiedDate":"2024-03-03"},{"lineNumber":54,"author":{"gitId":"edwardhumi"},"content":"            System.out.print(\"     \" + (i+1) + \".\");","lastModifiedDate":"2024-03-03"},{"lineNumber":55,"author":{"gitId":"edwardhumi"},"content":"            taskList.get(i).print();","lastModifiedDate":"2024-03-03"},{"lineNumber":56,"author":{"gitId":"edwardhumi"},"content":"        }","lastModifiedDate":"2024-03-03"},{"lineNumber":57,"author":{"gitId":"edwardhumi"},"content":"        System.out.println(Ui.LINE);","lastModifiedDate":"2024-03-03"},{"lineNumber":58,"author":{"gitId":"edwardhumi"},"content":"    }","lastModifiedDate":"2024-02-20"},{"lineNumber":59,"author":{"gitId":"edwardhumi"},"content":"","lastModifiedDate":"2024-02-20"},{"lineNumber":60,"author":{"gitId":"edwardhumi"},"content":"    /**","lastModifiedDate":"2024-03-04"},{"lineNumber":61,"author":{"gitId":"edwardhumi"},"content":"     * Get the details from the parser, and add the todo task to the list.","lastModifiedDate":"2024-03-04"},{"lineNumber":62,"author":{"gitId":"edwardhumi"},"content":"     * @param command Todo command input from the user","lastModifiedDate":"2024-03-04"},{"lineNumber":63,"author":{"gitId":"edwardhumi"},"content":"     */","lastModifiedDate":"2024-03-04"},{"lineNumber":64,"author":{"gitId":"edwardhumi"},"content":"    private void handleTodo(String command) {","lastModifiedDate":"2024-03-03"},{"lineNumber":65,"author":{"gitId":"edwardhumi"},"content":"        try {","lastModifiedDate":"2024-03-03"},{"lineNumber":66,"author":{"gitId":"edwardhumi"},"content":"            Parser.parseCommand(command);","lastModifiedDate":"2024-03-03"},{"lineNumber":67,"author":{"gitId":"edwardhumi"},"content":"            String description \u003d Parser.todoDescription;","lastModifiedDate":"2024-03-03"},{"lineNumber":68,"author":{"gitId":"edwardhumi"},"content":"            taskList.add(new TodoTask(description));","lastModifiedDate":"2024-03-03"},{"lineNumber":69,"author":{"gitId":"edwardhumi"},"content":"            taskCount +\u003d 1;","lastModifiedDate":"2024-02-10"},{"lineNumber":70,"author":{"gitId":"edwardhumi"},"content":"            String text \u003d Parser.convertCommandToText(command);","lastModifiedDate":"2024-03-03"},{"lineNumber":71,"author":{"gitId":"edwardhumi"},"content":"            storage.appendTextContent(text);","lastModifiedDate":"2024-03-03"},{"lineNumber":72,"author":{"gitId":"edwardhumi"},"content":"        } catch (HumiException e) {","lastModifiedDate":"2024-03-03"},{"lineNumber":73,"author":{"gitId":"edwardhumi"},"content":"            System.out.println(e.message);","lastModifiedDate":"2024-03-03"},{"lineNumber":74,"author":{"gitId":"edwardhumi"},"content":"        }","lastModifiedDate":"2024-02-10"},{"lineNumber":75,"author":{"gitId":"edwardhumi"},"content":"    }","lastModifiedDate":"2024-02-10"},{"lineNumber":76,"author":{"gitId":"edwardhumi"},"content":"","lastModifiedDate":"2024-02-10"},{"lineNumber":77,"author":{"gitId":"edwardhumi"},"content":"    /**","lastModifiedDate":"2024-03-04"},{"lineNumber":78,"author":{"gitId":"edwardhumi"},"content":"     * Get the details from the parser, and add the deadline task to the list.","lastModifiedDate":"2024-03-04"},{"lineNumber":79,"author":{"gitId":"edwardhumi"},"content":"     * @param command Deadline command input from the user","lastModifiedDate":"2024-03-04"},{"lineNumber":80,"author":{"gitId":"edwardhumi"},"content":"     */","lastModifiedDate":"2024-03-04"},{"lineNumber":81,"author":{"gitId":"edwardhumi"},"content":"    private void handleDeadline(String command) {","lastModifiedDate":"2024-03-03"},{"lineNumber":82,"author":{"gitId":"edwardhumi"},"content":"        try {","lastModifiedDate":"2024-03-03"},{"lineNumber":83,"author":{"gitId":"edwardhumi"},"content":"            Parser.parseCommand(command);","lastModifiedDate":"2024-03-03"},{"lineNumber":84,"author":{"gitId":"edwardhumi"},"content":"            String description \u003d Parser.deadlineDescription;","lastModifiedDate":"2024-03-03"},{"lineNumber":85,"author":{"gitId":"edwardhumi"},"content":"            String deadline \u003d Parser.deadlineDate;","lastModifiedDate":"2024-03-03"},{"lineNumber":86,"author":{"gitId":"edwardhumi"},"content":"            taskList.add(new DeadlineTask(description, deadline));","lastModifiedDate":"2024-02-20"},{"lineNumber":87,"author":{"gitId":"edwardhumi"},"content":"            taskCount +\u003d 1;","lastModifiedDate":"2024-02-10"},{"lineNumber":88,"author":{"gitId":"edwardhumi"},"content":"            String text \u003d Parser.convertCommandToText(command);","lastModifiedDate":"2024-03-03"},{"lineNumber":89,"author":{"gitId":"edwardhumi"},"content":"            storage.appendTextContent(text);","lastModifiedDate":"2024-03-03"},{"lineNumber":90,"author":{"gitId":"edwardhumi"},"content":"        } catch (HumiException e) {","lastModifiedDate":"2024-03-03"},{"lineNumber":91,"author":{"gitId":"edwardhumi"},"content":"            System.out.println(e.message);","lastModifiedDate":"2024-03-03"},{"lineNumber":92,"author":{"gitId":"edwardhumi"},"content":"        }","lastModifiedDate":"2024-02-10"},{"lineNumber":93,"author":{"gitId":"edwardhumi"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":94,"author":{"gitId":"edwardhumi"},"content":"","lastModifiedDate":"2024-02-10"},{"lineNumber":95,"author":{"gitId":"edwardhumi"},"content":"    /**","lastModifiedDate":"2024-03-04"},{"lineNumber":96,"author":{"gitId":"edwardhumi"},"content":"     * Get the details from the parser, and add the event task to the list.","lastModifiedDate":"2024-03-04"},{"lineNumber":97,"author":{"gitId":"edwardhumi"},"content":"     * @param command Deadline command input from the user","lastModifiedDate":"2024-03-04"},{"lineNumber":98,"author":{"gitId":"edwardhumi"},"content":"     */","lastModifiedDate":"2024-03-04"},{"lineNumber":99,"author":{"gitId":"edwardhumi"},"content":"    private void handleEvent(String command) {","lastModifiedDate":"2024-03-04"},{"lineNumber":100,"author":{"gitId":"edwardhumi"},"content":"        try {","lastModifiedDate":"2024-03-03"},{"lineNumber":101,"author":{"gitId":"edwardhumi"},"content":"            Parser.parseCommand(command);","lastModifiedDate":"2024-03-03"},{"lineNumber":102,"author":{"gitId":"edwardhumi"},"content":"            String description \u003d Parser.eventDescription;","lastModifiedDate":"2024-03-03"},{"lineNumber":103,"author":{"gitId":"edwardhumi"},"content":"            String startDate \u003d Parser.eventStartDate;","lastModifiedDate":"2024-03-03"},{"lineNumber":104,"author":{"gitId":"edwardhumi"},"content":"            String endDate \u003d Parser.eventEndDate;","lastModifiedDate":"2024-03-03"},{"lineNumber":105,"author":{"gitId":"edwardhumi"},"content":"            taskList.add(new EventTask(description, startDate, endDate));","lastModifiedDate":"2024-03-03"},{"lineNumber":106,"author":{"gitId":"edwardhumi"},"content":"            taskCount +\u003d 1;","lastModifiedDate":"2024-02-10"},{"lineNumber":107,"author":{"gitId":"edwardhumi"},"content":"            String text \u003d Parser.convertCommandToText(command);","lastModifiedDate":"2024-03-03"},{"lineNumber":108,"author":{"gitId":"edwardhumi"},"content":"            storage.appendTextContent(text);","lastModifiedDate":"2024-03-03"},{"lineNumber":109,"author":{"gitId":"edwardhumi"},"content":"        } catch (HumiException e) {","lastModifiedDate":"2024-03-03"},{"lineNumber":110,"author":{"gitId":"edwardhumi"},"content":"            System.out.println(e.message);","lastModifiedDate":"2024-03-03"},{"lineNumber":111,"author":{"gitId":"edwardhumi"},"content":"        }","lastModifiedDate":"2024-02-10"},{"lineNumber":112,"author":{"gitId":"edwardhumi"},"content":"    }","lastModifiedDate":"2024-02-10"},{"lineNumber":113,"author":{"gitId":"edwardhumi"},"content":"","lastModifiedDate":"2024-02-10"},{"lineNumber":114,"author":{"gitId":"edwardhumi"},"content":"    /**","lastModifiedDate":"2024-03-04"},{"lineNumber":115,"author":{"gitId":"edwardhumi"},"content":"     * Prints out tasks containing the given keyword","lastModifiedDate":"2024-03-04"},{"lineNumber":116,"author":{"gitId":"edwardhumi"},"content":"     * @param command Find command input from the user","lastModifiedDate":"2024-03-04"},{"lineNumber":117,"author":{"gitId":"edwardhumi"},"content":"     */","lastModifiedDate":"2024-03-04"},{"lineNumber":118,"author":{"gitId":"edwardhumi"},"content":"    private void handleFind(String command) {","lastModifiedDate":"2024-03-03"},{"lineNumber":119,"author":{"gitId":"edwardhumi"},"content":"        String keyword \u003d command.substring(5).trim().toLowerCase();","lastModifiedDate":"2024-03-03"},{"lineNumber":120,"author":{"gitId":"edwardhumi"},"content":"        int index \u003d 1;","lastModifiedDate":"2024-03-03"},{"lineNumber":121,"author":{"gitId":"edwardhumi"},"content":"        System.out.println(Ui.LINE);","lastModifiedDate":"2024-03-03"},{"lineNumber":122,"author":{"gitId":"edwardhumi"},"content":"        System.out.println(\"    Here are the matching tasks in your list:\");","lastModifiedDate":"2024-03-03"},{"lineNumber":123,"author":{"gitId":"edwardhumi"},"content":"        for (Task t : taskList) {","lastModifiedDate":"2024-03-03"},{"lineNumber":124,"author":{"gitId":"edwardhumi"},"content":"            if (t.description.toLowerCase().contains(keyword)) {","lastModifiedDate":"2024-03-03"},{"lineNumber":125,"author":{"gitId":"edwardhumi"},"content":"                System.out.print(\"    \" + index + \".\");","lastModifiedDate":"2024-03-03"},{"lineNumber":126,"author":{"gitId":"edwardhumi"},"content":"                t.print();","lastModifiedDate":"2024-03-03"},{"lineNumber":127,"author":{"gitId":"edwardhumi"},"content":"                index++;","lastModifiedDate":"2024-03-03"},{"lineNumber":128,"author":{"gitId":"edwardhumi"},"content":"            }","lastModifiedDate":"2024-03-03"},{"lineNumber":129,"author":{"gitId":"edwardhumi"},"content":"        }","lastModifiedDate":"2024-03-03"},{"lineNumber":130,"author":{"gitId":"edwardhumi"},"content":"        System.out.println(Ui.LINE);","lastModifiedDate":"2024-03-03"},{"lineNumber":131,"author":{"gitId":"edwardhumi"},"content":"    }","lastModifiedDate":"2024-03-03"},{"lineNumber":132,"author":{"gitId":"edwardhumi"},"content":"","lastModifiedDate":"2024-03-03"},{"lineNumber":133,"author":{"gitId":"edwardhumi"},"content":"    /**","lastModifiedDate":"2024-03-04"},{"lineNumber":134,"author":{"gitId":"edwardhumi"},"content":"     * Get the details from the parser, and mark the task on the list.","lastModifiedDate":"2024-03-04"},{"lineNumber":135,"author":{"gitId":"edwardhumi"},"content":"     * @param command Mark command input from the user","lastModifiedDate":"2024-03-04"},{"lineNumber":136,"author":{"gitId":"edwardhumi"},"content":"     */","lastModifiedDate":"2024-03-04"},{"lineNumber":137,"author":{"gitId":"edwardhumi"},"content":"    private void handleMark(String command) {","lastModifiedDate":"2024-03-04"},{"lineNumber":138,"author":{"gitId":"edwardhumi"},"content":"        try {","lastModifiedDate":"2024-03-03"},{"lineNumber":139,"author":{"gitId":"edwardhumi"},"content":"            Parser.parseCommand(command);","lastModifiedDate":"2024-03-03"},{"lineNumber":140,"author":{"gitId":"edwardhumi"},"content":"            int taskIndex \u003d Parser.taskIndex;","lastModifiedDate":"2024-03-03"},{"lineNumber":141,"author":{"gitId":"edwardhumi"},"content":"            taskList.get(taskIndex - 1).mark();","lastModifiedDate":"2024-03-03"},{"lineNumber":142,"author":{"gitId":"edwardhumi"},"content":"            storage.markText(true, taskIndex);","lastModifiedDate":"2024-03-03"},{"lineNumber":143,"author":{"gitId":"edwardhumi"},"content":"        } catch (HumiException e) {","lastModifiedDate":"2024-03-03"},{"lineNumber":144,"author":{"gitId":"edwardhumi"},"content":"            System.out.println(e.message);","lastModifiedDate":"2024-03-03"},{"lineNumber":145,"author":{"gitId":"edwardhumi"},"content":"        }","lastModifiedDate":"2024-03-03"},{"lineNumber":146,"author":{"gitId":"edwardhumi"},"content":"    }","lastModifiedDate":"2024-03-03"},{"lineNumber":147,"author":{"gitId":"edwardhumi"},"content":"","lastModifiedDate":"2024-03-03"},{"lineNumber":148,"author":{"gitId":"edwardhumi"},"content":"    /**","lastModifiedDate":"2024-03-04"},{"lineNumber":149,"author":{"gitId":"edwardhumi"},"content":"     * Get the details from the parser, and remove the task mark from the list.","lastModifiedDate":"2024-03-04"},{"lineNumber":150,"author":{"gitId":"edwardhumi"},"content":"     * @param command Unmark command input from the user","lastModifiedDate":"2024-03-04"},{"lineNumber":151,"author":{"gitId":"edwardhumi"},"content":"     */","lastModifiedDate":"2024-03-04"},{"lineNumber":152,"author":{"gitId":"edwardhumi"},"content":"    private void handleUnmark(String command) {","lastModifiedDate":"2024-03-04"},{"lineNumber":153,"author":{"gitId":"edwardhumi"},"content":"        try {","lastModifiedDate":"2024-03-03"},{"lineNumber":154,"author":{"gitId":"edwardhumi"},"content":"            Parser.parseCommand(command);","lastModifiedDate":"2024-03-03"},{"lineNumber":155,"author":{"gitId":"edwardhumi"},"content":"            int taskIndex \u003d Parser.taskIndex;","lastModifiedDate":"2024-03-03"},{"lineNumber":156,"author":{"gitId":"edwardhumi"},"content":"            taskList.get(taskIndex - 1).unmark();","lastModifiedDate":"2024-03-03"},{"lineNumber":157,"author":{"gitId":"edwardhumi"},"content":"            storage.markText(false, taskIndex);","lastModifiedDate":"2024-03-03"},{"lineNumber":158,"author":{"gitId":"edwardhumi"},"content":"        } catch (HumiException e) {","lastModifiedDate":"2024-03-03"},{"lineNumber":159,"author":{"gitId":"edwardhumi"},"content":"            System.out.println(e.message);","lastModifiedDate":"2024-03-03"},{"lineNumber":160,"author":{"gitId":"edwardhumi"},"content":"        }","lastModifiedDate":"2024-03-03"},{"lineNumber":161,"author":{"gitId":"edwardhumi"},"content":"    }","lastModifiedDate":"2024-03-03"},{"lineNumber":162,"author":{"gitId":"edwardhumi"},"content":"","lastModifiedDate":"2024-03-03"},{"lineNumber":163,"author":{"gitId":"edwardhumi"},"content":"    /**","lastModifiedDate":"2024-03-04"},{"lineNumber":164,"author":{"gitId":"edwardhumi"},"content":"     * Remove a certain task from the list and prints out the message","lastModifiedDate":"2024-03-04"},{"lineNumber":165,"author":{"gitId":"edwardhumi"},"content":"     * @param command Delete command input from the user","lastModifiedDate":"2024-03-04"},{"lineNumber":166,"author":{"gitId":"edwardhumi"},"content":"     */","lastModifiedDate":"2024-03-04"},{"lineNumber":167,"author":{"gitId":"edwardhumi"},"content":"    private void handleDelete(String command) {","lastModifiedDate":"2024-03-03"},{"lineNumber":168,"author":{"gitId":"edwardhumi"},"content":"        try {","lastModifiedDate":"2024-03-03"},{"lineNumber":169,"author":{"gitId":"edwardhumi"},"content":"            Parser.parseCommand(command);","lastModifiedDate":"2024-03-03"},{"lineNumber":170,"author":{"gitId":"edwardhumi"},"content":"            int taskIndex \u003d Parser.taskIndex;","lastModifiedDate":"2024-03-03"},{"lineNumber":171,"author":{"gitId":"edwardhumi"},"content":"            System.out.println(Ui.LINE);","lastModifiedDate":"2024-03-03"},{"lineNumber":172,"author":{"gitId":"edwardhumi"},"content":"            System.out.print(\"    Noted. I\u0027ve removed this task:\\n      \");","lastModifiedDate":"2024-03-03"},{"lineNumber":173,"author":{"gitId":"edwardhumi"},"content":"            taskList.get(taskIndex - 1).print();","lastModifiedDate":"2024-03-03"},{"lineNumber":174,"author":{"gitId":"edwardhumi"},"content":"            taskList.remove(taskIndex - 1);","lastModifiedDate":"2024-03-03"},{"lineNumber":175,"author":{"gitId":"edwardhumi"},"content":"            taskCount -\u003d 1;","lastModifiedDate":"2024-03-03"},{"lineNumber":176,"author":{"gitId":"edwardhumi"},"content":"            System.out.println(\"    Now you have \" + taskCount + \" tasks in the list\");","lastModifiedDate":"2024-03-03"},{"lineNumber":177,"author":{"gitId":"edwardhumi"},"content":"            System.out.println(Ui.LINE);","lastModifiedDate":"2024-03-03"},{"lineNumber":178,"author":{"gitId":"edwardhumi"},"content":"            storage.deleteText(taskIndex);","lastModifiedDate":"2024-03-03"},{"lineNumber":179,"author":{"gitId":"edwardhumi"},"content":"        } catch (HumiException e) {","lastModifiedDate":"2024-03-03"},{"lineNumber":180,"author":{"gitId":"edwardhumi"},"content":"            System.out.println(e.message);","lastModifiedDate":"2024-03-03"},{"lineNumber":181,"author":{"gitId":"edwardhumi"},"content":"        }","lastModifiedDate":"2024-03-03"},{"lineNumber":182,"author":{"gitId":"edwardhumi"},"content":"    }","lastModifiedDate":"2024-03-03"},{"lineNumber":183,"author":{"gitId":"edwardhumi"},"content":"","lastModifiedDate":"2024-03-03"},{"lineNumber":184,"author":{"gitId":"edwardhumi"},"content":"    /**","lastModifiedDate":"2024-03-04"},{"lineNumber":185,"author":{"gitId":"edwardhumi"},"content":"     * Load each command from the data text file to the task list","lastModifiedDate":"2024-03-04"},{"lineNumber":186,"author":{"gitId":"edwardhumi"},"content":"     * @param inputString Text formatted command from the data file","lastModifiedDate":"2024-03-04"},{"lineNumber":187,"author":{"gitId":"edwardhumi"},"content":"     */","lastModifiedDate":"2024-03-04"},{"lineNumber":188,"author":{"gitId":"edwardhumi"},"content":"    public void loadTask(String inputString) {","lastModifiedDate":"2024-03-03"},{"lineNumber":189,"author":{"gitId":"edwardhumi"},"content":"        String[] taskComponents \u003d inputString.split(\"/\");","lastModifiedDate":"2024-03-03"},{"lineNumber":190,"author":{"gitId":"edwardhumi"},"content":"        String taskType \u003d taskComponents[0];","lastModifiedDate":"2024-03-03"},{"lineNumber":191,"author":{"gitId":"edwardhumi"},"content":"        boolean isDone \u003d (taskComponents[1].equals(\"1\"));","lastModifiedDate":"2024-03-03"},{"lineNumber":192,"author":{"gitId":"edwardhumi"},"content":"        String description \u003d taskComponents[2];","lastModifiedDate":"2024-03-03"},{"lineNumber":193,"author":{"gitId":"edwardhumi"},"content":"","lastModifiedDate":"2024-03-03"},{"lineNumber":194,"author":{"gitId":"edwardhumi"},"content":"        if (taskType.equals(\"T\")) {","lastModifiedDate":"2024-03-03"},{"lineNumber":195,"author":{"gitId":"edwardhumi"},"content":"            taskList.add(new TodoTask(description, isDone));","lastModifiedDate":"2024-03-03"},{"lineNumber":196,"author":{"gitId":"edwardhumi"},"content":"            taskCount++;","lastModifiedDate":"2024-03-03"},{"lineNumber":197,"author":{"gitId":"edwardhumi"},"content":"        } else if (taskType.equals(\"D\")) {","lastModifiedDate":"2024-03-03"},{"lineNumber":198,"author":{"gitId":"edwardhumi"},"content":"            String deadline \u003d taskComponents[3];","lastModifiedDate":"2024-03-03"},{"lineNumber":199,"author":{"gitId":"edwardhumi"},"content":"            taskList.add(new DeadlineTask(description, deadline, isDone));","lastModifiedDate":"2024-03-03"},{"lineNumber":200,"author":{"gitId":"edwardhumi"},"content":"            taskCount++;","lastModifiedDate":"2024-03-03"},{"lineNumber":201,"author":{"gitId":"edwardhumi"},"content":"        } else if (taskType.equals(\"E\")) {","lastModifiedDate":"2024-03-03"},{"lineNumber":202,"author":{"gitId":"edwardhumi"},"content":"            String startDate \u003d taskComponents[3];","lastModifiedDate":"2024-03-03"},{"lineNumber":203,"author":{"gitId":"edwardhumi"},"content":"            String endDate \u003d taskComponents[4];","lastModifiedDate":"2024-03-03"},{"lineNumber":204,"author":{"gitId":"edwardhumi"},"content":"            taskList.add(new EventTask(description, startDate, endDate, isDone));","lastModifiedDate":"2024-03-03"},{"lineNumber":205,"author":{"gitId":"edwardhumi"},"content":"            taskCount++;","lastModifiedDate":"2024-03-03"},{"lineNumber":206,"author":{"gitId":"edwardhumi"},"content":"        } else {","lastModifiedDate":"2024-03-03"},{"lineNumber":207,"author":{"gitId":"edwardhumi"},"content":"            System.out.println(\"Invalid text, cannot add new task.\");","lastModifiedDate":"2024-03-03"},{"lineNumber":208,"author":{"gitId":"edwardhumi"},"content":"        }","lastModifiedDate":"2024-03-03"},{"lineNumber":209,"author":{"gitId":"edwardhumi"},"content":"    }","lastModifiedDate":"2024-03-03"},{"lineNumber":210,"author":{"gitId":"edwardhumi"},"content":"}","lastModifiedDate":"2024-02-03"}],"authorContributionMap":{"edwardhumi":210}},{"path":"src/main/java/humi/TaskType.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"edwardhumi"},"content":"package humi;","lastModifiedDate":"2024-02-12"},{"lineNumber":2,"author":{"gitId":"edwardhumi"},"content":"","lastModifiedDate":"2024-02-12"},{"lineNumber":3,"author":{"gitId":"edwardhumi"},"content":"enum TaskType {","lastModifiedDate":"2024-02-10"},{"lineNumber":4,"author":{"gitId":"edwardhumi"},"content":"    TODO,","lastModifiedDate":"2024-02-10"},{"lineNumber":5,"author":{"gitId":"edwardhumi"},"content":"    DEADLINE,","lastModifiedDate":"2024-02-10"},{"lineNumber":6,"author":{"gitId":"edwardhumi"},"content":"    EVENT","lastModifiedDate":"2024-02-10"},{"lineNumber":7,"author":{"gitId":"edwardhumi"},"content":"}","lastModifiedDate":"2024-02-10"}],"authorContributionMap":{"edwardhumi":7}},{"path":"src/main/java/humi/TodoTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"edwardhumi"},"content":"package humi;","lastModifiedDate":"2024-02-12"},{"lineNumber":2,"author":{"gitId":"edwardhumi"},"content":"","lastModifiedDate":"2024-02-12"},{"lineNumber":3,"author":{"gitId":"edwardhumi"},"content":"/**","lastModifiedDate":"2024-03-04"},{"lineNumber":4,"author":{"gitId":"edwardhumi"},"content":" * Represents the todo task containing task type, mark, and description","lastModifiedDate":"2024-03-04"},{"lineNumber":5,"author":{"gitId":"edwardhumi"},"content":" */","lastModifiedDate":"2024-03-04"},{"lineNumber":6,"author":{"gitId":"edwardhumi"},"content":"public class TodoTask extends Task {","lastModifiedDate":"2024-02-03"},{"lineNumber":7,"author":{"gitId":"edwardhumi"},"content":"    TodoTask(String description) {","lastModifiedDate":"2024-02-03"},{"lineNumber":8,"author":{"gitId":"edwardhumi"},"content":"        this.taskType \u003d TaskType.TODO;","lastModifiedDate":"2024-02-10"},{"lineNumber":9,"author":{"gitId":"edwardhumi"},"content":"        this.description \u003d description;","lastModifiedDate":"2024-02-03"},{"lineNumber":10,"author":{"gitId":"edwardhumi"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2024-02-03"},{"lineNumber":11,"author":{"gitId":"edwardhumi"},"content":"        Ui.printAddTodo(description);","lastModifiedDate":"2024-03-04"},{"lineNumber":12,"author":{"gitId":"edwardhumi"},"content":"    }","lastModifiedDate":"2024-02-03"},{"lineNumber":13,"author":{"gitId":"edwardhumi"},"content":"","lastModifiedDate":"2024-02-20"},{"lineNumber":14,"author":{"gitId":"edwardhumi"},"content":"    TodoTask(String description, boolean isDone) {","lastModifiedDate":"2024-02-20"},{"lineNumber":15,"author":{"gitId":"edwardhumi"},"content":"        this.taskType \u003d TaskType.TODO;","lastModifiedDate":"2024-02-20"},{"lineNumber":16,"author":{"gitId":"edwardhumi"},"content":"        this.description \u003d description;","lastModifiedDate":"2024-02-20"},{"lineNumber":17,"author":{"gitId":"edwardhumi"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2024-02-20"},{"lineNumber":18,"author":{"gitId":"edwardhumi"},"content":"    }","lastModifiedDate":"2024-02-20"},{"lineNumber":19,"author":{"gitId":"edwardhumi"},"content":"}","lastModifiedDate":"2024-02-03"}],"authorContributionMap":{"edwardhumi":19}},{"path":"src/main/java/humi/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"edwardhumi"},"content":"package humi;","lastModifiedDate":"2024-03-03"},{"lineNumber":2,"author":{"gitId":"edwardhumi"},"content":"","lastModifiedDate":"2024-03-03"},{"lineNumber":3,"author":{"gitId":"edwardhumi"},"content":"public class Ui {","lastModifiedDate":"2024-03-03"},{"lineNumber":4,"author":{"gitId":"edwardhumi"},"content":"    public static final String LINE \u003d \"    ____________________________________________________________\";","lastModifiedDate":"2024-03-03"},{"lineNumber":5,"author":{"gitId":"edwardhumi"},"content":"","lastModifiedDate":"2024-03-03"},{"lineNumber":6,"author":{"gitId":"edwardhumi"},"content":"    /**","lastModifiedDate":"2024-03-04"},{"lineNumber":7,"author":{"gitId":"edwardhumi"},"content":"     * Print starting message when the program starts","lastModifiedDate":"2024-03-04"},{"lineNumber":8,"author":{"gitId":"edwardhumi"},"content":"     */","lastModifiedDate":"2024-03-04"},{"lineNumber":9,"author":{"gitId":"edwardhumi"},"content":"    public void printWelcome() {","lastModifiedDate":"2024-03-03"},{"lineNumber":10,"author":{"gitId":"edwardhumi"},"content":"        System.out.println(LINE);","lastModifiedDate":"2024-03-03"},{"lineNumber":11,"author":{"gitId":"edwardhumi"},"content":"        System.out.println(\"     Hello! I\u0027m Humi\");","lastModifiedDate":"2024-03-03"},{"lineNumber":12,"author":{"gitId":"edwardhumi"},"content":"        System.out.println(\"     What can I do for you?\");","lastModifiedDate":"2024-03-03"},{"lineNumber":13,"author":{"gitId":"edwardhumi"},"content":"        System.out.println(LINE);","lastModifiedDate":"2024-03-03"},{"lineNumber":14,"author":{"gitId":"edwardhumi"},"content":"    }","lastModifiedDate":"2024-03-03"},{"lineNumber":15,"author":{"gitId":"edwardhumi"},"content":"","lastModifiedDate":"2024-03-03"},{"lineNumber":16,"author":{"gitId":"edwardhumi"},"content":"    /**","lastModifiedDate":"2024-03-04"},{"lineNumber":17,"author":{"gitId":"edwardhumi"},"content":"     * Print exit message when the program terminates","lastModifiedDate":"2024-03-04"},{"lineNumber":18,"author":{"gitId":"edwardhumi"},"content":"     */","lastModifiedDate":"2024-03-04"},{"lineNumber":19,"author":{"gitId":"edwardhumi"},"content":"    public void printExit() {","lastModifiedDate":"2024-03-03"},{"lineNumber":20,"author":{"gitId":"edwardhumi"},"content":"        System.out.println(LINE);","lastModifiedDate":"2024-03-03"},{"lineNumber":21,"author":{"gitId":"edwardhumi"},"content":"        System.out.println(\"     Bye. Hope to see you again soon!\");","lastModifiedDate":"2024-03-03"},{"lineNumber":22,"author":{"gitId":"edwardhumi"},"content":"        System.out.println(LINE);","lastModifiedDate":"2024-03-03"},{"lineNumber":23,"author":{"gitId":"edwardhumi"},"content":"    }","lastModifiedDate":"2024-03-03"},{"lineNumber":24,"author":{"gitId":"edwardhumi"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":25,"author":{"gitId":"edwardhumi"},"content":"    /**","lastModifiedDate":"2024-03-04"},{"lineNumber":26,"author":{"gitId":"edwardhumi"},"content":"     * Print message when todo task has been successfully added to the list","lastModifiedDate":"2024-03-04"},{"lineNumber":27,"author":{"gitId":"edwardhumi"},"content":"     * @param description Description of the todo task","lastModifiedDate":"2024-03-04"},{"lineNumber":28,"author":{"gitId":"edwardhumi"},"content":"     */","lastModifiedDate":"2024-03-04"},{"lineNumber":29,"author":{"gitId":"edwardhumi"},"content":"    public static void printAddTodo(String description) {","lastModifiedDate":"2024-03-04"},{"lineNumber":30,"author":{"gitId":"edwardhumi"},"content":"        System.out.println(Ui.LINE);","lastModifiedDate":"2024-03-04"},{"lineNumber":31,"author":{"gitId":"edwardhumi"},"content":"        System.out.println(\"     Got it. I\u0027ve added this task:\");","lastModifiedDate":"2024-03-04"},{"lineNumber":32,"author":{"gitId":"edwardhumi"},"content":"        System.out.println(\"       [T][ ] \" + description);","lastModifiedDate":"2024-03-04"},{"lineNumber":33,"author":{"gitId":"edwardhumi"},"content":"        System.out.println(\"     Now you have \" + (TaskManager.taskCount + 1) + \" tasks in the list.\");","lastModifiedDate":"2024-03-04"},{"lineNumber":34,"author":{"gitId":"edwardhumi"},"content":"        System.out.println(Ui.LINE);","lastModifiedDate":"2024-03-04"},{"lineNumber":35,"author":{"gitId":"edwardhumi"},"content":"    }","lastModifiedDate":"2024-03-04"},{"lineNumber":36,"author":{"gitId":"edwardhumi"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":37,"author":{"gitId":"edwardhumi"},"content":"    /**","lastModifiedDate":"2024-03-04"},{"lineNumber":38,"author":{"gitId":"edwardhumi"},"content":"     * Print message when deadline task has been successfully added to the list","lastModifiedDate":"2024-03-04"},{"lineNumber":39,"author":{"gitId":"edwardhumi"},"content":"     * @param description Description of the deadline task","lastModifiedDate":"2024-03-04"},{"lineNumber":40,"author":{"gitId":"edwardhumi"},"content":"     * @param deadline Due date of the deadline task","lastModifiedDate":"2024-03-04"},{"lineNumber":41,"author":{"gitId":"edwardhumi"},"content":"     */","lastModifiedDate":"2024-03-04"},{"lineNumber":42,"author":{"gitId":"edwardhumi"},"content":"    public static void printAddDeadline(String description, String deadline) {","lastModifiedDate":"2024-03-04"},{"lineNumber":43,"author":{"gitId":"edwardhumi"},"content":"        System.out.println(Ui.LINE);","lastModifiedDate":"2024-03-04"},{"lineNumber":44,"author":{"gitId":"edwardhumi"},"content":"        System.out.println(\"     Got it. I\u0027ve added this task:\");","lastModifiedDate":"2024-03-04"},{"lineNumber":45,"author":{"gitId":"edwardhumi"},"content":"        System.out.println(\"       [D][ ] \" + description + \" by: \" + deadline);","lastModifiedDate":"2024-03-04"},{"lineNumber":46,"author":{"gitId":"edwardhumi"},"content":"        System.out.println(\"     Now you have \" + (TaskManager.taskCount + 1) + \" tasks in the list.\");","lastModifiedDate":"2024-03-04"},{"lineNumber":47,"author":{"gitId":"edwardhumi"},"content":"        System.out.println(Ui.LINE);","lastModifiedDate":"2024-03-04"},{"lineNumber":48,"author":{"gitId":"edwardhumi"},"content":"    }","lastModifiedDate":"2024-03-04"},{"lineNumber":49,"author":{"gitId":"edwardhumi"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":50,"author":{"gitId":"edwardhumi"},"content":"    /**","lastModifiedDate":"2024-03-04"},{"lineNumber":51,"author":{"gitId":"edwardhumi"},"content":"     * Print message when event task has been successfully added to the list","lastModifiedDate":"2024-03-04"},{"lineNumber":52,"author":{"gitId":"edwardhumi"},"content":"     * @param description Description of the event task","lastModifiedDate":"2024-03-04"},{"lineNumber":53,"author":{"gitId":"edwardhumi"},"content":"     * @param startDate Starting date of the event task","lastModifiedDate":"2024-03-04"},{"lineNumber":54,"author":{"gitId":"edwardhumi"},"content":"     * @param endDate End date of the event task","lastModifiedDate":"2024-03-04"},{"lineNumber":55,"author":{"gitId":"edwardhumi"},"content":"     */","lastModifiedDate":"2024-03-04"},{"lineNumber":56,"author":{"gitId":"edwardhumi"},"content":"    public static void printAddEvent(String description, String startDate, String endDate) {","lastModifiedDate":"2024-03-04"},{"lineNumber":57,"author":{"gitId":"edwardhumi"},"content":"        System.out.println(Ui.LINE);","lastModifiedDate":"2024-03-04"},{"lineNumber":58,"author":{"gitId":"edwardhumi"},"content":"        System.out.println(\"     Got it. I\u0027ve added this task:\");","lastModifiedDate":"2024-03-04"},{"lineNumber":59,"author":{"gitId":"edwardhumi"},"content":"        System.out.println(\"       [E][ ] \" + description + \" from: \" + startDate + \" to: \" + endDate);","lastModifiedDate":"2024-03-04"},{"lineNumber":60,"author":{"gitId":"edwardhumi"},"content":"        System.out.println(\"     Now you have \" + (TaskManager.taskCount + 1) + \" tasks in the list.\");","lastModifiedDate":"2024-03-04"},{"lineNumber":61,"author":{"gitId":"edwardhumi"},"content":"        System.out.println(Ui.LINE);","lastModifiedDate":"2024-03-04"},{"lineNumber":62,"author":{"gitId":"edwardhumi"},"content":"    }","lastModifiedDate":"2024-03-04"},{"lineNumber":63,"author":{"gitId":"edwardhumi"},"content":"}","lastModifiedDate":"2024-03-03"}],"authorContributionMap":{"edwardhumi":63}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"edwardhumi"},"content":"todo Edward Humianto: Answer CS2113 tutorial questions","lastModifiedDate":"2024-02-07"},{"lineNumber":2,"author":{"gitId":"edwardhumi"},"content":"bye","lastModifiedDate":"2024-02-07"}],"authorContributionMap":{"edwardhumi":2}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"edwardhumi"},"content":"java -classpath ..\\bin humi.Humi \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2024-02-12"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"edwardhumi":1,"-":20}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"edwardhumi"},"content":"java -classpath ../bin Humi \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2024-02-12"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"# convert to UNIX format","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"# compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    exit 0","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"else","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"edwardhumi":1,"-":37}}]
