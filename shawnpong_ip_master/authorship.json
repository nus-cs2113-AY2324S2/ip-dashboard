[{"path":"src/main/java/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shawnpong"},"content":"/**","lastModifiedDate":"2024-03-01"},{"lineNumber":2,"author":{"gitId":"shawnpong"},"content":" * The Deadline class represents a task with a deadline.","lastModifiedDate":"2024-03-01"},{"lineNumber":3,"author":{"gitId":"shawnpong"},"content":" */","lastModifiedDate":"2024-03-01"},{"lineNumber":4,"author":{"gitId":"shawnpong"},"content":"public class Deadline extends Task {","lastModifiedDate":"2024-02-08"},{"lineNumber":5,"author":{"gitId":"shawnpong"},"content":"    /** The deadline of the task. */","lastModifiedDate":"2024-03-01"},{"lineNumber":6,"author":{"gitId":"shawnpong"},"content":"    protected String by;","lastModifiedDate":"2024-02-08"},{"lineNumber":7,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":8,"author":{"gitId":"shawnpong"},"content":"    /**","lastModifiedDate":"2024-03-01"},{"lineNumber":9,"author":{"gitId":"shawnpong"},"content":"     * Constructs a Deadline object with the specified description, deadline, and completion status.","lastModifiedDate":"2024-03-01"},{"lineNumber":10,"author":{"gitId":"shawnpong"},"content":"     *","lastModifiedDate":"2024-03-01"},{"lineNumber":11,"author":{"gitId":"shawnpong"},"content":"     * @param description The description of the deadline task.","lastModifiedDate":"2024-03-01"},{"lineNumber":12,"author":{"gitId":"shawnpong"},"content":"     * @param by          The deadline of the task.","lastModifiedDate":"2024-03-01"},{"lineNumber":13,"author":{"gitId":"shawnpong"},"content":"     * @param isDone      The completion status of the task.","lastModifiedDate":"2024-03-01"},{"lineNumber":14,"author":{"gitId":"shawnpong"},"content":"     */","lastModifiedDate":"2024-03-01"},{"lineNumber":15,"author":{"gitId":"shawnpong"},"content":"    public Deadline(String description, String by, Boolean isDone) {","lastModifiedDate":"2024-02-21"},{"lineNumber":16,"author":{"gitId":"shawnpong"},"content":"        super(description);","lastModifiedDate":"2024-02-08"},{"lineNumber":17,"author":{"gitId":"shawnpong"},"content":"        this.by \u003d by;","lastModifiedDate":"2024-02-08"},{"lineNumber":18,"author":{"gitId":"shawnpong"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2024-02-21"},{"lineNumber":19,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-02-21"},{"lineNumber":20,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-02-21"},{"lineNumber":21,"author":{"gitId":"shawnpong"},"content":"    /**","lastModifiedDate":"2024-03-01"},{"lineNumber":22,"author":{"gitId":"shawnpong"},"content":"     * Retrieves the deadline of the task.","lastModifiedDate":"2024-03-01"},{"lineNumber":23,"author":{"gitId":"shawnpong"},"content":"     *","lastModifiedDate":"2024-03-01"},{"lineNumber":24,"author":{"gitId":"shawnpong"},"content":"     * @return The deadline of the task.","lastModifiedDate":"2024-03-01"},{"lineNumber":25,"author":{"gitId":"shawnpong"},"content":"     */","lastModifiedDate":"2024-03-01"},{"lineNumber":26,"author":{"gitId":"shawnpong"},"content":"    public String getBy() {","lastModifiedDate":"2024-02-21"},{"lineNumber":27,"author":{"gitId":"shawnpong"},"content":"        return by;","lastModifiedDate":"2024-02-21"},{"lineNumber":28,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-02-08"},{"lineNumber":29,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":30,"author":{"gitId":"shawnpong"},"content":"    /**","lastModifiedDate":"2024-03-01"},{"lineNumber":31,"author":{"gitId":"shawnpong"},"content":"     * Returns a string representation of the deadline task.","lastModifiedDate":"2024-03-01"},{"lineNumber":32,"author":{"gitId":"shawnpong"},"content":"     *","lastModifiedDate":"2024-03-01"},{"lineNumber":33,"author":{"gitId":"shawnpong"},"content":"     * @return A string representation of the deadline task.","lastModifiedDate":"2024-03-01"},{"lineNumber":34,"author":{"gitId":"shawnpong"},"content":"     */","lastModifiedDate":"2024-03-01"},{"lineNumber":35,"author":{"gitId":"shawnpong"},"content":"    @Override","lastModifiedDate":"2024-02-08"},{"lineNumber":36,"author":{"gitId":"shawnpong"},"content":"    public String toString() {","lastModifiedDate":"2024-02-08"},{"lineNumber":37,"author":{"gitId":"shawnpong"},"content":"        return \"[D] \" + super.getStatusIcon() + \" \" + super.toString() + \" (by: \" + by + \")\";","lastModifiedDate":"2024-02-08"},{"lineNumber":38,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-02-08"},{"lineNumber":39,"author":{"gitId":"shawnpong"},"content":"}","lastModifiedDate":"2024-02-08"}],"authorContributionMap":{"shawnpong":39}},{"path":"src/main/java/Events.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shawnpong"},"content":"/**","lastModifiedDate":"2024-03-01"},{"lineNumber":2,"author":{"gitId":"shawnpong"},"content":" * The Events class represents a task that spans over a period of time.","lastModifiedDate":"2024-03-01"},{"lineNumber":3,"author":{"gitId":"shawnpong"},"content":" */","lastModifiedDate":"2024-03-01"},{"lineNumber":4,"author":{"gitId":"shawnpong"},"content":"public class Events extends Task {","lastModifiedDate":"2024-02-08"},{"lineNumber":5,"author":{"gitId":"shawnpong"},"content":"    /** The start time of the event. */","lastModifiedDate":"2024-03-01"},{"lineNumber":6,"author":{"gitId":"shawnpong"},"content":"    protected String from;","lastModifiedDate":"2024-02-08"},{"lineNumber":7,"author":{"gitId":"shawnpong"},"content":"    /** The end time of the event. */","lastModifiedDate":"2024-03-01"},{"lineNumber":8,"author":{"gitId":"shawnpong"},"content":"    protected String to;","lastModifiedDate":"2024-02-08"},{"lineNumber":9,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":10,"author":{"gitId":"shawnpong"},"content":"    /**","lastModifiedDate":"2024-03-01"},{"lineNumber":11,"author":{"gitId":"shawnpong"},"content":"     * Constructs an Events object with the specified description, start time, end time, and completion status.","lastModifiedDate":"2024-03-01"},{"lineNumber":12,"author":{"gitId":"shawnpong"},"content":"     *","lastModifiedDate":"2024-03-01"},{"lineNumber":13,"author":{"gitId":"shawnpong"},"content":"     * @param description The description of the event task.","lastModifiedDate":"2024-03-01"},{"lineNumber":14,"author":{"gitId":"shawnpong"},"content":"     * @param from        The start time of the event.","lastModifiedDate":"2024-03-01"},{"lineNumber":15,"author":{"gitId":"shawnpong"},"content":"     * @param to          The end time of the event.","lastModifiedDate":"2024-03-01"},{"lineNumber":16,"author":{"gitId":"shawnpong"},"content":"     * @param isDone      The completion status of the event task.","lastModifiedDate":"2024-03-01"},{"lineNumber":17,"author":{"gitId":"shawnpong"},"content":"     */","lastModifiedDate":"2024-03-01"},{"lineNumber":18,"author":{"gitId":"shawnpong"},"content":"    public Events(String description, String from, String to, Boolean isDone) {","lastModifiedDate":"2024-02-21"},{"lineNumber":19,"author":{"gitId":"shawnpong"},"content":"        super(description);","lastModifiedDate":"2024-02-08"},{"lineNumber":20,"author":{"gitId":"shawnpong"},"content":"        this.from \u003d from;","lastModifiedDate":"2024-02-08"},{"lineNumber":21,"author":{"gitId":"shawnpong"},"content":"        this.to \u003d to;","lastModifiedDate":"2024-02-08"},{"lineNumber":22,"author":{"gitId":"shawnpong"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2024-02-21"},{"lineNumber":23,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-02-08"},{"lineNumber":24,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":25,"author":{"gitId":"shawnpong"},"content":"    /**","lastModifiedDate":"2024-03-01"},{"lineNumber":26,"author":{"gitId":"shawnpong"},"content":"     * Retrieves the start time of the event.","lastModifiedDate":"2024-03-01"},{"lineNumber":27,"author":{"gitId":"shawnpong"},"content":"     *","lastModifiedDate":"2024-03-01"},{"lineNumber":28,"author":{"gitId":"shawnpong"},"content":"     * @return The start time of the event.","lastModifiedDate":"2024-03-01"},{"lineNumber":29,"author":{"gitId":"shawnpong"},"content":"     */","lastModifiedDate":"2024-03-01"},{"lineNumber":30,"author":{"gitId":"shawnpong"},"content":"    public String getFrom() {","lastModifiedDate":"2024-02-21"},{"lineNumber":31,"author":{"gitId":"shawnpong"},"content":"        return from;","lastModifiedDate":"2024-02-21"},{"lineNumber":32,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-02-21"},{"lineNumber":33,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-02-21"},{"lineNumber":34,"author":{"gitId":"shawnpong"},"content":"    /**","lastModifiedDate":"2024-03-01"},{"lineNumber":35,"author":{"gitId":"shawnpong"},"content":"     * Retrieves the end time of the event.","lastModifiedDate":"2024-03-01"},{"lineNumber":36,"author":{"gitId":"shawnpong"},"content":"     *","lastModifiedDate":"2024-03-01"},{"lineNumber":37,"author":{"gitId":"shawnpong"},"content":"     * @return The end time of the event.","lastModifiedDate":"2024-03-01"},{"lineNumber":38,"author":{"gitId":"shawnpong"},"content":"     */","lastModifiedDate":"2024-03-01"},{"lineNumber":39,"author":{"gitId":"shawnpong"},"content":"    public String getTo() {","lastModifiedDate":"2024-02-21"},{"lineNumber":40,"author":{"gitId":"shawnpong"},"content":"        return to;","lastModifiedDate":"2024-02-21"},{"lineNumber":41,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-02-21"},{"lineNumber":42,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-02-21"},{"lineNumber":43,"author":{"gitId":"shawnpong"},"content":"    /**","lastModifiedDate":"2024-03-01"},{"lineNumber":44,"author":{"gitId":"shawnpong"},"content":"     * Returns a string representation of the event task.","lastModifiedDate":"2024-03-01"},{"lineNumber":45,"author":{"gitId":"shawnpong"},"content":"     *","lastModifiedDate":"2024-03-01"},{"lineNumber":46,"author":{"gitId":"shawnpong"},"content":"     * @return A string representation of the event task.","lastModifiedDate":"2024-03-01"},{"lineNumber":47,"author":{"gitId":"shawnpong"},"content":"     */","lastModifiedDate":"2024-03-01"},{"lineNumber":48,"author":{"gitId":"shawnpong"},"content":"    @Override","lastModifiedDate":"2024-02-08"},{"lineNumber":49,"author":{"gitId":"shawnpong"},"content":"    public String toString() {","lastModifiedDate":"2024-02-08"},{"lineNumber":50,"author":{"gitId":"shawnpong"},"content":"        return \"[E] \" + super.getStatusIcon() + \" \" + super.toString() + \" (from: \" + from + \" to: \" + to + \")\";","lastModifiedDate":"2024-02-08"},{"lineNumber":51,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-02-08"},{"lineNumber":52,"author":{"gitId":"shawnpong"},"content":"}","lastModifiedDate":"2024-02-08"}],"authorContributionMap":{"shawnpong":52}},{"path":"src/main/java/Floda.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shawnpong"},"content":"import java.util.Scanner;","lastModifiedDate":"2024-02-01"},{"lineNumber":2,"author":{"gitId":"shawnpong"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2024-02-21"},{"lineNumber":3,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-02-21"},{"lineNumber":4,"author":{"gitId":"shawnpong"},"content":"/**","lastModifiedDate":"2024-03-01"},{"lineNumber":5,"author":{"gitId":"shawnpong"},"content":" * Main class for the Floda application.","lastModifiedDate":"2024-03-01"},{"lineNumber":6,"author":{"gitId":"shawnpong"},"content":" */","lastModifiedDate":"2024-03-01"},{"lineNumber":7,"author":{"gitId":"shawnpong"},"content":"public class Floda {","lastModifiedDate":"2024-02-08"},{"lineNumber":8,"author":{"gitId":"shawnpong"},"content":"    private static final String NAME \u003d \"Floda\";","lastModifiedDate":"2024-02-29"},{"lineNumber":9,"author":{"gitId":"shawnpong"},"content":"    public static final String FILE_PATH \u003d \"./data/tasks.txt\";","lastModifiedDate":"2024-02-29"},{"lineNumber":10,"author":{"gitId":"shawnpong"},"content":"    private static final Ui ui \u003d new Ui();","lastModifiedDate":"2024-02-29"},{"lineNumber":11,"author":{"gitId":"shawnpong"},"content":"    private static final Storage storage \u003d new Storage(FILE_PATH);","lastModifiedDate":"2024-02-29"},{"lineNumber":12,"author":{"gitId":"shawnpong"},"content":"    private static final TaskList tasks \u003d new TaskList(storage);","lastModifiedDate":"2024-02-29"},{"lineNumber":13,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-02-16"},{"lineNumber":14,"author":{"gitId":"shawnpong"},"content":"    /**","lastModifiedDate":"2024-03-01"},{"lineNumber":15,"author":{"gitId":"shawnpong"},"content":"     * Main method to run the Floda application.","lastModifiedDate":"2024-03-01"},{"lineNumber":16,"author":{"gitId":"shawnpong"},"content":"     *","lastModifiedDate":"2024-03-01"},{"lineNumber":17,"author":{"gitId":"shawnpong"},"content":"     * @param args The command-line arguments.","lastModifiedDate":"2024-03-01"},{"lineNumber":18,"author":{"gitId":"shawnpong"},"content":"     */","lastModifiedDate":"2024-03-01"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2019-07-29"},{"lineNumber":20,"author":{"gitId":"shawnpong"},"content":"        ui.showWelcomeMessage(NAME);","lastModifiedDate":"2024-02-29"},{"lineNumber":21,"author":{"gitId":"shawnpong"},"content":"        try {","lastModifiedDate":"2024-02-21"},{"lineNumber":22,"author":{"gitId":"shawnpong"},"content":"            tasks.loadTasks();","lastModifiedDate":"2024-02-29"},{"lineNumber":23,"author":{"gitId":"shawnpong"},"content":"        } catch (FileNotFoundException | InvalidInputException e) {","lastModifiedDate":"2024-02-21"},{"lineNumber":24,"author":{"gitId":"shawnpong"},"content":"            ui.showErrorMessage(e.getMessage());","lastModifiedDate":"2024-02-29"},{"lineNumber":25,"author":{"gitId":"shawnpong"},"content":"        }","lastModifiedDate":"2024-02-21"},{"lineNumber":26,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-02-29"},{"lineNumber":27,"author":{"gitId":"shawnpong"},"content":"        Scanner scanner \u003d new Scanner(System.in);","lastModifiedDate":"2024-02-01"},{"lineNumber":28,"author":{"gitId":"shawnpong"},"content":"        ui.showInstructions();","lastModifiedDate":"2024-02-29"},{"lineNumber":29,"author":{"gitId":"shawnpong"},"content":"        while (TaskList.isActive) {","lastModifiedDate":"2024-02-29"},{"lineNumber":30,"author":{"gitId":"shawnpong"},"content":"            try {","lastModifiedDate":"2024-02-15"},{"lineNumber":31,"author":{"gitId":"shawnpong"},"content":"                String line \u003d scanner.nextLine().trim();","lastModifiedDate":"2024-02-14"},{"lineNumber":32,"author":{"gitId":"shawnpong"},"content":"                Parser.parseCommand(line);","lastModifiedDate":"2024-02-29"},{"lineNumber":33,"author":{"gitId":"shawnpong"},"content":"            } catch (InvalidInputException e) {","lastModifiedDate":"2024-02-29"},{"lineNumber":34,"author":{"gitId":"shawnpong"},"content":"                ui.showErrorMessage(e.getMessage());","lastModifiedDate":"2024-03-01"},{"lineNumber":35,"author":{"gitId":"shawnpong"},"content":"            }","lastModifiedDate":"2024-02-20"},{"lineNumber":36,"author":{"gitId":"shawnpong"},"content":"        }","lastModifiedDate":"2024-02-21"},{"lineNumber":37,"author":{"gitId":"shawnpong"},"content":"        scanner.close();","lastModifiedDate":"2024-02-21"},{"lineNumber":38,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-02-21"},{"lineNumber":39,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"shawnpong":37,"-":2}},{"path":"src/main/java/InvalidInputException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shawnpong"},"content":"/**","lastModifiedDate":"2024-03-01"},{"lineNumber":2,"author":{"gitId":"shawnpong"},"content":" * The InvalidInputException class represents an exception that is thrown when the input provided is invalid.","lastModifiedDate":"2024-03-01"},{"lineNumber":3,"author":{"gitId":"shawnpong"},"content":" */","lastModifiedDate":"2024-03-01"},{"lineNumber":4,"author":{"gitId":"shawnpong"},"content":"public class InvalidInputException extends Exception {","lastModifiedDate":"2024-02-15"},{"lineNumber":5,"author":{"gitId":"shawnpong"},"content":"    /**","lastModifiedDate":"2024-03-01"},{"lineNumber":6,"author":{"gitId":"shawnpong"},"content":"     * Constructs an InvalidInputException with the specified error message.","lastModifiedDate":"2024-03-01"},{"lineNumber":7,"author":{"gitId":"shawnpong"},"content":"     *","lastModifiedDate":"2024-03-01"},{"lineNumber":8,"author":{"gitId":"shawnpong"},"content":"     * @param errorMessage The error message describing the nature of the invalid input.","lastModifiedDate":"2024-03-01"},{"lineNumber":9,"author":{"gitId":"shawnpong"},"content":"     */","lastModifiedDate":"2024-03-01"},{"lineNumber":10,"author":{"gitId":"shawnpong"},"content":"    public InvalidInputException(String errorMessage) {","lastModifiedDate":"2024-02-15"},{"lineNumber":11,"author":{"gitId":"shawnpong"},"content":"        super(errorMessage);","lastModifiedDate":"2024-03-01"},{"lineNumber":12,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-02-15"},{"lineNumber":13,"author":{"gitId":"shawnpong"},"content":"}","lastModifiedDate":"2024-02-15"}],"authorContributionMap":{"shawnpong":13}},{"path":"src/main/java/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shawnpong"},"content":"/**","lastModifiedDate":"2024-03-01"},{"lineNumber":2,"author":{"gitId":"shawnpong"},"content":" * The Parser class is responsible for parsing commands and file lines.","lastModifiedDate":"2024-03-01"},{"lineNumber":3,"author":{"gitId":"shawnpong"},"content":" */","lastModifiedDate":"2024-03-01"},{"lineNumber":4,"author":{"gitId":"shawnpong"},"content":"public class Parser {","lastModifiedDate":"2024-02-29"},{"lineNumber":5,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-03-01"},{"lineNumber":6,"author":{"gitId":"shawnpong"},"content":"    /**","lastModifiedDate":"2024-03-01"},{"lineNumber":7,"author":{"gitId":"shawnpong"},"content":"     * Parses the command provided in the input line.","lastModifiedDate":"2024-03-01"},{"lineNumber":8,"author":{"gitId":"shawnpong"},"content":"     *","lastModifiedDate":"2024-03-01"},{"lineNumber":9,"author":{"gitId":"shawnpong"},"content":"     * @param line The input line containing the command.","lastModifiedDate":"2024-03-01"},{"lineNumber":10,"author":{"gitId":"shawnpong"},"content":"     * @throws InvalidInputException If the input command is invalid.","lastModifiedDate":"2024-03-01"},{"lineNumber":11,"author":{"gitId":"shawnpong"},"content":"     */","lastModifiedDate":"2024-03-01"},{"lineNumber":12,"author":{"gitId":"shawnpong"},"content":"    public static void parseCommand(String line) throws InvalidInputException {","lastModifiedDate":"2024-02-29"},{"lineNumber":13,"author":{"gitId":"shawnpong"},"content":"        String[] parts \u003d line.split(\" \", 2);","lastModifiedDate":"2024-02-29"},{"lineNumber":14,"author":{"gitId":"shawnpong"},"content":"        String command \u003d parts[0].trim();","lastModifiedDate":"2024-02-29"},{"lineNumber":15,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-02-29"},{"lineNumber":16,"author":{"gitId":"shawnpong"},"content":"        final String COMMAND_BYE \u003d \"bye\";","lastModifiedDate":"2024-03-01"},{"lineNumber":17,"author":{"gitId":"shawnpong"},"content":"        final String COMMAND_LIST \u003d \"list\";","lastModifiedDate":"2024-03-01"},{"lineNumber":18,"author":{"gitId":"shawnpong"},"content":"        final String COMMAND_MARK \u003d \"mark\";","lastModifiedDate":"2024-03-01"},{"lineNumber":19,"author":{"gitId":"shawnpong"},"content":"        final String COMMAND_UNMARK \u003d \"unmark\";","lastModifiedDate":"2024-03-01"},{"lineNumber":20,"author":{"gitId":"shawnpong"},"content":"        final String COMMAND_DEADLINE \u003d \"deadline\";","lastModifiedDate":"2024-03-01"},{"lineNumber":21,"author":{"gitId":"shawnpong"},"content":"        final String COMMAND_TODO \u003d \"todo\";","lastModifiedDate":"2024-03-01"},{"lineNumber":22,"author":{"gitId":"shawnpong"},"content":"        final String COMMAND_EVENT \u003d \"event\";","lastModifiedDate":"2024-03-01"},{"lineNumber":23,"author":{"gitId":"shawnpong"},"content":"        final String COMMAND_DELETE \u003d \"delete\";","lastModifiedDate":"2024-03-01"},{"lineNumber":24,"author":{"gitId":"shawnpong"},"content":"        final String COMMAND_FIND \u003d \"find\";","lastModifiedDate":"2024-03-01"},{"lineNumber":25,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-03-01"},{"lineNumber":26,"author":{"gitId":"shawnpong"},"content":"        switch (command) {","lastModifiedDate":"2024-02-29"},{"lineNumber":27,"author":{"gitId":"shawnpong"},"content":"            case COMMAND_BYE:","lastModifiedDate":"2024-03-01"},{"lineNumber":28,"author":{"gitId":"shawnpong"},"content":"                TaskList.handleByeTask();","lastModifiedDate":"2024-02-29"},{"lineNumber":29,"author":{"gitId":"shawnpong"},"content":"                TaskList.setActive(false);","lastModifiedDate":"2024-02-29"},{"lineNumber":30,"author":{"gitId":"shawnpong"},"content":"                break;","lastModifiedDate":"2024-02-29"},{"lineNumber":31,"author":{"gitId":"shawnpong"},"content":"            case COMMAND_LIST:","lastModifiedDate":"2024-03-01"},{"lineNumber":32,"author":{"gitId":"shawnpong"},"content":"                TaskList.handleListTask();","lastModifiedDate":"2024-02-29"},{"lineNumber":33,"author":{"gitId":"shawnpong"},"content":"                break;","lastModifiedDate":"2024-02-29"},{"lineNumber":34,"author":{"gitId":"shawnpong"},"content":"            case COMMAND_MARK:","lastModifiedDate":"2024-03-01"},{"lineNumber":35,"author":{"gitId":"shawnpong"},"content":"                TaskList.handleMarkTask(line);","lastModifiedDate":"2024-02-29"},{"lineNumber":36,"author":{"gitId":"shawnpong"},"content":"                Storage.saveToFile();","lastModifiedDate":"2024-02-29"},{"lineNumber":37,"author":{"gitId":"shawnpong"},"content":"                break;","lastModifiedDate":"2024-02-29"},{"lineNumber":38,"author":{"gitId":"shawnpong"},"content":"            case COMMAND_UNMARK:","lastModifiedDate":"2024-03-01"},{"lineNumber":39,"author":{"gitId":"shawnpong"},"content":"                TaskList.handleUnmarkTask(line);","lastModifiedDate":"2024-02-29"},{"lineNumber":40,"author":{"gitId":"shawnpong"},"content":"                Storage.saveToFile();","lastModifiedDate":"2024-02-29"},{"lineNumber":41,"author":{"gitId":"shawnpong"},"content":"                break;","lastModifiedDate":"2024-02-29"},{"lineNumber":42,"author":{"gitId":"shawnpong"},"content":"            case COMMAND_DEADLINE:","lastModifiedDate":"2024-03-01"},{"lineNumber":43,"author":{"gitId":"shawnpong"},"content":"                TaskList.handleDeadlineTask(line);","lastModifiedDate":"2024-02-29"},{"lineNumber":44,"author":{"gitId":"shawnpong"},"content":"                Storage.saveToFile();","lastModifiedDate":"2024-02-29"},{"lineNumber":45,"author":{"gitId":"shawnpong"},"content":"                break;","lastModifiedDate":"2024-02-29"},{"lineNumber":46,"author":{"gitId":"shawnpong"},"content":"            case COMMAND_TODO:","lastModifiedDate":"2024-03-01"},{"lineNumber":47,"author":{"gitId":"shawnpong"},"content":"                TaskList.handleTodoTask(line);","lastModifiedDate":"2024-02-29"},{"lineNumber":48,"author":{"gitId":"shawnpong"},"content":"                Storage.saveToFile();","lastModifiedDate":"2024-02-29"},{"lineNumber":49,"author":{"gitId":"shawnpong"},"content":"                break;","lastModifiedDate":"2024-02-29"},{"lineNumber":50,"author":{"gitId":"shawnpong"},"content":"            case COMMAND_EVENT:","lastModifiedDate":"2024-03-01"},{"lineNumber":51,"author":{"gitId":"shawnpong"},"content":"                TaskList.handleEventTask(line);","lastModifiedDate":"2024-02-29"},{"lineNumber":52,"author":{"gitId":"shawnpong"},"content":"                Storage.saveToFile();","lastModifiedDate":"2024-02-29"},{"lineNumber":53,"author":{"gitId":"shawnpong"},"content":"                break;","lastModifiedDate":"2024-02-29"},{"lineNumber":54,"author":{"gitId":"shawnpong"},"content":"            case COMMAND_DELETE:","lastModifiedDate":"2024-03-01"},{"lineNumber":55,"author":{"gitId":"shawnpong"},"content":"                TaskList.handleDeleteTask(line);","lastModifiedDate":"2024-02-29"},{"lineNumber":56,"author":{"gitId":"shawnpong"},"content":"                Storage.saveToFile();","lastModifiedDate":"2024-02-29"},{"lineNumber":57,"author":{"gitId":"shawnpong"},"content":"                break;","lastModifiedDate":"2024-02-29"},{"lineNumber":58,"author":{"gitId":"shawnpong"},"content":"            case COMMAND_FIND:","lastModifiedDate":"2024-03-01"},{"lineNumber":59,"author":{"gitId":"shawnpong"},"content":"                TaskList.handleFindTask(line);","lastModifiedDate":"2024-03-01"},{"lineNumber":60,"author":{"gitId":"shawnpong"},"content":"                break;","lastModifiedDate":"2024-03-01"},{"lineNumber":61,"author":{"gitId":"shawnpong"},"content":"            default:","lastModifiedDate":"2024-02-29"},{"lineNumber":62,"author":{"gitId":"shawnpong"},"content":"                throw new InvalidInputException(\"Invalid command: \" + command);","lastModifiedDate":"2024-02-29"},{"lineNumber":63,"author":{"gitId":"shawnpong"},"content":"        }","lastModifiedDate":"2024-02-29"},{"lineNumber":64,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-02-29"},{"lineNumber":65,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-02-29"},{"lineNumber":66,"author":{"gitId":"shawnpong"},"content":"    /**","lastModifiedDate":"2024-03-01"},{"lineNumber":67,"author":{"gitId":"shawnpong"},"content":"     * Parses a line from the file and adds the corresponding task to the task list.","lastModifiedDate":"2024-03-01"},{"lineNumber":68,"author":{"gitId":"shawnpong"},"content":"     *","lastModifiedDate":"2024-03-01"},{"lineNumber":69,"author":{"gitId":"shawnpong"},"content":"     * @param line The line to be parsed from the file.","lastModifiedDate":"2024-03-01"},{"lineNumber":70,"author":{"gitId":"shawnpong"},"content":"     * @throws InvalidInputException If the input format in the file is invalid.","lastModifiedDate":"2024-03-01"},{"lineNumber":71,"author":{"gitId":"shawnpong"},"content":"     */","lastModifiedDate":"2024-03-01"},{"lineNumber":72,"author":{"gitId":"shawnpong"},"content":"    public static void parseFileLine(String line) throws InvalidInputException {","lastModifiedDate":"2024-02-29"},{"lineNumber":73,"author":{"gitId":"shawnpong"},"content":"        String[] parts \u003d line.split(\"\\\\|\");","lastModifiedDate":"2024-02-29"},{"lineNumber":74,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-02-29"},{"lineNumber":75,"author":{"gitId":"shawnpong"},"content":"        if (parts.length \u003c 3) {","lastModifiedDate":"2024-02-29"},{"lineNumber":76,"author":{"gitId":"shawnpong"},"content":"            throw new InvalidInputException(\"Invalid input format in file\");","lastModifiedDate":"2024-02-29"},{"lineNumber":77,"author":{"gitId":"shawnpong"},"content":"        }","lastModifiedDate":"2024-02-29"},{"lineNumber":78,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-02-29"},{"lineNumber":79,"author":{"gitId":"shawnpong"},"content":"        String type \u003d parts[0].trim();","lastModifiedDate":"2024-02-29"},{"lineNumber":80,"author":{"gitId":"shawnpong"},"content":"        boolean isDone \u003d parts[1].trim().equals(\"1\");","lastModifiedDate":"2024-02-29"},{"lineNumber":81,"author":{"gitId":"shawnpong"},"content":"        String description \u003d parts[2].trim();","lastModifiedDate":"2024-02-29"},{"lineNumber":82,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-02-29"},{"lineNumber":83,"author":{"gitId":"shawnpong"},"content":"        switch (type) {","lastModifiedDate":"2024-02-29"},{"lineNumber":84,"author":{"gitId":"shawnpong"},"content":"            case \"T\":","lastModifiedDate":"2024-02-29"},{"lineNumber":85,"author":{"gitId":"shawnpong"},"content":"                TaskList.list.add(new ToDo(description, isDone));","lastModifiedDate":"2024-02-29"},{"lineNumber":86,"author":{"gitId":"shawnpong"},"content":"                break;","lastModifiedDate":"2024-02-29"},{"lineNumber":87,"author":{"gitId":"shawnpong"},"content":"            case \"D\":","lastModifiedDate":"2024-02-29"},{"lineNumber":88,"author":{"gitId":"shawnpong"},"content":"                if (parts.length \u003c 4) {","lastModifiedDate":"2024-02-29"},{"lineNumber":89,"author":{"gitId":"shawnpong"},"content":"                    throw new InvalidInputException(\"Invalid input format for deadline in file\");","lastModifiedDate":"2024-02-29"},{"lineNumber":90,"author":{"gitId":"shawnpong"},"content":"                }","lastModifiedDate":"2024-02-29"},{"lineNumber":91,"author":{"gitId":"shawnpong"},"content":"                String by \u003d parts[3].trim();","lastModifiedDate":"2024-02-29"},{"lineNumber":92,"author":{"gitId":"shawnpong"},"content":"                TaskList.list.add(new Deadline(description, by, isDone));","lastModifiedDate":"2024-02-29"},{"lineNumber":93,"author":{"gitId":"shawnpong"},"content":"                break;","lastModifiedDate":"2024-02-29"},{"lineNumber":94,"author":{"gitId":"shawnpong"},"content":"            case \"E\":","lastModifiedDate":"2024-02-29"},{"lineNumber":95,"author":{"gitId":"shawnpong"},"content":"                if (parts.length \u003c 5) {","lastModifiedDate":"2024-02-29"},{"lineNumber":96,"author":{"gitId":"shawnpong"},"content":"                    throw new InvalidInputException(\"Invalid input format for event in file\");","lastModifiedDate":"2024-02-29"},{"lineNumber":97,"author":{"gitId":"shawnpong"},"content":"                }","lastModifiedDate":"2024-02-29"},{"lineNumber":98,"author":{"gitId":"shawnpong"},"content":"                String from \u003d parts[3].trim();","lastModifiedDate":"2024-02-29"},{"lineNumber":99,"author":{"gitId":"shawnpong"},"content":"                String to \u003d parts[4].trim();","lastModifiedDate":"2024-02-29"},{"lineNumber":100,"author":{"gitId":"shawnpong"},"content":"                TaskList.list.add(new Events(description, from, to, isDone));","lastModifiedDate":"2024-02-29"},{"lineNumber":101,"author":{"gitId":"shawnpong"},"content":"                break;","lastModifiedDate":"2024-02-29"},{"lineNumber":102,"author":{"gitId":"shawnpong"},"content":"            default:","lastModifiedDate":"2024-02-29"},{"lineNumber":103,"author":{"gitId":"shawnpong"},"content":"                throw new InvalidInputException(\"Unknown task type in file\");","lastModifiedDate":"2024-02-29"},{"lineNumber":104,"author":{"gitId":"shawnpong"},"content":"        }","lastModifiedDate":"2024-02-29"},{"lineNumber":105,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-02-29"},{"lineNumber":106,"author":{"gitId":"shawnpong"},"content":"}","lastModifiedDate":"2024-02-29"}],"authorContributionMap":{"shawnpong":106}},{"path":"src/main/java/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shawnpong"},"content":"import java.util.Scanner;","lastModifiedDate":"2024-02-29"},{"lineNumber":2,"author":{"gitId":"shawnpong"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2024-02-29"},{"lineNumber":3,"author":{"gitId":"shawnpong"},"content":"import java.io.File;","lastModifiedDate":"2024-02-29"},{"lineNumber":4,"author":{"gitId":"shawnpong"},"content":"import java.io.FileWriter;","lastModifiedDate":"2024-02-29"},{"lineNumber":5,"author":{"gitId":"shawnpong"},"content":"import java.io.IOException;","lastModifiedDate":"2024-02-29"},{"lineNumber":6,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-02-29"},{"lineNumber":7,"author":{"gitId":"shawnpong"},"content":"/**","lastModifiedDate":"2024-03-01"},{"lineNumber":8,"author":{"gitId":"shawnpong"},"content":" * Class responsible for handling file storage operations.","lastModifiedDate":"2024-03-01"},{"lineNumber":9,"author":{"gitId":"shawnpong"},"content":" */","lastModifiedDate":"2024-03-01"},{"lineNumber":10,"author":{"gitId":"shawnpong"},"content":"public class Storage {","lastModifiedDate":"2024-02-29"},{"lineNumber":11,"author":{"gitId":"shawnpong"},"content":"    private static String FILE_PATH;","lastModifiedDate":"2024-02-29"},{"lineNumber":12,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-02-29"},{"lineNumber":13,"author":{"gitId":"shawnpong"},"content":"    /**","lastModifiedDate":"2024-03-01"},{"lineNumber":14,"author":{"gitId":"shawnpong"},"content":"     * Constructs a Storage object with the specified file path.","lastModifiedDate":"2024-03-01"},{"lineNumber":15,"author":{"gitId":"shawnpong"},"content":"     *","lastModifiedDate":"2024-03-01"},{"lineNumber":16,"author":{"gitId":"shawnpong"},"content":"     * @param filePath The file path where tasks will be stored.","lastModifiedDate":"2024-03-01"},{"lineNumber":17,"author":{"gitId":"shawnpong"},"content":"     */","lastModifiedDate":"2024-03-01"},{"lineNumber":18,"author":{"gitId":"shawnpong"},"content":"    public Storage(String filePath) {","lastModifiedDate":"2024-02-29"},{"lineNumber":19,"author":{"gitId":"shawnpong"},"content":"        FILE_PATH \u003d filePath;","lastModifiedDate":"2024-02-29"},{"lineNumber":20,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-02-29"},{"lineNumber":21,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-02-29"},{"lineNumber":22,"author":{"gitId":"shawnpong"},"content":"    /**","lastModifiedDate":"2024-03-01"},{"lineNumber":23,"author":{"gitId":"shawnpong"},"content":"     * Saves tasks to the file.","lastModifiedDate":"2024-03-01"},{"lineNumber":24,"author":{"gitId":"shawnpong"},"content":"     */","lastModifiedDate":"2024-03-01"},{"lineNumber":25,"author":{"gitId":"shawnpong"},"content":"    public static void saveToFile() {","lastModifiedDate":"2024-02-29"},{"lineNumber":26,"author":{"gitId":"shawnpong"},"content":"        try {","lastModifiedDate":"2024-02-29"},{"lineNumber":27,"author":{"gitId":"shawnpong"},"content":"            FileWriter fw \u003d new FileWriter(FILE_PATH);","lastModifiedDate":"2024-02-29"},{"lineNumber":28,"author":{"gitId":"shawnpong"},"content":"            for (Task task : TaskList.getList()) {","lastModifiedDate":"2024-02-29"},{"lineNumber":29,"author":{"gitId":"shawnpong"},"content":"                fw.write(taskToLine(task) + \"\\n\");","lastModifiedDate":"2024-02-29"},{"lineNumber":30,"author":{"gitId":"shawnpong"},"content":"            }","lastModifiedDate":"2024-02-29"},{"lineNumber":31,"author":{"gitId":"shawnpong"},"content":"            fw.close();","lastModifiedDate":"2024-02-29"},{"lineNumber":32,"author":{"gitId":"shawnpong"},"content":"            System.out.println(\"Saved to file\");","lastModifiedDate":"2024-02-29"},{"lineNumber":33,"author":{"gitId":"shawnpong"},"content":"        } catch (IOException e) {","lastModifiedDate":"2024-02-29"},{"lineNumber":34,"author":{"gitId":"shawnpong"},"content":"            System.out.println(\"Error saving tasks to file: \" + e.getMessage());","lastModifiedDate":"2024-02-29"},{"lineNumber":35,"author":{"gitId":"shawnpong"},"content":"        }","lastModifiedDate":"2024-02-29"},{"lineNumber":36,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-02-29"},{"lineNumber":37,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-02-29"},{"lineNumber":38,"author":{"gitId":"shawnpong"},"content":"    /**","lastModifiedDate":"2024-03-01"},{"lineNumber":39,"author":{"gitId":"shawnpong"},"content":"     * Loads tasks from the file.","lastModifiedDate":"2024-03-01"},{"lineNumber":40,"author":{"gitId":"shawnpong"},"content":"     *","lastModifiedDate":"2024-03-01"},{"lineNumber":41,"author":{"gitId":"shawnpong"},"content":"     * @throws FileNotFoundException    If the file is not found.","lastModifiedDate":"2024-03-01"},{"lineNumber":42,"author":{"gitId":"shawnpong"},"content":"     * @throws InvalidInputException    If there is an invalid input in the file.","lastModifiedDate":"2024-03-01"},{"lineNumber":43,"author":{"gitId":"shawnpong"},"content":"     */","lastModifiedDate":"2024-03-01"},{"lineNumber":44,"author":{"gitId":"shawnpong"},"content":"    public void loadTasks() throws FileNotFoundException, InvalidInputException {","lastModifiedDate":"2024-03-01"},{"lineNumber":45,"author":{"gitId":"shawnpong"},"content":"        File file \u003d new File(FILE_PATH);","lastModifiedDate":"2024-02-29"},{"lineNumber":46,"author":{"gitId":"shawnpong"},"content":"        if (!file.exists()) {","lastModifiedDate":"2024-02-29"},{"lineNumber":47,"author":{"gitId":"shawnpong"},"content":"            return;","lastModifiedDate":"2024-02-29"},{"lineNumber":48,"author":{"gitId":"shawnpong"},"content":"        }","lastModifiedDate":"2024-02-29"},{"lineNumber":49,"author":{"gitId":"shawnpong"},"content":"        Scanner scanner \u003d new Scanner(file);","lastModifiedDate":"2024-02-29"},{"lineNumber":50,"author":{"gitId":"shawnpong"},"content":"        while (scanner.hasNextLine()) {","lastModifiedDate":"2024-02-29"},{"lineNumber":51,"author":{"gitId":"shawnpong"},"content":"            String line \u003d scanner.nextLine();","lastModifiedDate":"2024-02-29"},{"lineNumber":52,"author":{"gitId":"shawnpong"},"content":"            Parser.parseFileLine(line);","lastModifiedDate":"2024-02-29"},{"lineNumber":53,"author":{"gitId":"shawnpong"},"content":"        }","lastModifiedDate":"2024-02-29"},{"lineNumber":54,"author":{"gitId":"shawnpong"},"content":"        scanner.close();","lastModifiedDate":"2024-02-29"},{"lineNumber":55,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-02-29"},{"lineNumber":56,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-03-01"},{"lineNumber":57,"author":{"gitId":"shawnpong"},"content":"    /**","lastModifiedDate":"2024-03-01"},{"lineNumber":58,"author":{"gitId":"shawnpong"},"content":"     * Converts a task object to a string representation for writing to the file.","lastModifiedDate":"2024-03-01"},{"lineNumber":59,"author":{"gitId":"shawnpong"},"content":"     *","lastModifiedDate":"2024-03-01"},{"lineNumber":60,"author":{"gitId":"shawnpong"},"content":"     * @param task The task object to convert.","lastModifiedDate":"2024-03-01"},{"lineNumber":61,"author":{"gitId":"shawnpong"},"content":"     * @return A string representing the task for writing to the file.","lastModifiedDate":"2024-03-01"},{"lineNumber":62,"author":{"gitId":"shawnpong"},"content":"     */","lastModifiedDate":"2024-03-01"},{"lineNumber":63,"author":{"gitId":"shawnpong"},"content":"    private static String taskToLine(Task task) {","lastModifiedDate":"2024-02-29"},{"lineNumber":64,"author":{"gitId":"shawnpong"},"content":"        if (task instanceof ToDo todo) {","lastModifiedDate":"2024-02-29"},{"lineNumber":65,"author":{"gitId":"shawnpong"},"content":"            return \"T | \" + (todo.isDone() ? \"1\" : \"0\") + \" | \" + todo.getDescription();","lastModifiedDate":"2024-02-29"},{"lineNumber":66,"author":{"gitId":"shawnpong"},"content":"        } else if (task instanceof Deadline deadline) {","lastModifiedDate":"2024-02-29"},{"lineNumber":67,"author":{"gitId":"shawnpong"},"content":"            return \"D | \" + (deadline.isDone() ? \"1\" : \"0\") + \" | \" + deadline.getDescription() + \" | \" + deadline.getBy();","lastModifiedDate":"2024-02-29"},{"lineNumber":68,"author":{"gitId":"shawnpong"},"content":"        } else if (task instanceof Events event) {","lastModifiedDate":"2024-02-29"},{"lineNumber":69,"author":{"gitId":"shawnpong"},"content":"            return \"E | \" + (event.isDone() ? \"1\" : \"0\") + \" | \" + event.getDescription() + \" | \" + event.getFrom() + \" | \" + event.getTo();","lastModifiedDate":"2024-02-29"},{"lineNumber":70,"author":{"gitId":"shawnpong"},"content":"        }","lastModifiedDate":"2024-02-29"},{"lineNumber":71,"author":{"gitId":"shawnpong"},"content":"        return \"\";","lastModifiedDate":"2024-02-29"},{"lineNumber":72,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-02-29"},{"lineNumber":73,"author":{"gitId":"shawnpong"},"content":"}","lastModifiedDate":"2024-02-29"}],"authorContributionMap":{"shawnpong":73}},{"path":"src/main/java/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shawnpong"},"content":"/**","lastModifiedDate":"2024-03-01"},{"lineNumber":2,"author":{"gitId":"shawnpong"},"content":" * The Task class represents a task with a description and completion status.","lastModifiedDate":"2024-03-01"},{"lineNumber":3,"author":{"gitId":"shawnpong"},"content":" */","lastModifiedDate":"2024-03-01"},{"lineNumber":4,"author":{"gitId":"shawnpong"},"content":"public class Task {","lastModifiedDate":"2024-02-08"},{"lineNumber":5,"author":{"gitId":"shawnpong"},"content":"    /** The description of the task. */","lastModifiedDate":"2024-03-01"},{"lineNumber":6,"author":{"gitId":"shawnpong"},"content":"    protected String description;","lastModifiedDate":"2024-02-08"},{"lineNumber":7,"author":{"gitId":"shawnpong"},"content":"    /** The completion status of the task. */","lastModifiedDate":"2024-03-01"},{"lineNumber":8,"author":{"gitId":"shawnpong"},"content":"    protected boolean isDone;","lastModifiedDate":"2024-02-08"},{"lineNumber":9,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":10,"author":{"gitId":"shawnpong"},"content":"    /**","lastModifiedDate":"2024-03-01"},{"lineNumber":11,"author":{"gitId":"shawnpong"},"content":"     * Constructs a Task object with the specified description.","lastModifiedDate":"2024-03-01"},{"lineNumber":12,"author":{"gitId":"shawnpong"},"content":"     *","lastModifiedDate":"2024-03-01"},{"lineNumber":13,"author":{"gitId":"shawnpong"},"content":"     * @param description The description of the task.","lastModifiedDate":"2024-03-01"},{"lineNumber":14,"author":{"gitId":"shawnpong"},"content":"     */","lastModifiedDate":"2024-03-01"},{"lineNumber":15,"author":{"gitId":"shawnpong"},"content":"    public Task(String description) {","lastModifiedDate":"2024-03-01"},{"lineNumber":16,"author":{"gitId":"shawnpong"},"content":"        this.description \u003d description;","lastModifiedDate":"2024-03-01"},{"lineNumber":17,"author":{"gitId":"shawnpong"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2024-03-01"},{"lineNumber":18,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-03-01"},{"lineNumber":19,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-03-01"},{"lineNumber":20,"author":{"gitId":"shawnpong"},"content":"    /**","lastModifiedDate":"2024-03-01"},{"lineNumber":21,"author":{"gitId":"shawnpong"},"content":"     * Retrieves the description of the task.","lastModifiedDate":"2024-03-01"},{"lineNumber":22,"author":{"gitId":"shawnpong"},"content":"     *","lastModifiedDate":"2024-03-01"},{"lineNumber":23,"author":{"gitId":"shawnpong"},"content":"     * @return The description of the task.","lastModifiedDate":"2024-03-01"},{"lineNumber":24,"author":{"gitId":"shawnpong"},"content":"     */","lastModifiedDate":"2024-03-01"},{"lineNumber":25,"author":{"gitId":"shawnpong"},"content":"    public String getDescription() {","lastModifiedDate":"2024-02-08"},{"lineNumber":26,"author":{"gitId":"shawnpong"},"content":"        return description;","lastModifiedDate":"2024-02-08"},{"lineNumber":27,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-02-08"},{"lineNumber":28,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":29,"author":{"gitId":"shawnpong"},"content":"    /**","lastModifiedDate":"2024-03-01"},{"lineNumber":30,"author":{"gitId":"shawnpong"},"content":"     * Sets the description of the task.","lastModifiedDate":"2024-03-01"},{"lineNumber":31,"author":{"gitId":"shawnpong"},"content":"     *","lastModifiedDate":"2024-03-01"},{"lineNumber":32,"author":{"gitId":"shawnpong"},"content":"     * @param description The description to set.","lastModifiedDate":"2024-03-01"},{"lineNumber":33,"author":{"gitId":"shawnpong"},"content":"     */","lastModifiedDate":"2024-03-01"},{"lineNumber":34,"author":{"gitId":"shawnpong"},"content":"    public void setDescription(String description) {","lastModifiedDate":"2024-02-08"},{"lineNumber":35,"author":{"gitId":"shawnpong"},"content":"        this.description \u003d description;","lastModifiedDate":"2024-02-08"},{"lineNumber":36,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-02-08"},{"lineNumber":37,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":38,"author":{"gitId":"shawnpong"},"content":"    /**","lastModifiedDate":"2024-03-01"},{"lineNumber":39,"author":{"gitId":"shawnpong"},"content":"     * Checks if the task is done.","lastModifiedDate":"2024-03-01"},{"lineNumber":40,"author":{"gitId":"shawnpong"},"content":"     *","lastModifiedDate":"2024-03-01"},{"lineNumber":41,"author":{"gitId":"shawnpong"},"content":"     * @return True if the task is done, otherwise false.","lastModifiedDate":"2024-03-01"},{"lineNumber":42,"author":{"gitId":"shawnpong"},"content":"     */","lastModifiedDate":"2024-03-01"},{"lineNumber":43,"author":{"gitId":"shawnpong"},"content":"    public boolean isDone() {","lastModifiedDate":"2024-02-08"},{"lineNumber":44,"author":{"gitId":"shawnpong"},"content":"        return isDone;","lastModifiedDate":"2024-02-08"},{"lineNumber":45,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-02-08"},{"lineNumber":46,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":47,"author":{"gitId":"shawnpong"},"content":"    /**","lastModifiedDate":"2024-03-01"},{"lineNumber":48,"author":{"gitId":"shawnpong"},"content":"     * Sets the completion status of the task.","lastModifiedDate":"2024-03-01"},{"lineNumber":49,"author":{"gitId":"shawnpong"},"content":"     *","lastModifiedDate":"2024-03-01"},{"lineNumber":50,"author":{"gitId":"shawnpong"},"content":"     * @param done The completion status to set.","lastModifiedDate":"2024-03-01"},{"lineNumber":51,"author":{"gitId":"shawnpong"},"content":"     */","lastModifiedDate":"2024-03-01"},{"lineNumber":52,"author":{"gitId":"shawnpong"},"content":"    public void setDone(boolean done) {","lastModifiedDate":"2024-02-08"},{"lineNumber":53,"author":{"gitId":"shawnpong"},"content":"        isDone \u003d done;","lastModifiedDate":"2024-02-08"},{"lineNumber":54,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-02-08"},{"lineNumber":55,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":56,"author":{"gitId":"shawnpong"},"content":"    /**","lastModifiedDate":"2024-03-01"},{"lineNumber":57,"author":{"gitId":"shawnpong"},"content":"     * Retrieves the status icon of the task.","lastModifiedDate":"2024-03-01"},{"lineNumber":58,"author":{"gitId":"shawnpong"},"content":"     *","lastModifiedDate":"2024-03-01"},{"lineNumber":59,"author":{"gitId":"shawnpong"},"content":"     * @return The status icon of the task.","lastModifiedDate":"2024-03-01"},{"lineNumber":60,"author":{"gitId":"shawnpong"},"content":"     */","lastModifiedDate":"2024-03-01"},{"lineNumber":61,"author":{"gitId":"shawnpong"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2024-02-08"},{"lineNumber":62,"author":{"gitId":"shawnpong"},"content":"        return (isDone ? \"[X]\" : \"[ ]\");","lastModifiedDate":"2024-02-08"},{"lineNumber":63,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-02-08"},{"lineNumber":64,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":65,"author":{"gitId":"shawnpong"},"content":"    /**","lastModifiedDate":"2024-03-01"},{"lineNumber":66,"author":{"gitId":"shawnpong"},"content":"     * Returns a string representation of the task.","lastModifiedDate":"2024-03-01"},{"lineNumber":67,"author":{"gitId":"shawnpong"},"content":"     *","lastModifiedDate":"2024-03-01"},{"lineNumber":68,"author":{"gitId":"shawnpong"},"content":"     * @return A string representation of the task.","lastModifiedDate":"2024-03-01"},{"lineNumber":69,"author":{"gitId":"shawnpong"},"content":"     */","lastModifiedDate":"2024-03-01"},{"lineNumber":70,"author":{"gitId":"shawnpong"},"content":"    @Override","lastModifiedDate":"2024-02-08"},{"lineNumber":71,"author":{"gitId":"shawnpong"},"content":"    public String toString() {","lastModifiedDate":"2024-02-08"},{"lineNumber":72,"author":{"gitId":"shawnpong"},"content":"        return description;","lastModifiedDate":"2024-02-08"},{"lineNumber":73,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-02-08"},{"lineNumber":74,"author":{"gitId":"shawnpong"},"content":"}","lastModifiedDate":"2024-02-08"}],"authorContributionMap":{"shawnpong":74}},{"path":"src/main/java/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shawnpong"},"content":"import java.util.Scanner;","lastModifiedDate":"2024-02-29"},{"lineNumber":2,"author":{"gitId":"shawnpong"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-02-29"},{"lineNumber":3,"author":{"gitId":"shawnpong"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2024-02-29"},{"lineNumber":4,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-02-29"},{"lineNumber":5,"author":{"gitId":"shawnpong"},"content":"/**","lastModifiedDate":"2024-03-01"},{"lineNumber":6,"author":{"gitId":"shawnpong"},"content":" * The TaskList class manages the list of tasks and provides methods to handle various tasks.","lastModifiedDate":"2024-03-01"},{"lineNumber":7,"author":{"gitId":"shawnpong"},"content":" */","lastModifiedDate":"2024-03-01"},{"lineNumber":8,"author":{"gitId":"shawnpong"},"content":"public class TaskList {","lastModifiedDate":"2024-02-29"},{"lineNumber":9,"author":{"gitId":"shawnpong"},"content":"    /** The list of tasks. */","lastModifiedDate":"2024-03-01"},{"lineNumber":10,"author":{"gitId":"shawnpong"},"content":"    public static ArrayList\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-02-29"},{"lineNumber":11,"author":{"gitId":"shawnpong"},"content":"    /** The storage object to interact with file storage. */","lastModifiedDate":"2024-03-01"},{"lineNumber":12,"author":{"gitId":"shawnpong"},"content":"    private final Storage storage;","lastModifiedDate":"2024-02-29"},{"lineNumber":13,"author":{"gitId":"shawnpong"},"content":"    /** Indicates whether the task list is active. */","lastModifiedDate":"2024-03-01"},{"lineNumber":14,"author":{"gitId":"shawnpong"},"content":"    static Boolean isActive \u003d true;","lastModifiedDate":"2024-02-29"},{"lineNumber":15,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-02-29"},{"lineNumber":16,"author":{"gitId":"shawnpong"},"content":"    /**","lastModifiedDate":"2024-03-01"},{"lineNumber":17,"author":{"gitId":"shawnpong"},"content":"     * Constructs a TaskList object with the specified storage.","lastModifiedDate":"2024-03-01"},{"lineNumber":18,"author":{"gitId":"shawnpong"},"content":"     *","lastModifiedDate":"2024-03-01"},{"lineNumber":19,"author":{"gitId":"shawnpong"},"content":"     * @param storage The storage object to interact with file storage.","lastModifiedDate":"2024-03-01"},{"lineNumber":20,"author":{"gitId":"shawnpong"},"content":"     */","lastModifiedDate":"2024-03-01"},{"lineNumber":21,"author":{"gitId":"shawnpong"},"content":"    public TaskList(Storage storage) {","lastModifiedDate":"2024-02-29"},{"lineNumber":22,"author":{"gitId":"shawnpong"},"content":"        this.storage \u003d storage;","lastModifiedDate":"2024-02-29"},{"lineNumber":23,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-02-29"},{"lineNumber":24,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-02-29"},{"lineNumber":25,"author":{"gitId":"shawnpong"},"content":"    /**","lastModifiedDate":"2024-03-01"},{"lineNumber":26,"author":{"gitId":"shawnpong"},"content":"     * Sets the activity status of the task list.","lastModifiedDate":"2024-03-01"},{"lineNumber":27,"author":{"gitId":"shawnpong"},"content":"     *","lastModifiedDate":"2024-03-01"},{"lineNumber":28,"author":{"gitId":"shawnpong"},"content":"     * @param value The value to set for the activity status.","lastModifiedDate":"2024-03-01"},{"lineNumber":29,"author":{"gitId":"shawnpong"},"content":"     */","lastModifiedDate":"2024-03-01"},{"lineNumber":30,"author":{"gitId":"shawnpong"},"content":"    public static void setActive(Boolean value) {","lastModifiedDate":"2024-02-29"},{"lineNumber":31,"author":{"gitId":"shawnpong"},"content":"        isActive \u003d value;","lastModifiedDate":"2024-02-29"},{"lineNumber":32,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-02-29"},{"lineNumber":33,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-02-29"},{"lineNumber":34,"author":{"gitId":"shawnpong"},"content":"    /**","lastModifiedDate":"2024-03-01"},{"lineNumber":35,"author":{"gitId":"shawnpong"},"content":"     * Loads tasks from storage.","lastModifiedDate":"2024-03-01"},{"lineNumber":36,"author":{"gitId":"shawnpong"},"content":"     *","lastModifiedDate":"2024-03-01"},{"lineNumber":37,"author":{"gitId":"shawnpong"},"content":"     * @throws FileNotFoundException    If the tasks file is not found.","lastModifiedDate":"2024-03-01"},{"lineNumber":38,"author":{"gitId":"shawnpong"},"content":"     * @throws InvalidInputException    If the input format in the file is invalid.","lastModifiedDate":"2024-03-01"},{"lineNumber":39,"author":{"gitId":"shawnpong"},"content":"     */","lastModifiedDate":"2024-03-01"},{"lineNumber":40,"author":{"gitId":"shawnpong"},"content":"    public void loadTasks() throws FileNotFoundException, InvalidInputException {","lastModifiedDate":"2024-02-29"},{"lineNumber":41,"author":{"gitId":"shawnpong"},"content":"        storage.loadTasks();","lastModifiedDate":"2024-03-01"},{"lineNumber":42,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-02-29"},{"lineNumber":43,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-02-29"},{"lineNumber":44,"author":{"gitId":"shawnpong"},"content":"    /**","lastModifiedDate":"2024-03-01"},{"lineNumber":45,"author":{"gitId":"shawnpong"},"content":"     * Retrieves the list of tasks.","lastModifiedDate":"2024-03-01"},{"lineNumber":46,"author":{"gitId":"shawnpong"},"content":"     *","lastModifiedDate":"2024-03-01"},{"lineNumber":47,"author":{"gitId":"shawnpong"},"content":"     * @return The list of tasks.","lastModifiedDate":"2024-03-01"},{"lineNumber":48,"author":{"gitId":"shawnpong"},"content":"     */","lastModifiedDate":"2024-03-01"},{"lineNumber":49,"author":{"gitId":"shawnpong"},"content":"    public static ArrayList\u003cTask\u003e getList() {","lastModifiedDate":"2024-02-29"},{"lineNumber":50,"author":{"gitId":"shawnpong"},"content":"        return list;","lastModifiedDate":"2024-02-29"},{"lineNumber":51,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-02-29"},{"lineNumber":52,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-02-29"},{"lineNumber":53,"author":{"gitId":"shawnpong"},"content":"    /**","lastModifiedDate":"2024-03-01"},{"lineNumber":54,"author":{"gitId":"shawnpong"},"content":"     * Handles the \"bye\" command.","lastModifiedDate":"2024-03-01"},{"lineNumber":55,"author":{"gitId":"shawnpong"},"content":"     */","lastModifiedDate":"2024-03-01"},{"lineNumber":56,"author":{"gitId":"shawnpong"},"content":"    static void handleByeTask() {","lastModifiedDate":"2024-02-29"},{"lineNumber":57,"author":{"gitId":"shawnpong"},"content":"        System.out.println(\"Bye. Hope to see you again soon!\");","lastModifiedDate":"2024-02-29"},{"lineNumber":58,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-02-29"},{"lineNumber":59,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-02-29"},{"lineNumber":60,"author":{"gitId":"shawnpong"},"content":"    /**","lastModifiedDate":"2024-03-01"},{"lineNumber":61,"author":{"gitId":"shawnpong"},"content":"     * Handles the \"list\" command.","lastModifiedDate":"2024-03-01"},{"lineNumber":62,"author":{"gitId":"shawnpong"},"content":"     */","lastModifiedDate":"2024-03-01"},{"lineNumber":63,"author":{"gitId":"shawnpong"},"content":"    static void handleListTask() {","lastModifiedDate":"2024-02-29"},{"lineNumber":64,"author":{"gitId":"shawnpong"},"content":"        if (list.isEmpty()) {","lastModifiedDate":"2024-02-29"},{"lineNumber":65,"author":{"gitId":"shawnpong"},"content":"            System.out.println(\"Your to-do list is empty.\");","lastModifiedDate":"2024-02-29"},{"lineNumber":66,"author":{"gitId":"shawnpong"},"content":"        } else {","lastModifiedDate":"2024-02-29"},{"lineNumber":67,"author":{"gitId":"shawnpong"},"content":"            System.out.println(\"List so far: \");","lastModifiedDate":"2024-02-29"},{"lineNumber":68,"author":{"gitId":"shawnpong"},"content":"            for (int i \u003d 0; i \u003c list.size(); i++) {","lastModifiedDate":"2024-02-29"},{"lineNumber":69,"author":{"gitId":"shawnpong"},"content":"                System.out.println((i + 1) + \".\" + list.get(i));","lastModifiedDate":"2024-02-29"},{"lineNumber":70,"author":{"gitId":"shawnpong"},"content":"            }","lastModifiedDate":"2024-02-29"},{"lineNumber":71,"author":{"gitId":"shawnpong"},"content":"        }","lastModifiedDate":"2024-02-29"},{"lineNumber":72,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-02-29"},{"lineNumber":73,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-03-01"},{"lineNumber":74,"author":{"gitId":"shawnpong"},"content":"    /**","lastModifiedDate":"2024-03-01"},{"lineNumber":75,"author":{"gitId":"shawnpong"},"content":"     * Handles the \"delete\" command.","lastModifiedDate":"2024-03-01"},{"lineNumber":76,"author":{"gitId":"shawnpong"},"content":"     *","lastModifiedDate":"2024-03-01"},{"lineNumber":77,"author":{"gitId":"shawnpong"},"content":"     * @param line The command line.","lastModifiedDate":"2024-03-01"},{"lineNumber":78,"author":{"gitId":"shawnpong"},"content":"     * @throws InvalidInputException If the task number is invalid.","lastModifiedDate":"2024-03-01"},{"lineNumber":79,"author":{"gitId":"shawnpong"},"content":"     */","lastModifiedDate":"2024-03-01"},{"lineNumber":80,"author":{"gitId":"shawnpong"},"content":"    static void handleDeleteTask(String line) throws InvalidInputException {","lastModifiedDate":"2024-02-29"},{"lineNumber":81,"author":{"gitId":"shawnpong"},"content":"        Scanner taskScanner \u003d new Scanner(line);","lastModifiedDate":"2024-02-29"},{"lineNumber":82,"author":{"gitId":"shawnpong"},"content":"        taskScanner.next();","lastModifiedDate":"2024-02-29"},{"lineNumber":83,"author":{"gitId":"shawnpong"},"content":"        if (taskScanner.hasNextInt()) {","lastModifiedDate":"2024-02-29"},{"lineNumber":84,"author":{"gitId":"shawnpong"},"content":"            int taskNumber \u003d taskScanner.nextInt() - 1;","lastModifiedDate":"2024-02-29"},{"lineNumber":85,"author":{"gitId":"shawnpong"},"content":"            if (isValidTaskNumber(taskNumber)) {","lastModifiedDate":"2024-02-29"},{"lineNumber":86,"author":{"gitId":"shawnpong"},"content":"                System.out.println(\"Deleting task: \" + list.get(taskNumber));","lastModifiedDate":"2024-02-29"},{"lineNumber":87,"author":{"gitId":"shawnpong"},"content":"                list.remove(taskNumber);","lastModifiedDate":"2024-02-29"},{"lineNumber":88,"author":{"gitId":"shawnpong"},"content":"                System.out.println(\"Task deleted successfully!\");","lastModifiedDate":"2024-02-29"},{"lineNumber":89,"author":{"gitId":"shawnpong"},"content":"            } else {","lastModifiedDate":"2024-02-29"},{"lineNumber":90,"author":{"gitId":"shawnpong"},"content":"                throw new InvalidInputException(\"Invalid task number! Please check with \u0027list\u0027.\");","lastModifiedDate":"2024-02-29"},{"lineNumber":91,"author":{"gitId":"shawnpong"},"content":"            }","lastModifiedDate":"2024-02-29"},{"lineNumber":92,"author":{"gitId":"shawnpong"},"content":"        }","lastModifiedDate":"2024-02-29"},{"lineNumber":93,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-02-29"},{"lineNumber":94,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-02-29"},{"lineNumber":95,"author":{"gitId":"shawnpong"},"content":"    /**","lastModifiedDate":"2024-03-01"},{"lineNumber":96,"author":{"gitId":"shawnpong"},"content":"     * Handles the \"mark\" command.","lastModifiedDate":"2024-03-01"},{"lineNumber":97,"author":{"gitId":"shawnpong"},"content":"     *","lastModifiedDate":"2024-03-01"},{"lineNumber":98,"author":{"gitId":"shawnpong"},"content":"     * @param line The command line.","lastModifiedDate":"2024-03-01"},{"lineNumber":99,"author":{"gitId":"shawnpong"},"content":"     * @throws InvalidInputException If the task number is invalid or the input is incorrect.","lastModifiedDate":"2024-03-01"},{"lineNumber":100,"author":{"gitId":"shawnpong"},"content":"     */","lastModifiedDate":"2024-03-01"},{"lineNumber":101,"author":{"gitId":"shawnpong"},"content":"    static void handleMarkTask(String line) throws InvalidInputException {","lastModifiedDate":"2024-02-29"},{"lineNumber":102,"author":{"gitId":"shawnpong"},"content":"        Scanner taskScanner \u003d new Scanner(line);","lastModifiedDate":"2024-02-29"},{"lineNumber":103,"author":{"gitId":"shawnpong"},"content":"        taskScanner.next();","lastModifiedDate":"2024-02-29"},{"lineNumber":104,"author":{"gitId":"shawnpong"},"content":"        if (taskScanner.hasNextInt()) {","lastModifiedDate":"2024-02-29"},{"lineNumber":105,"author":{"gitId":"shawnpong"},"content":"            int taskNumber \u003d taskScanner.nextInt() - 1;","lastModifiedDate":"2024-02-29"},{"lineNumber":106,"author":{"gitId":"shawnpong"},"content":"            if (isValidTaskNumber(taskNumber)) {","lastModifiedDate":"2024-02-29"},{"lineNumber":107,"author":{"gitId":"shawnpong"},"content":"                list.get(taskNumber).setDone(true);","lastModifiedDate":"2024-02-29"},{"lineNumber":108,"author":{"gitId":"shawnpong"},"content":"                System.out.println(\"I have marked this task as done:\\n\" + list.get(taskNumber));","lastModifiedDate":"2024-02-29"},{"lineNumber":109,"author":{"gitId":"shawnpong"},"content":"            } else {","lastModifiedDate":"2024-02-29"},{"lineNumber":110,"author":{"gitId":"shawnpong"},"content":"                throw new InvalidInputException(\"Invalid task number! Please check with \u0027list\u0027.\");","lastModifiedDate":"2024-02-29"},{"lineNumber":111,"author":{"gitId":"shawnpong"},"content":"            }","lastModifiedDate":"2024-02-29"},{"lineNumber":112,"author":{"gitId":"shawnpong"},"content":"        } else {","lastModifiedDate":"2024-02-29"},{"lineNumber":113,"author":{"gitId":"shawnpong"},"content":"            throw new InvalidInputException(\"Invalid input! Please check with \u0027list\u0027.\");","lastModifiedDate":"2024-02-29"},{"lineNumber":114,"author":{"gitId":"shawnpong"},"content":"        }","lastModifiedDate":"2024-02-29"},{"lineNumber":115,"author":{"gitId":"shawnpong"},"content":"        taskScanner.close();","lastModifiedDate":"2024-02-29"},{"lineNumber":116,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-02-29"},{"lineNumber":117,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-02-29"},{"lineNumber":118,"author":{"gitId":"shawnpong"},"content":"    /**","lastModifiedDate":"2024-03-01"},{"lineNumber":119,"author":{"gitId":"shawnpong"},"content":"     * Handles the \"unmark\" command.","lastModifiedDate":"2024-03-01"},{"lineNumber":120,"author":{"gitId":"shawnpong"},"content":"     *","lastModifiedDate":"2024-03-01"},{"lineNumber":121,"author":{"gitId":"shawnpong"},"content":"     * @param line The command line.","lastModifiedDate":"2024-03-01"},{"lineNumber":122,"author":{"gitId":"shawnpong"},"content":"     * @throws InvalidInputException If the task number is invalid or the input is incorrect.","lastModifiedDate":"2024-03-01"},{"lineNumber":123,"author":{"gitId":"shawnpong"},"content":"     */","lastModifiedDate":"2024-03-01"},{"lineNumber":124,"author":{"gitId":"shawnpong"},"content":"    static void handleUnmarkTask(String line) throws InvalidInputException {","lastModifiedDate":"2024-02-29"},{"lineNumber":125,"author":{"gitId":"shawnpong"},"content":"        Scanner taskScanner \u003d new Scanner(line);","lastModifiedDate":"2024-02-29"},{"lineNumber":126,"author":{"gitId":"shawnpong"},"content":"        taskScanner.next();","lastModifiedDate":"2024-02-29"},{"lineNumber":127,"author":{"gitId":"shawnpong"},"content":"        if (taskScanner.hasNextInt()) {","lastModifiedDate":"2024-02-29"},{"lineNumber":128,"author":{"gitId":"shawnpong"},"content":"            int taskNumber \u003d taskScanner.nextInt() - 1;","lastModifiedDate":"2024-02-29"},{"lineNumber":129,"author":{"gitId":"shawnpong"},"content":"            if (isValidTaskNumber(taskNumber)) {","lastModifiedDate":"2024-02-29"},{"lineNumber":130,"author":{"gitId":"shawnpong"},"content":"                list.get(taskNumber).setDone(false);","lastModifiedDate":"2024-02-29"},{"lineNumber":131,"author":{"gitId":"shawnpong"},"content":"                System.out.println(\"I have marked this task as not done:\\n\" + list.get(taskNumber));","lastModifiedDate":"2024-02-29"},{"lineNumber":132,"author":{"gitId":"shawnpong"},"content":"            } else {","lastModifiedDate":"2024-02-29"},{"lineNumber":133,"author":{"gitId":"shawnpong"},"content":"                throw new InvalidInputException(\"Invalid task number! Please check with \u0027list\u0027.\");","lastModifiedDate":"2024-02-29"},{"lineNumber":134,"author":{"gitId":"shawnpong"},"content":"            }","lastModifiedDate":"2024-02-29"},{"lineNumber":135,"author":{"gitId":"shawnpong"},"content":"        } else {","lastModifiedDate":"2024-02-29"},{"lineNumber":136,"author":{"gitId":"shawnpong"},"content":"            throw new InvalidInputException(\"Invalid input! Please check with \u0027list\u0027.\");","lastModifiedDate":"2024-02-29"},{"lineNumber":137,"author":{"gitId":"shawnpong"},"content":"        }","lastModifiedDate":"2024-02-29"},{"lineNumber":138,"author":{"gitId":"shawnpong"},"content":"        taskScanner.close();","lastModifiedDate":"2024-02-29"},{"lineNumber":139,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-02-29"},{"lineNumber":140,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-02-29"},{"lineNumber":141,"author":{"gitId":"shawnpong"},"content":"    /**","lastModifiedDate":"2024-03-01"},{"lineNumber":142,"author":{"gitId":"shawnpong"},"content":"     * Handles the \"deadline\" command.","lastModifiedDate":"2024-03-01"},{"lineNumber":143,"author":{"gitId":"shawnpong"},"content":"     *","lastModifiedDate":"2024-03-01"},{"lineNumber":144,"author":{"gitId":"shawnpong"},"content":"     * @param line The command line.","lastModifiedDate":"2024-03-01"},{"lineNumber":145,"author":{"gitId":"shawnpong"},"content":"     * @throws InvalidInputException If the input format is incorrect.","lastModifiedDate":"2024-03-01"},{"lineNumber":146,"author":{"gitId":"shawnpong"},"content":"     */","lastModifiedDate":"2024-03-01"},{"lineNumber":147,"author":{"gitId":"shawnpong"},"content":"    static void handleDeadlineTask(String line) throws InvalidInputException {","lastModifiedDate":"2024-02-29"},{"lineNumber":148,"author":{"gitId":"shawnpong"},"content":"        Scanner taskScanner \u003d new Scanner(line);","lastModifiedDate":"2024-02-29"},{"lineNumber":149,"author":{"gitId":"shawnpong"},"content":"        taskScanner.next();","lastModifiedDate":"2024-02-29"},{"lineNumber":150,"author":{"gitId":"shawnpong"},"content":"        String remaining \u003d taskScanner.nextLine().trim();","lastModifiedDate":"2024-02-29"},{"lineNumber":151,"author":{"gitId":"shawnpong"},"content":"        int byIndex \u003d remaining.indexOf(\"/by\");","lastModifiedDate":"2024-02-29"},{"lineNumber":152,"author":{"gitId":"shawnpong"},"content":"        if (byIndex \u003d\u003d -1 || byIndex \u003d\u003d 0) {","lastModifiedDate":"2024-02-29"},{"lineNumber":153,"author":{"gitId":"shawnpong"},"content":"            throw new InvalidInputException(\"Invalid input format! Use: \u0027deadline \u003cdescription\u003e /by \u003ctime\u003e\u0027\");","lastModifiedDate":"2024-02-29"},{"lineNumber":154,"author":{"gitId":"shawnpong"},"content":"        }","lastModifiedDate":"2024-02-29"},{"lineNumber":155,"author":{"gitId":"shawnpong"},"content":"        final int DESCRIPTION_END_INDEX \u003d byIndex;","lastModifiedDate":"2024-03-01"},{"lineNumber":156,"author":{"gitId":"shawnpong"},"content":"        final int BY_START_INDEX \u003d byIndex + 3; // \"/by\".length() \u003d\u003d 3","lastModifiedDate":"2024-03-01"},{"lineNumber":157,"author":{"gitId":"shawnpong"},"content":"        String description \u003d remaining.substring(0, DESCRIPTION_END_INDEX).trim();","lastModifiedDate":"2024-03-01"},{"lineNumber":158,"author":{"gitId":"shawnpong"},"content":"        String by \u003d remaining.substring(BY_START_INDEX).trim();","lastModifiedDate":"2024-03-01"},{"lineNumber":159,"author":{"gitId":"shawnpong"},"content":"        list.add(new Deadline(description, by, false));","lastModifiedDate":"2024-02-29"},{"lineNumber":160,"author":{"gitId":"shawnpong"},"content":"        System.out.println(\"Added: \" + list.get(list.size() - 1) + \"\\nNow you have \" + list.size() + \" items in the list!\");","lastModifiedDate":"2024-03-01"},{"lineNumber":161,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-02-29"},{"lineNumber":162,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-02-29"},{"lineNumber":163,"author":{"gitId":"shawnpong"},"content":"    /**","lastModifiedDate":"2024-03-01"},{"lineNumber":164,"author":{"gitId":"shawnpong"},"content":"     * Handles the \"event\" command.","lastModifiedDate":"2024-03-01"},{"lineNumber":165,"author":{"gitId":"shawnpong"},"content":"     *","lastModifiedDate":"2024-03-01"},{"lineNumber":166,"author":{"gitId":"shawnpong"},"content":"     * @param line The command line.","lastModifiedDate":"2024-03-01"},{"lineNumber":167,"author":{"gitId":"shawnpong"},"content":"     * @throws InvalidInputException If the input format is incorrect.","lastModifiedDate":"2024-03-01"},{"lineNumber":168,"author":{"gitId":"shawnpong"},"content":"     */","lastModifiedDate":"2024-03-01"},{"lineNumber":169,"author":{"gitId":"shawnpong"},"content":"    static void handleEventTask(String line) throws InvalidInputException {","lastModifiedDate":"2024-02-29"},{"lineNumber":170,"author":{"gitId":"shawnpong"},"content":"        Scanner taskScanner \u003d new Scanner(line);","lastModifiedDate":"2024-02-29"},{"lineNumber":171,"author":{"gitId":"shawnpong"},"content":"        taskScanner.next();","lastModifiedDate":"2024-02-29"},{"lineNumber":172,"author":{"gitId":"shawnpong"},"content":"        String remaining \u003d taskScanner.nextLine().trim();","lastModifiedDate":"2024-02-29"},{"lineNumber":173,"author":{"gitId":"shawnpong"},"content":"        int fromIndex \u003d remaining.indexOf(\"/from\");","lastModifiedDate":"2024-02-29"},{"lineNumber":174,"author":{"gitId":"shawnpong"},"content":"        if (fromIndex \u003d\u003d -1 || fromIndex \u003d\u003d 0) {","lastModifiedDate":"2024-02-29"},{"lineNumber":175,"author":{"gitId":"shawnpong"},"content":"            throw new InvalidInputException(\"Invalid input format! Use: \u0027event \u003cdescription\u003e /from \u003cstart time\u003e /to \u003cend time\u003e\u0027\");","lastModifiedDate":"2024-02-29"},{"lineNumber":176,"author":{"gitId":"shawnpong"},"content":"        }","lastModifiedDate":"2024-02-29"},{"lineNumber":177,"author":{"gitId":"shawnpong"},"content":"        final int DESCRIPTION_END_INDEX \u003d fromIndex;","lastModifiedDate":"2024-03-01"},{"lineNumber":178,"author":{"gitId":"shawnpong"},"content":"        final int FROM_START_INDEX \u003d fromIndex + 5; // \"/from\".length() \u003d\u003d 5","lastModifiedDate":"2024-03-01"},{"lineNumber":179,"author":{"gitId":"shawnpong"},"content":"        int toIndex \u003d remaining.indexOf(\"/to\");","lastModifiedDate":"2024-02-29"},{"lineNumber":180,"author":{"gitId":"shawnpong"},"content":"        if (toIndex \u003d\u003d -1 || toIndex \u003c\u003d FROM_START_INDEX) {","lastModifiedDate":"2024-03-01"},{"lineNumber":181,"author":{"gitId":"shawnpong"},"content":"            throw new InvalidInputException(\"Invalid input format! Use: \u0027event \u003cdescription\u003e /from \u003cstart time\u003e /to \u003cend time\u003e\u0027\");","lastModifiedDate":"2024-02-29"},{"lineNumber":182,"author":{"gitId":"shawnpong"},"content":"        }","lastModifiedDate":"2024-02-29"},{"lineNumber":183,"author":{"gitId":"shawnpong"},"content":"        final int TO_START_INDEX \u003d toIndex + 3; // \"/to\".length() \u003d\u003d 3","lastModifiedDate":"2024-03-01"},{"lineNumber":184,"author":{"gitId":"shawnpong"},"content":"        String description \u003d remaining.substring(0, DESCRIPTION_END_INDEX).trim();","lastModifiedDate":"2024-03-01"},{"lineNumber":185,"author":{"gitId":"shawnpong"},"content":"        String from \u003d remaining.substring(FROM_START_INDEX, toIndex).trim();","lastModifiedDate":"2024-03-01"},{"lineNumber":186,"author":{"gitId":"shawnpong"},"content":"        String to \u003d remaining.substring(TO_START_INDEX).trim();","lastModifiedDate":"2024-03-01"},{"lineNumber":187,"author":{"gitId":"shawnpong"},"content":"        list.add(new Events(description, from, to, false));","lastModifiedDate":"2024-02-29"},{"lineNumber":188,"author":{"gitId":"shawnpong"},"content":"        System.out.println(\"Added: \" + list.get(list.size() - 1) + \"\\nNow you have \" + list.size() + \" items in the list!\");","lastModifiedDate":"2024-03-01"},{"lineNumber":189,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-02-29"},{"lineNumber":190,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-02-29"},{"lineNumber":191,"author":{"gitId":"shawnpong"},"content":"    /**","lastModifiedDate":"2024-03-01"},{"lineNumber":192,"author":{"gitId":"shawnpong"},"content":"     * Handles the \"todo\" command.","lastModifiedDate":"2024-03-01"},{"lineNumber":193,"author":{"gitId":"shawnpong"},"content":"     *","lastModifiedDate":"2024-03-01"},{"lineNumber":194,"author":{"gitId":"shawnpong"},"content":"     * @param line The command line.","lastModifiedDate":"2024-03-01"},{"lineNumber":195,"author":{"gitId":"shawnpong"},"content":"     */","lastModifiedDate":"2024-03-01"},{"lineNumber":196,"author":{"gitId":"shawnpong"},"content":"    static void handleTodoTask(String line) {","lastModifiedDate":"2024-02-29"},{"lineNumber":197,"author":{"gitId":"shawnpong"},"content":"        Scanner taskScanner \u003d new Scanner(line);","lastModifiedDate":"2024-02-29"},{"lineNumber":198,"author":{"gitId":"shawnpong"},"content":"        taskScanner.next();","lastModifiedDate":"2024-02-29"},{"lineNumber":199,"author":{"gitId":"shawnpong"},"content":"        String remaining \u003d taskScanner.nextLine().trim();","lastModifiedDate":"2024-02-29"},{"lineNumber":200,"author":{"gitId":"shawnpong"},"content":"        list.add(new ToDo(remaining, false));","lastModifiedDate":"2024-02-29"},{"lineNumber":201,"author":{"gitId":"shawnpong"},"content":"        System.out.println(\"Added: \" + list.get(list.size() - 1) + \"\\nNow you have \" + list.size() + \" items in the list!\");","lastModifiedDate":"2024-03-01"},{"lineNumber":202,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-02-29"},{"lineNumber":203,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-02-29"},{"lineNumber":204,"author":{"gitId":"shawnpong"},"content":"    /**","lastModifiedDate":"2024-03-01"},{"lineNumber":205,"author":{"gitId":"shawnpong"},"content":"     * Handles the \"find\" command.","lastModifiedDate":"2024-03-01"},{"lineNumber":206,"author":{"gitId":"shawnpong"},"content":"     *","lastModifiedDate":"2024-03-01"},{"lineNumber":207,"author":{"gitId":"shawnpong"},"content":"     * @param line The command line.","lastModifiedDate":"2024-03-01"},{"lineNumber":208,"author":{"gitId":"shawnpong"},"content":"     */","lastModifiedDate":"2024-03-01"},{"lineNumber":209,"author":{"gitId":"shawnpong"},"content":"    static void handleFindTask(String line) {","lastModifiedDate":"2024-03-01"},{"lineNumber":210,"author":{"gitId":"shawnpong"},"content":"        String query \u003d line.substring(\"find\".length()).trim();","lastModifiedDate":"2024-03-01"},{"lineNumber":211,"author":{"gitId":"shawnpong"},"content":"        ArrayList\u003cTask\u003e matchingTasks \u003d findTasks(query);","lastModifiedDate":"2024-03-01"},{"lineNumber":212,"author":{"gitId":"shawnpong"},"content":"        if (matchingTasks.isEmpty()) {","lastModifiedDate":"2024-03-01"},{"lineNumber":213,"author":{"gitId":"shawnpong"},"content":"            System.out.println(\"No matching tasks found.\");","lastModifiedDate":"2024-03-01"},{"lineNumber":214,"author":{"gitId":"shawnpong"},"content":"        } else {","lastModifiedDate":"2024-03-01"},{"lineNumber":215,"author":{"gitId":"shawnpong"},"content":"            System.out.println(\"Here are the matching tasks in your list:\");","lastModifiedDate":"2024-03-01"},{"lineNumber":216,"author":{"gitId":"shawnpong"},"content":"            for (int i \u003d 0; i \u003c matchingTasks.size(); i++) {","lastModifiedDate":"2024-03-01"},{"lineNumber":217,"author":{"gitId":"shawnpong"},"content":"                System.out.println((i + 1) + \".\" + matchingTasks.get(i));","lastModifiedDate":"2024-03-01"},{"lineNumber":218,"author":{"gitId":"shawnpong"},"content":"            }","lastModifiedDate":"2024-03-01"},{"lineNumber":219,"author":{"gitId":"shawnpong"},"content":"        }","lastModifiedDate":"2024-03-01"},{"lineNumber":220,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-03-01"},{"lineNumber":221,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-03-01"},{"lineNumber":222,"author":{"gitId":"shawnpong"},"content":"    /**","lastModifiedDate":"2024-03-01"},{"lineNumber":223,"author":{"gitId":"shawnpong"},"content":"     * Finds tasks matching the given query.","lastModifiedDate":"2024-03-01"},{"lineNumber":224,"author":{"gitId":"shawnpong"},"content":"     *","lastModifiedDate":"2024-03-01"},{"lineNumber":225,"author":{"gitId":"shawnpong"},"content":"     * @param query The search query.","lastModifiedDate":"2024-03-01"},{"lineNumber":226,"author":{"gitId":"shawnpong"},"content":"     * @return The list of matching tasks.","lastModifiedDate":"2024-03-01"},{"lineNumber":227,"author":{"gitId":"shawnpong"},"content":"     */","lastModifiedDate":"2024-03-01"},{"lineNumber":228,"author":{"gitId":"shawnpong"},"content":"    private static ArrayList\u003cTask\u003e findTasks(String query) {","lastModifiedDate":"2024-03-01"},{"lineNumber":229,"author":{"gitId":"shawnpong"},"content":"        ArrayList\u003cTask\u003e matchingTasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-03-01"},{"lineNumber":230,"author":{"gitId":"shawnpong"},"content":"        for (Task task : list) {","lastModifiedDate":"2024-03-01"},{"lineNumber":231,"author":{"gitId":"shawnpong"},"content":"            if (task.getDescription().contains(query)) {","lastModifiedDate":"2024-03-01"},{"lineNumber":232,"author":{"gitId":"shawnpong"},"content":"                matchingTasks.add(task);","lastModifiedDate":"2024-03-01"},{"lineNumber":233,"author":{"gitId":"shawnpong"},"content":"            }","lastModifiedDate":"2024-03-01"},{"lineNumber":234,"author":{"gitId":"shawnpong"},"content":"        }","lastModifiedDate":"2024-03-01"},{"lineNumber":235,"author":{"gitId":"shawnpong"},"content":"        return matchingTasks;","lastModifiedDate":"2024-03-01"},{"lineNumber":236,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-03-01"},{"lineNumber":237,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-03-01"},{"lineNumber":238,"author":{"gitId":"shawnpong"},"content":"    /**","lastModifiedDate":"2024-03-01"},{"lineNumber":239,"author":{"gitId":"shawnpong"},"content":"     * Checks if the task number is valid.","lastModifiedDate":"2024-03-01"},{"lineNumber":240,"author":{"gitId":"shawnpong"},"content":"     *","lastModifiedDate":"2024-03-01"},{"lineNumber":241,"author":{"gitId":"shawnpong"},"content":"     * @param taskNumber The task number to check.","lastModifiedDate":"2024-03-01"},{"lineNumber":242,"author":{"gitId":"shawnpong"},"content":"     * @return True if the task number is valid, otherwise false.","lastModifiedDate":"2024-03-01"},{"lineNumber":243,"author":{"gitId":"shawnpong"},"content":"     */","lastModifiedDate":"2024-03-01"},{"lineNumber":244,"author":{"gitId":"shawnpong"},"content":"    private static boolean isValidTaskNumber(int taskNumber) {","lastModifiedDate":"2024-02-29"},{"lineNumber":245,"author":{"gitId":"shawnpong"},"content":"        return taskNumber \u003e\u003d 0 \u0026\u0026 taskNumber \u003c list.size();","lastModifiedDate":"2024-02-29"},{"lineNumber":246,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-02-29"},{"lineNumber":247,"author":{"gitId":"shawnpong"},"content":"}","lastModifiedDate":"2024-02-29"}],"authorContributionMap":{"shawnpong":247}},{"path":"src/main/java/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shawnpong"},"content":"public class ToDo extends Task {","lastModifiedDate":"2024-02-08"},{"lineNumber":2,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":3,"author":{"gitId":"shawnpong"},"content":"    public ToDo(String description, Boolean isDone) {","lastModifiedDate":"2024-02-21"},{"lineNumber":4,"author":{"gitId":"shawnpong"},"content":"        super(description);","lastModifiedDate":"2024-02-08"},{"lineNumber":5,"author":{"gitId":"shawnpong"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2024-02-21"},{"lineNumber":6,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-02-08"},{"lineNumber":7,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-02-08"},{"lineNumber":8,"author":{"gitId":"shawnpong"},"content":"    @Override","lastModifiedDate":"2024-02-08"},{"lineNumber":9,"author":{"gitId":"shawnpong"},"content":"    public String toString() {","lastModifiedDate":"2024-02-08"},{"lineNumber":10,"author":{"gitId":"shawnpong"},"content":"        return \"[T] \" + super.getStatusIcon() + \" \" + super.toString();","lastModifiedDate":"2024-02-08"},{"lineNumber":11,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-02-08"},{"lineNumber":12,"author":{"gitId":"shawnpong"},"content":"}","lastModifiedDate":"2024-02-08"}],"authorContributionMap":{"shawnpong":12}},{"path":"src/main/java/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"shawnpong"},"content":"/**","lastModifiedDate":"2024-03-01"},{"lineNumber":2,"author":{"gitId":"shawnpong"},"content":" * User interface class responsible for displaying messages to the user.","lastModifiedDate":"2024-03-01"},{"lineNumber":3,"author":{"gitId":"shawnpong"},"content":" */","lastModifiedDate":"2024-03-01"},{"lineNumber":4,"author":{"gitId":"shawnpong"},"content":"public class Ui {","lastModifiedDate":"2024-02-29"},{"lineNumber":5,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-03-01"},{"lineNumber":6,"author":{"gitId":"shawnpong"},"content":"    /**","lastModifiedDate":"2024-03-01"},{"lineNumber":7,"author":{"gitId":"shawnpong"},"content":"     * Displays a welcome message.","lastModifiedDate":"2024-03-01"},{"lineNumber":8,"author":{"gitId":"shawnpong"},"content":"     *","lastModifiedDate":"2024-03-01"},{"lineNumber":9,"author":{"gitId":"shawnpong"},"content":"     * @param name The name of the application.","lastModifiedDate":"2024-03-01"},{"lineNumber":10,"author":{"gitId":"shawnpong"},"content":"     */","lastModifiedDate":"2024-03-01"},{"lineNumber":11,"author":{"gitId":"shawnpong"},"content":"    public void showWelcomeMessage(String name) {","lastModifiedDate":"2024-02-29"},{"lineNumber":12,"author":{"gitId":"shawnpong"},"content":"        System.out.println(\"Hello! I\u0027m \" + name);","lastModifiedDate":"2024-02-29"},{"lineNumber":13,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-02-29"},{"lineNumber":14,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-02-29"},{"lineNumber":15,"author":{"gitId":"shawnpong"},"content":"    /**","lastModifiedDate":"2024-03-01"},{"lineNumber":16,"author":{"gitId":"shawnpong"},"content":"     * Displays instructions to the user.","lastModifiedDate":"2024-03-01"},{"lineNumber":17,"author":{"gitId":"shawnpong"},"content":"     */","lastModifiedDate":"2024-03-01"},{"lineNumber":18,"author":{"gitId":"shawnpong"},"content":"    public void showInstructions() {","lastModifiedDate":"2024-02-29"},{"lineNumber":19,"author":{"gitId":"shawnpong"},"content":"        System.out.println(\"I can keep track of a to-do list for you! Just type what you want to add to the list.\");","lastModifiedDate":"2024-02-29"},{"lineNumber":20,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-02-29"},{"lineNumber":21,"author":{"gitId":"shawnpong"},"content":"","lastModifiedDate":"2024-02-29"},{"lineNumber":22,"author":{"gitId":"shawnpong"},"content":"    /**","lastModifiedDate":"2024-03-01"},{"lineNumber":23,"author":{"gitId":"shawnpong"},"content":"     * Displays an error message.","lastModifiedDate":"2024-03-01"},{"lineNumber":24,"author":{"gitId":"shawnpong"},"content":"     *","lastModifiedDate":"2024-03-01"},{"lineNumber":25,"author":{"gitId":"shawnpong"},"content":"     * @param message The error message to display.","lastModifiedDate":"2024-03-01"},{"lineNumber":26,"author":{"gitId":"shawnpong"},"content":"     */","lastModifiedDate":"2024-03-01"},{"lineNumber":27,"author":{"gitId":"shawnpong"},"content":"    public void showErrorMessage(String message) {","lastModifiedDate":"2024-02-29"},{"lineNumber":28,"author":{"gitId":"shawnpong"},"content":"        System.out.println(message);","lastModifiedDate":"2024-03-01"},{"lineNumber":29,"author":{"gitId":"shawnpong"},"content":"    }","lastModifiedDate":"2024-02-29"},{"lineNumber":30,"author":{"gitId":"shawnpong"},"content":"}","lastModifiedDate":"2024-02-29"}],"authorContributionMap":{"shawnpong":30}}]
