[{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide","lastModifiedDate":"2019-07-29"},{"lineNumber":2,"author":{"gitId":"rismm"},"content":"Joe is a chatbot for managing a task list optimized for use via Command Line Interface (CLI).","lastModifiedDate":"2024-02-27"},{"lineNumber":3,"author":{"gitId":"rismm"},"content":"","lastModifiedDate":"2024-02-27"},{"lineNumber":4,"author":{"gitId":"rismm"},"content":"## Quick Start","lastModifiedDate":"2024-02-27"},{"lineNumber":5,"author":{"gitId":"rismm"},"content":"1. Ensure you have Java 11 or above installed on your computer.","lastModifiedDate":"2024-02-27"},{"lineNumber":6,"author":{"gitId":"rismm"},"content":"2. Download the latest joe.jar release [here](https://github.com/rismm/ip/releases).","lastModifiedDate":"2024-02-27"},{"lineNumber":7,"author":{"gitId":"rismm"},"content":"3. Copy the file to a folder you want as the home directory of the file.","lastModifiedDate":"2024-02-27"},{"lineNumber":8,"author":{"gitId":"rismm"},"content":"4. From the command terminal, `cd` into the home directory of the jar file and run the command `java -jar joe.jar` to launch the application.","lastModifiedDate":"2024-02-27"},{"lineNumber":9,"author":{"gitId":"rismm"},"content":"5. Type a command in the command box and press Enter to execute it. Refer to **Features** below for details of each available command.","lastModifiedDate":"2024-02-27"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":11,"author":{"gitId":"-"},"content":"## Features ","lastModifiedDate":"2019-07-29"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":13,"author":{"gitId":"rismm"},"content":"\u003e Notes on command and tasks format","lastModifiedDate":"2024-02-27"},{"lineNumber":14,"author":{"gitId":"rismm"},"content":"\u003e - Words between two dashes `--` are parameters to be input by the user","lastModifiedDate":"2024-02-27"},{"lineNumber":15,"author":{"gitId":"rismm"},"content":"\u003e   - e.g. in `todo --TASK--` TASK is the parameter to be input by the user used as `todo finish assignment` ","lastModifiedDate":"2024-02-27"},{"lineNumber":16,"author":{"gitId":"rismm"},"content":"\u003e - DATETIME parameters must include both dates and times in the format `dd-mm-yyyy HHmm`","lastModifiedDate":"2024-02-27"},{"lineNumber":17,"author":{"gitId":"rismm"},"content":"\u003e   - `dd-mm-yyyy` indicates day-month-year e.g. 1 January 2001 is `01-01-2001`","lastModifiedDate":"2024-02-27"},{"lineNumber":18,"author":{"gitId":"rismm"},"content":"\u003e   - `HHmm` indicates the 24-hour clock time e.g. 9pm is `2100`","lastModifiedDate":"2024-02-27"},{"lineNumber":19,"author":{"gitId":"rismm"},"content":"\u003e - Every necessary parameter input cannot be empty or whitespace","lastModifiedDate":"2024-02-27"},{"lineNumber":20,"author":{"gitId":"rismm"},"content":"\u003e - All tasks are displayed in the format `INDEX_NUMBER.[TASK_TYPE][MARKED_STATUS] TASK_DESCRIPTION` e.g.","lastModifiedDate":"2024-02-27"},{"lineNumber":21,"author":{"gitId":"rismm"},"content":"\u003e   - Todo: `21.[T][ ] Go home`","lastModifiedDate":"2024-02-27"},{"lineNumber":22,"author":{"gitId":"rismm"},"content":"\u003e   - Deadline: `5.[D][ ] CS2113 iP (by: 8 Mar 2024 11:59PM)`","lastModifiedDate":"2024-02-27"},{"lineNumber":23,"author":{"gitId":"rismm"},"content":"\u003e   - Event: `10.[E][X] IVE concert in Singapore (from: 24 Feb 2024 06:00PM to: 24 Feb 2024 08:00PM)`","lastModifiedDate":"2024-02-27"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":25,"author":{"gitId":"rismm"},"content":"### Adding a Todo task: `todo`","lastModifiedDate":"2024-02-27"},{"lineNumber":26,"author":{"gitId":"rismm"},"content":"Adds a Todo task to the task list\\","lastModifiedDate":"2024-02-27"},{"lineNumber":27,"author":{"gitId":"rismm"},"content":"Format: `todo --TASK--`\\","lastModifiedDate":"2024-02-27"},{"lineNumber":28,"author":{"gitId":"rismm"},"content":"Example: `todo CS2113 Week 7 Lecture Quiz`","lastModifiedDate":"2024-02-27"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":30,"author":{"gitId":"rismm"},"content":"### Adding a Deadline task: `deadline`","lastModifiedDate":"2024-02-27"},{"lineNumber":31,"author":{"gitId":"rismm"},"content":"Adds a Deadline task to the task list\\","lastModifiedDate":"2024-02-27"},{"lineNumber":32,"author":{"gitId":"rismm"},"content":"Format: `deadline --TASK-- /by --DATETIME--`\\","lastModifiedDate":"2024-02-27"},{"lineNumber":33,"author":{"gitId":"rismm"},"content":"Example: `deadline CS2113 iP /by 08-03-2024 2359` ","lastModifiedDate":"2024-02-27"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":35,"author":{"gitId":"rismm"},"content":"### Adding an Event task: `event`","lastModifiedDate":"2024-02-27"},{"lineNumber":36,"author":{"gitId":"rismm"},"content":"Adds an Event task to the task list\\","lastModifiedDate":"2024-02-27"},{"lineNumber":37,"author":{"gitId":"rismm"},"content":"Format: `event --TASK-- /from --START DATETIME-- /to --END DATETIME--`\\","lastModifiedDate":"2024-02-27"},{"lineNumber":38,"author":{"gitId":"rismm"},"content":"Example: `event IVE concert in Singapore /from 24-02-2024 1800 /to 24-02-2024 2000`","lastModifiedDate":"2024-02-27"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":40,"author":{"gitId":"rismm"},"content":"### Listing all tasks: `list`","lastModifiedDate":"2024-02-27"},{"lineNumber":41,"author":{"gitId":"rismm"},"content":"Shows a list of all tasks currently in the task list\\","lastModifiedDate":"2024-02-27"},{"lineNumber":42,"author":{"gitId":"rismm"},"content":"Format: `list`","lastModifiedDate":"2024-02-27"},{"lineNumber":43,"author":{"gitId":"rismm"},"content":"- Additional parameters cannot be included in the command for it to execute","lastModifiedDate":"2024-02-27"},{"lineNumber":44,"author":{"gitId":"rismm"},"content":"    - e.g. `list my tasks please` is not interpreted as `list`","lastModifiedDate":"2024-02-27"},{"lineNumber":45,"author":{"gitId":"rismm"},"content":"","lastModifiedDate":"2024-02-27"},{"lineNumber":46,"author":{"gitId":"rismm"},"content":"### Setting a task\u0027s status to be done: `mark`","lastModifiedDate":"2024-02-27"},{"lineNumber":47,"author":{"gitId":"rismm"},"content":"Marks a task as completed\\","lastModifiedDate":"2024-02-27"},{"lineNumber":48,"author":{"gitId":"rismm"},"content":"Format: `mark --INDEX--`","lastModifiedDate":"2024-02-27"},{"lineNumber":49,"author":{"gitId":"rismm"},"content":"- `INDEX` must be a positive integer less than or equals to the current number of tasks in the task list","lastModifiedDate":"2024-02-27"},{"lineNumber":50,"author":{"gitId":"rismm"},"content":"- To get a task\u0027s `INDEX`, `list` or `find` can be used to look for the index ","lastModifiedDate":"2024-02-27"},{"lineNumber":51,"author":{"gitId":"rismm"},"content":"- Task will be marked with a `X` to indicate completion","lastModifiedDate":"2024-02-27"},{"lineNumber":52,"author":{"gitId":"rismm"},"content":"- If task selected is already marked, it will remain marked","lastModifiedDate":"2024-02-27"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":54,"author":{"gitId":"rismm"},"content":"### Unsetting a task\u0027s done status: `unmark`","lastModifiedDate":"2024-02-27"},{"lineNumber":55,"author":{"gitId":"rismm"},"content":"Removes a task\u0027s mark status\\","lastModifiedDate":"2024-02-27"},{"lineNumber":56,"author":{"gitId":"rismm"},"content":"Format: `unmark --INDEX--`","lastModifiedDate":"2024-02-27"},{"lineNumber":57,"author":{"gitId":"rismm"},"content":"- `INDEX` must be a positive integer less than or equals to the current number of tasks in the task list","lastModifiedDate":"2024-02-27"},{"lineNumber":58,"author":{"gitId":"rismm"},"content":"- To get a task\u0027s `INDEX`, `list` or `find` can be used to look for the index","lastModifiedDate":"2024-02-27"},{"lineNumber":59,"author":{"gitId":"rismm"},"content":"- If task selected is already unmarked, it will remain unmarked","lastModifiedDate":"2024-02-27"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":61,"author":{"gitId":"rismm"},"content":"### Deleting a task: `delete`","lastModifiedDate":"2024-02-27"},{"lineNumber":62,"author":{"gitId":"rismm"},"content":"Deletes a task from the task list\\","lastModifiedDate":"2024-02-27"},{"lineNumber":63,"author":{"gitId":"rismm"},"content":"Format: `delete --INDEX--`","lastModifiedDate":"2024-02-27"},{"lineNumber":64,"author":{"gitId":"rismm"},"content":"- `INDEX` must be a positive integer less than or equals to the current number of tasks in the task list","lastModifiedDate":"2024-02-27"},{"lineNumber":65,"author":{"gitId":"rismm"},"content":"- To get a task\u0027s `INDEX`, `list` or `find` can be used to look for the index","lastModifiedDate":"2024-02-27"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":67,"author":{"gitId":"rismm"},"content":"### Finding a task: `find`","lastModifiedDate":"2024-02-27"},{"lineNumber":68,"author":{"gitId":"rismm"},"content":"Lists all tasks that matches or contains a keyword\\","lastModifiedDate":"2024-02-27"},{"lineNumber":69,"author":{"gitId":"rismm"},"content":"Format: `find --KEYWORD--`","lastModifiedDate":"2024-02-27"},{"lineNumber":70,"author":{"gitId":"rismm"},"content":"- `KEYWORD` is case-sensitive, e.g. `homework` does not match `Homework`","lastModifiedDate":"2024-02-27"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":72,"author":{"gitId":"rismm"},"content":"Example: `find assignment`","lastModifiedDate":"2024-02-27"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":74,"author":{"gitId":"rismm"},"content":"### Exiting the program: `bye`","lastModifiedDate":"2024-02-27"},{"lineNumber":75,"author":{"gitId":"rismm"},"content":"Exits the program\\","lastModifiedDate":"2024-02-27"},{"lineNumber":76,"author":{"gitId":"rismm"},"content":"Format: `bye`","lastModifiedDate":"2024-02-27"},{"lineNumber":77,"author":{"gitId":"rismm"},"content":"- Additional parameters cannot be included in the command for it to execute","lastModifiedDate":"2024-02-27"},{"lineNumber":78,"author":{"gitId":"rismm"},"content":"  - e.g. `bye bye joe` is not interpreted as `bye`","lastModifiedDate":"2024-02-27"},{"lineNumber":79,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":80,"author":{"gitId":"rismm"},"content":"### Saving the task list","lastModifiedDate":"2024-02-27"},{"lineNumber":81,"author":{"gitId":"rismm"},"content":"The task list is saved automatically by the program everytime it is updated or changed. There is no need to save manually.","lastModifiedDate":"2024-02-27"},{"lineNumber":82,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":83,"author":{"gitId":"rismm"},"content":"## Usage","lastModifiedDate":"2024-02-27"},{"lineNumber":84,"author":{"gitId":"rismm"},"content":"","lastModifiedDate":"2024-02-27"},{"lineNumber":85,"author":{"gitId":"rismm"},"content":"### _An example of the interface when using Joe_","lastModifiedDate":"2024-02-27"},{"lineNumber":86,"author":{"gitId":"rismm"},"content":"Output on program start:","lastModifiedDate":"2024-02-27"},{"lineNumber":87,"author":{"gitId":"rismm"},"content":"```","lastModifiedDate":"2024-02-27"},{"lineNumber":88,"author":{"gitId":"rismm"},"content":"____________________________________________________________","lastModifiedDate":"2024-02-27"},{"lineNumber":89,"author":{"gitId":"rismm"},"content":"HI I\u0027M JOE","lastModifiedDate":"2024-02-27"},{"lineNumber":90,"author":{"gitId":"rismm"},"content":"WHAT CAN I DO FOR YOU","lastModifiedDate":"2024-02-27"},{"lineNumber":91,"author":{"gitId":"rismm"},"content":"____________________________________________________________","lastModifiedDate":"2024-02-27"},{"lineNumber":92,"author":{"gitId":"rismm"},"content":"```","lastModifiedDate":"2024-02-27"},{"lineNumber":93,"author":{"gitId":"rismm"},"content":"Input: `deadline CS2113 iP /by 08-03-2024 2359`","lastModifiedDate":"2024-02-27"},{"lineNumber":94,"author":{"gitId":"rismm"},"content":"```","lastModifiedDate":"2024-02-27"},{"lineNumber":95,"author":{"gitId":"rismm"},"content":"____________________________________________________________","lastModifiedDate":"2024-02-27"},{"lineNumber":96,"author":{"gitId":"rismm"},"content":"OKAY I\u0027VE ADDED THIS TASK:","lastModifiedDate":"2024-02-27"},{"lineNumber":97,"author":{"gitId":"rismm"},"content":"  [D][ ] CS2113 iP (by: 8 Mar 2024 11:59PM)","lastModifiedDate":"2024-02-27"},{"lineNumber":98,"author":{"gitId":"rismm"},"content":"NUMBER OF TASKS CURRENTLY IN LIST: 1","lastModifiedDate":"2024-02-27"},{"lineNumber":99,"author":{"gitId":"rismm"},"content":"____________________________________________________________","lastModifiedDate":"2024-02-27"},{"lineNumber":100,"author":{"gitId":"rismm"},"content":"```","lastModifiedDate":"2024-02-27"},{"lineNumber":101,"author":{"gitId":"rismm"},"content":"Input: `list`","lastModifiedDate":"2024-02-27"},{"lineNumber":102,"author":{"gitId":"rismm"},"content":"```","lastModifiedDate":"2024-02-27"},{"lineNumber":103,"author":{"gitId":"rismm"},"content":"____________________________________________________________","lastModifiedDate":"2024-02-27"},{"lineNumber":104,"author":{"gitId":"rismm"},"content":"HERE\u0027S YOUR TASKS:","lastModifiedDate":"2024-02-27"},{"lineNumber":105,"author":{"gitId":"rismm"},"content":"1.[D][ ] CS2113 iP (by: 8 Mar 2024 11:59PM)","lastModifiedDate":"2024-02-27"},{"lineNumber":106,"author":{"gitId":"rismm"},"content":"____________________________________________________________","lastModifiedDate":"2024-02-27"},{"lineNumber":107,"author":{"gitId":"rismm"},"content":"```","lastModifiedDate":"2024-02-27"},{"lineNumber":108,"author":{"gitId":"rismm"},"content":"Input: `mark 1`","lastModifiedDate":"2024-02-27"},{"lineNumber":109,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2021-07-17"},{"lineNumber":110,"author":{"gitId":"rismm"},"content":"____________________________________________________________","lastModifiedDate":"2024-02-27"},{"lineNumber":111,"author":{"gitId":"rismm"},"content":"GOOD JOB BRO. I\u0027VE MARKED IT AS DONE:","lastModifiedDate":"2024-02-27"},{"lineNumber":112,"author":{"gitId":"rismm"},"content":"  [D][X] CS2113 iP (by: 8 Mar 2024 11:59PM)","lastModifiedDate":"2024-02-27"},{"lineNumber":113,"author":{"gitId":"rismm"},"content":"____________________________________________________________","lastModifiedDate":"2024-02-27"},{"lineNumber":114,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2021-07-17"},{"lineNumber":115,"author":{"gitId":"rismm"},"content":"### _Data Saving_","lastModifiedDate":"2024-02-27"},{"lineNumber":116,"author":{"gitId":"rismm"},"content":"Data will be saved in a text file created in the same home directory as `joe.jar` in the path `./data/tasklist.txt`. ","lastModifiedDate":"2024-02-27"},{"lineNumber":117,"author":{"gitId":"rismm"},"content":"You can transfer the text files to another computer with joe.jar and Joe will read and load the data it accordingly.","lastModifiedDate":"2024-02-27"}],"authorContributionMap":{"rismm":100,"-":17}},{"path":"src/main/java/joe/Joe.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"rismm"},"content":"package joe;","lastModifiedDate":"2024-02-10"},{"lineNumber":2,"author":{"gitId":"rismm"},"content":"","lastModifiedDate":"2024-02-10"},{"lineNumber":3,"author":{"gitId":"rismm"},"content":"import joe.command.Command;","lastModifiedDate":"2024-02-26"},{"lineNumber":4,"author":{"gitId":"rismm"},"content":"import joe.util.FileManager;","lastModifiedDate":"2024-02-19"},{"lineNumber":5,"author":{"gitId":"rismm"},"content":"import joe.util.InputParser;","lastModifiedDate":"2024-02-10"},{"lineNumber":6,"author":{"gitId":"rismm"},"content":"import joe.util.Printer;","lastModifiedDate":"2024-02-10"},{"lineNumber":7,"author":{"gitId":"rismm"},"content":"import joe.task.TaskManager;","lastModifiedDate":"2024-02-10"},{"lineNumber":8,"author":{"gitId":"rismm"},"content":"","lastModifiedDate":"2024-02-10"},{"lineNumber":9,"author":{"gitId":"rismm"},"content":"import java.io.IOException;","lastModifiedDate":"2024-02-19"},{"lineNumber":10,"author":{"gitId":"rismm"},"content":"import java.util.Scanner;","lastModifiedDate":"2024-01-27"},{"lineNumber":11,"author":{"gitId":"rismm"},"content":"","lastModifiedDate":"2024-01-27"},{"lineNumber":12,"author":{"gitId":"rismm"},"content":"/**","lastModifiedDate":"2024-02-27"},{"lineNumber":13,"author":{"gitId":"rismm"},"content":" * Main class of the chatbot Joe","lastModifiedDate":"2024-02-27"},{"lineNumber":14,"author":{"gitId":"rismm"},"content":" */","lastModifiedDate":"2024-02-27"},{"lineNumber":15,"author":{"gitId":"rismm"},"content":"public class Joe {","lastModifiedDate":"2024-01-19"},{"lineNumber":16,"author":{"gitId":"rismm"},"content":"    protected static TaskManager taskManager;","lastModifiedDate":"2024-02-26"},{"lineNumber":17,"author":{"gitId":"rismm"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":18,"author":{"gitId":"rismm"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2024-01-19"},{"lineNumber":19,"author":{"gitId":"rismm"},"content":"        Printer.printGreeting();","lastModifiedDate":"2024-02-05"},{"lineNumber":20,"author":{"gitId":"rismm"},"content":"        runJoe();","lastModifiedDate":"2024-02-10"},{"lineNumber":21,"author":{"gitId":"rismm"},"content":"        Printer.printExitMessage();","lastModifiedDate":"2024-02-10"},{"lineNumber":22,"author":{"gitId":"rismm"},"content":"    }","lastModifiedDate":"2024-02-10"},{"lineNumber":23,"author":{"gitId":"rismm"},"content":"","lastModifiedDate":"2024-01-27"},{"lineNumber":24,"author":{"gitId":"rismm"},"content":"    private static void runJoe() {","lastModifiedDate":"2024-02-10"},{"lineNumber":25,"author":{"gitId":"rismm"},"content":"        Scanner in \u003d new Scanner(System.in);","lastModifiedDate":"2024-02-10"},{"lineNumber":26,"author":{"gitId":"rismm"},"content":"        taskManager \u003d new TaskManager();","lastModifiedDate":"2024-02-26"},{"lineNumber":27,"author":{"gitId":"rismm"},"content":"","lastModifiedDate":"2024-02-10"},{"lineNumber":28,"author":{"gitId":"rismm"},"content":"        try {","lastModifiedDate":"2024-02-19"},{"lineNumber":29,"author":{"gitId":"rismm"},"content":"            FileManager.loadData(taskManager);","lastModifiedDate":"2024-02-19"},{"lineNumber":30,"author":{"gitId":"rismm"},"content":"        } catch (IOException e) {","lastModifiedDate":"2024-02-19"},{"lineNumber":31,"author":{"gitId":"rismm"},"content":"            Printer.printLoadError();","lastModifiedDate":"2024-02-20"},{"lineNumber":32,"author":{"gitId":"rismm"},"content":"        }","lastModifiedDate":"2024-02-19"},{"lineNumber":33,"author":{"gitId":"rismm"},"content":"","lastModifiedDate":"2024-02-19"},{"lineNumber":34,"author":{"gitId":"rismm"},"content":"        Command command;","lastModifiedDate":"2024-02-26"},{"lineNumber":35,"author":{"gitId":"rismm"},"content":"        do {","lastModifiedDate":"2024-02-20"},{"lineNumber":36,"author":{"gitId":"rismm"},"content":"            String input \u003d in.nextLine();","lastModifiedDate":"2024-01-27"},{"lineNumber":37,"author":{"gitId":"rismm"},"content":"            input \u003d input.trim();","lastModifiedDate":"2024-01-28"},{"lineNumber":38,"author":{"gitId":"rismm"},"content":"            command \u003d InputParser.getCommand(input);","lastModifiedDate":"2024-02-26"},{"lineNumber":39,"author":{"gitId":"rismm"},"content":"            command.executeCommand(taskManager);","lastModifiedDate":"2024-02-26"},{"lineNumber":40,"author":{"gitId":"rismm"},"content":"        } while (!command.isExit());","lastModifiedDate":"2024-02-26"},{"lineNumber":41,"author":{"gitId":"rismm"},"content":"","lastModifiedDate":"2024-02-20"},{"lineNumber":42,"author":{"gitId":"rismm"},"content":"        in.close();","lastModifiedDate":"2024-02-20"},{"lineNumber":43,"author":{"gitId":"rismm"},"content":"    }","lastModifiedDate":"2024-02-20"},{"lineNumber":44,"author":{"gitId":"rismm"},"content":"","lastModifiedDate":"2024-02-20"},{"lineNumber":45,"author":{"gitId":"rismm"},"content":"}","lastModifiedDate":"2024-01-19"}],"authorContributionMap":{"rismm":45}},{"path":"src/main/java/joe/JoeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"rismm"},"content":"package joe;","lastModifiedDate":"2024-02-10"},{"lineNumber":2,"author":{"gitId":"rismm"},"content":"","lastModifiedDate":"2024-02-10"},{"lineNumber":3,"author":{"gitId":"rismm"},"content":"/**","lastModifiedDate":"2024-02-27"},{"lineNumber":4,"author":{"gitId":"rismm"},"content":" * Custom exception for Joe","lastModifiedDate":"2024-02-27"},{"lineNumber":5,"author":{"gitId":"rismm"},"content":" */","lastModifiedDate":"2024-02-27"},{"lineNumber":6,"author":{"gitId":"rismm"},"content":"public class JoeException extends Exception {","lastModifiedDate":"2024-02-10"},{"lineNumber":7,"author":{"gitId":"rismm"},"content":"    public JoeException(String errorMessage) {","lastModifiedDate":"2024-02-20"},{"lineNumber":8,"author":{"gitId":"rismm"},"content":"        // Constructor for specific error messages","lastModifiedDate":"2024-02-20"},{"lineNumber":9,"author":{"gitId":"rismm"},"content":"        super(errorMessage);","lastModifiedDate":"2024-02-20"},{"lineNumber":10,"author":{"gitId":"rismm"},"content":"    }","lastModifiedDate":"2024-02-20"},{"lineNumber":11,"author":{"gitId":"rismm"},"content":"","lastModifiedDate":"2024-02-20"},{"lineNumber":12,"author":{"gitId":"rismm"},"content":"    public JoeException() {","lastModifiedDate":"2024-02-20"},{"lineNumber":13,"author":{"gitId":"rismm"},"content":"        // Empty constructor","lastModifiedDate":"2024-02-20"},{"lineNumber":14,"author":{"gitId":"rismm"},"content":"    }","lastModifiedDate":"2024-02-20"},{"lineNumber":15,"author":{"gitId":"rismm"},"content":"}","lastModifiedDate":"2024-02-10"}],"authorContributionMap":{"rismm":15}},{"path":"src/main/java/joe/command/ByeCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"rismm"},"content":"package joe.command;","lastModifiedDate":"2024-02-26"},{"lineNumber":2,"author":{"gitId":"rismm"},"content":"","lastModifiedDate":"2024-02-26"},{"lineNumber":3,"author":{"gitId":"rismm"},"content":"import joe.task.TaskManager;","lastModifiedDate":"2024-02-26"},{"lineNumber":4,"author":{"gitId":"rismm"},"content":"import joe.util.Printer;","lastModifiedDate":"2024-02-26"},{"lineNumber":5,"author":{"gitId":"rismm"},"content":"","lastModifiedDate":"2024-02-26"},{"lineNumber":6,"author":{"gitId":"rismm"},"content":"/**","lastModifiedDate":"2024-02-27"},{"lineNumber":7,"author":{"gitId":"rismm"},"content":" * Handles the exiting of the program, implements the Command interface","lastModifiedDate":"2024-02-27"},{"lineNumber":8,"author":{"gitId":"rismm"},"content":" */","lastModifiedDate":"2024-02-27"},{"lineNumber":9,"author":{"gitId":"rismm"},"content":"public class ByeCommand implements Command {","lastModifiedDate":"2024-02-26"},{"lineNumber":10,"author":{"gitId":"rismm"},"content":"    protected String arguments;","lastModifiedDate":"2024-02-26"},{"lineNumber":11,"author":{"gitId":"rismm"},"content":"    protected boolean isValidExit;","lastModifiedDate":"2024-02-26"},{"lineNumber":12,"author":{"gitId":"rismm"},"content":"","lastModifiedDate":"2024-02-26"},{"lineNumber":13,"author":{"gitId":"rismm"},"content":"    public ByeCommand(String arguments) {","lastModifiedDate":"2024-02-26"},{"lineNumber":14,"author":{"gitId":"rismm"},"content":"        this.arguments \u003d arguments;","lastModifiedDate":"2024-02-26"},{"lineNumber":15,"author":{"gitId":"rismm"},"content":"        this.isValidExit \u003d arguments.isEmpty();","lastModifiedDate":"2024-02-26"},{"lineNumber":16,"author":{"gitId":"rismm"},"content":"    }","lastModifiedDate":"2024-02-26"},{"lineNumber":17,"author":{"gitId":"rismm"},"content":"","lastModifiedDate":"2024-02-27"},{"lineNumber":18,"author":{"gitId":"rismm"},"content":"    /**","lastModifiedDate":"2024-02-27"},{"lineNumber":19,"author":{"gitId":"rismm"},"content":"     * Checks whether the instance is a valid ByeCommand. Sets isValidExit to be false if it is not.","lastModifiedDate":"2024-02-27"},{"lineNumber":20,"author":{"gitId":"rismm"},"content":"     *","lastModifiedDate":"2024-02-27"},{"lineNumber":21,"author":{"gitId":"rismm"},"content":"     * @param taskManager placeholder parameter implemented from the method signature of the Command interface","lastModifiedDate":"2024-02-27"},{"lineNumber":22,"author":{"gitId":"rismm"},"content":"     */","lastModifiedDate":"2024-02-27"},{"lineNumber":23,"author":{"gitId":"rismm"},"content":"    @Override","lastModifiedDate":"2024-02-26"},{"lineNumber":24,"author":{"gitId":"rismm"},"content":"    public void executeCommand(TaskManager taskManager) {","lastModifiedDate":"2024-02-26"},{"lineNumber":25,"author":{"gitId":"rismm"},"content":"        if (!arguments.isEmpty()) {","lastModifiedDate":"2024-02-26"},{"lineNumber":26,"author":{"gitId":"rismm"},"content":"            Printer.printExitError();","lastModifiedDate":"2024-02-26"},{"lineNumber":27,"author":{"gitId":"rismm"},"content":"        }","lastModifiedDate":"2024-02-26"},{"lineNumber":28,"author":{"gitId":"rismm"},"content":"    }","lastModifiedDate":"2024-02-26"},{"lineNumber":29,"author":{"gitId":"rismm"},"content":"","lastModifiedDate":"2024-02-26"},{"lineNumber":30,"author":{"gitId":"rismm"},"content":"    /**","lastModifiedDate":"2024-02-27"},{"lineNumber":31,"author":{"gitId":"rismm"},"content":"     * Returns true if instance a valid exit command","lastModifiedDate":"2024-02-27"},{"lineNumber":32,"author":{"gitId":"rismm"},"content":"     *","lastModifiedDate":"2024-02-27"},{"lineNumber":33,"author":{"gitId":"rismm"},"content":"     * @return true if isValidExit is true","lastModifiedDate":"2024-02-27"},{"lineNumber":34,"author":{"gitId":"rismm"},"content":"     */","lastModifiedDate":"2024-02-27"},{"lineNumber":35,"author":{"gitId":"rismm"},"content":"    @Override","lastModifiedDate":"2024-02-26"},{"lineNumber":36,"author":{"gitId":"rismm"},"content":"    public boolean isExit() {","lastModifiedDate":"2024-02-26"},{"lineNumber":37,"author":{"gitId":"rismm"},"content":"        return isValidExit;","lastModifiedDate":"2024-02-26"},{"lineNumber":38,"author":{"gitId":"rismm"},"content":"    }","lastModifiedDate":"2024-02-26"},{"lineNumber":39,"author":{"gitId":"rismm"},"content":"}","lastModifiedDate":"2024-02-26"}],"authorContributionMap":{"rismm":39}},{"path":"src/main/java/joe/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"rismm"},"content":"package joe.command;","lastModifiedDate":"2024-02-26"},{"lineNumber":2,"author":{"gitId":"rismm"},"content":"","lastModifiedDate":"2024-02-26"},{"lineNumber":3,"author":{"gitId":"rismm"},"content":"import joe.task.TaskManager;","lastModifiedDate":"2024-02-26"},{"lineNumber":4,"author":{"gitId":"rismm"},"content":"","lastModifiedDate":"2024-02-26"},{"lineNumber":5,"author":{"gitId":"rismm"},"content":"/**","lastModifiedDate":"2024-02-27"},{"lineNumber":6,"author":{"gitId":"rismm"},"content":" * Command interface with two method signatures that all command type classes implement","lastModifiedDate":"2024-02-27"},{"lineNumber":7,"author":{"gitId":"rismm"},"content":" */","lastModifiedDate":"2024-02-27"},{"lineNumber":8,"author":{"gitId":"rismm"},"content":"public interface Command {","lastModifiedDate":"2024-02-26"},{"lineNumber":9,"author":{"gitId":"rismm"},"content":"    void executeCommand(TaskManager taskManager);","lastModifiedDate":"2024-02-26"},{"lineNumber":10,"author":{"gitId":"rismm"},"content":"","lastModifiedDate":"2024-02-27"},{"lineNumber":11,"author":{"gitId":"rismm"},"content":"    /**","lastModifiedDate":"2024-02-27"},{"lineNumber":12,"author":{"gitId":"rismm"},"content":"     * Returns a boolean indicating whether a command is an exit command","lastModifiedDate":"2024-02-27"},{"lineNumber":13,"author":{"gitId":"rismm"},"content":"     *","lastModifiedDate":"2024-02-27"},{"lineNumber":14,"author":{"gitId":"rismm"},"content":"     * @return true if ByeCommand, false otherwise","lastModifiedDate":"2024-02-27"},{"lineNumber":15,"author":{"gitId":"rismm"},"content":"     */","lastModifiedDate":"2024-02-27"},{"lineNumber":16,"author":{"gitId":"rismm"},"content":"    boolean isExit();","lastModifiedDate":"2024-02-26"},{"lineNumber":17,"author":{"gitId":"rismm"},"content":"}","lastModifiedDate":"2024-02-26"}],"authorContributionMap":{"rismm":17}},{"path":"src/main/java/joe/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"rismm"},"content":"package joe.command;","lastModifiedDate":"2024-02-26"},{"lineNumber":2,"author":{"gitId":"rismm"},"content":"","lastModifiedDate":"2024-02-26"},{"lineNumber":3,"author":{"gitId":"rismm"},"content":"import joe.JoeException;","lastModifiedDate":"2024-02-26"},{"lineNumber":4,"author":{"gitId":"rismm"},"content":"import joe.task.TaskManager;","lastModifiedDate":"2024-02-26"},{"lineNumber":5,"author":{"gitId":"rismm"},"content":"import joe.util.Printer;","lastModifiedDate":"2024-02-26"},{"lineNumber":6,"author":{"gitId":"rismm"},"content":"","lastModifiedDate":"2024-02-26"},{"lineNumber":7,"author":{"gitId":"rismm"},"content":"/**","lastModifiedDate":"2024-02-27"},{"lineNumber":8,"author":{"gitId":"rismm"},"content":" * Command indicating a delete command, implements the Command interface","lastModifiedDate":"2024-02-27"},{"lineNumber":9,"author":{"gitId":"rismm"},"content":" */","lastModifiedDate":"2024-02-27"},{"lineNumber":10,"author":{"gitId":"rismm"},"content":"public class DeleteCommand implements Command {","lastModifiedDate":"2024-02-26"},{"lineNumber":11,"author":{"gitId":"rismm"},"content":"    protected int taskNumber;","lastModifiedDate":"2024-02-26"},{"lineNumber":12,"author":{"gitId":"rismm"},"content":"","lastModifiedDate":"2024-02-26"},{"lineNumber":13,"author":{"gitId":"rismm"},"content":"    public DeleteCommand(int taskNumber) {","lastModifiedDate":"2024-02-26"},{"lineNumber":14,"author":{"gitId":"rismm"},"content":"        this.taskNumber \u003d taskNumber;","lastModifiedDate":"2024-02-26"},{"lineNumber":15,"author":{"gitId":"rismm"},"content":"    }","lastModifiedDate":"2024-02-26"},{"lineNumber":16,"author":{"gitId":"rismm"},"content":"","lastModifiedDate":"2024-02-26"},{"lineNumber":17,"author":{"gitId":"rismm"},"content":"    /**","lastModifiedDate":"2024-02-27"},{"lineNumber":18,"author":{"gitId":"rismm"},"content":"     * Executes the delete command and deletes a task accordingly","lastModifiedDate":"2024-02-27"},{"lineNumber":19,"author":{"gitId":"rismm"},"content":"     *","lastModifiedDate":"2024-02-27"},{"lineNumber":20,"author":{"gitId":"rismm"},"content":"     * @param taskManager the TaskManager instance used by Joe","lastModifiedDate":"2024-02-27"},{"lineNumber":21,"author":{"gitId":"rismm"},"content":"     */","lastModifiedDate":"2024-02-27"},{"lineNumber":22,"author":{"gitId":"rismm"},"content":"    @Override","lastModifiedDate":"2024-02-26"},{"lineNumber":23,"author":{"gitId":"rismm"},"content":"    public void executeCommand(TaskManager taskManager) {","lastModifiedDate":"2024-02-26"},{"lineNumber":24,"author":{"gitId":"rismm"},"content":"        try {","lastModifiedDate":"2024-02-26"},{"lineNumber":25,"author":{"gitId":"rismm"},"content":"            taskManager.deleteTask(taskNumber);","lastModifiedDate":"2024-02-26"},{"lineNumber":26,"author":{"gitId":"rismm"},"content":"        } catch (JoeException e) {","lastModifiedDate":"2024-02-26"},{"lineNumber":27,"author":{"gitId":"rismm"},"content":"            Printer.printDeleteError();","lastModifiedDate":"2024-02-26"},{"lineNumber":28,"author":{"gitId":"rismm"},"content":"        }","lastModifiedDate":"2024-02-26"},{"lineNumber":29,"author":{"gitId":"rismm"},"content":"    }","lastModifiedDate":"2024-02-26"},{"lineNumber":30,"author":{"gitId":"rismm"},"content":"","lastModifiedDate":"2024-02-26"},{"lineNumber":31,"author":{"gitId":"rismm"},"content":"    @Override","lastModifiedDate":"2024-02-26"},{"lineNumber":32,"author":{"gitId":"rismm"},"content":"    public boolean isExit() {","lastModifiedDate":"2024-02-26"},{"lineNumber":33,"author":{"gitId":"rismm"},"content":"        return false;","lastModifiedDate":"2024-02-26"},{"lineNumber":34,"author":{"gitId":"rismm"},"content":"    }","lastModifiedDate":"2024-02-26"},{"lineNumber":35,"author":{"gitId":"rismm"},"content":"}","lastModifiedDate":"2024-02-26"}],"authorContributionMap":{"rismm":35}},{"path":"src/main/java/joe/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"rismm"},"content":"package joe.command;","lastModifiedDate":"2024-02-27"},{"lineNumber":2,"author":{"gitId":"rismm"},"content":"","lastModifiedDate":"2024-02-27"},{"lineNumber":3,"author":{"gitId":"rismm"},"content":"import joe.JoeException;","lastModifiedDate":"2024-02-27"},{"lineNumber":4,"author":{"gitId":"rismm"},"content":"import joe.task.TaskManager;","lastModifiedDate":"2024-02-27"},{"lineNumber":5,"author":{"gitId":"rismm"},"content":"import joe.util.Printer;","lastModifiedDate":"2024-02-27"},{"lineNumber":6,"author":{"gitId":"rismm"},"content":"","lastModifiedDate":"2024-02-27"},{"lineNumber":7,"author":{"gitId":"rismm"},"content":"/**","lastModifiedDate":"2024-02-27"},{"lineNumber":8,"author":{"gitId":"rismm"},"content":" * Command indicating a find command, implements the Command interface","lastModifiedDate":"2024-02-27"},{"lineNumber":9,"author":{"gitId":"rismm"},"content":" */","lastModifiedDate":"2024-02-27"},{"lineNumber":10,"author":{"gitId":"rismm"},"content":"public class FindCommand implements Command {","lastModifiedDate":"2024-02-27"},{"lineNumber":11,"author":{"gitId":"rismm"},"content":"    protected String keyword;","lastModifiedDate":"2024-02-27"},{"lineNumber":12,"author":{"gitId":"rismm"},"content":"","lastModifiedDate":"2024-02-27"},{"lineNumber":13,"author":{"gitId":"rismm"},"content":"    public FindCommand (String keyword) {","lastModifiedDate":"2024-02-27"},{"lineNumber":14,"author":{"gitId":"rismm"},"content":"        this.keyword \u003d keyword;","lastModifiedDate":"2024-02-27"},{"lineNumber":15,"author":{"gitId":"rismm"},"content":"    }","lastModifiedDate":"2024-02-27"},{"lineNumber":16,"author":{"gitId":"rismm"},"content":"","lastModifiedDate":"2024-02-27"},{"lineNumber":17,"author":{"gitId":"rismm"},"content":"    /**","lastModifiedDate":"2024-02-27"},{"lineNumber":18,"author":{"gitId":"rismm"},"content":"     * Executes the find command according to the keyword","lastModifiedDate":"2024-02-27"},{"lineNumber":19,"author":{"gitId":"rismm"},"content":"     *","lastModifiedDate":"2024-02-27"},{"lineNumber":20,"author":{"gitId":"rismm"},"content":"     * @param taskManager the TaskManager instance used by Joe","lastModifiedDate":"2024-02-27"},{"lineNumber":21,"author":{"gitId":"rismm"},"content":"     */","lastModifiedDate":"2024-02-27"},{"lineNumber":22,"author":{"gitId":"rismm"},"content":"    @Override","lastModifiedDate":"2024-02-27"},{"lineNumber":23,"author":{"gitId":"rismm"},"content":"    public void executeCommand(TaskManager taskManager) {","lastModifiedDate":"2024-02-27"},{"lineNumber":24,"author":{"gitId":"rismm"},"content":"        try {","lastModifiedDate":"2024-02-27"},{"lineNumber":25,"author":{"gitId":"rismm"},"content":"            taskManager.listTasksWithKeyword(keyword);","lastModifiedDate":"2024-02-27"},{"lineNumber":26,"author":{"gitId":"rismm"},"content":"        } catch (JoeException e) {","lastModifiedDate":"2024-02-27"},{"lineNumber":27,"author":{"gitId":"rismm"},"content":"            Printer.printFindError();","lastModifiedDate":"2024-02-27"},{"lineNumber":28,"author":{"gitId":"rismm"},"content":"        }","lastModifiedDate":"2024-02-27"},{"lineNumber":29,"author":{"gitId":"rismm"},"content":"    }","lastModifiedDate":"2024-02-27"},{"lineNumber":30,"author":{"gitId":"rismm"},"content":"","lastModifiedDate":"2024-02-27"},{"lineNumber":31,"author":{"gitId":"rismm"},"content":"    @Override","lastModifiedDate":"2024-02-27"},{"lineNumber":32,"author":{"gitId":"rismm"},"content":"    public boolean isExit() {","lastModifiedDate":"2024-02-27"},{"lineNumber":33,"author":{"gitId":"rismm"},"content":"        return false;","lastModifiedDate":"2024-02-27"},{"lineNumber":34,"author":{"gitId":"rismm"},"content":"    }","lastModifiedDate":"2024-02-27"},{"lineNumber":35,"author":{"gitId":"rismm"},"content":"}","lastModifiedDate":"2024-02-27"}],"authorContributionMap":{"rismm":35}},{"path":"src/main/java/joe/command/InvalidCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"rismm"},"content":"package joe.command;","lastModifiedDate":"2024-02-26"},{"lineNumber":2,"author":{"gitId":"rismm"},"content":"","lastModifiedDate":"2024-02-26"},{"lineNumber":3,"author":{"gitId":"rismm"},"content":"import joe.task.TaskManager;","lastModifiedDate":"2024-02-26"},{"lineNumber":4,"author":{"gitId":"rismm"},"content":"import joe.util.Printer;","lastModifiedDate":"2024-02-26"},{"lineNumber":5,"author":{"gitId":"rismm"},"content":"","lastModifiedDate":"2024-02-26"},{"lineNumber":6,"author":{"gitId":"rismm"},"content":"/**","lastModifiedDate":"2024-02-27"},{"lineNumber":7,"author":{"gitId":"rismm"},"content":" * An invalid command, implements the Command interface","lastModifiedDate":"2024-02-27"},{"lineNumber":8,"author":{"gitId":"rismm"},"content":" */","lastModifiedDate":"2024-02-27"},{"lineNumber":9,"author":{"gitId":"rismm"},"content":"public class InvalidCommand implements Command {","lastModifiedDate":"2024-02-26"},{"lineNumber":10,"author":{"gitId":"rismm"},"content":"    /**","lastModifiedDate":"2024-02-27"},{"lineNumber":11,"author":{"gitId":"rismm"},"content":"     * Prints the defaults error message","lastModifiedDate":"2024-02-27"},{"lineNumber":12,"author":{"gitId":"rismm"},"content":"     * @param taskManager placeholder parameter implemented from the method signature of the Command interface","lastModifiedDate":"2024-02-27"},{"lineNumber":13,"author":{"gitId":"rismm"},"content":"     */","lastModifiedDate":"2024-02-27"},{"lineNumber":14,"author":{"gitId":"rismm"},"content":"    @Override","lastModifiedDate":"2024-02-26"},{"lineNumber":15,"author":{"gitId":"rismm"},"content":"    public void executeCommand(TaskManager taskManager) {","lastModifiedDate":"2024-02-26"},{"lineNumber":16,"author":{"gitId":"rismm"},"content":"        Printer.printDefaultError();","lastModifiedDate":"2024-02-26"},{"lineNumber":17,"author":{"gitId":"rismm"},"content":"    }","lastModifiedDate":"2024-02-26"},{"lineNumber":18,"author":{"gitId":"rismm"},"content":"","lastModifiedDate":"2024-02-26"},{"lineNumber":19,"author":{"gitId":"rismm"},"content":"    @Override","lastModifiedDate":"2024-02-26"},{"lineNumber":20,"author":{"gitId":"rismm"},"content":"    public boolean isExit() {","lastModifiedDate":"2024-02-26"},{"lineNumber":21,"author":{"gitId":"rismm"},"content":"        return false;","lastModifiedDate":"2024-02-26"},{"lineNumber":22,"author":{"gitId":"rismm"},"content":"    }","lastModifiedDate":"2024-02-26"},{"lineNumber":23,"author":{"gitId":"rismm"},"content":"}","lastModifiedDate":"2024-02-26"}],"authorContributionMap":{"rismm":23}},{"path":"src/main/java/joe/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"rismm"},"content":"package joe.command;","lastModifiedDate":"2024-02-26"},{"lineNumber":2,"author":{"gitId":"rismm"},"content":"","lastModifiedDate":"2024-02-26"},{"lineNumber":3,"author":{"gitId":"rismm"},"content":"import joe.task.TaskManager;","lastModifiedDate":"2024-02-26"},{"lineNumber":4,"author":{"gitId":"rismm"},"content":"import joe.util.Printer;","lastModifiedDate":"2024-02-26"},{"lineNumber":5,"author":{"gitId":"rismm"},"content":"","lastModifiedDate":"2024-02-26"},{"lineNumber":6,"author":{"gitId":"rismm"},"content":"/**","lastModifiedDate":"2024-02-27"},{"lineNumber":7,"author":{"gitId":"rismm"},"content":" * Command indicating a list command, implements the Command interface","lastModifiedDate":"2024-02-27"},{"lineNumber":8,"author":{"gitId":"rismm"},"content":" */","lastModifiedDate":"2024-02-27"},{"lineNumber":9,"author":{"gitId":"rismm"},"content":"public class ListCommand implements Command {","lastModifiedDate":"2024-02-26"},{"lineNumber":10,"author":{"gitId":"rismm"},"content":"    protected String arguments;","lastModifiedDate":"2024-02-26"},{"lineNumber":11,"author":{"gitId":"rismm"},"content":"","lastModifiedDate":"2024-02-26"},{"lineNumber":12,"author":{"gitId":"rismm"},"content":"    public ListCommand(String arguments) {","lastModifiedDate":"2024-02-26"},{"lineNumber":13,"author":{"gitId":"rismm"},"content":"        this.arguments \u003d arguments;","lastModifiedDate":"2024-02-26"},{"lineNumber":14,"author":{"gitId":"rismm"},"content":"    }","lastModifiedDate":"2024-02-26"},{"lineNumber":15,"author":{"gitId":"rismm"},"content":"","lastModifiedDate":"2024-02-26"},{"lineNumber":16,"author":{"gitId":"rismm"},"content":"    /**","lastModifiedDate":"2024-02-27"},{"lineNumber":17,"author":{"gitId":"rismm"},"content":"     * Executes the list command and lists all tasks accordingly","lastModifiedDate":"2024-02-27"},{"lineNumber":18,"author":{"gitId":"rismm"},"content":"     *","lastModifiedDate":"2024-02-27"},{"lineNumber":19,"author":{"gitId":"rismm"},"content":"     * @param taskManager the TaskManager instance used by Joe","lastModifiedDate":"2024-02-27"},{"lineNumber":20,"author":{"gitId":"rismm"},"content":"     */","lastModifiedDate":"2024-02-27"},{"lineNumber":21,"author":{"gitId":"rismm"},"content":"    @Override","lastModifiedDate":"2024-02-26"},{"lineNumber":22,"author":{"gitId":"rismm"},"content":"    public void executeCommand(TaskManager taskManager) {","lastModifiedDate":"2024-02-26"},{"lineNumber":23,"author":{"gitId":"rismm"},"content":"        if (!arguments.isEmpty()) {","lastModifiedDate":"2024-02-26"},{"lineNumber":24,"author":{"gitId":"rismm"},"content":"            Printer.printListError();","lastModifiedDate":"2024-02-26"},{"lineNumber":25,"author":{"gitId":"rismm"},"content":"            return;","lastModifiedDate":"2024-02-26"},{"lineNumber":26,"author":{"gitId":"rismm"},"content":"        }","lastModifiedDate":"2024-02-26"},{"lineNumber":27,"author":{"gitId":"rismm"},"content":"        taskManager.listTasks();","lastModifiedDate":"2024-02-26"},{"lineNumber":28,"author":{"gitId":"rismm"},"content":"    }","lastModifiedDate":"2024-02-26"},{"lineNumber":29,"author":{"gitId":"rismm"},"content":"","lastModifiedDate":"2024-02-26"},{"lineNumber":30,"author":{"gitId":"rismm"},"content":"    @Override","lastModifiedDate":"2024-02-26"},{"lineNumber":31,"author":{"gitId":"rismm"},"content":"    public boolean isExit() {","lastModifiedDate":"2024-02-26"},{"lineNumber":32,"author":{"gitId":"rismm"},"content":"        return false;","lastModifiedDate":"2024-02-26"},{"lineNumber":33,"author":{"gitId":"rismm"},"content":"    }","lastModifiedDate":"2024-02-26"},{"lineNumber":34,"author":{"gitId":"rismm"},"content":"}","lastModifiedDate":"2024-02-26"}],"authorContributionMap":{"rismm":34}},{"path":"src/main/java/joe/command/NewTaskCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"rismm"},"content":"package joe.command;","lastModifiedDate":"2024-02-26"},{"lineNumber":2,"author":{"gitId":"rismm"},"content":"","lastModifiedDate":"2024-02-26"},{"lineNumber":3,"author":{"gitId":"rismm"},"content":"import joe.JoeException;","lastModifiedDate":"2024-02-26"},{"lineNumber":4,"author":{"gitId":"rismm"},"content":"import joe.task.TaskManager;","lastModifiedDate":"2024-02-26"},{"lineNumber":5,"author":{"gitId":"rismm"},"content":"import joe.task.TaskType;","lastModifiedDate":"2024-02-26"},{"lineNumber":6,"author":{"gitId":"rismm"},"content":"import joe.util.Printer;","lastModifiedDate":"2024-02-26"},{"lineNumber":7,"author":{"gitId":"rismm"},"content":"","lastModifiedDate":"2024-02-26"},{"lineNumber":8,"author":{"gitId":"rismm"},"content":"/**","lastModifiedDate":"2024-02-27"},{"lineNumber":9,"author":{"gitId":"rismm"},"content":" * Command indicating a new task command, implements the Command interface.","lastModifiedDate":"2024-02-27"},{"lineNumber":10,"author":{"gitId":"rismm"},"content":" * New tasks include todo, deadline and event","lastModifiedDate":"2024-02-27"},{"lineNumber":11,"author":{"gitId":"rismm"},"content":" */","lastModifiedDate":"2024-02-27"},{"lineNumber":12,"author":{"gitId":"rismm"},"content":"public class NewTaskCommand implements Command {","lastModifiedDate":"2024-02-26"},{"lineNumber":13,"author":{"gitId":"rismm"},"content":"    protected String arguments;","lastModifiedDate":"2024-02-26"},{"lineNumber":14,"author":{"gitId":"rismm"},"content":"    protected TaskType type;","lastModifiedDate":"2024-02-26"},{"lineNumber":15,"author":{"gitId":"rismm"},"content":"","lastModifiedDate":"2024-02-26"},{"lineNumber":16,"author":{"gitId":"rismm"},"content":"    public NewTaskCommand(String message, TaskType type) {","lastModifiedDate":"2024-02-26"},{"lineNumber":17,"author":{"gitId":"rismm"},"content":"        this.type \u003d type;","lastModifiedDate":"2024-02-26"},{"lineNumber":18,"author":{"gitId":"rismm"},"content":"        this.arguments \u003d message;","lastModifiedDate":"2024-02-26"},{"lineNumber":19,"author":{"gitId":"rismm"},"content":"    }","lastModifiedDate":"2024-02-26"},{"lineNumber":20,"author":{"gitId":"rismm"},"content":"","lastModifiedDate":"2024-02-26"},{"lineNumber":21,"author":{"gitId":"rismm"},"content":"    /**","lastModifiedDate":"2024-02-27"},{"lineNumber":22,"author":{"gitId":"rismm"},"content":"     * Executes the add command according to the instance\u0027s TaskType","lastModifiedDate":"2024-02-27"},{"lineNumber":23,"author":{"gitId":"rismm"},"content":"     *","lastModifiedDate":"2024-02-27"},{"lineNumber":24,"author":{"gitId":"rismm"},"content":"     * @param taskManager the TaskManager instance used by Joe","lastModifiedDate":"2024-02-27"},{"lineNumber":25,"author":{"gitId":"rismm"},"content":"     */","lastModifiedDate":"2024-02-27"},{"lineNumber":26,"author":{"gitId":"rismm"},"content":"    @Override","lastModifiedDate":"2024-02-26"},{"lineNumber":27,"author":{"gitId":"rismm"},"content":"    public void executeCommand(TaskManager taskManager) {","lastModifiedDate":"2024-02-26"},{"lineNumber":28,"author":{"gitId":"rismm"},"content":"        try {","lastModifiedDate":"2024-02-26"},{"lineNumber":29,"author":{"gitId":"rismm"},"content":"            taskManager.addTask(type, arguments);","lastModifiedDate":"2024-02-26"},{"lineNumber":30,"author":{"gitId":"rismm"},"content":"        } catch (JoeException e) {","lastModifiedDate":"2024-02-26"},{"lineNumber":31,"author":{"gitId":"rismm"},"content":"            switch (type) {","lastModifiedDate":"2024-02-26"},{"lineNumber":32,"author":{"gitId":"rismm"},"content":"            case TODO:","lastModifiedDate":"2024-02-26"},{"lineNumber":33,"author":{"gitId":"rismm"},"content":"                Printer.printToDoEmptyError();","lastModifiedDate":"2024-02-26"},{"lineNumber":34,"author":{"gitId":"rismm"},"content":"                break;","lastModifiedDate":"2024-02-26"},{"lineNumber":35,"author":{"gitId":"rismm"},"content":"            case DEADLINE:","lastModifiedDate":"2024-02-26"},{"lineNumber":36,"author":{"gitId":"rismm"},"content":"                Printer.printDeadlineInputError();","lastModifiedDate":"2024-02-26"},{"lineNumber":37,"author":{"gitId":"rismm"},"content":"                break;","lastModifiedDate":"2024-02-26"},{"lineNumber":38,"author":{"gitId":"rismm"},"content":"            case EVENT:","lastModifiedDate":"2024-02-26"},{"lineNumber":39,"author":{"gitId":"rismm"},"content":"                Printer.printEventInputError();","lastModifiedDate":"2024-02-26"},{"lineNumber":40,"author":{"gitId":"rismm"},"content":"                break;","lastModifiedDate":"2024-02-26"},{"lineNumber":41,"author":{"gitId":"rismm"},"content":"            }","lastModifiedDate":"2024-02-26"},{"lineNumber":42,"author":{"gitId":"rismm"},"content":"        }","lastModifiedDate":"2024-02-26"},{"lineNumber":43,"author":{"gitId":"rismm"},"content":"    }","lastModifiedDate":"2024-02-26"},{"lineNumber":44,"author":{"gitId":"rismm"},"content":"","lastModifiedDate":"2024-02-26"},{"lineNumber":45,"author":{"gitId":"rismm"},"content":"    @Override","lastModifiedDate":"2024-02-26"},{"lineNumber":46,"author":{"gitId":"rismm"},"content":"    public boolean isExit() {","lastModifiedDate":"2024-02-26"},{"lineNumber":47,"author":{"gitId":"rismm"},"content":"        return false;","lastModifiedDate":"2024-02-26"},{"lineNumber":48,"author":{"gitId":"rismm"},"content":"    }","lastModifiedDate":"2024-02-26"},{"lineNumber":49,"author":{"gitId":"rismm"},"content":"}","lastModifiedDate":"2024-02-26"}],"authorContributionMap":{"rismm":49}},{"path":"src/main/java/joe/command/ToggleMarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"rismm"},"content":"package joe.command;","lastModifiedDate":"2024-02-26"},{"lineNumber":2,"author":{"gitId":"rismm"},"content":"","lastModifiedDate":"2024-02-26"},{"lineNumber":3,"author":{"gitId":"rismm"},"content":"import joe.JoeException;","lastModifiedDate":"2024-02-26"},{"lineNumber":4,"author":{"gitId":"rismm"},"content":"import joe.task.TaskManager;","lastModifiedDate":"2024-02-26"},{"lineNumber":5,"author":{"gitId":"rismm"},"content":"import joe.util.Printer;","lastModifiedDate":"2024-02-26"},{"lineNumber":6,"author":{"gitId":"rismm"},"content":"","lastModifiedDate":"2024-02-26"},{"lineNumber":7,"author":{"gitId":"rismm"},"content":"/**","lastModifiedDate":"2024-02-27"},{"lineNumber":8,"author":{"gitId":"rismm"},"content":" * Command indicating a mark or unmark command, implements the Command interface","lastModifiedDate":"2024-02-27"},{"lineNumber":9,"author":{"gitId":"rismm"},"content":" */","lastModifiedDate":"2024-02-27"},{"lineNumber":10,"author":{"gitId":"rismm"},"content":"public class ToggleMarkCommand implements Command {","lastModifiedDate":"2024-02-26"},{"lineNumber":11,"author":{"gitId":"rismm"},"content":"    protected int taskNumber;","lastModifiedDate":"2024-02-26"},{"lineNumber":12,"author":{"gitId":"rismm"},"content":"    protected boolean isMark;","lastModifiedDate":"2024-02-26"},{"lineNumber":13,"author":{"gitId":"rismm"},"content":"","lastModifiedDate":"2024-02-26"},{"lineNumber":14,"author":{"gitId":"rismm"},"content":"","lastModifiedDate":"2024-02-27"},{"lineNumber":15,"author":{"gitId":"rismm"},"content":"    public ToggleMarkCommand(int taskNumber, boolean isMark) {","lastModifiedDate":"2024-02-26"},{"lineNumber":16,"author":{"gitId":"rismm"},"content":"        this.taskNumber \u003d taskNumber;","lastModifiedDate":"2024-02-26"},{"lineNumber":17,"author":{"gitId":"rismm"},"content":"        this.isMark \u003d isMark;","lastModifiedDate":"2024-02-26"},{"lineNumber":18,"author":{"gitId":"rismm"},"content":"    }","lastModifiedDate":"2024-02-26"},{"lineNumber":19,"author":{"gitId":"rismm"},"content":"","lastModifiedDate":"2024-02-26"},{"lineNumber":20,"author":{"gitId":"rismm"},"content":"    /**","lastModifiedDate":"2024-02-27"},{"lineNumber":21,"author":{"gitId":"rismm"},"content":"     * Executes the mark or unmark command according to isMark of the instance.","lastModifiedDate":"2024-02-27"},{"lineNumber":22,"author":{"gitId":"rismm"},"content":"     * Executes mark if isMark is true, unmark otherwise","lastModifiedDate":"2024-02-27"},{"lineNumber":23,"author":{"gitId":"rismm"},"content":"     *","lastModifiedDate":"2024-02-27"},{"lineNumber":24,"author":{"gitId":"rismm"},"content":"     * @param taskManager the TaskManager instance used by Joe","lastModifiedDate":"2024-02-27"},{"lineNumber":25,"author":{"gitId":"rismm"},"content":"     */","lastModifiedDate":"2024-02-27"},{"lineNumber":26,"author":{"gitId":"rismm"},"content":"    @Override","lastModifiedDate":"2024-02-26"},{"lineNumber":27,"author":{"gitId":"rismm"},"content":"    public void executeCommand(TaskManager taskManager) {","lastModifiedDate":"2024-02-26"},{"lineNumber":28,"author":{"gitId":"rismm"},"content":"        try {","lastModifiedDate":"2024-02-26"},{"lineNumber":29,"author":{"gitId":"rismm"},"content":"            taskManager.toggleTaskMarkedStatus(taskNumber, isMark);","lastModifiedDate":"2024-02-26"},{"lineNumber":30,"author":{"gitId":"rismm"},"content":"        } catch (NumberFormatException | JoeException e) {","lastModifiedDate":"2024-02-26"},{"lineNumber":31,"author":{"gitId":"rismm"},"content":"            Printer.printInvalidMarkError();","lastModifiedDate":"2024-02-26"},{"lineNumber":32,"author":{"gitId":"rismm"},"content":"        }","lastModifiedDate":"2024-02-26"},{"lineNumber":33,"author":{"gitId":"rismm"},"content":"    }","lastModifiedDate":"2024-02-26"},{"lineNumber":34,"author":{"gitId":"rismm"},"content":"","lastModifiedDate":"2024-02-26"},{"lineNumber":35,"author":{"gitId":"rismm"},"content":"    @Override","lastModifiedDate":"2024-02-26"},{"lineNumber":36,"author":{"gitId":"rismm"},"content":"    public boolean isExit() {","lastModifiedDate":"2024-02-26"},{"lineNumber":37,"author":{"gitId":"rismm"},"content":"        return false;","lastModifiedDate":"2024-02-26"},{"lineNumber":38,"author":{"gitId":"rismm"},"content":"    }","lastModifiedDate":"2024-02-26"},{"lineNumber":39,"author":{"gitId":"rismm"},"content":"}","lastModifiedDate":"2024-02-26"}],"authorContributionMap":{"rismm":39}},{"path":"src/main/java/joe/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"rismm"},"content":"package joe.task;","lastModifiedDate":"2024-02-10"},{"lineNumber":2,"author":{"gitId":"rismm"},"content":"","lastModifiedDate":"2024-02-10"},{"lineNumber":3,"author":{"gitId":"rismm"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2024-02-26"},{"lineNumber":4,"author":{"gitId":"rismm"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2024-02-26"},{"lineNumber":5,"author":{"gitId":"rismm"},"content":"","lastModifiedDate":"2024-02-26"},{"lineNumber":6,"author":{"gitId":"rismm"},"content":"/**","lastModifiedDate":"2024-02-27"},{"lineNumber":7,"author":{"gitId":"rismm"},"content":" * Deadline subclass that inherits from Task","lastModifiedDate":"2024-02-27"},{"lineNumber":8,"author":{"gitId":"rismm"},"content":" */","lastModifiedDate":"2024-02-27"},{"lineNumber":9,"author":{"gitId":"rismm"},"content":"public class Deadline extends Task {","lastModifiedDate":"2024-02-05"},{"lineNumber":10,"author":{"gitId":"rismm"},"content":"    protected static final String DEADLINE_SYMBOL \u003d \"[D]\";","lastModifiedDate":"2024-02-05"},{"lineNumber":11,"author":{"gitId":"rismm"},"content":"    protected LocalDateTime finishBy;","lastModifiedDate":"2024-02-26"},{"lineNumber":12,"author":{"gitId":"rismm"},"content":"    protected static final DateTimeFormatter FORMATTER \u003d DateTimeFormatter.ofPattern(\"d MMM yyyy hh:mma\");","lastModifiedDate":"2024-02-26"},{"lineNumber":13,"author":{"gitId":"rismm"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":14,"author":{"gitId":"rismm"},"content":"    @Override","lastModifiedDate":"2024-02-19"},{"lineNumber":15,"author":{"gitId":"rismm"},"content":"    public TaskType getTaskType() {","lastModifiedDate":"2024-02-19"},{"lineNumber":16,"author":{"gitId":"rismm"},"content":"        return TaskType.DEADLINE;","lastModifiedDate":"2024-02-19"},{"lineNumber":17,"author":{"gitId":"rismm"},"content":"    }","lastModifiedDate":"2024-02-19"},{"lineNumber":18,"author":{"gitId":"rismm"},"content":"","lastModifiedDate":"2024-02-19"},{"lineNumber":19,"author":{"gitId":"rismm"},"content":"    public Deadline(String taskName, LocalDateTime finishBy) {","lastModifiedDate":"2024-02-26"},{"lineNumber":20,"author":{"gitId":"rismm"},"content":"        super(taskName);","lastModifiedDate":"2024-02-05"},{"lineNumber":21,"author":{"gitId":"rismm"},"content":"        this.finishBy \u003d finishBy;","lastModifiedDate":"2024-02-05"},{"lineNumber":22,"author":{"gitId":"rismm"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":23,"author":{"gitId":"rismm"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":24,"author":{"gitId":"rismm"},"content":"    @Override","lastModifiedDate":"2024-02-05"},{"lineNumber":25,"author":{"gitId":"rismm"},"content":"    public String getTaskStatus() {","lastModifiedDate":"2024-02-05"},{"lineNumber":26,"author":{"gitId":"rismm"},"content":"        return DEADLINE_SYMBOL + super.getTaskStatus() + \" (by: \" + finishBy.format(FORMATTER) + \")\";","lastModifiedDate":"2024-02-26"},{"lineNumber":27,"author":{"gitId":"rismm"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":28,"author":{"gitId":"rismm"},"content":"}","lastModifiedDate":"2024-02-05"}],"authorContributionMap":{"rismm":28}},{"path":"src/main/java/joe/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"rismm"},"content":"package joe.task;","lastModifiedDate":"2024-02-10"},{"lineNumber":2,"author":{"gitId":"rismm"},"content":"","lastModifiedDate":"2024-02-10"},{"lineNumber":3,"author":{"gitId":"rismm"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2024-02-27"},{"lineNumber":4,"author":{"gitId":"rismm"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2024-02-27"},{"lineNumber":5,"author":{"gitId":"rismm"},"content":"","lastModifiedDate":"2024-02-27"},{"lineNumber":6,"author":{"gitId":"rismm"},"content":"/**","lastModifiedDate":"2024-02-27"},{"lineNumber":7,"author":{"gitId":"rismm"},"content":" * Event subclass that inherits from Task","lastModifiedDate":"2024-02-27"},{"lineNumber":8,"author":{"gitId":"rismm"},"content":" */","lastModifiedDate":"2024-02-27"},{"lineNumber":9,"author":{"gitId":"rismm"},"content":"public class Event extends Task {","lastModifiedDate":"2024-02-05"},{"lineNumber":10,"author":{"gitId":"rismm"},"content":"    protected static final String EVENT_SYMBOL \u003d \"[E]\";","lastModifiedDate":"2024-02-05"},{"lineNumber":11,"author":{"gitId":"rismm"},"content":"    protected LocalDateTime startDate;","lastModifiedDate":"2024-02-27"},{"lineNumber":12,"author":{"gitId":"rismm"},"content":"    protected LocalDateTime endDate;","lastModifiedDate":"2024-02-27"},{"lineNumber":13,"author":{"gitId":"rismm"},"content":"    protected static final DateTimeFormatter FORMATTER \u003d DateTimeFormatter.ofPattern(\"d MMM yyyy hh:mma\");","lastModifiedDate":"2024-02-27"},{"lineNumber":14,"author":{"gitId":"rismm"},"content":"","lastModifiedDate":"2024-02-27"},{"lineNumber":15,"author":{"gitId":"rismm"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":16,"author":{"gitId":"rismm"},"content":"    @Override","lastModifiedDate":"2024-02-19"},{"lineNumber":17,"author":{"gitId":"rismm"},"content":"    public TaskType getTaskType() {","lastModifiedDate":"2024-02-19"},{"lineNumber":18,"author":{"gitId":"rismm"},"content":"        return TaskType.EVENT;","lastModifiedDate":"2024-02-19"},{"lineNumber":19,"author":{"gitId":"rismm"},"content":"    }","lastModifiedDate":"2024-02-19"},{"lineNumber":20,"author":{"gitId":"rismm"},"content":"","lastModifiedDate":"2024-02-19"},{"lineNumber":21,"author":{"gitId":"rismm"},"content":"    public Event(String taskName, LocalDateTime startDate, LocalDateTime endDate) {","lastModifiedDate":"2024-02-27"},{"lineNumber":22,"author":{"gitId":"rismm"},"content":"        super(taskName);","lastModifiedDate":"2024-02-05"},{"lineNumber":23,"author":{"gitId":"rismm"},"content":"        this.startDate \u003d startDate;","lastModifiedDate":"2024-02-05"},{"lineNumber":24,"author":{"gitId":"rismm"},"content":"        this.endDate \u003d endDate;","lastModifiedDate":"2024-02-05"},{"lineNumber":25,"author":{"gitId":"rismm"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":26,"author":{"gitId":"rismm"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":27,"author":{"gitId":"rismm"},"content":"    @Override","lastModifiedDate":"2024-02-05"},{"lineNumber":28,"author":{"gitId":"rismm"},"content":"    public String getTaskStatus() {","lastModifiedDate":"2024-02-05"},{"lineNumber":29,"author":{"gitId":"rismm"},"content":"        return EVENT_SYMBOL + super.getTaskStatus()","lastModifiedDate":"2024-02-27"},{"lineNumber":30,"author":{"gitId":"rismm"},"content":"                + \" (from: \" + startDate.format(FORMATTER) + \" to: \" + endDate.format(FORMATTER) + \")\";","lastModifiedDate":"2024-02-27"},{"lineNumber":31,"author":{"gitId":"rismm"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":32,"author":{"gitId":"rismm"},"content":"}","lastModifiedDate":"2024-02-05"}],"authorContributionMap":{"rismm":32}},{"path":"src/main/java/joe/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"rismm"},"content":"package joe.task;","lastModifiedDate":"2024-02-10"},{"lineNumber":2,"author":{"gitId":"rismm"},"content":"","lastModifiedDate":"2024-02-10"},{"lineNumber":3,"author":{"gitId":"rismm"},"content":"public abstract class Task {","lastModifiedDate":"2024-02-10"},{"lineNumber":4,"author":{"gitId":"rismm"},"content":"    protected static final String MARKED_STATUS \u003d \"[X]\";","lastModifiedDate":"2024-02-05"},{"lineNumber":5,"author":{"gitId":"rismm"},"content":"    protected static final String UNMARKED_STATUS \u003d \"[ ]\";","lastModifiedDate":"2024-02-05"},{"lineNumber":6,"author":{"gitId":"rismm"},"content":"    public abstract TaskType getTaskType();","lastModifiedDate":"2024-02-19"},{"lineNumber":7,"author":{"gitId":"rismm"},"content":"    protected String taskName;","lastModifiedDate":"2024-01-27"},{"lineNumber":8,"author":{"gitId":"rismm"},"content":"    protected boolean isDone;","lastModifiedDate":"2024-01-28"},{"lineNumber":9,"author":{"gitId":"rismm"},"content":"","lastModifiedDate":"2024-01-27"},{"lineNumber":10,"author":{"gitId":"rismm"},"content":"    public Task(String taskName) {","lastModifiedDate":"2024-01-27"},{"lineNumber":11,"author":{"gitId":"rismm"},"content":"        this.taskName \u003d taskName;","lastModifiedDate":"2024-01-27"},{"lineNumber":12,"author":{"gitId":"rismm"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2024-01-28"},{"lineNumber":13,"author":{"gitId":"rismm"},"content":"    }","lastModifiedDate":"2024-01-27"},{"lineNumber":14,"author":{"gitId":"rismm"},"content":"","lastModifiedDate":"2024-01-27"},{"lineNumber":15,"author":{"gitId":"rismm"},"content":"    /**","lastModifiedDate":"2024-02-27"},{"lineNumber":16,"author":{"gitId":"rismm"},"content":"     * Returns a full description of the task","lastModifiedDate":"2024-02-27"},{"lineNumber":17,"author":{"gitId":"rismm"},"content":"     *","lastModifiedDate":"2024-02-27"},{"lineNumber":18,"author":{"gitId":"rismm"},"content":"     * @return a String of the task description","lastModifiedDate":"2024-02-27"},{"lineNumber":19,"author":{"gitId":"rismm"},"content":"     */","lastModifiedDate":"2024-02-27"},{"lineNumber":20,"author":{"gitId":"rismm"},"content":"    public String getTaskStatus() {","lastModifiedDate":"2024-01-28"},{"lineNumber":21,"author":{"gitId":"rismm"},"content":"        String statusIcon \u003d isDone ? MARKED_STATUS : UNMARKED_STATUS;","lastModifiedDate":"2024-02-05"},{"lineNumber":22,"author":{"gitId":"rismm"},"content":"        return statusIcon + \" \" + taskName;","lastModifiedDate":"2024-01-28"},{"lineNumber":23,"author":{"gitId":"rismm"},"content":"    }","lastModifiedDate":"2024-01-28"},{"lineNumber":24,"author":{"gitId":"rismm"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":25,"author":{"gitId":"rismm"},"content":"    /**","lastModifiedDate":"2024-02-27"},{"lineNumber":26,"author":{"gitId":"rismm"},"content":"     * Returns the task name","lastModifiedDate":"2024-02-27"},{"lineNumber":27,"author":{"gitId":"rismm"},"content":"     *","lastModifiedDate":"2024-02-27"},{"lineNumber":28,"author":{"gitId":"rismm"},"content":"     * @return a String of the task name","lastModifiedDate":"2024-02-27"},{"lineNumber":29,"author":{"gitId":"rismm"},"content":"     */","lastModifiedDate":"2024-02-27"},{"lineNumber":30,"author":{"gitId":"rismm"},"content":"    public String getTaskName() {","lastModifiedDate":"2024-02-27"},{"lineNumber":31,"author":{"gitId":"rismm"},"content":"        return taskName;","lastModifiedDate":"2024-02-27"},{"lineNumber":32,"author":{"gitId":"rismm"},"content":"    }","lastModifiedDate":"2024-02-27"},{"lineNumber":33,"author":{"gitId":"rismm"},"content":"","lastModifiedDate":"2024-02-27"},{"lineNumber":34,"author":{"gitId":"rismm"},"content":"    /**","lastModifiedDate":"2024-02-27"},{"lineNumber":35,"author":{"gitId":"rismm"},"content":"     * Sets the boolean parameter isDone of the task accordingly","lastModifiedDate":"2024-02-27"},{"lineNumber":36,"author":{"gitId":"rismm"},"content":"     *","lastModifiedDate":"2024-02-27"},{"lineNumber":37,"author":{"gitId":"rismm"},"content":"     * @param isDone a boolean to set isDone of the task","lastModifiedDate":"2024-02-27"},{"lineNumber":38,"author":{"gitId":"rismm"},"content":"     */","lastModifiedDate":"2024-02-27"},{"lineNumber":39,"author":{"gitId":"rismm"},"content":"    public void setDone(boolean isDone) {","lastModifiedDate":"2024-02-05"},{"lineNumber":40,"author":{"gitId":"rismm"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2024-02-05"},{"lineNumber":41,"author":{"gitId":"rismm"},"content":"    }","lastModifiedDate":"2024-01-27"},{"lineNumber":42,"author":{"gitId":"rismm"},"content":"}","lastModifiedDate":"2024-01-27"}],"authorContributionMap":{"rismm":42}},{"path":"src/main/java/joe/task/TaskManager.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"rismm"},"content":"package joe.task;","lastModifiedDate":"2024-02-10"},{"lineNumber":2,"author":{"gitId":"rismm"},"content":"","lastModifiedDate":"2024-02-10"},{"lineNumber":3,"author":{"gitId":"rismm"},"content":"import joe.JoeException;","lastModifiedDate":"2024-02-10"},{"lineNumber":4,"author":{"gitId":"rismm"},"content":"import joe.util.FileManager;","lastModifiedDate":"2024-02-20"},{"lineNumber":5,"author":{"gitId":"rismm"},"content":"import joe.util.InputParser;","lastModifiedDate":"2024-02-20"},{"lineNumber":6,"author":{"gitId":"rismm"},"content":"import joe.util.Printer;","lastModifiedDate":"2024-02-10"},{"lineNumber":7,"author":{"gitId":"rismm"},"content":"","lastModifiedDate":"2024-02-20"},{"lineNumber":8,"author":{"gitId":"rismm"},"content":"import java.io.IOException;","lastModifiedDate":"2024-02-20"},{"lineNumber":9,"author":{"gitId":"rismm"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2024-02-26"},{"lineNumber":10,"author":{"gitId":"rismm"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-02-17"},{"lineNumber":11,"author":{"gitId":"rismm"},"content":"","lastModifiedDate":"2024-02-10"},{"lineNumber":12,"author":{"gitId":"rismm"},"content":"/**","lastModifiedDate":"2024-02-27"},{"lineNumber":13,"author":{"gitId":"rismm"},"content":" * Manages all command actions for the tasks in the task lists","lastModifiedDate":"2024-02-27"},{"lineNumber":14,"author":{"gitId":"rismm"},"content":" */","lastModifiedDate":"2024-02-27"},{"lineNumber":15,"author":{"gitId":"rismm"},"content":"public class TaskManager {","lastModifiedDate":"2024-01-27"},{"lineNumber":16,"author":{"gitId":"rismm"},"content":"    protected ArrayList\u003cTask\u003e tasks;","lastModifiedDate":"2024-02-17"},{"lineNumber":17,"author":{"gitId":"rismm"},"content":"    protected int numberOfTasks;","lastModifiedDate":"2024-01-27"},{"lineNumber":18,"author":{"gitId":"rismm"},"content":"","lastModifiedDate":"2024-01-27"},{"lineNumber":19,"author":{"gitId":"rismm"},"content":"    public TaskManager() {","lastModifiedDate":"2024-01-27"},{"lineNumber":20,"author":{"gitId":"rismm"},"content":"        tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-02-17"},{"lineNumber":21,"author":{"gitId":"rismm"},"content":"        numberOfTasks \u003d 0;","lastModifiedDate":"2024-01-27"},{"lineNumber":22,"author":{"gitId":"rismm"},"content":"    }","lastModifiedDate":"2024-01-27"},{"lineNumber":23,"author":{"gitId":"rismm"},"content":"","lastModifiedDate":"2024-01-27"},{"lineNumber":24,"author":{"gitId":"rismm"},"content":"    /**","lastModifiedDate":"2024-02-27"},{"lineNumber":25,"author":{"gitId":"rismm"},"content":"     * Adds a task to the array list","lastModifiedDate":"2024-02-27"},{"lineNumber":26,"author":{"gitId":"rismm"},"content":"     *","lastModifiedDate":"2024-02-27"},{"lineNumber":27,"author":{"gitId":"rismm"},"content":"     * @param t Task to add","lastModifiedDate":"2024-02-27"},{"lineNumber":28,"author":{"gitId":"rismm"},"content":"     */","lastModifiedDate":"2024-02-27"},{"lineNumber":29,"author":{"gitId":"rismm"},"content":"    public void addTask(Task t) {","lastModifiedDate":"2024-02-19"},{"lineNumber":30,"author":{"gitId":"rismm"},"content":"        tasks.add(t);","lastModifiedDate":"2024-02-19"},{"lineNumber":31,"author":{"gitId":"rismm"},"content":"        numberOfTasks++;","lastModifiedDate":"2024-02-19"},{"lineNumber":32,"author":{"gitId":"rismm"},"content":"    }","lastModifiedDate":"2024-02-19"},{"lineNumber":33,"author":{"gitId":"rismm"},"content":"","lastModifiedDate":"2024-02-19"},{"lineNumber":34,"author":{"gitId":"rismm"},"content":"    /**","lastModifiedDate":"2024-02-27"},{"lineNumber":35,"author":{"gitId":"rismm"},"content":"     * Adds a task to the array list accordingly from the user input.","lastModifiedDate":"2024-02-27"},{"lineNumber":36,"author":{"gitId":"rismm"},"content":"     *","lastModifiedDate":"2024-02-27"},{"lineNumber":37,"author":{"gitId":"rismm"},"content":"     * @param type Task type indicating the type of task to be added","lastModifiedDate":"2024-02-27"},{"lineNumber":38,"author":{"gitId":"rismm"},"content":"     * @param message User input arguments","lastModifiedDate":"2024-02-27"},{"lineNumber":39,"author":{"gitId":"rismm"},"content":"     * @throws JoeException if task to be added cannot be created, or the input arguments are invalid","lastModifiedDate":"2024-02-27"},{"lineNumber":40,"author":{"gitId":"rismm"},"content":"     */","lastModifiedDate":"2024-02-27"},{"lineNumber":41,"author":{"gitId":"rismm"},"content":"    public void addTask(TaskType type, String message) throws JoeException {","lastModifiedDate":"2024-02-20"},{"lineNumber":42,"author":{"gitId":"rismm"},"content":"        if (message.isEmpty()) {","lastModifiedDate":"2024-02-20"},{"lineNumber":43,"author":{"gitId":"rismm"},"content":"            throw new JoeException();","lastModifiedDate":"2024-02-10"},{"lineNumber":44,"author":{"gitId":"rismm"},"content":"        }","lastModifiedDate":"2024-02-10"},{"lineNumber":45,"author":{"gitId":"rismm"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":46,"author":{"gitId":"rismm"},"content":"        Task t;","lastModifiedDate":"2024-02-20"},{"lineNumber":47,"author":{"gitId":"rismm"},"content":"        switch (type) {","lastModifiedDate":"2024-02-20"},{"lineNumber":48,"author":{"gitId":"rismm"},"content":"        case TODO:","lastModifiedDate":"2024-02-20"},{"lineNumber":49,"author":{"gitId":"rismm"},"content":"            t \u003d new ToDo(message);","lastModifiedDate":"2024-02-20"},{"lineNumber":50,"author":{"gitId":"rismm"},"content":"            break;","lastModifiedDate":"2024-02-20"},{"lineNumber":51,"author":{"gitId":"rismm"},"content":"        case DEADLINE:","lastModifiedDate":"2024-02-20"},{"lineNumber":52,"author":{"gitId":"rismm"},"content":"            String deadlineName \u003d InputParser.getTaskName(message);","lastModifiedDate":"2024-02-20"},{"lineNumber":53,"author":{"gitId":"rismm"},"content":"            if (deadlineName.isEmpty()) {","lastModifiedDate":"2024-02-27"},{"lineNumber":54,"author":{"gitId":"rismm"},"content":"                throw new JoeException();","lastModifiedDate":"2024-02-10"},{"lineNumber":55,"author":{"gitId":"rismm"},"content":"            }","lastModifiedDate":"2024-02-10"},{"lineNumber":56,"author":{"gitId":"rismm"},"content":"            LocalDateTime deadlineTime \u003d InputParser.getDeadlineTime(message);","lastModifiedDate":"2024-02-26"},{"lineNumber":57,"author":{"gitId":"rismm"},"content":"            t \u003d new Deadline(deadlineName, deadlineTime);","lastModifiedDate":"2024-02-20"},{"lineNumber":58,"author":{"gitId":"rismm"},"content":"            break;","lastModifiedDate":"2024-02-20"},{"lineNumber":59,"author":{"gitId":"rismm"},"content":"        case EVENT:","lastModifiedDate":"2024-02-20"},{"lineNumber":60,"author":{"gitId":"rismm"},"content":"            String eventName \u003d InputParser.getTaskName(message);","lastModifiedDate":"2024-02-20"},{"lineNumber":61,"author":{"gitId":"rismm"},"content":"            if (eventName.isEmpty()) {","lastModifiedDate":"2024-02-27"},{"lineNumber":62,"author":{"gitId":"rismm"},"content":"                throw new JoeException();","lastModifiedDate":"2024-02-20"},{"lineNumber":63,"author":{"gitId":"rismm"},"content":"            }","lastModifiedDate":"2024-02-05"},{"lineNumber":64,"author":{"gitId":"rismm"},"content":"            LocalDateTime[] eventDuration \u003d InputParser.getEventTime(message);","lastModifiedDate":"2024-02-27"},{"lineNumber":65,"author":{"gitId":"rismm"},"content":"            t \u003d new Event(eventName, eventDuration[0], eventDuration[1]);","lastModifiedDate":"2024-02-20"},{"lineNumber":66,"author":{"gitId":"rismm"},"content":"            break;","lastModifiedDate":"2024-02-20"},{"lineNumber":67,"author":{"gitId":"rismm"},"content":"        default:","lastModifiedDate":"2024-02-20"},{"lineNumber":68,"author":{"gitId":"rismm"},"content":"            throw new JoeException();","lastModifiedDate":"2024-02-10"},{"lineNumber":69,"author":{"gitId":"rismm"},"content":"        }","lastModifiedDate":"2024-02-10"},{"lineNumber":70,"author":{"gitId":"rismm"},"content":"","lastModifiedDate":"2024-02-20"},{"lineNumber":71,"author":{"gitId":"rismm"},"content":"        tasks.add(t);","lastModifiedDate":"2024-02-20"},{"lineNumber":72,"author":{"gitId":"rismm"},"content":"        numberOfTasks++;","lastModifiedDate":"2024-01-27"},{"lineNumber":73,"author":{"gitId":"rismm"},"content":"        Printer.printTaskAddingMessage(t.getTaskStatus(), numberOfTasks);","lastModifiedDate":"2024-02-20"},{"lineNumber":74,"author":{"gitId":"rismm"},"content":"","lastModifiedDate":"2024-02-20"},{"lineNumber":75,"author":{"gitId":"rismm"},"content":"        saveList();","lastModifiedDate":"2024-02-20"},{"lineNumber":76,"author":{"gitId":"rismm"},"content":"    }","lastModifiedDate":"2024-01-27"},{"lineNumber":77,"author":{"gitId":"rismm"},"content":"","lastModifiedDate":"2024-01-27"},{"lineNumber":78,"author":{"gitId":"rismm"},"content":"    /**","lastModifiedDate":"2024-02-27"},{"lineNumber":79,"author":{"gitId":"rismm"},"content":"     * Deletes a task from the array list","lastModifiedDate":"2024-02-27"},{"lineNumber":80,"author":{"gitId":"rismm"},"content":"     *","lastModifiedDate":"2024-02-27"},{"lineNumber":81,"author":{"gitId":"rismm"},"content":"     * @param taskNumber Index of the task to remove","lastModifiedDate":"2024-02-27"},{"lineNumber":82,"author":{"gitId":"rismm"},"content":"     * @throws JoeException if the task number is more than the size of the array list, or is a negative integer","lastModifiedDate":"2024-02-27"},{"lineNumber":83,"author":{"gitId":"rismm"},"content":"     */","lastModifiedDate":"2024-02-27"},{"lineNumber":84,"author":{"gitId":"rismm"},"content":"    public void deleteTask(int taskNumber) throws JoeException {","lastModifiedDate":"2024-02-18"},{"lineNumber":85,"author":{"gitId":"rismm"},"content":"        if (taskNumber \u003e numberOfTasks || taskNumber \u003c\u003d 0) {","lastModifiedDate":"2024-02-18"},{"lineNumber":86,"author":{"gitId":"rismm"},"content":"            throw new JoeException();","lastModifiedDate":"2024-02-18"},{"lineNumber":87,"author":{"gitId":"rismm"},"content":"        }","lastModifiedDate":"2024-02-18"},{"lineNumber":88,"author":{"gitId":"rismm"},"content":"        Printer.printDeleteMessage();","lastModifiedDate":"2024-02-18"},{"lineNumber":89,"author":{"gitId":"rismm"},"content":"        System.out.println(\"  \" + tasks.get(taskNumber - 1).getTaskStatus());","lastModifiedDate":"2024-02-18"},{"lineNumber":90,"author":{"gitId":"rismm"},"content":"        tasks.remove(taskNumber - 1);","lastModifiedDate":"2024-02-18"},{"lineNumber":91,"author":{"gitId":"rismm"},"content":"        numberOfTasks--;","lastModifiedDate":"2024-02-18"},{"lineNumber":92,"author":{"gitId":"rismm"},"content":"        Printer.printNumOfTasks(numberOfTasks);","lastModifiedDate":"2024-02-18"},{"lineNumber":93,"author":{"gitId":"rismm"},"content":"","lastModifiedDate":"2024-02-20"},{"lineNumber":94,"author":{"gitId":"rismm"},"content":"        saveList();","lastModifiedDate":"2024-02-20"},{"lineNumber":95,"author":{"gitId":"rismm"},"content":"    }","lastModifiedDate":"2024-02-18"},{"lineNumber":96,"author":{"gitId":"rismm"},"content":"","lastModifiedDate":"2024-02-18"},{"lineNumber":97,"author":{"gitId":"rismm"},"content":"    /**","lastModifiedDate":"2024-02-27"},{"lineNumber":98,"author":{"gitId":"rismm"},"content":"     * List all tasks currently in the array list","lastModifiedDate":"2024-02-27"},{"lineNumber":99,"author":{"gitId":"rismm"},"content":"     */","lastModifiedDate":"2024-02-27"},{"lineNumber":100,"author":{"gitId":"rismm"},"content":"    public void listTasks() {","lastModifiedDate":"2024-01-27"},{"lineNumber":101,"author":{"gitId":"rismm"},"content":"        Printer.printListMessage();","lastModifiedDate":"2024-02-05"},{"lineNumber":102,"author":{"gitId":"rismm"},"content":"        for (int i \u003d 0; i \u003c numberOfTasks; i++) {","lastModifiedDate":"2024-01-27"},{"lineNumber":103,"author":{"gitId":"rismm"},"content":"            System.out.println((i + 1) + \".\" + tasks.get(i).getTaskStatus());","lastModifiedDate":"2024-02-17"},{"lineNumber":104,"author":{"gitId":"rismm"},"content":"        }","lastModifiedDate":"2024-01-27"},{"lineNumber":105,"author":{"gitId":"rismm"},"content":"        Printer.printHeaderLine();","lastModifiedDate":"2024-02-05"},{"lineNumber":106,"author":{"gitId":"rismm"},"content":"    }","lastModifiedDate":"2024-01-27"},{"lineNumber":107,"author":{"gitId":"rismm"},"content":"","lastModifiedDate":"2024-01-28"},{"lineNumber":108,"author":{"gitId":"rismm"},"content":"    /**","lastModifiedDate":"2024-02-27"},{"lineNumber":109,"author":{"gitId":"rismm"},"content":"     * List all tasks currently in the array list that contains a keyword input by the user","lastModifiedDate":"2024-02-27"},{"lineNumber":110,"author":{"gitId":"rismm"},"content":"     *","lastModifiedDate":"2024-02-27"},{"lineNumber":111,"author":{"gitId":"rismm"},"content":"     * @param keyword a String containing the keyword to search for","lastModifiedDate":"2024-02-27"},{"lineNumber":112,"author":{"gitId":"rismm"},"content":"     * @throws JoeException if the input keyword is an empty string","lastModifiedDate":"2024-02-27"},{"lineNumber":113,"author":{"gitId":"rismm"},"content":"     */","lastModifiedDate":"2024-02-27"},{"lineNumber":114,"author":{"gitId":"rismm"},"content":"    public void listTasksWithKeyword(String keyword) throws JoeException {","lastModifiedDate":"2024-02-27"},{"lineNumber":115,"author":{"gitId":"rismm"},"content":"        if (keyword.isEmpty()){","lastModifiedDate":"2024-02-27"},{"lineNumber":116,"author":{"gitId":"rismm"},"content":"            throw new JoeException();","lastModifiedDate":"2024-02-27"},{"lineNumber":117,"author":{"gitId":"rismm"},"content":"        }","lastModifiedDate":"2024-02-27"},{"lineNumber":118,"author":{"gitId":"rismm"},"content":"","lastModifiedDate":"2024-02-27"},{"lineNumber":119,"author":{"gitId":"rismm"},"content":"        Printer.printFindMessage(keyword);","lastModifiedDate":"2024-02-27"},{"lineNumber":120,"author":{"gitId":"rismm"},"content":"        boolean hasMatch \u003d false;","lastModifiedDate":"2024-02-27"},{"lineNumber":121,"author":{"gitId":"rismm"},"content":"        for (int i \u003d 0; i \u003c numberOfTasks; i++) {","lastModifiedDate":"2024-02-27"},{"lineNumber":122,"author":{"gitId":"rismm"},"content":"            if (tasks.get(i).getTaskName().contains(keyword)) {","lastModifiedDate":"2024-02-27"},{"lineNumber":123,"author":{"gitId":"rismm"},"content":"                System.out.println((i + 1) + \".\" + tasks.get(i).getTaskStatus());","lastModifiedDate":"2024-02-27"},{"lineNumber":124,"author":{"gitId":"rismm"},"content":"                hasMatch \u003d true;","lastModifiedDate":"2024-02-27"},{"lineNumber":125,"author":{"gitId":"rismm"},"content":"            }","lastModifiedDate":"2024-02-27"},{"lineNumber":126,"author":{"gitId":"rismm"},"content":"        }","lastModifiedDate":"2024-02-27"},{"lineNumber":127,"author":{"gitId":"rismm"},"content":"        if (!hasMatch) {","lastModifiedDate":"2024-02-27"},{"lineNumber":128,"author":{"gitId":"rismm"},"content":"            Printer.printNoMatchMessage();","lastModifiedDate":"2024-02-27"},{"lineNumber":129,"author":{"gitId":"rismm"},"content":"        }","lastModifiedDate":"2024-02-27"},{"lineNumber":130,"author":{"gitId":"rismm"},"content":"","lastModifiedDate":"2024-02-27"},{"lineNumber":131,"author":{"gitId":"rismm"},"content":"        Printer.printHeaderLine();","lastModifiedDate":"2024-02-27"},{"lineNumber":132,"author":{"gitId":"rismm"},"content":"    }","lastModifiedDate":"2024-02-27"},{"lineNumber":133,"author":{"gitId":"rismm"},"content":"","lastModifiedDate":"2024-02-27"},{"lineNumber":134,"author":{"gitId":"rismm"},"content":"    /**","lastModifiedDate":"2024-02-27"},{"lineNumber":135,"author":{"gitId":"rismm"},"content":"     * Sets the mark status of a task accordingly","lastModifiedDate":"2024-02-27"},{"lineNumber":136,"author":{"gitId":"rismm"},"content":"     *","lastModifiedDate":"2024-02-27"},{"lineNumber":137,"author":{"gitId":"rismm"},"content":"     * @param taskNumber Index of the task to toggle","lastModifiedDate":"2024-02-27"},{"lineNumber":138,"author":{"gitId":"rismm"},"content":"     * @param isMark Boolean to determine to mark or unmark task","lastModifiedDate":"2024-02-27"},{"lineNumber":139,"author":{"gitId":"rismm"},"content":"     * @throws JoeException if the task number is more than the size of the array list, or is a negative integer","lastModifiedDate":"2024-02-27"},{"lineNumber":140,"author":{"gitId":"rismm"},"content":"     */","lastModifiedDate":"2024-02-27"},{"lineNumber":141,"author":{"gitId":"rismm"},"content":"    public void toggleTaskMarkedStatus(int taskNumber, boolean isMark) throws JoeException {","lastModifiedDate":"2024-02-10"},{"lineNumber":142,"author":{"gitId":"rismm"},"content":"        if (taskNumber \u003e numberOfTasks || taskNumber \u003c\u003d 0) {","lastModifiedDate":"2024-01-28"},{"lineNumber":143,"author":{"gitId":"rismm"},"content":"            throw new JoeException();","lastModifiedDate":"2024-02-10"},{"lineNumber":144,"author":{"gitId":"rismm"},"content":"        }","lastModifiedDate":"2024-01-28"},{"lineNumber":145,"author":{"gitId":"rismm"},"content":"        tasks.get(taskNumber - 1).setDone(isMark);","lastModifiedDate":"2024-02-17"},{"lineNumber":146,"author":{"gitId":"rismm"},"content":"        if (isMark) {","lastModifiedDate":"2024-02-05"},{"lineNumber":147,"author":{"gitId":"rismm"},"content":"            Printer.printMarkMessage();","lastModifiedDate":"2024-02-05"},{"lineNumber":148,"author":{"gitId":"rismm"},"content":"        } else {","lastModifiedDate":"2024-01-28"},{"lineNumber":149,"author":{"gitId":"rismm"},"content":"            Printer.printUnmarkMessage();","lastModifiedDate":"2024-02-05"},{"lineNumber":150,"author":{"gitId":"rismm"},"content":"        }","lastModifiedDate":"2024-01-28"},{"lineNumber":151,"author":{"gitId":"rismm"},"content":"        System.out.println(\"  \" + tasks.get(taskNumber - 1).getTaskStatus());","lastModifiedDate":"2024-02-17"},{"lineNumber":152,"author":{"gitId":"rismm"},"content":"        Printer.printHeaderLine();","lastModifiedDate":"2024-02-05"},{"lineNumber":153,"author":{"gitId":"rismm"},"content":"","lastModifiedDate":"2024-02-20"},{"lineNumber":154,"author":{"gitId":"rismm"},"content":"        saveList();","lastModifiedDate":"2024-02-20"},{"lineNumber":155,"author":{"gitId":"rismm"},"content":"    }","lastModifiedDate":"2024-01-28"},{"lineNumber":156,"author":{"gitId":"rismm"},"content":"","lastModifiedDate":"2024-02-20"},{"lineNumber":157,"author":{"gitId":"rismm"},"content":"    /**","lastModifiedDate":"2024-02-27"},{"lineNumber":158,"author":{"gitId":"rismm"},"content":"     * Saves the current list to the system. Prints error message if unable to save","lastModifiedDate":"2024-02-27"},{"lineNumber":159,"author":{"gitId":"rismm"},"content":"     */","lastModifiedDate":"2024-02-27"},{"lineNumber":160,"author":{"gitId":"rismm"},"content":"    protected void saveList() {","lastModifiedDate":"2024-02-20"},{"lineNumber":161,"author":{"gitId":"rismm"},"content":"        try {","lastModifiedDate":"2024-02-20"},{"lineNumber":162,"author":{"gitId":"rismm"},"content":"            FileManager.saveData(tasks);","lastModifiedDate":"2024-02-20"},{"lineNumber":163,"author":{"gitId":"rismm"},"content":"        } catch (IOException e) {","lastModifiedDate":"2024-02-20"},{"lineNumber":164,"author":{"gitId":"rismm"},"content":"            Printer.printSaveError();","lastModifiedDate":"2024-02-20"},{"lineNumber":165,"author":{"gitId":"rismm"},"content":"        }","lastModifiedDate":"2024-02-20"},{"lineNumber":166,"author":{"gitId":"rismm"},"content":"    }","lastModifiedDate":"2024-01-28"},{"lineNumber":167,"author":{"gitId":"rismm"},"content":"}","lastModifiedDate":"2024-01-27"}],"authorContributionMap":{"rismm":167}},{"path":"src/main/java/joe/task/TaskType.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"rismm"},"content":"package joe.task;","lastModifiedDate":"2024-02-19"},{"lineNumber":2,"author":{"gitId":"rismm"},"content":"","lastModifiedDate":"2024-02-19"},{"lineNumber":3,"author":{"gitId":"rismm"},"content":"/**","lastModifiedDate":"2024-02-27"},{"lineNumber":4,"author":{"gitId":"rismm"},"content":" * Enumerator for each task type that can be added to the list","lastModifiedDate":"2024-02-27"},{"lineNumber":5,"author":{"gitId":"rismm"},"content":" */","lastModifiedDate":"2024-02-27"},{"lineNumber":6,"author":{"gitId":"rismm"},"content":"public enum TaskType {","lastModifiedDate":"2024-02-19"},{"lineNumber":7,"author":{"gitId":"rismm"},"content":"    TODO,","lastModifiedDate":"2024-02-19"},{"lineNumber":8,"author":{"gitId":"rismm"},"content":"    DEADLINE,","lastModifiedDate":"2024-02-19"},{"lineNumber":9,"author":{"gitId":"rismm"},"content":"    EVENT","lastModifiedDate":"2024-02-19"},{"lineNumber":10,"author":{"gitId":"rismm"},"content":"}","lastModifiedDate":"2024-02-19"}],"authorContributionMap":{"rismm":10}},{"path":"src/main/java/joe/task/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"rismm"},"content":"package joe.task;","lastModifiedDate":"2024-02-10"},{"lineNumber":2,"author":{"gitId":"rismm"},"content":"","lastModifiedDate":"2024-02-10"},{"lineNumber":3,"author":{"gitId":"rismm"},"content":"/**","lastModifiedDate":"2024-02-27"},{"lineNumber":4,"author":{"gitId":"rismm"},"content":" * ToDo subclass that inherits from Task","lastModifiedDate":"2024-02-27"},{"lineNumber":5,"author":{"gitId":"rismm"},"content":" */","lastModifiedDate":"2024-02-27"},{"lineNumber":6,"author":{"gitId":"rismm"},"content":"public class ToDo extends Task {","lastModifiedDate":"2024-02-05"},{"lineNumber":7,"author":{"gitId":"rismm"},"content":"    protected static final String TODO_SYMBOL \u003d \"[T]\";","lastModifiedDate":"2024-02-05"},{"lineNumber":8,"author":{"gitId":"rismm"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":9,"author":{"gitId":"rismm"},"content":"    @Override","lastModifiedDate":"2024-02-19"},{"lineNumber":10,"author":{"gitId":"rismm"},"content":"    public TaskType getTaskType() {","lastModifiedDate":"2024-02-19"},{"lineNumber":11,"author":{"gitId":"rismm"},"content":"        return TaskType.TODO;","lastModifiedDate":"2024-02-19"},{"lineNumber":12,"author":{"gitId":"rismm"},"content":"    }","lastModifiedDate":"2024-02-19"},{"lineNumber":13,"author":{"gitId":"rismm"},"content":"","lastModifiedDate":"2024-02-19"},{"lineNumber":14,"author":{"gitId":"rismm"},"content":"    public ToDo(String taskName) {","lastModifiedDate":"2024-02-05"},{"lineNumber":15,"author":{"gitId":"rismm"},"content":"        super(taskName);","lastModifiedDate":"2024-02-05"},{"lineNumber":16,"author":{"gitId":"rismm"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":17,"author":{"gitId":"rismm"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":18,"author":{"gitId":"rismm"},"content":"    @Override","lastModifiedDate":"2024-02-05"},{"lineNumber":19,"author":{"gitId":"rismm"},"content":"    public String getTaskStatus() {","lastModifiedDate":"2024-02-05"},{"lineNumber":20,"author":{"gitId":"rismm"},"content":"        return TODO_SYMBOL + super.getTaskStatus();","lastModifiedDate":"2024-02-05"},{"lineNumber":21,"author":{"gitId":"rismm"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":22,"author":{"gitId":"rismm"},"content":"}","lastModifiedDate":"2024-02-05"}],"authorContributionMap":{"rismm":22}},{"path":"src/main/java/joe/util/FileManager.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"rismm"},"content":"package joe.util;","lastModifiedDate":"2024-02-19"},{"lineNumber":2,"author":{"gitId":"rismm"},"content":"","lastModifiedDate":"2024-02-19"},{"lineNumber":3,"author":{"gitId":"rismm"},"content":"import java.io.File;","lastModifiedDate":"2024-02-20"},{"lineNumber":4,"author":{"gitId":"rismm"},"content":"import java.io.IOException;","lastModifiedDate":"2024-02-20"},{"lineNumber":5,"author":{"gitId":"rismm"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2024-02-20"},{"lineNumber":6,"author":{"gitId":"rismm"},"content":"import java.io.FileWriter;","lastModifiedDate":"2024-02-20"},{"lineNumber":7,"author":{"gitId":"rismm"},"content":"import java.io.BufferedWriter;","lastModifiedDate":"2024-02-20"},{"lineNumber":8,"author":{"gitId":"rismm"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-02-20"},{"lineNumber":9,"author":{"gitId":"rismm"},"content":"import java.util.Scanner;","lastModifiedDate":"2024-02-20"},{"lineNumber":10,"author":{"gitId":"rismm"},"content":"","lastModifiedDate":"2024-02-19"},{"lineNumber":11,"author":{"gitId":"rismm"},"content":"import joe.JoeException;","lastModifiedDate":"2024-02-19"},{"lineNumber":12,"author":{"gitId":"rismm"},"content":"import joe.task.TaskManager;","lastModifiedDate":"2024-02-19"},{"lineNumber":13,"author":{"gitId":"rismm"},"content":"import joe.task.Task;","lastModifiedDate":"2024-02-19"},{"lineNumber":14,"author":{"gitId":"rismm"},"content":"","lastModifiedDate":"2024-02-19"},{"lineNumber":15,"author":{"gitId":"rismm"},"content":"/**","lastModifiedDate":"2024-02-27"},{"lineNumber":16,"author":{"gitId":"rismm"},"content":" * Handles all file IO reading and writing","lastModifiedDate":"2024-02-27"},{"lineNumber":17,"author":{"gitId":"rismm"},"content":" */","lastModifiedDate":"2024-02-27"},{"lineNumber":18,"author":{"gitId":"rismm"},"content":"public class FileManager {","lastModifiedDate":"2024-02-19"},{"lineNumber":19,"author":{"gitId":"rismm"},"content":"    protected static final String DATA_PATH \u003d \"./data/\";","lastModifiedDate":"2024-02-20"},{"lineNumber":20,"author":{"gitId":"rismm"},"content":"    protected static final String FILE_NAME \u003d \"tasklist.txt\";","lastModifiedDate":"2024-02-20"},{"lineNumber":21,"author":{"gitId":"rismm"},"content":"    protected static final String SAVE_FILE_PATH \u003d DATA_PATH + FILE_NAME;","lastModifiedDate":"2024-02-20"},{"lineNumber":22,"author":{"gitId":"rismm"},"content":"","lastModifiedDate":"2024-02-20"},{"lineNumber":23,"author":{"gitId":"rismm"},"content":"    /**","lastModifiedDate":"2024-02-27"},{"lineNumber":24,"author":{"gitId":"rismm"},"content":"     * Loads and reads data from a designated text file from the path specified in the class.","lastModifiedDate":"2024-02-27"},{"lineNumber":25,"author":{"gitId":"rismm"},"content":"     * Parses each line of data into a task subclass and added to a task list in the TaskManager class.","lastModifiedDate":"2024-02-27"},{"lineNumber":26,"author":{"gitId":"rismm"},"content":"     * If data is corrupted, prints to the UI the number of corrupted lines.","lastModifiedDate":"2024-02-27"},{"lineNumber":27,"author":{"gitId":"rismm"},"content":"     *","lastModifiedDate":"2024-02-27"},{"lineNumber":28,"author":{"gitId":"rismm"},"content":"     * @param taskManager TaskManager instance to store all parsed tasks","lastModifiedDate":"2024-02-27"},{"lineNumber":29,"author":{"gitId":"rismm"},"content":"     * @throws FileNotFoundException if specified path is unable to be opened or found","lastModifiedDate":"2024-02-27"},{"lineNumber":30,"author":{"gitId":"rismm"},"content":"     */","lastModifiedDate":"2024-02-27"},{"lineNumber":31,"author":{"gitId":"rismm"},"content":"    public static void loadData(TaskManager taskManager) throws FileNotFoundException {","lastModifiedDate":"2024-02-20"},{"lineNumber":32,"author":{"gitId":"rismm"},"content":"        File directory \u003d new File(DATA_PATH);","lastModifiedDate":"2024-02-20"},{"lineNumber":33,"author":{"gitId":"rismm"},"content":"        if (!directory.exists()) {","lastModifiedDate":"2024-02-20"},{"lineNumber":34,"author":{"gitId":"rismm"},"content":"            directory.mkdirs();","lastModifiedDate":"2024-02-20"},{"lineNumber":35,"author":{"gitId":"rismm"},"content":"            return;","lastModifiedDate":"2024-02-20"},{"lineNumber":36,"author":{"gitId":"rismm"},"content":"        }","lastModifiedDate":"2024-02-20"},{"lineNumber":37,"author":{"gitId":"rismm"},"content":"","lastModifiedDate":"2024-02-20"},{"lineNumber":38,"author":{"gitId":"rismm"},"content":"        File saveFile \u003d new File(SAVE_FILE_PATH);","lastModifiedDate":"2024-02-20"},{"lineNumber":39,"author":{"gitId":"rismm"},"content":"        if (!saveFile.exists()) {","lastModifiedDate":"2024-02-20"},{"lineNumber":40,"author":{"gitId":"rismm"},"content":"            return;","lastModifiedDate":"2024-02-20"},{"lineNumber":41,"author":{"gitId":"rismm"},"content":"        }","lastModifiedDate":"2024-02-20"},{"lineNumber":42,"author":{"gitId":"rismm"},"content":"","lastModifiedDate":"2024-02-20"},{"lineNumber":43,"author":{"gitId":"rismm"},"content":"        Scanner s \u003d new Scanner(saveFile);","lastModifiedDate":"2024-02-20"},{"lineNumber":44,"author":{"gitId":"rismm"},"content":"        String taskData;","lastModifiedDate":"2024-02-19"},{"lineNumber":45,"author":{"gitId":"rismm"},"content":"        int corruptedData \u003d 0;","lastModifiedDate":"2024-02-20"},{"lineNumber":46,"author":{"gitId":"rismm"},"content":"        while (s.hasNext()) {","lastModifiedDate":"2024-02-20"},{"lineNumber":47,"author":{"gitId":"rismm"},"content":"            try {","lastModifiedDate":"2024-02-19"},{"lineNumber":48,"author":{"gitId":"rismm"},"content":"                taskData \u003d s.nextLine();","lastModifiedDate":"2024-02-20"},{"lineNumber":49,"author":{"gitId":"rismm"},"content":"                Task newTask \u003d FileParser.readTaskData(taskData);","lastModifiedDate":"2024-02-20"},{"lineNumber":50,"author":{"gitId":"rismm"},"content":"                taskManager.addTask(newTask);","lastModifiedDate":"2024-02-19"},{"lineNumber":51,"author":{"gitId":"rismm"},"content":"            } catch (JoeException e) {","lastModifiedDate":"2024-02-20"},{"lineNumber":52,"author":{"gitId":"rismm"},"content":"                corruptedData++;","lastModifiedDate":"2024-02-20"},{"lineNumber":53,"author":{"gitId":"rismm"},"content":"            }","lastModifiedDate":"2024-02-19"},{"lineNumber":54,"author":{"gitId":"rismm"},"content":"        }","lastModifiedDate":"2024-02-19"},{"lineNumber":55,"author":{"gitId":"rismm"},"content":"        if (corruptedData !\u003d 0) {","lastModifiedDate":"2024-02-20"},{"lineNumber":56,"author":{"gitId":"rismm"},"content":"            Printer.printCorruptedFileError(corruptedData);","lastModifiedDate":"2024-02-20"},{"lineNumber":57,"author":{"gitId":"rismm"},"content":"        }","lastModifiedDate":"2024-02-20"},{"lineNumber":58,"author":{"gitId":"rismm"},"content":"        s.close();","lastModifiedDate":"2024-02-20"},{"lineNumber":59,"author":{"gitId":"rismm"},"content":"    }","lastModifiedDate":"2024-02-19"},{"lineNumber":60,"author":{"gitId":"rismm"},"content":"","lastModifiedDate":"2024-02-19"},{"lineNumber":61,"author":{"gitId":"rismm"},"content":"    /**","lastModifiedDate":"2024-02-27"},{"lineNumber":62,"author":{"gitId":"rismm"},"content":"     * Saves all tasks currently in the task list by writing into a text file.","lastModifiedDate":"2024-02-27"},{"lineNumber":63,"author":{"gitId":"rismm"},"content":"     *","lastModifiedDate":"2024-02-27"},{"lineNumber":64,"author":{"gitId":"rismm"},"content":"     * @param tasks List of tasks to save","lastModifiedDate":"2024-02-27"},{"lineNumber":65,"author":{"gitId":"rismm"},"content":"     * @throws IOException if text file cannot be opened or accessed for whatever reason","lastModifiedDate":"2024-02-27"},{"lineNumber":66,"author":{"gitId":"rismm"},"content":"     */","lastModifiedDate":"2024-02-27"},{"lineNumber":67,"author":{"gitId":"rismm"},"content":"    public static void saveData(ArrayList\u003cTask\u003e tasks) throws IOException {","lastModifiedDate":"2024-02-20"},{"lineNumber":68,"author":{"gitId":"rismm"},"content":"        File saveFile \u003d new File(SAVE_FILE_PATH);","lastModifiedDate":"2024-02-20"},{"lineNumber":69,"author":{"gitId":"rismm"},"content":"        if (!saveFile.createNewFile()) {","lastModifiedDate":"2024-02-20"},{"lineNumber":70,"author":{"gitId":"rismm"},"content":"            saveFile.delete();","lastModifiedDate":"2024-02-20"},{"lineNumber":71,"author":{"gitId":"rismm"},"content":"            saveFile.createNewFile();","lastModifiedDate":"2024-02-20"},{"lineNumber":72,"author":{"gitId":"rismm"},"content":"        }","lastModifiedDate":"2024-02-19"},{"lineNumber":73,"author":{"gitId":"rismm"},"content":"","lastModifiedDate":"2024-02-20"},{"lineNumber":74,"author":{"gitId":"rismm"},"content":"        FileWriter fw \u003d new FileWriter(saveFile);","lastModifiedDate":"2024-02-20"},{"lineNumber":75,"author":{"gitId":"rismm"},"content":"        BufferedWriter writer \u003d new BufferedWriter(fw);","lastModifiedDate":"2024-02-20"},{"lineNumber":76,"author":{"gitId":"rismm"},"content":"        for (Task t : tasks) {","lastModifiedDate":"2024-02-20"},{"lineNumber":77,"author":{"gitId":"rismm"},"content":"            String data \u003d null;","lastModifiedDate":"2024-02-20"},{"lineNumber":78,"author":{"gitId":"rismm"},"content":"            switch (t.getTaskType()) {","lastModifiedDate":"2024-02-20"},{"lineNumber":79,"author":{"gitId":"rismm"},"content":"            case TODO:","lastModifiedDate":"2024-02-20"},{"lineNumber":80,"author":{"gitId":"rismm"},"content":"                data \u003d FileParser.getTodoData(t.getTaskStatus());","lastModifiedDate":"2024-02-20"},{"lineNumber":81,"author":{"gitId":"rismm"},"content":"                break;","lastModifiedDate":"2024-02-20"},{"lineNumber":82,"author":{"gitId":"rismm"},"content":"            case DEADLINE:","lastModifiedDate":"2024-02-20"},{"lineNumber":83,"author":{"gitId":"rismm"},"content":"                data \u003d FileParser.getDeadlineData(t.getTaskStatus());","lastModifiedDate":"2024-02-20"},{"lineNumber":84,"author":{"gitId":"rismm"},"content":"                break;","lastModifiedDate":"2024-02-20"},{"lineNumber":85,"author":{"gitId":"rismm"},"content":"            case EVENT:","lastModifiedDate":"2024-02-20"},{"lineNumber":86,"author":{"gitId":"rismm"},"content":"                data \u003d FileParser.getEventData(t.getTaskStatus());","lastModifiedDate":"2024-02-20"},{"lineNumber":87,"author":{"gitId":"rismm"},"content":"                break;","lastModifiedDate":"2024-02-20"},{"lineNumber":88,"author":{"gitId":"rismm"},"content":"            }","lastModifiedDate":"2024-02-20"},{"lineNumber":89,"author":{"gitId":"rismm"},"content":"","lastModifiedDate":"2024-02-20"},{"lineNumber":90,"author":{"gitId":"rismm"},"content":"            if (data !\u003d null) {","lastModifiedDate":"2024-02-20"},{"lineNumber":91,"author":{"gitId":"rismm"},"content":"                writer.write(data + \"\\n\");","lastModifiedDate":"2024-02-20"},{"lineNumber":92,"author":{"gitId":"rismm"},"content":"            }","lastModifiedDate":"2024-02-20"},{"lineNumber":93,"author":{"gitId":"rismm"},"content":"        }","lastModifiedDate":"2024-02-20"},{"lineNumber":94,"author":{"gitId":"rismm"},"content":"","lastModifiedDate":"2024-02-20"},{"lineNumber":95,"author":{"gitId":"rismm"},"content":"        writer.close();","lastModifiedDate":"2024-02-20"},{"lineNumber":96,"author":{"gitId":"rismm"},"content":"        fw.close();","lastModifiedDate":"2024-02-20"},{"lineNumber":97,"author":{"gitId":"rismm"},"content":"    }","lastModifiedDate":"2024-02-19"},{"lineNumber":98,"author":{"gitId":"rismm"},"content":"}","lastModifiedDate":"2024-02-19"}],"authorContributionMap":{"rismm":98}},{"path":"src/main/java/joe/util/FileParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"rismm"},"content":"package joe.util;","lastModifiedDate":"2024-02-20"},{"lineNumber":2,"author":{"gitId":"rismm"},"content":"","lastModifiedDate":"2024-02-20"},{"lineNumber":3,"author":{"gitId":"rismm"},"content":"import joe.JoeException;","lastModifiedDate":"2024-02-20"},{"lineNumber":4,"author":{"gitId":"rismm"},"content":"import joe.task.Deadline;","lastModifiedDate":"2024-02-20"},{"lineNumber":5,"author":{"gitId":"rismm"},"content":"import joe.task.Event;","lastModifiedDate":"2024-02-20"},{"lineNumber":6,"author":{"gitId":"rismm"},"content":"import joe.task.Task;","lastModifiedDate":"2024-02-20"},{"lineNumber":7,"author":{"gitId":"rismm"},"content":"import joe.task.ToDo;","lastModifiedDate":"2024-02-20"},{"lineNumber":8,"author":{"gitId":"rismm"},"content":"","lastModifiedDate":"2024-02-20"},{"lineNumber":9,"author":{"gitId":"rismm"},"content":"import java.time.DateTimeException;","lastModifiedDate":"2024-02-26"},{"lineNumber":10,"author":{"gitId":"rismm"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2024-02-26"},{"lineNumber":11,"author":{"gitId":"rismm"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2024-02-26"},{"lineNumber":12,"author":{"gitId":"rismm"},"content":"","lastModifiedDate":"2024-02-26"},{"lineNumber":13,"author":{"gitId":"rismm"},"content":"/**","lastModifiedDate":"2024-02-27"},{"lineNumber":14,"author":{"gitId":"rismm"},"content":" * Parser for tasks and data from save text files","lastModifiedDate":"2024-02-27"},{"lineNumber":15,"author":{"gitId":"rismm"},"content":" */","lastModifiedDate":"2024-02-27"},{"lineNumber":16,"author":{"gitId":"rismm"},"content":"public class FileParser {","lastModifiedDate":"2024-02-20"},{"lineNumber":17,"author":{"gitId":"rismm"},"content":"    protected static final char TODO_SYMBOL \u003d \u0027t\u0027;","lastModifiedDate":"2024-02-20"},{"lineNumber":18,"author":{"gitId":"rismm"},"content":"    protected static final char DEADLINE_SYMBOL \u003d \u0027d\u0027;","lastModifiedDate":"2024-02-20"},{"lineNumber":19,"author":{"gitId":"rismm"},"content":"    protected static final char EVENT_SYMBOL \u003d \u0027e\u0027;","lastModifiedDate":"2024-02-20"},{"lineNumber":20,"author":{"gitId":"rismm"},"content":"    protected static final char DONE_SYMBOL \u003d \u0027X\u0027;","lastModifiedDate":"2024-02-20"},{"lineNumber":21,"author":{"gitId":"rismm"},"content":"    protected static final String SEPARATOR \u003d \"#\";","lastModifiedDate":"2024-02-20"},{"lineNumber":22,"author":{"gitId":"rismm"},"content":"    protected static final DateTimeFormatter SAVED_DATE_FORMAT \u003d DateTimeFormatter.ofPattern(\"d MMM yyyy hh:mma\");","lastModifiedDate":"2024-02-27"},{"lineNumber":23,"author":{"gitId":"rismm"},"content":"","lastModifiedDate":"2024-02-20"},{"lineNumber":24,"author":{"gitId":"rismm"},"content":"    /**","lastModifiedDate":"2024-02-27"},{"lineNumber":25,"author":{"gitId":"rismm"},"content":"     * Returns a task subclass after parsing the input string data.","lastModifiedDate":"2024-02-27"},{"lineNumber":26,"author":{"gitId":"rismm"},"content":"     * Task type is indicated in the first character in the data string.","lastModifiedDate":"2024-02-27"},{"lineNumber":27,"author":{"gitId":"rismm"},"content":"     * The task\u0027s marked status is indicated in the third character in the data string.","lastModifiedDate":"2024-02-27"},{"lineNumber":28,"author":{"gitId":"rismm"},"content":"     *","lastModifiedDate":"2024-02-27"},{"lineNumber":29,"author":{"gitId":"rismm"},"content":"     * @param taskData Input string data from save file","lastModifiedDate":"2024-02-27"},{"lineNumber":30,"author":{"gitId":"rismm"},"content":"     * @return Task subclass","lastModifiedDate":"2024-02-27"},{"lineNumber":31,"author":{"gitId":"rismm"},"content":"     * @throws JoeException if data string is not in the correct data format (corrupted data)","lastModifiedDate":"2024-02-27"},{"lineNumber":32,"author":{"gitId":"rismm"},"content":"     */","lastModifiedDate":"2024-02-27"},{"lineNumber":33,"author":{"gitId":"rismm"},"content":"    public static Task readTaskData(String taskData) throws JoeException {","lastModifiedDate":"2024-02-20"},{"lineNumber":34,"author":{"gitId":"rismm"},"content":"        char taskSymbol \u003d taskData.charAt(0);","lastModifiedDate":"2024-02-20"},{"lineNumber":35,"author":{"gitId":"rismm"},"content":"        boolean isDone \u003d taskData.charAt(2) \u003d\u003d DONE_SYMBOL;","lastModifiedDate":"2024-02-20"},{"lineNumber":36,"author":{"gitId":"rismm"},"content":"        String taskInput \u003d taskData.substring(4);","lastModifiedDate":"2024-02-20"},{"lineNumber":37,"author":{"gitId":"rismm"},"content":"        if (taskInput.isEmpty()) {","lastModifiedDate":"2024-02-20"},{"lineNumber":38,"author":{"gitId":"rismm"},"content":"            throw new JoeException();","lastModifiedDate":"2024-02-20"},{"lineNumber":39,"author":{"gitId":"rismm"},"content":"        }","lastModifiedDate":"2024-02-20"},{"lineNumber":40,"author":{"gitId":"rismm"},"content":"","lastModifiedDate":"2024-02-20"},{"lineNumber":41,"author":{"gitId":"rismm"},"content":"        Task task;","lastModifiedDate":"2024-02-20"},{"lineNumber":42,"author":{"gitId":"rismm"},"content":"        switch (taskSymbol) {","lastModifiedDate":"2024-02-20"},{"lineNumber":43,"author":{"gitId":"rismm"},"content":"        case TODO_SYMBOL:","lastModifiedDate":"2024-02-20"},{"lineNumber":44,"author":{"gitId":"rismm"},"content":"            task \u003d new ToDo(taskInput);","lastModifiedDate":"2024-02-20"},{"lineNumber":45,"author":{"gitId":"rismm"},"content":"            break;","lastModifiedDate":"2024-02-20"},{"lineNumber":46,"author":{"gitId":"rismm"},"content":"        case DEADLINE_SYMBOL:","lastModifiedDate":"2024-02-20"},{"lineNumber":47,"author":{"gitId":"rismm"},"content":"            String[] deadlineData \u003d splitData(taskInput);","lastModifiedDate":"2024-02-20"},{"lineNumber":48,"author":{"gitId":"rismm"},"content":"            if (deadlineData.length !\u003d 2) {","lastModifiedDate":"2024-02-20"},{"lineNumber":49,"author":{"gitId":"rismm"},"content":"                throw new JoeException();","lastModifiedDate":"2024-02-20"},{"lineNumber":50,"author":{"gitId":"rismm"},"content":"            }","lastModifiedDate":"2024-02-20"},{"lineNumber":51,"author":{"gitId":"rismm"},"content":"            LocalDateTime by \u003d convertDateTime(deadlineData[1]);","lastModifiedDate":"2024-02-26"},{"lineNumber":52,"author":{"gitId":"rismm"},"content":"            task \u003d new Deadline(deadlineData[0], by);","lastModifiedDate":"2024-02-26"},{"lineNumber":53,"author":{"gitId":"rismm"},"content":"            break;","lastModifiedDate":"2024-02-20"},{"lineNumber":54,"author":{"gitId":"rismm"},"content":"        case EVENT_SYMBOL:","lastModifiedDate":"2024-02-20"},{"lineNumber":55,"author":{"gitId":"rismm"},"content":"            String[] eventData \u003d splitData(taskInput);","lastModifiedDate":"2024-02-20"},{"lineNumber":56,"author":{"gitId":"rismm"},"content":"            if (eventData.length !\u003d 3) {","lastModifiedDate":"2024-02-20"},{"lineNumber":57,"author":{"gitId":"rismm"},"content":"                throw new JoeException();","lastModifiedDate":"2024-02-20"},{"lineNumber":58,"author":{"gitId":"rismm"},"content":"            }","lastModifiedDate":"2024-02-20"},{"lineNumber":59,"author":{"gitId":"rismm"},"content":"            LocalDateTime start \u003d convertDateTime(eventData[1]);","lastModifiedDate":"2024-02-27"},{"lineNumber":60,"author":{"gitId":"rismm"},"content":"            LocalDateTime end \u003d convertDateTime(eventData[2]);","lastModifiedDate":"2024-02-27"},{"lineNumber":61,"author":{"gitId":"rismm"},"content":"            task \u003d new Event(eventData[0], start, end);","lastModifiedDate":"2024-02-27"},{"lineNumber":62,"author":{"gitId":"rismm"},"content":"            break;","lastModifiedDate":"2024-02-20"},{"lineNumber":63,"author":{"gitId":"rismm"},"content":"        default:","lastModifiedDate":"2024-02-20"},{"lineNumber":64,"author":{"gitId":"rismm"},"content":"            throw new JoeException();","lastModifiedDate":"2024-02-20"},{"lineNumber":65,"author":{"gitId":"rismm"},"content":"        }","lastModifiedDate":"2024-02-20"},{"lineNumber":66,"author":{"gitId":"rismm"},"content":"","lastModifiedDate":"2024-02-20"},{"lineNumber":67,"author":{"gitId":"rismm"},"content":"        task.setDone(isDone);","lastModifiedDate":"2024-02-20"},{"lineNumber":68,"author":{"gitId":"rismm"},"content":"        return task;","lastModifiedDate":"2024-02-20"},{"lineNumber":69,"author":{"gitId":"rismm"},"content":"    }","lastModifiedDate":"2024-02-20"},{"lineNumber":70,"author":{"gitId":"rismm"},"content":"","lastModifiedDate":"2024-02-20"},{"lineNumber":71,"author":{"gitId":"rismm"},"content":"    /**","lastModifiedDate":"2024-02-27"},{"lineNumber":72,"author":{"gitId":"rismm"},"content":"     * Converts a String containing a date and time into a LocalDateTime object","lastModifiedDate":"2024-02-27"},{"lineNumber":73,"author":{"gitId":"rismm"},"content":"     *","lastModifiedDate":"2024-02-27"},{"lineNumber":74,"author":{"gitId":"rismm"},"content":"     * @param dateTime String of a date and time","lastModifiedDate":"2024-02-27"},{"lineNumber":75,"author":{"gitId":"rismm"},"content":"     * @return a LocalDateTime object parsed from the input string","lastModifiedDate":"2024-02-27"},{"lineNumber":76,"author":{"gitId":"rismm"},"content":"     * @throws JoeException if the input string does not match the set format","lastModifiedDate":"2024-02-27"},{"lineNumber":77,"author":{"gitId":"rismm"},"content":"     */","lastModifiedDate":"2024-02-27"},{"lineNumber":78,"author":{"gitId":"rismm"},"content":"    protected static LocalDateTime convertDateTime(String dateTime) throws JoeException {","lastModifiedDate":"2024-02-26"},{"lineNumber":79,"author":{"gitId":"rismm"},"content":"        try {","lastModifiedDate":"2024-02-26"},{"lineNumber":80,"author":{"gitId":"rismm"},"content":"            return LocalDateTime.parse(dateTime, SAVED_DATE_FORMAT);","lastModifiedDate":"2024-02-26"},{"lineNumber":81,"author":{"gitId":"rismm"},"content":"        } catch (DateTimeException e) {","lastModifiedDate":"2024-02-26"},{"lineNumber":82,"author":{"gitId":"rismm"},"content":"            throw new JoeException();","lastModifiedDate":"2024-02-26"},{"lineNumber":83,"author":{"gitId":"rismm"},"content":"        }","lastModifiedDate":"2024-02-26"},{"lineNumber":84,"author":{"gitId":"rismm"},"content":"    }","lastModifiedDate":"2024-02-26"},{"lineNumber":85,"author":{"gitId":"rismm"},"content":"","lastModifiedDate":"2024-02-26"},{"lineNumber":86,"author":{"gitId":"rismm"},"content":"    protected static String[] splitData(String data) {","lastModifiedDate":"2024-02-20"},{"lineNumber":87,"author":{"gitId":"rismm"},"content":"        return data.split(SEPARATOR);","lastModifiedDate":"2024-02-20"},{"lineNumber":88,"author":{"gitId":"rismm"},"content":"    }","lastModifiedDate":"2024-02-20"},{"lineNumber":89,"author":{"gitId":"rismm"},"content":"","lastModifiedDate":"2024-02-20"},{"lineNumber":90,"author":{"gitId":"rismm"},"content":"    /**","lastModifiedDate":"2024-02-20"},{"lineNumber":91,"author":{"gitId":"rismm"},"content":"     * Generates file data from a ToDo task","lastModifiedDate":"2024-02-20"},{"lineNumber":92,"author":{"gitId":"rismm"},"content":"     * in the form \"t#MARK STATUS#TASKNAME\"","lastModifiedDate":"2024-02-20"},{"lineNumber":93,"author":{"gitId":"rismm"},"content":"     *","lastModifiedDate":"2024-02-20"},{"lineNumber":94,"author":{"gitId":"rismm"},"content":"     * @param taskInfo String of a ToDo task status","lastModifiedDate":"2024-02-20"},{"lineNumber":95,"author":{"gitId":"rismm"},"content":"     * @return String of parsed data to used to write","lastModifiedDate":"2024-02-20"},{"lineNumber":96,"author":{"gitId":"rismm"},"content":"     */","lastModifiedDate":"2024-02-20"},{"lineNumber":97,"author":{"gitId":"rismm"},"content":"    public static String getTodoData(String taskInfo) {","lastModifiedDate":"2024-02-20"},{"lineNumber":98,"author":{"gitId":"rismm"},"content":"        String doneSymbol \u003d taskInfo.contains(\"[X]\") ? String.valueOf(DONE_SYMBOL) : \"o\";","lastModifiedDate":"2024-02-20"},{"lineNumber":99,"author":{"gitId":"rismm"},"content":"        String taskName \u003d taskInfo.substring(taskInfo.indexOf(\"] \") + 1).trim();","lastModifiedDate":"2024-02-20"},{"lineNumber":100,"author":{"gitId":"rismm"},"content":"","lastModifiedDate":"2024-02-20"},{"lineNumber":101,"author":{"gitId":"rismm"},"content":"        return TODO_SYMBOL + SEPARATOR + doneSymbol + SEPARATOR + taskName;","lastModifiedDate":"2024-02-20"},{"lineNumber":102,"author":{"gitId":"rismm"},"content":"    }","lastModifiedDate":"2024-02-20"},{"lineNumber":103,"author":{"gitId":"rismm"},"content":"","lastModifiedDate":"2024-02-20"},{"lineNumber":104,"author":{"gitId":"rismm"},"content":"    /**","lastModifiedDate":"2024-02-20"},{"lineNumber":105,"author":{"gitId":"rismm"},"content":"     * Generates file data from a Deadline task","lastModifiedDate":"2024-02-20"},{"lineNumber":106,"author":{"gitId":"rismm"},"content":"     * in the form \"d#MARK STATUS#TASKNAME#DEADLINE DATE\"","lastModifiedDate":"2024-02-20"},{"lineNumber":107,"author":{"gitId":"rismm"},"content":"     *","lastModifiedDate":"2024-02-20"},{"lineNumber":108,"author":{"gitId":"rismm"},"content":"     * @param taskInfo String of a Deadline task status","lastModifiedDate":"2024-02-20"},{"lineNumber":109,"author":{"gitId":"rismm"},"content":"     * @return String of parsed data to used to write","lastModifiedDate":"2024-02-20"},{"lineNumber":110,"author":{"gitId":"rismm"},"content":"     */","lastModifiedDate":"2024-02-20"},{"lineNumber":111,"author":{"gitId":"rismm"},"content":"    public static String getDeadlineData(String taskInfo) {","lastModifiedDate":"2024-02-20"},{"lineNumber":112,"author":{"gitId":"rismm"},"content":"        String doneSymbol \u003d taskInfo.contains(\"[X]\") ? String.valueOf(DONE_SYMBOL) : \"o\";","lastModifiedDate":"2024-02-20"},{"lineNumber":113,"author":{"gitId":"rismm"},"content":"        String taskName \u003d taskInfo.substring(taskInfo.indexOf(\"] \") + 1, taskInfo.indexOf(\"(by:\")).trim();","lastModifiedDate":"2024-02-20"},{"lineNumber":114,"author":{"gitId":"rismm"},"content":"        String deadlineTime \u003d taskInfo.substring(taskInfo.indexOf(\"(by: \") + 5, taskInfo.lastIndexOf(\")\")).trim();","lastModifiedDate":"2024-02-20"},{"lineNumber":115,"author":{"gitId":"rismm"},"content":"","lastModifiedDate":"2024-02-20"},{"lineNumber":116,"author":{"gitId":"rismm"},"content":"        return DEADLINE_SYMBOL + SEPARATOR + doneSymbol + SEPARATOR + taskName + SEPARATOR + deadlineTime;","lastModifiedDate":"2024-02-20"},{"lineNumber":117,"author":{"gitId":"rismm"},"content":"    }","lastModifiedDate":"2024-02-20"},{"lineNumber":118,"author":{"gitId":"rismm"},"content":"","lastModifiedDate":"2024-02-20"},{"lineNumber":119,"author":{"gitId":"rismm"},"content":"    /**","lastModifiedDate":"2024-02-20"},{"lineNumber":120,"author":{"gitId":"rismm"},"content":"     * Generates file data from an Event task","lastModifiedDate":"2024-02-20"},{"lineNumber":121,"author":{"gitId":"rismm"},"content":"     * in the form \"e#MARK STATUS#TASKNAME#START DATE#END DATE\"","lastModifiedDate":"2024-02-20"},{"lineNumber":122,"author":{"gitId":"rismm"},"content":"     *","lastModifiedDate":"2024-02-20"},{"lineNumber":123,"author":{"gitId":"rismm"},"content":"     * @param taskInfo String of an Event task status","lastModifiedDate":"2024-02-20"},{"lineNumber":124,"author":{"gitId":"rismm"},"content":"     * @return String of parsed data to used to write","lastModifiedDate":"2024-02-20"},{"lineNumber":125,"author":{"gitId":"rismm"},"content":"     */","lastModifiedDate":"2024-02-20"},{"lineNumber":126,"author":{"gitId":"rismm"},"content":"    public static String getEventData(String taskInfo) {","lastModifiedDate":"2024-02-20"},{"lineNumber":127,"author":{"gitId":"rismm"},"content":"        String doneSymbol \u003d taskInfo.contains(\"[X]\") ? String.valueOf(DONE_SYMBOL) : \"o\";","lastModifiedDate":"2024-02-20"},{"lineNumber":128,"author":{"gitId":"rismm"},"content":"        String taskName \u003d taskInfo.substring(taskInfo.indexOf(\"] \") + 1, taskInfo.indexOf(\"(from: \")).trim();","lastModifiedDate":"2024-02-20"},{"lineNumber":129,"author":{"gitId":"rismm"},"content":"        String eventStart \u003d taskInfo.substring(taskInfo.indexOf(\"(from: \") + 7, taskInfo.indexOf(\" to: \"));","lastModifiedDate":"2024-02-20"},{"lineNumber":130,"author":{"gitId":"rismm"},"content":"        String eventEnd \u003d taskInfo.substring(taskInfo.indexOf(\" to: \") + 5, taskInfo.lastIndexOf(\")\"));","lastModifiedDate":"2024-02-20"},{"lineNumber":131,"author":{"gitId":"rismm"},"content":"","lastModifiedDate":"2024-02-20"},{"lineNumber":132,"author":{"gitId":"rismm"},"content":"        return EVENT_SYMBOL + SEPARATOR + doneSymbol + SEPARATOR + taskName + SEPARATOR + eventStart + SEPARATOR + eventEnd;","lastModifiedDate":"2024-02-20"},{"lineNumber":133,"author":{"gitId":"rismm"},"content":"    }","lastModifiedDate":"2024-02-20"},{"lineNumber":134,"author":{"gitId":"rismm"},"content":"}","lastModifiedDate":"2024-02-20"}],"authorContributionMap":{"rismm":134}},{"path":"src/main/java/joe/util/InputParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"rismm"},"content":"package joe.util;","lastModifiedDate":"2024-02-10"},{"lineNumber":2,"author":{"gitId":"rismm"},"content":"","lastModifiedDate":"2024-02-10"},{"lineNumber":3,"author":{"gitId":"rismm"},"content":"import joe.JoeException;","lastModifiedDate":"2024-02-10"},{"lineNumber":4,"author":{"gitId":"rismm"},"content":"import joe.command.Command;","lastModifiedDate":"2024-02-26"},{"lineNumber":5,"author":{"gitId":"rismm"},"content":"import joe.command.ByeCommand;","lastModifiedDate":"2024-02-26"},{"lineNumber":6,"author":{"gitId":"rismm"},"content":"import joe.command.DeleteCommand;","lastModifiedDate":"2024-02-26"},{"lineNumber":7,"author":{"gitId":"rismm"},"content":"import joe.command.InvalidCommand;","lastModifiedDate":"2024-02-26"},{"lineNumber":8,"author":{"gitId":"rismm"},"content":"import joe.command.NewTaskCommand;","lastModifiedDate":"2024-02-26"},{"lineNumber":9,"author":{"gitId":"rismm"},"content":"import joe.command.ListCommand;","lastModifiedDate":"2024-02-26"},{"lineNumber":10,"author":{"gitId":"rismm"},"content":"import joe.command.ToggleMarkCommand;","lastModifiedDate":"2024-02-26"},{"lineNumber":11,"author":{"gitId":"rismm"},"content":"import joe.command.FindCommand;","lastModifiedDate":"2024-02-27"},{"lineNumber":12,"author":{"gitId":"rismm"},"content":"import joe.task.TaskType;","lastModifiedDate":"2024-02-26"},{"lineNumber":13,"author":{"gitId":"rismm"},"content":"","lastModifiedDate":"2024-02-10"},{"lineNumber":14,"author":{"gitId":"rismm"},"content":"import java.time.DateTimeException;","lastModifiedDate":"2024-02-26"},{"lineNumber":15,"author":{"gitId":"rismm"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2024-02-26"},{"lineNumber":16,"author":{"gitId":"rismm"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2024-02-26"},{"lineNumber":17,"author":{"gitId":"rismm"},"content":"","lastModifiedDate":"2024-02-26"},{"lineNumber":18,"author":{"gitId":"rismm"},"content":"/**","lastModifiedDate":"2024-02-27"},{"lineNumber":19,"author":{"gitId":"rismm"},"content":" * Parser for user inputs","lastModifiedDate":"2024-02-27"},{"lineNumber":20,"author":{"gitId":"rismm"},"content":" */","lastModifiedDate":"2024-02-27"},{"lineNumber":21,"author":{"gitId":"rismm"},"content":"public class InputParser {","lastModifiedDate":"2024-02-05"},{"lineNumber":22,"author":{"gitId":"rismm"},"content":"    protected static final String FLAG_INDICATOR \u003d \"/\";","lastModifiedDate":"2024-02-05"},{"lineNumber":23,"author":{"gitId":"rismm"},"content":"    protected static final String DEADLINE_FLAG \u003d  FLAG_INDICATOR + \"by\";","lastModifiedDate":"2024-02-10"},{"lineNumber":24,"author":{"gitId":"rismm"},"content":"    protected static final String EVENT_START_FLAG \u003d FLAG_INDICATOR + \"from\";","lastModifiedDate":"2024-02-10"},{"lineNumber":25,"author":{"gitId":"rismm"},"content":"    protected static final String EVENT_END_FLAG \u003d FLAG_INDICATOR + \"to\";","lastModifiedDate":"2024-02-10"},{"lineNumber":26,"author":{"gitId":"rismm"},"content":"    protected static final String EXIT_COMMAND \u003d \"bye\";","lastModifiedDate":"2024-02-26"},{"lineNumber":27,"author":{"gitId":"rismm"},"content":"    protected static final String LIST_COMMAND \u003d \"list\";","lastModifiedDate":"2024-02-26"},{"lineNumber":28,"author":{"gitId":"rismm"},"content":"    protected static final String MARK_COMMAND \u003d \"mark\";","lastModifiedDate":"2024-02-26"},{"lineNumber":29,"author":{"gitId":"rismm"},"content":"    protected static final String UNMARK_COMMAND \u003d \"unmark\";","lastModifiedDate":"2024-02-26"},{"lineNumber":30,"author":{"gitId":"rismm"},"content":"    protected static final String NEW_TODO_COMMAND \u003d \"todo\";","lastModifiedDate":"2024-02-26"},{"lineNumber":31,"author":{"gitId":"rismm"},"content":"    protected static final String NEW_DEADLINE_COMMAND \u003d \"deadline\";","lastModifiedDate":"2024-02-26"},{"lineNumber":32,"author":{"gitId":"rismm"},"content":"    protected static final String NEW_EVENT_COMMAND \u003d \"event\";","lastModifiedDate":"2024-02-26"},{"lineNumber":33,"author":{"gitId":"rismm"},"content":"    protected static final String DELETE_COMMAND \u003d \"delete\";","lastModifiedDate":"2024-02-26"},{"lineNumber":34,"author":{"gitId":"rismm"},"content":"    protected static final String FIND_COMMAND \u003d \"find\";","lastModifiedDate":"2024-02-27"},{"lineNumber":35,"author":{"gitId":"rismm"},"content":"    protected static final int INVALID_TASK_NUMBER \u003d -69;","lastModifiedDate":"2024-02-26"},{"lineNumber":36,"author":{"gitId":"rismm"},"content":"    protected static final DateTimeFormatter INPUT_TIME_FORMAT \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy HHmm\");","lastModifiedDate":"2024-02-26"},{"lineNumber":37,"author":{"gitId":"rismm"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":38,"author":{"gitId":"rismm"},"content":"    /**","lastModifiedDate":"2024-02-27"},{"lineNumber":39,"author":{"gitId":"rismm"},"content":"     * Returns an executable command according to the input command word","lastModifiedDate":"2024-02-27"},{"lineNumber":40,"author":{"gitId":"rismm"},"content":"     *","lastModifiedDate":"2024-02-27"},{"lineNumber":41,"author":{"gitId":"rismm"},"content":"     * @param input Input string of user","lastModifiedDate":"2024-02-27"},{"lineNumber":42,"author":{"gitId":"rismm"},"content":"     * @return a Command to execute","lastModifiedDate":"2024-02-27"},{"lineNumber":43,"author":{"gitId":"rismm"},"content":"     */","lastModifiedDate":"2024-02-27"},{"lineNumber":44,"author":{"gitId":"rismm"},"content":"    public static Command getCommand(String input) {","lastModifiedDate":"2024-02-26"},{"lineNumber":45,"author":{"gitId":"rismm"},"content":"        Command command;","lastModifiedDate":"2024-02-26"},{"lineNumber":46,"author":{"gitId":"rismm"},"content":"        String commandName \u003d getCommandName(input);","lastModifiedDate":"2024-02-26"},{"lineNumber":47,"author":{"gitId":"rismm"},"content":"        String arguments \u003d getArguments(input);","lastModifiedDate":"2024-02-27"},{"lineNumber":48,"author":{"gitId":"rismm"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":49,"author":{"gitId":"rismm"},"content":"        int taskNumber \u003d INVALID_TASK_NUMBER;","lastModifiedDate":"2024-02-26"},{"lineNumber":50,"author":{"gitId":"rismm"},"content":"        try {","lastModifiedDate":"2024-02-26"},{"lineNumber":51,"author":{"gitId":"rismm"},"content":"            taskNumber \u003d Integer.parseInt(arguments);","lastModifiedDate":"2024-02-26"},{"lineNumber":52,"author":{"gitId":"rismm"},"content":"        } catch (NumberFormatException ignored) {","lastModifiedDate":"2024-02-26"},{"lineNumber":53,"author":{"gitId":"rismm"},"content":"            // Error is handled in commands that use task numbers","lastModifiedDate":"2024-02-26"},{"lineNumber":54,"author":{"gitId":"rismm"},"content":"        }","lastModifiedDate":"2024-02-26"},{"lineNumber":55,"author":{"gitId":"rismm"},"content":"","lastModifiedDate":"2024-02-26"},{"lineNumber":56,"author":{"gitId":"rismm"},"content":"        switch (commandName) {","lastModifiedDate":"2024-02-26"},{"lineNumber":57,"author":{"gitId":"rismm"},"content":"        case EXIT_COMMAND:","lastModifiedDate":"2024-02-26"},{"lineNumber":58,"author":{"gitId":"rismm"},"content":"            command \u003d new ByeCommand(arguments);","lastModifiedDate":"2024-02-26"},{"lineNumber":59,"author":{"gitId":"rismm"},"content":"            break;","lastModifiedDate":"2024-02-26"},{"lineNumber":60,"author":{"gitId":"rismm"},"content":"        case LIST_COMMAND:","lastModifiedDate":"2024-02-26"},{"lineNumber":61,"author":{"gitId":"rismm"},"content":"            command \u003d new ListCommand(arguments);","lastModifiedDate":"2024-02-26"},{"lineNumber":62,"author":{"gitId":"rismm"},"content":"            break;","lastModifiedDate":"2024-02-26"},{"lineNumber":63,"author":{"gitId":"rismm"},"content":"        case NEW_TODO_COMMAND:","lastModifiedDate":"2024-02-26"},{"lineNumber":64,"author":{"gitId":"rismm"},"content":"            command \u003d new NewTaskCommand(arguments, TaskType.TODO);","lastModifiedDate":"2024-02-26"},{"lineNumber":65,"author":{"gitId":"rismm"},"content":"            break;","lastModifiedDate":"2024-02-26"},{"lineNumber":66,"author":{"gitId":"rismm"},"content":"        case NEW_DEADLINE_COMMAND:","lastModifiedDate":"2024-02-26"},{"lineNumber":67,"author":{"gitId":"rismm"},"content":"            command \u003d new NewTaskCommand(arguments, TaskType.DEADLINE);","lastModifiedDate":"2024-02-26"},{"lineNumber":68,"author":{"gitId":"rismm"},"content":"            break;","lastModifiedDate":"2024-02-26"},{"lineNumber":69,"author":{"gitId":"rismm"},"content":"        case NEW_EVENT_COMMAND:","lastModifiedDate":"2024-02-26"},{"lineNumber":70,"author":{"gitId":"rismm"},"content":"            command \u003d new NewTaskCommand(arguments, TaskType.EVENT);","lastModifiedDate":"2024-02-26"},{"lineNumber":71,"author":{"gitId":"rismm"},"content":"            break;","lastModifiedDate":"2024-02-26"},{"lineNumber":72,"author":{"gitId":"rismm"},"content":"        case MARK_COMMAND:","lastModifiedDate":"2024-02-26"},{"lineNumber":73,"author":{"gitId":"rismm"},"content":"        case UNMARK_COMMAND:","lastModifiedDate":"2024-02-26"},{"lineNumber":74,"author":{"gitId":"rismm"},"content":"            command \u003d new ToggleMarkCommand(taskNumber, commandName.equals(MARK_COMMAND));","lastModifiedDate":"2024-02-26"},{"lineNumber":75,"author":{"gitId":"rismm"},"content":"            break;","lastModifiedDate":"2024-02-26"},{"lineNumber":76,"author":{"gitId":"rismm"},"content":"        case DELETE_COMMAND:","lastModifiedDate":"2024-02-26"},{"lineNumber":77,"author":{"gitId":"rismm"},"content":"            command \u003d new DeleteCommand(taskNumber);","lastModifiedDate":"2024-02-26"},{"lineNumber":78,"author":{"gitId":"rismm"},"content":"            break;","lastModifiedDate":"2024-02-26"},{"lineNumber":79,"author":{"gitId":"rismm"},"content":"        case FIND_COMMAND:","lastModifiedDate":"2024-02-27"},{"lineNumber":80,"author":{"gitId":"rismm"},"content":"            command \u003d new FindCommand(arguments);","lastModifiedDate":"2024-02-27"},{"lineNumber":81,"author":{"gitId":"rismm"},"content":"            break;","lastModifiedDate":"2024-02-27"},{"lineNumber":82,"author":{"gitId":"rismm"},"content":"        default:","lastModifiedDate":"2024-02-26"},{"lineNumber":83,"author":{"gitId":"rismm"},"content":"            command \u003d new InvalidCommand();","lastModifiedDate":"2024-02-26"},{"lineNumber":84,"author":{"gitId":"rismm"},"content":"            break;","lastModifiedDate":"2024-02-26"},{"lineNumber":85,"author":{"gitId":"rismm"},"content":"        }","lastModifiedDate":"2024-02-26"},{"lineNumber":86,"author":{"gitId":"rismm"},"content":"","lastModifiedDate":"2024-02-26"},{"lineNumber":87,"author":{"gitId":"rismm"},"content":"        return command;","lastModifiedDate":"2024-02-26"},{"lineNumber":88,"author":{"gitId":"rismm"},"content":"    }","lastModifiedDate":"2024-02-26"},{"lineNumber":89,"author":{"gitId":"rismm"},"content":"","lastModifiedDate":"2024-02-26"},{"lineNumber":90,"author":{"gitId":"rismm"},"content":"    /**","lastModifiedDate":"2024-02-27"},{"lineNumber":91,"author":{"gitId":"rismm"},"content":"     * Returns the command name in the user input,","lastModifiedDate":"2024-02-27"},{"lineNumber":92,"author":{"gitId":"rismm"},"content":"     * which is separated by first whitespace in the user input.","lastModifiedDate":"2024-02-27"},{"lineNumber":93,"author":{"gitId":"rismm"},"content":"     *","lastModifiedDate":"2024-02-27"},{"lineNumber":94,"author":{"gitId":"rismm"},"content":"     * @param input User input","lastModifiedDate":"2024-02-27"},{"lineNumber":95,"author":{"gitId":"rismm"},"content":"     * @return a String of the command name","lastModifiedDate":"2024-02-27"},{"lineNumber":96,"author":{"gitId":"rismm"},"content":"     */","lastModifiedDate":"2024-02-27"},{"lineNumber":97,"author":{"gitId":"rismm"},"content":"    public static String getCommandName(String input) {","lastModifiedDate":"2024-02-26"},{"lineNumber":98,"author":{"gitId":"rismm"},"content":"        if (!input.contains(\" \")) {","lastModifiedDate":"2024-02-05"},{"lineNumber":99,"author":{"gitId":"rismm"},"content":"            return input;","lastModifiedDate":"2024-02-05"},{"lineNumber":100,"author":{"gitId":"rismm"},"content":"        }","lastModifiedDate":"2024-02-05"},{"lineNumber":101,"author":{"gitId":"rismm"},"content":"        return input.substring(0, input.indexOf(\" \"));","lastModifiedDate":"2024-02-05"},{"lineNumber":102,"author":{"gitId":"rismm"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":103,"author":{"gitId":"rismm"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":104,"author":{"gitId":"rismm"},"content":"    /**","lastModifiedDate":"2024-02-27"},{"lineNumber":105,"author":{"gitId":"rismm"},"content":"     * Returns a string containing the arguments in the user input,","lastModifiedDate":"2024-02-27"},{"lineNumber":106,"author":{"gitId":"rismm"},"content":"     * which is the string of characters after the first whitespace","lastModifiedDate":"2024-02-27"},{"lineNumber":107,"author":{"gitId":"rismm"},"content":"     *","lastModifiedDate":"2024-02-27"},{"lineNumber":108,"author":{"gitId":"rismm"},"content":"     * @param input User input","lastModifiedDate":"2024-02-27"},{"lineNumber":109,"author":{"gitId":"rismm"},"content":"     * @return a String containing the arguments of the input","lastModifiedDate":"2024-02-27"},{"lineNumber":110,"author":{"gitId":"rismm"},"content":"     */","lastModifiedDate":"2024-02-27"},{"lineNumber":111,"author":{"gitId":"rismm"},"content":"    public static String getArguments(String input) {","lastModifiedDate":"2024-02-27"},{"lineNumber":112,"author":{"gitId":"rismm"},"content":"        if (!input.contains(\" \")) {","lastModifiedDate":"2024-02-05"},{"lineNumber":113,"author":{"gitId":"rismm"},"content":"            return \"\";","lastModifiedDate":"2024-02-05"},{"lineNumber":114,"author":{"gitId":"rismm"},"content":"        }","lastModifiedDate":"2024-02-05"},{"lineNumber":115,"author":{"gitId":"rismm"},"content":"        return input.substring(input.indexOf(\" \")).trim();","lastModifiedDate":"2024-02-05"},{"lineNumber":116,"author":{"gitId":"rismm"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":117,"author":{"gitId":"rismm"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":118,"author":{"gitId":"rismm"},"content":"    /**","lastModifiedDate":"2024-02-27"},{"lineNumber":119,"author":{"gitId":"rismm"},"content":"     * Returns the name of a task from a string containing the user arguments from the user input","lastModifiedDate":"2024-02-27"},{"lineNumber":120,"author":{"gitId":"rismm"},"content":"     *","lastModifiedDate":"2024-02-27"},{"lineNumber":121,"author":{"gitId":"rismm"},"content":"     * @param message Arguments from the user input","lastModifiedDate":"2024-02-27"},{"lineNumber":122,"author":{"gitId":"rismm"},"content":"     * @return a String of a task name","lastModifiedDate":"2024-02-27"},{"lineNumber":123,"author":{"gitId":"rismm"},"content":"     * @throws JoeException if the input argument does not contain a valid flag","lastModifiedDate":"2024-02-27"},{"lineNumber":124,"author":{"gitId":"rismm"},"content":"     */","lastModifiedDate":"2024-02-27"},{"lineNumber":125,"author":{"gitId":"rismm"},"content":"    public static String getTaskName(String message) throws JoeException {","lastModifiedDate":"2024-02-10"},{"lineNumber":126,"author":{"gitId":"rismm"},"content":"        if (!message.contains(FLAG_INDICATOR)) {","lastModifiedDate":"2024-02-05"},{"lineNumber":127,"author":{"gitId":"rismm"},"content":"            throw new JoeException();","lastModifiedDate":"2024-02-10"},{"lineNumber":128,"author":{"gitId":"rismm"},"content":"        }","lastModifiedDate":"2024-02-05"},{"lineNumber":129,"author":{"gitId":"rismm"},"content":"        return message.substring(0, message.indexOf(FLAG_INDICATOR)).trim();","lastModifiedDate":"2024-02-05"},{"lineNumber":130,"author":{"gitId":"rismm"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":131,"author":{"gitId":"rismm"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":132,"author":{"gitId":"rismm"},"content":"    /**","lastModifiedDate":"2024-02-27"},{"lineNumber":133,"author":{"gitId":"rismm"},"content":"     * Gets the deadline time from the user input argument","lastModifiedDate":"2024-02-27"},{"lineNumber":134,"author":{"gitId":"rismm"},"content":"     *","lastModifiedDate":"2024-02-27"},{"lineNumber":135,"author":{"gitId":"rismm"},"content":"     * @param message User input","lastModifiedDate":"2024-02-27"},{"lineNumber":136,"author":{"gitId":"rismm"},"content":"     * @return a LocalDateTime containing the task deadline","lastModifiedDate":"2024-02-27"},{"lineNumber":137,"author":{"gitId":"rismm"},"content":"     * @throws JoeException if the input argument does not contain the deadline flag","lastModifiedDate":"2024-02-27"},{"lineNumber":138,"author":{"gitId":"rismm"},"content":"     */","lastModifiedDate":"2024-02-27"},{"lineNumber":139,"author":{"gitId":"rismm"},"content":"    public static LocalDateTime getDeadlineTime(String message) throws JoeException{","lastModifiedDate":"2024-02-26"},{"lineNumber":140,"author":{"gitId":"rismm"},"content":"        if (!message.contains(DEADLINE_FLAG)) {","lastModifiedDate":"2024-02-05"},{"lineNumber":141,"author":{"gitId":"rismm"},"content":"            throw new JoeException();","lastModifiedDate":"2024-02-10"},{"lineNumber":142,"author":{"gitId":"rismm"},"content":"        }","lastModifiedDate":"2024-02-05"},{"lineNumber":143,"author":{"gitId":"rismm"},"content":"        String time \u003d  message.substring(message.indexOf(DEADLINE_FLAG)).replace(DEADLINE_FLAG, \"\").trim();","lastModifiedDate":"2024-02-26"},{"lineNumber":144,"author":{"gitId":"rismm"},"content":"","lastModifiedDate":"2024-02-26"},{"lineNumber":145,"author":{"gitId":"rismm"},"content":"        LocalDateTime deadlineTime;","lastModifiedDate":"2024-02-26"},{"lineNumber":146,"author":{"gitId":"rismm"},"content":"        try {","lastModifiedDate":"2024-02-26"},{"lineNumber":147,"author":{"gitId":"rismm"},"content":"            deadlineTime \u003d LocalDateTime.parse(time, INPUT_TIME_FORMAT);","lastModifiedDate":"2024-02-26"},{"lineNumber":148,"author":{"gitId":"rismm"},"content":"        } catch (DateTimeException e) {","lastModifiedDate":"2024-02-26"},{"lineNumber":149,"author":{"gitId":"rismm"},"content":"            throw new JoeException();","lastModifiedDate":"2024-02-26"},{"lineNumber":150,"author":{"gitId":"rismm"},"content":"        }","lastModifiedDate":"2024-02-26"},{"lineNumber":151,"author":{"gitId":"rismm"},"content":"","lastModifiedDate":"2024-02-26"},{"lineNumber":152,"author":{"gitId":"rismm"},"content":"        return deadlineTime;","lastModifiedDate":"2024-02-26"},{"lineNumber":153,"author":{"gitId":"rismm"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":154,"author":{"gitId":"rismm"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":155,"author":{"gitId":"rismm"},"content":"    /**","lastModifiedDate":"2024-02-27"},{"lineNumber":156,"author":{"gitId":"rismm"},"content":"     * Gets the event start and end times from the user input argument","lastModifiedDate":"2024-02-27"},{"lineNumber":157,"author":{"gitId":"rismm"},"content":"     *","lastModifiedDate":"2024-02-27"},{"lineNumber":158,"author":{"gitId":"rismm"},"content":"     * @param message User input","lastModifiedDate":"2024-02-27"},{"lineNumber":159,"author":{"gitId":"rismm"},"content":"     * @return a LocalDateTime array of fixed size 2 containing the event start time and end time","lastModifiedDate":"2024-02-27"},{"lineNumber":160,"author":{"gitId":"rismm"},"content":"     * at index 0 and 1 respectively","lastModifiedDate":"2024-02-27"},{"lineNumber":161,"author":{"gitId":"rismm"},"content":"     * @throws JoeException if the input argument does not contain the event flags","lastModifiedDate":"2024-02-27"},{"lineNumber":162,"author":{"gitId":"rismm"},"content":"     */","lastModifiedDate":"2024-02-27"},{"lineNumber":163,"author":{"gitId":"rismm"},"content":"    public static LocalDateTime[] getEventTime(String message) throws JoeException {","lastModifiedDate":"2024-02-27"},{"lineNumber":164,"author":{"gitId":"rismm"},"content":"        if (!message.contains(EVENT_START_FLAG) || !message.contains(EVENT_END_FLAG)) {","lastModifiedDate":"2024-02-05"},{"lineNumber":165,"author":{"gitId":"rismm"},"content":"            throw new JoeException();","lastModifiedDate":"2024-02-10"},{"lineNumber":166,"author":{"gitId":"rismm"},"content":"        }","lastModifiedDate":"2024-02-05"},{"lineNumber":167,"author":{"gitId":"rismm"},"content":"","lastModifiedDate":"2024-02-27"},{"lineNumber":168,"author":{"gitId":"rismm"},"content":"        int startIndex \u003d message.indexOf(EVENT_START_FLAG);","lastModifiedDate":"2024-02-05"},{"lineNumber":169,"author":{"gitId":"rismm"},"content":"        int endIndex \u003d message.indexOf(EVENT_END_FLAG);","lastModifiedDate":"2024-02-05"},{"lineNumber":170,"author":{"gitId":"rismm"},"content":"        String startDate \u003d message.substring(startIndex, endIndex).replace(EVENT_START_FLAG, \"\").trim();","lastModifiedDate":"2024-02-27"},{"lineNumber":171,"author":{"gitId":"rismm"},"content":"        String endDate \u003d message.substring(endIndex).replace(EVENT_END_FLAG, \"\").trim();","lastModifiedDate":"2024-02-27"},{"lineNumber":172,"author":{"gitId":"rismm"},"content":"","lastModifiedDate":"2024-02-27"},{"lineNumber":173,"author":{"gitId":"rismm"},"content":"        LocalDateTime[] eventDurations \u003d new LocalDateTime[2];","lastModifiedDate":"2024-02-27"},{"lineNumber":174,"author":{"gitId":"rismm"},"content":"        try {","lastModifiedDate":"2024-02-27"},{"lineNumber":175,"author":{"gitId":"rismm"},"content":"            eventDurations[0] \u003d LocalDateTime.parse(startDate, INPUT_TIME_FORMAT);","lastModifiedDate":"2024-02-27"},{"lineNumber":176,"author":{"gitId":"rismm"},"content":"            eventDurations[1] \u003d LocalDateTime.parse(endDate, INPUT_TIME_FORMAT);","lastModifiedDate":"2024-02-27"},{"lineNumber":177,"author":{"gitId":"rismm"},"content":"        } catch (DateTimeException e) {","lastModifiedDate":"2024-02-27"},{"lineNumber":178,"author":{"gitId":"rismm"},"content":"            throw new JoeException();","lastModifiedDate":"2024-02-27"},{"lineNumber":179,"author":{"gitId":"rismm"},"content":"        }","lastModifiedDate":"2024-02-27"},{"lineNumber":180,"author":{"gitId":"rismm"},"content":"        return eventDurations;","lastModifiedDate":"2024-02-05"},{"lineNumber":181,"author":{"gitId":"rismm"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":182,"author":{"gitId":"rismm"},"content":"}","lastModifiedDate":"2024-02-05"}],"authorContributionMap":{"rismm":182}},{"path":"src/main/java/joe/util/Printer.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"rismm"},"content":"package joe.util;","lastModifiedDate":"2024-02-10"},{"lineNumber":2,"author":{"gitId":"rismm"},"content":"","lastModifiedDate":"2024-02-10"},{"lineNumber":3,"author":{"gitId":"rismm"},"content":"/**","lastModifiedDate":"2024-02-27"},{"lineNumber":4,"author":{"gitId":"rismm"},"content":" * Handles output messages to the user on the command line","lastModifiedDate":"2024-02-27"},{"lineNumber":5,"author":{"gitId":"rismm"},"content":" */","lastModifiedDate":"2024-02-27"},{"lineNumber":6,"author":{"gitId":"rismm"},"content":"public class Printer {","lastModifiedDate":"2024-02-05"},{"lineNumber":7,"author":{"gitId":"rismm"},"content":"    protected static final String H_LINE \u003d \"____________________________________________________________\\n\";","lastModifiedDate":"2024-02-10"},{"lineNumber":8,"author":{"gitId":"rismm"},"content":"    protected static final String GREET_MESSAGE \u003d H_LINE + \"HI I\u0027M JOE\\n\" + \"WHAT CAN I DO FOR YOU\\n\" + H_LINE;","lastModifiedDate":"2024-02-05"},{"lineNumber":9,"author":{"gitId":"rismm"},"content":"    protected static final String EXIT_MESSAGE \u003d H_LINE + \"GOODBYE. PLEASE COME BACK AGAIN :)\\n\" + H_LINE;","lastModifiedDate":"2024-02-05"},{"lineNumber":10,"author":{"gitId":"rismm"},"content":"    protected static final String LIST_MESSAGE \u003d H_LINE + \"HERE\u0027S YOUR TASKS:\";","lastModifiedDate":"2024-02-05"},{"lineNumber":11,"author":{"gitId":"rismm"},"content":"    protected static final String DEFAULT_ERROR \u003d H_LINE + \"INVALID COMMAND :( PLEASE ENTER SOMETHING I UNDERSTAND\\n\"","lastModifiedDate":"2024-02-05"},{"lineNumber":12,"author":{"gitId":"rismm"},"content":"            + H_LINE + \"YOU CAN USE THESE COMMANDS:\\n\\nbye\\n\\tEXIT JOE\"","lastModifiedDate":"2024-02-10"},{"lineNumber":13,"author":{"gitId":"rismm"},"content":"            + \"\\n\\nlist\\n\\tLIST ALL YOUR TASKS THAT I\u0027VE RECORDED\"","lastModifiedDate":"2024-02-10"},{"lineNumber":14,"author":{"gitId":"rismm"},"content":"            + \"\\n\\ntodo --TASK--\\ndeadline --TASK-- /by --TIME--\\nevent --TASK-- /from --START TIME-- /to --END TIME--\"","lastModifiedDate":"2024-02-10"},{"lineNumber":15,"author":{"gitId":"rismm"},"content":"            + \"\\n\\tADD A TODO/DEADLINE/EVENT TASK\\n\\tINPUT DATE TIME IN THE FORMAT: dd-mm-yyyy HHmm\"","lastModifiedDate":"2024-02-27"},{"lineNumber":16,"author":{"gitId":"rismm"},"content":"            + \"\\n\\nmark --TASK NUMBER--\\nunmark --TASK NUMBER--\\n\\tMARK/UNMARK YOUR TASK (NUMBER IN LIST) DONE\"","lastModifiedDate":"2024-02-19"},{"lineNumber":17,"author":{"gitId":"rismm"},"content":"            + \"\\n\\ndelete --TASK NUMBER--\\n\\tDELETE A TASK (NUMBER IN LIST) FROM THE LIST\"","lastModifiedDate":"2024-02-27"},{"lineNumber":18,"author":{"gitId":"rismm"},"content":"            + \"\\n\\nfind --KEYWORD--\\n\\tFIND ALL TASKS CONTAINING A KEYWORD\\n\"","lastModifiedDate":"2024-02-27"},{"lineNumber":19,"author":{"gitId":"rismm"},"content":"            + H_LINE;","lastModifiedDate":"2024-02-10"},{"lineNumber":20,"author":{"gitId":"rismm"},"content":"    protected static final String EXIT_INPUT_ERROR \u003d H_LINE + \"SORRY I DON\u0027T UNDERSTAND :( DID YOU MEAN\\n\\tbye\\n\"","lastModifiedDate":"2024-02-10"},{"lineNumber":21,"author":{"gitId":"rismm"},"content":"            + H_LINE;","lastModifiedDate":"2024-02-10"},{"lineNumber":22,"author":{"gitId":"rismm"},"content":"    protected static final String LIST_INPUT_ERROR \u003d H_LINE + \"SORRY I DON\u0027T UNDERSTAND :( DID YOU MEAN\\n\\tlist\\n\"","lastModifiedDate":"2024-02-10"},{"lineNumber":23,"author":{"gitId":"rismm"},"content":"            + H_LINE;","lastModifiedDate":"2024-02-05"},{"lineNumber":24,"author":{"gitId":"rismm"},"content":"    protected static final String INVALID_MARK_ERROR \u003d H_LINE + \"PLEASE ENTER A VALID TASK NUMBER :(\\n\"","lastModifiedDate":"2024-02-10"},{"lineNumber":25,"author":{"gitId":"rismm"},"content":"            + \"\\tUSE: \\\"mark --INTEGER--\\\" OR \\\"unmark --INTEGER--\\\"\\n\\tYOU CAN list FOR REFERENCE\\n\" + H_LINE;","lastModifiedDate":"2024-02-10"},{"lineNumber":26,"author":{"gitId":"rismm"},"content":"    protected static final String MARK_MESSAGE \u003d H_LINE + \"GOOD JOB BRO. I\u0027VE MARKED IT AS DONE:\";","lastModifiedDate":"2024-02-05"},{"lineNumber":27,"author":{"gitId":"rismm"},"content":"    protected static final String UNMARK_MESSAGE \u003d H_LINE + \"OKAY I WILL MARK IT UNDONE:\";","lastModifiedDate":"2024-02-05"},{"lineNumber":28,"author":{"gitId":"rismm"},"content":"    protected static final String TASK_ADDED_MESSAGE \u003d H_LINE + \"OKAY I\u0027VE ADDED THIS TASK:\\n\";","lastModifiedDate":"2024-02-05"},{"lineNumber":29,"author":{"gitId":"rismm"},"content":"    protected static final String TASKS_NUMBER_MESSAGE \u003d \"NUMBER OF TASKS CURRENTLY IN LIST: \";","lastModifiedDate":"2024-02-18"},{"lineNumber":30,"author":{"gitId":"rismm"},"content":"    protected static final String TODO_EMPTY_TASK_ERROR \u003d H_LINE + \"??? YOU NEED TO GIVE YOUR TASK A NAME\\n\"","lastModifiedDate":"2024-02-10"},{"lineNumber":31,"author":{"gitId":"rismm"},"content":"            + \"\\ttodo --TASK--\\n\" + H_LINE;","lastModifiedDate":"2024-02-10"},{"lineNumber":32,"author":{"gitId":"rismm"},"content":"    protected static final String DEADLINE_INPUT_ERROR \u003d H_LINE + \"INVALID DEADLINE LOL\\nPLEASE USE /by TO INDICATE \"","lastModifiedDate":"2024-02-10"},{"lineNumber":33,"author":{"gitId":"rismm"},"content":"            + \"DEADLINE TIME\\n\\tdeadline --TASK-- /by --DATE TIME--\\n\\tINPUT DATE TIME IN THE FORMAT: dd-mm-yyyy HHmm\\n\"","lastModifiedDate":"2024-02-27"},{"lineNumber":34,"author":{"gitId":"rismm"},"content":"            + H_LINE;","lastModifiedDate":"2024-02-27"},{"lineNumber":35,"author":{"gitId":"rismm"},"content":"    protected static final String EVENT_INPUT_ERROR \u003d H_LINE + \"INVALID EVENT LOL\\nPLEASE USE /from AND /to TO \"","lastModifiedDate":"2024-02-10"},{"lineNumber":36,"author":{"gitId":"rismm"},"content":"            + \"INDICATE EVENT DURATION\\n\\tevent --TASK-- /from --START DATE TIME-- /to --END DATE TIME--\\n\"","lastModifiedDate":"2024-02-27"},{"lineNumber":37,"author":{"gitId":"rismm"},"content":"            + \"\\tINPUT DATE TIME IN THE FORMAT: dd-mm-yyyy HHmm\\n\" + H_LINE;","lastModifiedDate":"2024-02-27"},{"lineNumber":38,"author":{"gitId":"rismm"},"content":"    protected static final String DELETE_MESSAGE \u003d H_LINE + \"COOL BEANS I WILL REMOVE THAT TASK:\";","lastModifiedDate":"2024-02-18"},{"lineNumber":39,"author":{"gitId":"rismm"},"content":"    protected static final String DELETE_ERROR \u003d H_LINE + \"SORRY BUT I CAN\u0027T DELETE WHATEVER YOU\u0027RE REFERRING TO BRO\\n\"","lastModifiedDate":"2024-02-19"},{"lineNumber":40,"author":{"gitId":"rismm"},"content":"            + \"\\tUSE A VALID INTEGER PLEASE: \\\"delete --INTEGER--\\\"\\n\" + H_LINE;","lastModifiedDate":"2024-02-19"},{"lineNumber":41,"author":{"gitId":"rismm"},"content":"    protected static final String FILE_CORRUPT_ERROR \u003d H_LINE + \"OOPS LOOKS LIKE THERE WERE CORRUPTED LINES OF CODE\\n\"","lastModifiedDate":"2024-02-20"},{"lineNumber":42,"author":{"gitId":"rismm"},"content":"            + \"\\tNUMBER OF CORRUPTED LINES: \";","lastModifiedDate":"2024-02-20"},{"lineNumber":43,"author":{"gitId":"rismm"},"content":"    protected static final String LOAD_ERROR \u003d H_LINE + \"SORRY I COULDN\u0027T GET YOUR PREVIOUS DATA\"","lastModifiedDate":"2024-02-20"},{"lineNumber":44,"author":{"gitId":"rismm"},"content":"            + \"\\n\\t maybe it got corrupted lol\\n\" + H_LINE;","lastModifiedDate":"2024-02-20"},{"lineNumber":45,"author":{"gitId":"rismm"},"content":"    protected static final String SAVE_ERROR \u003d H_LINE + \"SORRY I CURRENTLY CAN\u0027T SAVE YOUR LIST MY BAD LOL\\n\" + H_LINE;","lastModifiedDate":"2024-02-20"},{"lineNumber":46,"author":{"gitId":"rismm"},"content":"    protected static final String FIND_LIST_MESSAGE \u003d H_LINE + \"HERE ARE ALL TASKS WITH KEYWORD: \";","lastModifiedDate":"2024-02-27"},{"lineNumber":47,"author":{"gitId":"rismm"},"content":"    protected static final String FIND_NO_MATCH_MESSAGE \u003d \"SORRY MAN THERE\u0027S NO TASK WITH THAT KEYWORD\";","lastModifiedDate":"2024-02-27"},{"lineNumber":48,"author":{"gitId":"rismm"},"content":"    protected static final String FIND_ERROR \u003d H_LINE + \"YOU HAVE TO ENTER A WORD FOR ME TO FIND IT BRO\\n\\t\"","lastModifiedDate":"2024-02-27"},{"lineNumber":49,"author":{"gitId":"rismm"},"content":"            + \"USE A WORD PLEASE: \\\"find --KEYWORD--\\\"\\n\" + H_LINE;","lastModifiedDate":"2024-02-27"},{"lineNumber":50,"author":{"gitId":"rismm"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":51,"author":{"gitId":"rismm"},"content":"    /**","lastModifiedDate":"2024-02-27"},{"lineNumber":52,"author":{"gitId":"rismm"},"content":"     * Prints a header line onto the output console","lastModifiedDate":"2024-02-27"},{"lineNumber":53,"author":{"gitId":"rismm"},"content":"     */","lastModifiedDate":"2024-02-27"},{"lineNumber":54,"author":{"gitId":"rismm"},"content":"    public static void printHeaderLine() {","lastModifiedDate":"2024-02-05"},{"lineNumber":55,"author":{"gitId":"rismm"},"content":"        System.out.println(H_LINE);","lastModifiedDate":"2024-02-05"},{"lineNumber":56,"author":{"gitId":"rismm"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":57,"author":{"gitId":"rismm"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":58,"author":{"gitId":"rismm"},"content":"    /**","lastModifiedDate":"2024-02-27"},{"lineNumber":59,"author":{"gitId":"rismm"},"content":"     * Prints a greeting message onto the output console","lastModifiedDate":"2024-02-27"},{"lineNumber":60,"author":{"gitId":"rismm"},"content":"     */","lastModifiedDate":"2024-02-27"},{"lineNumber":61,"author":{"gitId":"rismm"},"content":"    public static void printGreeting() {","lastModifiedDate":"2024-02-05"},{"lineNumber":62,"author":{"gitId":"rismm"},"content":"        System.out.println(GREET_MESSAGE);","lastModifiedDate":"2024-02-05"},{"lineNumber":63,"author":{"gitId":"rismm"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":64,"author":{"gitId":"rismm"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":65,"author":{"gitId":"rismm"},"content":"    /**","lastModifiedDate":"2024-02-27"},{"lineNumber":66,"author":{"gitId":"rismm"},"content":"     * Prints an exit message onto the output console","lastModifiedDate":"2024-02-27"},{"lineNumber":67,"author":{"gitId":"rismm"},"content":"     */","lastModifiedDate":"2024-02-27"},{"lineNumber":68,"author":{"gitId":"rismm"},"content":"    public static void printExitMessage() {","lastModifiedDate":"2024-02-05"},{"lineNumber":69,"author":{"gitId":"rismm"},"content":"        System.out.println(EXIT_MESSAGE);","lastModifiedDate":"2024-02-05"},{"lineNumber":70,"author":{"gitId":"rismm"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":71,"author":{"gitId":"rismm"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":72,"author":{"gitId":"rismm"},"content":"    /**","lastModifiedDate":"2024-02-27"},{"lineNumber":73,"author":{"gitId":"rismm"},"content":"     * Prints a message onto the output console for when the list command is executed","lastModifiedDate":"2024-02-27"},{"lineNumber":74,"author":{"gitId":"rismm"},"content":"     */","lastModifiedDate":"2024-02-27"},{"lineNumber":75,"author":{"gitId":"rismm"},"content":"    public static void printListMessage() {","lastModifiedDate":"2024-02-05"},{"lineNumber":76,"author":{"gitId":"rismm"},"content":"        System.out.println(LIST_MESSAGE);","lastModifiedDate":"2024-02-05"},{"lineNumber":77,"author":{"gitId":"rismm"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":78,"author":{"gitId":"rismm"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":79,"author":{"gitId":"rismm"},"content":"    /**","lastModifiedDate":"2024-02-27"},{"lineNumber":80,"author":{"gitId":"rismm"},"content":"     * Prints an error message onto the console for when there is an error in exiting the program","lastModifiedDate":"2024-02-27"},{"lineNumber":81,"author":{"gitId":"rismm"},"content":"     */","lastModifiedDate":"2024-02-27"},{"lineNumber":82,"author":{"gitId":"rismm"},"content":"    public static void printExitError() {","lastModifiedDate":"2024-02-10"},{"lineNumber":83,"author":{"gitId":"rismm"},"content":"        System.out.println(EXIT_INPUT_ERROR);","lastModifiedDate":"2024-02-10"},{"lineNumber":84,"author":{"gitId":"rismm"},"content":"    }","lastModifiedDate":"2024-02-10"},{"lineNumber":85,"author":{"gitId":"rismm"},"content":"","lastModifiedDate":"2024-02-10"},{"lineNumber":86,"author":{"gitId":"rismm"},"content":"    /**","lastModifiedDate":"2024-02-27"},{"lineNumber":87,"author":{"gitId":"rismm"},"content":"     * Prints an error message onto the console for when there is an error executing the list command","lastModifiedDate":"2024-02-27"},{"lineNumber":88,"author":{"gitId":"rismm"},"content":"     */","lastModifiedDate":"2024-02-27"},{"lineNumber":89,"author":{"gitId":"rismm"},"content":"    public static void printListError() {","lastModifiedDate":"2024-02-10"},{"lineNumber":90,"author":{"gitId":"rismm"},"content":"        System.out.println(LIST_INPUT_ERROR);","lastModifiedDate":"2024-02-10"},{"lineNumber":91,"author":{"gitId":"rismm"},"content":"    }","lastModifiedDate":"2024-02-10"},{"lineNumber":92,"author":{"gitId":"rismm"},"content":"","lastModifiedDate":"2024-02-10"},{"lineNumber":93,"author":{"gitId":"rismm"},"content":"    /**","lastModifiedDate":"2024-02-27"},{"lineNumber":94,"author":{"gitId":"rismm"},"content":"     * Prints an error message onto the console for when there is an invalid command word input by the user","lastModifiedDate":"2024-02-27"},{"lineNumber":95,"author":{"gitId":"rismm"},"content":"     */","lastModifiedDate":"2024-02-27"},{"lineNumber":96,"author":{"gitId":"rismm"},"content":"    public static void printDefaultError() {","lastModifiedDate":"2024-02-05"},{"lineNumber":97,"author":{"gitId":"rismm"},"content":"        System.out.println(DEFAULT_ERROR);","lastModifiedDate":"2024-02-05"},{"lineNumber":98,"author":{"gitId":"rismm"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":99,"author":{"gitId":"rismm"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":100,"author":{"gitId":"rismm"},"content":"    /**","lastModifiedDate":"2024-02-27"},{"lineNumber":101,"author":{"gitId":"rismm"},"content":"     * Prints an error message onto the console for when there is an error executing the mark or unmark command","lastModifiedDate":"2024-02-27"},{"lineNumber":102,"author":{"gitId":"rismm"},"content":"     */","lastModifiedDate":"2024-02-27"},{"lineNumber":103,"author":{"gitId":"rismm"},"content":"    public static void printInvalidMarkError() {","lastModifiedDate":"2024-02-05"},{"lineNumber":104,"author":{"gitId":"rismm"},"content":"        System.out.println(INVALID_MARK_ERROR);","lastModifiedDate":"2024-02-05"},{"lineNumber":105,"author":{"gitId":"rismm"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":106,"author":{"gitId":"rismm"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":107,"author":{"gitId":"rismm"},"content":"    /**","lastModifiedDate":"2024-02-27"},{"lineNumber":108,"author":{"gitId":"rismm"},"content":"     * Prints a message onto the console for when the mark command is executed","lastModifiedDate":"2024-02-27"},{"lineNumber":109,"author":{"gitId":"rismm"},"content":"     */","lastModifiedDate":"2024-02-27"},{"lineNumber":110,"author":{"gitId":"rismm"},"content":"    public static void printMarkMessage() {","lastModifiedDate":"2024-02-05"},{"lineNumber":111,"author":{"gitId":"rismm"},"content":"        System.out.println(MARK_MESSAGE);","lastModifiedDate":"2024-02-05"},{"lineNumber":112,"author":{"gitId":"rismm"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":113,"author":{"gitId":"rismm"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":114,"author":{"gitId":"rismm"},"content":"    /**","lastModifiedDate":"2024-02-27"},{"lineNumber":115,"author":{"gitId":"rismm"},"content":"     * Prints a message onto the console for when the unmark command is executed","lastModifiedDate":"2024-02-27"},{"lineNumber":116,"author":{"gitId":"rismm"},"content":"     */","lastModifiedDate":"2024-02-27"},{"lineNumber":117,"author":{"gitId":"rismm"},"content":"    public static void printUnmarkMessage() {","lastModifiedDate":"2024-02-05"},{"lineNumber":118,"author":{"gitId":"rismm"},"content":"        System.out.println(UNMARK_MESSAGE);","lastModifiedDate":"2024-02-05"},{"lineNumber":119,"author":{"gitId":"rismm"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":120,"author":{"gitId":"rismm"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":121,"author":{"gitId":"rismm"},"content":"    /**","lastModifiedDate":"2024-02-27"},{"lineNumber":122,"author":{"gitId":"rismm"},"content":"     * Prints a message containing the number of tasks currently in the task list onto the console","lastModifiedDate":"2024-02-27"},{"lineNumber":123,"author":{"gitId":"rismm"},"content":"     *","lastModifiedDate":"2024-02-27"},{"lineNumber":124,"author":{"gitId":"rismm"},"content":"     * @param numOfTasks a non-negative integer containing the number of tasks in the task list","lastModifiedDate":"2024-02-27"},{"lineNumber":125,"author":{"gitId":"rismm"},"content":"     */","lastModifiedDate":"2024-02-27"},{"lineNumber":126,"author":{"gitId":"rismm"},"content":"    public static void printNumOfTasks(int numOfTasks) {","lastModifiedDate":"2024-02-18"},{"lineNumber":127,"author":{"gitId":"rismm"},"content":"        System.out.println(TASKS_NUMBER_MESSAGE + numOfTasks);","lastModifiedDate":"2024-02-18"},{"lineNumber":128,"author":{"gitId":"rismm"},"content":"        System.out.println(H_LINE);","lastModifiedDate":"2024-02-18"},{"lineNumber":129,"author":{"gitId":"rismm"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":130,"author":{"gitId":"rismm"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":131,"author":{"gitId":"rismm"},"content":"    /**","lastModifiedDate":"2024-02-27"},{"lineNumber":132,"author":{"gitId":"rismm"},"content":"     * Prints a message for when a task is newly added to the task list","lastModifiedDate":"2024-02-27"},{"lineNumber":133,"author":{"gitId":"rismm"},"content":"     *","lastModifiedDate":"2024-02-27"},{"lineNumber":134,"author":{"gitId":"rismm"},"content":"     * @param task a String of the task description to print","lastModifiedDate":"2024-02-27"},{"lineNumber":135,"author":{"gitId":"rismm"},"content":"     * @param numOfTasks a non-negative integer containing the number of tasks in the task list","lastModifiedDate":"2024-02-27"},{"lineNumber":136,"author":{"gitId":"rismm"},"content":"     */","lastModifiedDate":"2024-02-27"},{"lineNumber":137,"author":{"gitId":"rismm"},"content":"    public static void printTaskAddingMessage(String task, int numOfTasks) {","lastModifiedDate":"2024-02-18"},{"lineNumber":138,"author":{"gitId":"rismm"},"content":"        System.out.println(TASK_ADDED_MESSAGE + \"  \" + task);","lastModifiedDate":"2024-02-18"},{"lineNumber":139,"author":{"gitId":"rismm"},"content":"        printNumOfTasks(numOfTasks);","lastModifiedDate":"2024-02-18"},{"lineNumber":140,"author":{"gitId":"rismm"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":141,"author":{"gitId":"rismm"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":142,"author":{"gitId":"rismm"},"content":"    /**","lastModifiedDate":"2024-02-27"},{"lineNumber":143,"author":{"gitId":"rismm"},"content":"     * Prints an error message onto the console for when there is an empty string input as a todo by the user","lastModifiedDate":"2024-02-27"},{"lineNumber":144,"author":{"gitId":"rismm"},"content":"     */","lastModifiedDate":"2024-02-27"},{"lineNumber":145,"author":{"gitId":"rismm"},"content":"    public static void printToDoEmptyError() {","lastModifiedDate":"2024-02-05"},{"lineNumber":146,"author":{"gitId":"rismm"},"content":"        System.out.println(TODO_EMPTY_TASK_ERROR);","lastModifiedDate":"2024-02-05"},{"lineNumber":147,"author":{"gitId":"rismm"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":148,"author":{"gitId":"rismm"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":149,"author":{"gitId":"rismm"},"content":"    /**","lastModifiedDate":"2024-02-27"},{"lineNumber":150,"author":{"gitId":"rismm"},"content":"     * Prints an error message onto the console for when there is an invalid input in the user\u0027s deadline command input","lastModifiedDate":"2024-02-27"},{"lineNumber":151,"author":{"gitId":"rismm"},"content":"     */","lastModifiedDate":"2024-02-27"},{"lineNumber":152,"author":{"gitId":"rismm"},"content":"    public static void printDeadlineInputError() {","lastModifiedDate":"2024-02-05"},{"lineNumber":153,"author":{"gitId":"rismm"},"content":"        System.out.println(DEADLINE_INPUT_ERROR);","lastModifiedDate":"2024-02-05"},{"lineNumber":154,"author":{"gitId":"rismm"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":155,"author":{"gitId":"rismm"},"content":"","lastModifiedDate":"2024-02-05"},{"lineNumber":156,"author":{"gitId":"rismm"},"content":"    /**","lastModifiedDate":"2024-02-27"},{"lineNumber":157,"author":{"gitId":"rismm"},"content":"     * Prints an error message onto the console for when there is an invalid input in the user\u0027s event command input","lastModifiedDate":"2024-02-27"},{"lineNumber":158,"author":{"gitId":"rismm"},"content":"     */","lastModifiedDate":"2024-02-27"},{"lineNumber":159,"author":{"gitId":"rismm"},"content":"    public static void printEventInputError() {","lastModifiedDate":"2024-02-05"},{"lineNumber":160,"author":{"gitId":"rismm"},"content":"        System.out.println(EVENT_INPUT_ERROR);","lastModifiedDate":"2024-02-05"},{"lineNumber":161,"author":{"gitId":"rismm"},"content":"    }","lastModifiedDate":"2024-02-05"},{"lineNumber":162,"author":{"gitId":"rismm"},"content":"","lastModifiedDate":"2024-02-18"},{"lineNumber":163,"author":{"gitId":"rismm"},"content":"    /**","lastModifiedDate":"2024-02-27"},{"lineNumber":164,"author":{"gitId":"rismm"},"content":"     * Prints a message for when the delete command is executed","lastModifiedDate":"2024-02-27"},{"lineNumber":165,"author":{"gitId":"rismm"},"content":"     */","lastModifiedDate":"2024-02-27"},{"lineNumber":166,"author":{"gitId":"rismm"},"content":"    public static void printDeleteMessage() {","lastModifiedDate":"2024-02-18"},{"lineNumber":167,"author":{"gitId":"rismm"},"content":"        System.out.println(DELETE_MESSAGE);","lastModifiedDate":"2024-02-18"},{"lineNumber":168,"author":{"gitId":"rismm"},"content":"    }","lastModifiedDate":"2024-02-18"},{"lineNumber":169,"author":{"gitId":"rismm"},"content":"","lastModifiedDate":"2024-02-27"},{"lineNumber":170,"author":{"gitId":"rismm"},"content":"    /**","lastModifiedDate":"2024-02-27"},{"lineNumber":171,"author":{"gitId":"rismm"},"content":"     * Prints an error message onto the console for when there is an error executing the delete command","lastModifiedDate":"2024-02-27"},{"lineNumber":172,"author":{"gitId":"rismm"},"content":"     */","lastModifiedDate":"2024-02-27"},{"lineNumber":173,"author":{"gitId":"rismm"},"content":"    public static void printDeleteError() {","lastModifiedDate":"2024-02-19"},{"lineNumber":174,"author":{"gitId":"rismm"},"content":"        System.out.println(DELETE_ERROR);","lastModifiedDate":"2024-02-19"},{"lineNumber":175,"author":{"gitId":"rismm"},"content":"    }","lastModifiedDate":"2024-02-19"},{"lineNumber":176,"author":{"gitId":"rismm"},"content":"","lastModifiedDate":"2024-02-20"},{"lineNumber":177,"author":{"gitId":"rismm"},"content":"    /**","lastModifiedDate":"2024-02-27"},{"lineNumber":178,"author":{"gitId":"rismm"},"content":"     * Prints an error message onto the console for when there is an error reading data from the save text file and","lastModifiedDate":"2024-02-27"},{"lineNumber":179,"author":{"gitId":"rismm"},"content":"     * prints the number of lines in the text file that were corrupted","lastModifiedDate":"2024-02-27"},{"lineNumber":180,"author":{"gitId":"rismm"},"content":"     *","lastModifiedDate":"2024-02-27"},{"lineNumber":181,"author":{"gitId":"rismm"},"content":"     * @param numOfLines a positive integer indicating the number of corrupted lines in the file","lastModifiedDate":"2024-02-27"},{"lineNumber":182,"author":{"gitId":"rismm"},"content":"     */","lastModifiedDate":"2024-02-27"},{"lineNumber":183,"author":{"gitId":"rismm"},"content":"    public static void printCorruptedFileError(int numOfLines) {","lastModifiedDate":"2024-02-20"},{"lineNumber":184,"author":{"gitId":"rismm"},"content":"        System.out.println(FILE_CORRUPT_ERROR + numOfLines);","lastModifiedDate":"2024-02-20"},{"lineNumber":185,"author":{"gitId":"rismm"},"content":"        printHeaderLine();","lastModifiedDate":"2024-02-20"},{"lineNumber":186,"author":{"gitId":"rismm"},"content":"    }","lastModifiedDate":"2024-02-20"},{"lineNumber":187,"author":{"gitId":"rismm"},"content":"","lastModifiedDate":"2024-02-20"},{"lineNumber":188,"author":{"gitId":"rismm"},"content":"    /**","lastModifiedDate":"2024-02-27"},{"lineNumber":189,"author":{"gitId":"rismm"},"content":"     * Prints an error message onto the console for when there is an error in saving the task list into a text file","lastModifiedDate":"2024-02-27"},{"lineNumber":190,"author":{"gitId":"rismm"},"content":"     */","lastModifiedDate":"2024-02-27"},{"lineNumber":191,"author":{"gitId":"rismm"},"content":"    public static void printSaveError() {","lastModifiedDate":"2024-02-20"},{"lineNumber":192,"author":{"gitId":"rismm"},"content":"        System.out.println(SAVE_ERROR);","lastModifiedDate":"2024-02-20"},{"lineNumber":193,"author":{"gitId":"rismm"},"content":"    }","lastModifiedDate":"2024-02-20"},{"lineNumber":194,"author":{"gitId":"rismm"},"content":"","lastModifiedDate":"2024-02-20"},{"lineNumber":195,"author":{"gitId":"rismm"},"content":"    /**","lastModifiedDate":"2024-02-27"},{"lineNumber":196,"author":{"gitId":"rismm"},"content":"     * Prints an error message onto the console for when there is an error loading and reading data from a text file","lastModifiedDate":"2024-02-27"},{"lineNumber":197,"author":{"gitId":"rismm"},"content":"     */","lastModifiedDate":"2024-02-27"},{"lineNumber":198,"author":{"gitId":"rismm"},"content":"    public static void printLoadError() {","lastModifiedDate":"2024-02-20"},{"lineNumber":199,"author":{"gitId":"rismm"},"content":"        System.out.println(LOAD_ERROR);","lastModifiedDate":"2024-02-20"},{"lineNumber":200,"author":{"gitId":"rismm"},"content":"    }","lastModifiedDate":"2024-02-20"},{"lineNumber":201,"author":{"gitId":"rismm"},"content":"","lastModifiedDate":"2024-02-27"},{"lineNumber":202,"author":{"gitId":"rismm"},"content":"    /**","lastModifiedDate":"2024-02-27"},{"lineNumber":203,"author":{"gitId":"rismm"},"content":"     * Prints a message for when the find command is executed","lastModifiedDate":"2024-02-27"},{"lineNumber":204,"author":{"gitId":"rismm"},"content":"     *","lastModifiedDate":"2024-02-27"},{"lineNumber":205,"author":{"gitId":"rismm"},"content":"     * @param keyword a String of the keyword to be found in the find command","lastModifiedDate":"2024-02-27"},{"lineNumber":206,"author":{"gitId":"rismm"},"content":"     */","lastModifiedDate":"2024-02-27"},{"lineNumber":207,"author":{"gitId":"rismm"},"content":"    public static void printFindMessage(String keyword) {","lastModifiedDate":"2024-02-27"},{"lineNumber":208,"author":{"gitId":"rismm"},"content":"        System.out.println(FIND_LIST_MESSAGE + keyword);","lastModifiedDate":"2024-02-27"},{"lineNumber":209,"author":{"gitId":"rismm"},"content":"    }","lastModifiedDate":"2024-02-27"},{"lineNumber":210,"author":{"gitId":"rismm"},"content":"","lastModifiedDate":"2024-02-27"},{"lineNumber":211,"author":{"gitId":"rismm"},"content":"    /**","lastModifiedDate":"2024-02-27"},{"lineNumber":212,"author":{"gitId":"rismm"},"content":"     * Prints a message for when the find command is executed and no matching keyword is found among all tasks","lastModifiedDate":"2024-02-27"},{"lineNumber":213,"author":{"gitId":"rismm"},"content":"     * in the task list","lastModifiedDate":"2024-02-27"},{"lineNumber":214,"author":{"gitId":"rismm"},"content":"     */","lastModifiedDate":"2024-02-27"},{"lineNumber":215,"author":{"gitId":"rismm"},"content":"    public static void printNoMatchMessage() {","lastModifiedDate":"2024-02-27"},{"lineNumber":216,"author":{"gitId":"rismm"},"content":"        System.out.println(FIND_NO_MATCH_MESSAGE);","lastModifiedDate":"2024-02-27"},{"lineNumber":217,"author":{"gitId":"rismm"},"content":"    }","lastModifiedDate":"2024-02-27"},{"lineNumber":218,"author":{"gitId":"rismm"},"content":"","lastModifiedDate":"2024-02-27"},{"lineNumber":219,"author":{"gitId":"rismm"},"content":"    /**","lastModifiedDate":"2024-02-27"},{"lineNumber":220,"author":{"gitId":"rismm"},"content":"     * Prints an error message onto the console for when there is an error executing the find command","lastModifiedDate":"2024-02-27"},{"lineNumber":221,"author":{"gitId":"rismm"},"content":"     */","lastModifiedDate":"2024-02-27"},{"lineNumber":222,"author":{"gitId":"rismm"},"content":"    public static void printFindError() {","lastModifiedDate":"2024-02-27"},{"lineNumber":223,"author":{"gitId":"rismm"},"content":"        System.out.println(FIND_ERROR);","lastModifiedDate":"2024-02-27"},{"lineNumber":224,"author":{"gitId":"rismm"},"content":"    }","lastModifiedDate":"2024-02-27"},{"lineNumber":225,"author":{"gitId":"rismm"},"content":"}","lastModifiedDate":"2024-02-05"}],"authorContributionMap":{"rismm":225}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"rismm"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ../src/main/java/joe/*.java ../src/main/java/joe/task/*.java ../src/main/java/joe/util/*.java","lastModifiedDate":"2024-02-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"rismm"},"content":"java -classpath ..\\bin joe.Joe \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2024-02-17"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"rismm":2,"-":19}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"rismm"},"content":"if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/joe/*.java ../src/main/java/joe/task/*.java ../src/main/java/joe/util/*.java","lastModifiedDate":"2024-02-17"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"rismm"},"content":"java -classpath ../bin joe.Joe \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2024-02-17"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"# convert to UNIX format","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"# compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    exit 0","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"else","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"rismm":2,"-":36}}]
