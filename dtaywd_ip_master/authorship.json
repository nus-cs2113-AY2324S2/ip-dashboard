[{"path":"data.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"dtaywd"},"content":"T,1,hw","lastModifiedDate":"2024-02-21"},{"lineNumber":2,"author":{"gitId":"dtaywd"},"content":"E,0,lunch,1pm,2pm","lastModifiedDate":"2024-02-21"},{"lineNumber":3,"author":{"gitId":"dtaywd"},"content":"D,1,homework,1pm","lastModifiedDate":"2024-02-21"},{"lineNumber":4,"author":{"gitId":"dtaywd"},"content":"T,0,dinner","lastModifiedDate":"2024-02-26"},{"lineNumber":5,"author":{"gitId":"dtaywd"},"content":"T,0,dinner 1","lastModifiedDate":"2024-02-26"}],"authorContributionMap":{"dtaywd":5}},{"path":"src/main/java/Exceptions/CorruptedFileException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dtaywd"},"content":"package Exceptions;","lastModifiedDate":"2024-02-18"},{"lineNumber":2,"author":{"gitId":"dtaywd"},"content":"","lastModifiedDate":"2024-02-18"},{"lineNumber":3,"author":{"gitId":"dtaywd"},"content":"public class CorruptedFileException extends Throwable {","lastModifiedDate":"2024-02-18"},{"lineNumber":4,"author":{"gitId":"dtaywd"},"content":"}","lastModifiedDate":"2024-02-18"}],"authorContributionMap":{"dtaywd":4}},{"path":"src/main/java/Exceptions/DeadlineLackInputsException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dtaywd"},"content":"package Exceptions;","lastModifiedDate":"2024-02-14"},{"lineNumber":2,"author":{"gitId":"dtaywd"},"content":"","lastModifiedDate":"2024-02-14"},{"lineNumber":3,"author":{"gitId":"dtaywd"},"content":"public class DeadlineLackInputsException extends Exception{","lastModifiedDate":"2024-02-14"},{"lineNumber":4,"author":{"gitId":"dtaywd"},"content":"}","lastModifiedDate":"2024-02-14"}],"authorContributionMap":{"dtaywd":4}},{"path":"src/main/java/Exceptions/EventLackInputsException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dtaywd"},"content":"package Exceptions;","lastModifiedDate":"2024-02-14"},{"lineNumber":2,"author":{"gitId":"dtaywd"},"content":"","lastModifiedDate":"2024-02-14"},{"lineNumber":3,"author":{"gitId":"dtaywd"},"content":"public class EventLackInputsException extends Exception{","lastModifiedDate":"2024-02-14"},{"lineNumber":4,"author":{"gitId":"dtaywd"},"content":"}","lastModifiedDate":"2024-02-14"}],"authorContributionMap":{"dtaywd":4}},{"path":"src/main/java/Exceptions/TodoLackInputsException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dtaywd"},"content":"package Exceptions;","lastModifiedDate":"2024-02-14"},{"lineNumber":2,"author":{"gitId":"dtaywd"},"content":"","lastModifiedDate":"2024-02-14"},{"lineNumber":3,"author":{"gitId":"dtaywd"},"content":"public class TodoLackInputsException extends Exception{","lastModifiedDate":"2024-02-14"},{"lineNumber":4,"author":{"gitId":"dtaywd"},"content":"}","lastModifiedDate":"2024-02-14"}],"authorContributionMap":{"dtaywd":4}},{"path":"src/main/java/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dtaywd"},"content":"import Exceptions.CorruptedFileException;","lastModifiedDate":"2024-02-18"},{"lineNumber":2,"author":{"gitId":"dtaywd"},"content":"import Exceptions.DeadlineLackInputsException;","lastModifiedDate":"2024-02-14"},{"lineNumber":3,"author":{"gitId":"dtaywd"},"content":"import Exceptions.EventLackInputsException;","lastModifiedDate":"2024-02-14"},{"lineNumber":4,"author":{"gitId":"dtaywd"},"content":"import Exceptions.TodoLackInputsException;","lastModifiedDate":"2024-02-14"},{"lineNumber":5,"author":{"gitId":"dtaywd"},"content":"","lastModifiedDate":"2024-02-14"},{"lineNumber":6,"author":{"gitId":"dtaywd"},"content":"import java.time.LocalDate;","lastModifiedDate":"2024-02-26"},{"lineNumber":7,"author":{"gitId":"dtaywd"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2024-02-26"},{"lineNumber":8,"author":{"gitId":"dtaywd"},"content":"import java.time.temporal.ChronoUnit;","lastModifiedDate":"2024-02-26"},{"lineNumber":9,"author":{"gitId":"dtaywd"},"content":"","lastModifiedDate":"2024-02-26"},{"lineNumber":10,"author":{"gitId":"dtaywd"},"content":"/**","lastModifiedDate":"2024-02-26"},{"lineNumber":11,"author":{"gitId":"dtaywd"},"content":" * The Parser class handles parsing user input and task data.","lastModifiedDate":"2024-02-26"},{"lineNumber":12,"author":{"gitId":"dtaywd"},"content":" * It provides methods for processing user input into task information and loading task data from files.","lastModifiedDate":"2024-02-26"},{"lineNumber":13,"author":{"gitId":"dtaywd"},"content":" */","lastModifiedDate":"2024-02-26"},{"lineNumber":14,"author":{"gitId":"dtaywd"},"content":"public class Parser {","lastModifiedDate":"2024-02-06"},{"lineNumber":15,"author":{"gitId":"dtaywd"},"content":"    /**","lastModifiedDate":"2024-02-26"},{"lineNumber":16,"author":{"gitId":"dtaywd"},"content":"     * The user input to be parsed.","lastModifiedDate":"2024-02-26"},{"lineNumber":17,"author":{"gitId":"dtaywd"},"content":"     */","lastModifiedDate":"2024-02-26"},{"lineNumber":18,"author":{"gitId":"dtaywd"},"content":"    protected String userInput;","lastModifiedDate":"2024-02-06"},{"lineNumber":19,"author":{"gitId":"dtaywd"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":20,"author":{"gitId":"dtaywd"},"content":"    /**","lastModifiedDate":"2024-02-26"},{"lineNumber":21,"author":{"gitId":"dtaywd"},"content":"     * Constructs a new Parser object.","lastModifiedDate":"2024-02-26"},{"lineNumber":22,"author":{"gitId":"dtaywd"},"content":"     * This constructor initializes the Parser object.","lastModifiedDate":"2024-02-26"},{"lineNumber":23,"author":{"gitId":"dtaywd"},"content":"     */","lastModifiedDate":"2024-02-26"},{"lineNumber":24,"author":{"gitId":"dtaywd"},"content":"    public Parser () {}","lastModifiedDate":"2024-02-06"},{"lineNumber":25,"author":{"gitId":"dtaywd"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":26,"author":{"gitId":"dtaywd"},"content":"    /**","lastModifiedDate":"2024-02-26"},{"lineNumber":27,"author":{"gitId":"dtaywd"},"content":"     * Processes the user input to extract task information.","lastModifiedDate":"2024-02-26"},{"lineNumber":28,"author":{"gitId":"dtaywd"},"content":"     *","lastModifiedDate":"2024-02-26"},{"lineNumber":29,"author":{"gitId":"dtaywd"},"content":"     * @param userInput The user input representing a task to be processed.","lastModifiedDate":"2024-02-26"},{"lineNumber":30,"author":{"gitId":"dtaywd"},"content":"     * @return An array containing task information, such as task type, description, and date/time.","lastModifiedDate":"2024-02-26"},{"lineNumber":31,"author":{"gitId":"dtaywd"},"content":"     * @throws TodoLackInputsException    If the user input for a todo task lacks required inputs.","lastModifiedDate":"2024-02-26"},{"lineNumber":32,"author":{"gitId":"dtaywd"},"content":"     * @throws DeadlineLackInputsException If the user input for a deadline task lacks required inputs.","lastModifiedDate":"2024-02-26"},{"lineNumber":33,"author":{"gitId":"dtaywd"},"content":"     * @throws EventLackInputsException    If the user input for an event task lacks required inputs.","lastModifiedDate":"2024-02-26"},{"lineNumber":34,"author":{"gitId":"dtaywd"},"content":"     */","lastModifiedDate":"2024-02-26"},{"lineNumber":35,"author":{"gitId":"dtaywd"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":36,"author":{"gitId":"dtaywd"},"content":"    public static String[] processTaskInformation(String userInput) throws TodoLackInputsException, DeadlineLackInputsException, EventLackInputsException {","lastModifiedDate":"2024-02-18"},{"lineNumber":37,"author":{"gitId":"dtaywd"},"content":"        userInput \u003d userInput.toLowerCase();","lastModifiedDate":"2024-02-06"},{"lineNumber":38,"author":{"gitId":"dtaywd"},"content":"        String[] wordArray \u003d userInput.split(\" \");","lastModifiedDate":"2024-02-06"},{"lineNumber":39,"author":{"gitId":"dtaywd"},"content":"        String[] output \u003d new String[4];","lastModifiedDate":"2024-02-06"},{"lineNumber":40,"author":{"gitId":"dtaywd"},"content":"        switch (wordArray[0]) {","lastModifiedDate":"2024-02-18"},{"lineNumber":41,"author":{"gitId":"dtaywd"},"content":"        case (\"todo\"):","lastModifiedDate":"2024-02-18"},{"lineNumber":42,"author":{"gitId":"dtaywd"},"content":"            output[0] \u003d \"todo\";","lastModifiedDate":"2024-02-06"},{"lineNumber":43,"author":{"gitId":"dtaywd"},"content":"            output[1] \u003d userInput.substring(4).trim();","lastModifiedDate":"2024-02-18"},{"lineNumber":44,"author":{"gitId":"dtaywd"},"content":"            if (output[1].trim().isEmpty()) {","lastModifiedDate":"2024-02-17"},{"lineNumber":45,"author":{"gitId":"dtaywd"},"content":"                throw new TodoLackInputsException();","lastModifiedDate":"2024-02-14"},{"lineNumber":46,"author":{"gitId":"dtaywd"},"content":"            }","lastModifiedDate":"2024-02-14"},{"lineNumber":47,"author":{"gitId":"dtaywd"},"content":"            break;","lastModifiedDate":"2024-02-18"},{"lineNumber":48,"author":{"gitId":"dtaywd"},"content":"","lastModifiedDate":"2024-02-18"},{"lineNumber":49,"author":{"gitId":"dtaywd"},"content":"        case (\"deadline\"):","lastModifiedDate":"2024-02-18"},{"lineNumber":50,"author":{"gitId":"dtaywd"},"content":"            output[0] \u003d \"deadline\";","lastModifiedDate":"2024-02-06"},{"lineNumber":51,"author":{"gitId":"dtaywd"},"content":"            int byIndex \u003d userInput.indexOf(\"/by\");","lastModifiedDate":"2024-02-06"},{"lineNumber":52,"author":{"gitId":"dtaywd"},"content":"            output[1] \u003d userInput.substring(8, byIndex).trim();","lastModifiedDate":"2024-02-18"},{"lineNumber":53,"author":{"gitId":"dtaywd"},"content":"            output[2] \u003d userInput.substring(byIndex + 4).trim();","lastModifiedDate":"2024-02-18"},{"lineNumber":54,"author":{"gitId":"dtaywd"},"content":"            try {","lastModifiedDate":"2024-02-26"},{"lineNumber":55,"author":{"gitId":"dtaywd"},"content":"                LocalDate deadline \u003d LocalDate.parse(output[2]);","lastModifiedDate":"2024-02-26"},{"lineNumber":56,"author":{"gitId":"dtaywd"},"content":"                output[2] \u003d deadline.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));","lastModifiedDate":"2024-02-26"},{"lineNumber":57,"author":{"gitId":"dtaywd"},"content":"            }","lastModifiedDate":"2024-02-26"},{"lineNumber":58,"author":{"gitId":"dtaywd"},"content":"            catch (java.time.format.DateTimeParseException e) {","lastModifiedDate":"2024-02-26"},{"lineNumber":59,"author":{"gitId":"dtaywd"},"content":"                System.out.println(\"You could try inputting your deadline in a yyyy-mm-dd format for it to read neater. \u003d)\");","lastModifiedDate":"2024-02-26"},{"lineNumber":60,"author":{"gitId":"dtaywd"},"content":"            }","lastModifiedDate":"2024-02-26"},{"lineNumber":61,"author":{"gitId":"dtaywd"},"content":"","lastModifiedDate":"2024-02-26"},{"lineNumber":62,"author":{"gitId":"dtaywd"},"content":"            if (output[1].trim().isEmpty() || output[2].trim().isEmpty()) {","lastModifiedDate":"2024-02-17"},{"lineNumber":63,"author":{"gitId":"dtaywd"},"content":"                throw new DeadlineLackInputsException();","lastModifiedDate":"2024-02-14"},{"lineNumber":64,"author":{"gitId":"dtaywd"},"content":"            }","lastModifiedDate":"2024-02-14"},{"lineNumber":65,"author":{"gitId":"dtaywd"},"content":"            break;","lastModifiedDate":"2024-02-18"},{"lineNumber":66,"author":{"gitId":"dtaywd"},"content":"","lastModifiedDate":"2024-02-18"},{"lineNumber":67,"author":{"gitId":"dtaywd"},"content":"        case (\"event\"):","lastModifiedDate":"2024-02-18"},{"lineNumber":68,"author":{"gitId":"dtaywd"},"content":"            output[0] \u003d \"event\";","lastModifiedDate":"2024-02-06"},{"lineNumber":69,"author":{"gitId":"dtaywd"},"content":"            int fromIndex \u003d userInput.indexOf(\"/from\");","lastModifiedDate":"2024-02-06"},{"lineNumber":70,"author":{"gitId":"dtaywd"},"content":"            output[1] \u003d userInput.substring(5, fromIndex).trim();","lastModifiedDate":"2024-02-18"},{"lineNumber":71,"author":{"gitId":"dtaywd"},"content":"            int toIndex \u003d userInput.indexOf(\"/to\");","lastModifiedDate":"2024-02-06"},{"lineNumber":72,"author":{"gitId":"dtaywd"},"content":"            output[2] \u003d userInput.substring(fromIndex + 6, toIndex).trim();","lastModifiedDate":"2024-02-18"},{"lineNumber":73,"author":{"gitId":"dtaywd"},"content":"            output[3] \u003d userInput.substring(toIndex + 4).trim();","lastModifiedDate":"2024-02-18"},{"lineNumber":74,"author":{"gitId":"dtaywd"},"content":"            try {","lastModifiedDate":"2024-02-26"},{"lineNumber":75,"author":{"gitId":"dtaywd"},"content":"                LocalDate startDate \u003d LocalDate.parse(output[2]);","lastModifiedDate":"2024-02-26"},{"lineNumber":76,"author":{"gitId":"dtaywd"},"content":"                LocalDate endDate \u003d LocalDate.parse(output[3]);","lastModifiedDate":"2024-02-26"},{"lineNumber":77,"author":{"gitId":"dtaywd"},"content":"                output[2] \u003d startDate.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));","lastModifiedDate":"2024-02-26"},{"lineNumber":78,"author":{"gitId":"dtaywd"},"content":"                output[3] \u003d endDate.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));","lastModifiedDate":"2024-02-26"},{"lineNumber":79,"author":{"gitId":"dtaywd"},"content":"            }","lastModifiedDate":"2024-02-26"},{"lineNumber":80,"author":{"gitId":"dtaywd"},"content":"            catch (java.time.format.DateTimeParseException e) {","lastModifiedDate":"2024-02-26"},{"lineNumber":81,"author":{"gitId":"dtaywd"},"content":"                System.out.println(\"You could try inputting your start date and end date in a yyyy-mm-dd format \" +","lastModifiedDate":"2024-02-26"},{"lineNumber":82,"author":{"gitId":"dtaywd"},"content":"                        \"for it to read neater. \u003d)\");","lastModifiedDate":"2024-02-26"},{"lineNumber":83,"author":{"gitId":"dtaywd"},"content":"            }","lastModifiedDate":"2024-02-26"},{"lineNumber":84,"author":{"gitId":"dtaywd"},"content":"            if (output[1].trim().isEmpty() || output[2].trim().isEmpty() || output[3].trim().isEmpty()) {","lastModifiedDate":"2024-02-17"},{"lineNumber":85,"author":{"gitId":"dtaywd"},"content":"                throw new EventLackInputsException();","lastModifiedDate":"2024-02-14"},{"lineNumber":86,"author":{"gitId":"dtaywd"},"content":"            }","lastModifiedDate":"2024-02-14"},{"lineNumber":87,"author":{"gitId":"dtaywd"},"content":"            break;","lastModifiedDate":"2024-02-18"},{"lineNumber":88,"author":{"gitId":"dtaywd"},"content":"","lastModifiedDate":"2024-02-18"},{"lineNumber":89,"author":{"gitId":"dtaywd"},"content":"        default:","lastModifiedDate":"2024-02-18"},{"lineNumber":90,"author":{"gitId":"dtaywd"},"content":"            output[0] \u003d \"error\";","lastModifiedDate":"2024-02-06"},{"lineNumber":91,"author":{"gitId":"dtaywd"},"content":"        }","lastModifiedDate":"2024-02-06"},{"lineNumber":92,"author":{"gitId":"dtaywd"},"content":"        return output;","lastModifiedDate":"2024-02-18"},{"lineNumber":93,"author":{"gitId":"dtaywd"},"content":"    }","lastModifiedDate":"2024-02-06"},{"lineNumber":94,"author":{"gitId":"dtaywd"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":95,"author":{"gitId":"dtaywd"},"content":"    /**","lastModifiedDate":"2024-02-26"},{"lineNumber":96,"author":{"gitId":"dtaywd"},"content":"     * Processes the user input to extract the task ID for marking or deleting a task.","lastModifiedDate":"2024-02-26"},{"lineNumber":97,"author":{"gitId":"dtaywd"},"content":"     *","lastModifiedDate":"2024-02-26"},{"lineNumber":98,"author":{"gitId":"dtaywd"},"content":"     * @param userInput The user input representing a command to mark or delete a task.","lastModifiedDate":"2024-02-26"},{"lineNumber":99,"author":{"gitId":"dtaywd"},"content":"     * @return The ID of the task to be marked or deleted.","lastModifiedDate":"2024-02-26"},{"lineNumber":100,"author":{"gitId":"dtaywd"},"content":"     */","lastModifiedDate":"2024-02-26"},{"lineNumber":101,"author":{"gitId":"dtaywd"},"content":"    public static int processTaskIdforMarkingAndDeletingTask(String userInput) {","lastModifiedDate":"2024-02-18"},{"lineNumber":102,"author":{"gitId":"dtaywd"},"content":"        userInput \u003d userInput.toLowerCase();","lastModifiedDate":"2024-02-17"},{"lineNumber":103,"author":{"gitId":"dtaywd"},"content":"        String[] wordArray \u003d userInput.split(\" \");","lastModifiedDate":"2024-02-17"},{"lineNumber":104,"author":{"gitId":"dtaywd"},"content":"        return Integer.parseInt(wordArray[1]) - 1;","lastModifiedDate":"2024-02-17"},{"lineNumber":105,"author":{"gitId":"dtaywd"},"content":"    }","lastModifiedDate":"2024-02-17"},{"lineNumber":106,"author":{"gitId":"dtaywd"},"content":"","lastModifiedDate":"2024-02-17"},{"lineNumber":107,"author":{"gitId":"dtaywd"},"content":"    /**","lastModifiedDate":"2024-02-26"},{"lineNumber":108,"author":{"gitId":"dtaywd"},"content":"     * Processes task data loaded from a file.","lastModifiedDate":"2024-02-26"},{"lineNumber":109,"author":{"gitId":"dtaywd"},"content":"     *","lastModifiedDate":"2024-02-26"},{"lineNumber":110,"author":{"gitId":"dtaywd"},"content":"     * @param data The task data loaded from the file.","lastModifiedDate":"2024-02-26"},{"lineNumber":111,"author":{"gitId":"dtaywd"},"content":"     * @return An array containing task information loaded from the file.","lastModifiedDate":"2024-02-26"},{"lineNumber":112,"author":{"gitId":"dtaywd"},"content":"     * @throws CorruptedFileException If the loaded task data is corrupted or incomplete.","lastModifiedDate":"2024-02-26"},{"lineNumber":113,"author":{"gitId":"dtaywd"},"content":"     */","lastModifiedDate":"2024-02-26"},{"lineNumber":114,"author":{"gitId":"dtaywd"},"content":"    public static String[] processTaskLoadingData(String data) throws CorruptedFileException {","lastModifiedDate":"2024-02-18"},{"lineNumber":115,"author":{"gitId":"dtaywd"},"content":"        String[] wordArray \u003d data.split(\",\");","lastModifiedDate":"2024-02-18"},{"lineNumber":116,"author":{"gitId":"dtaywd"},"content":"        String[] output \u003d new String[5];","lastModifiedDate":"2024-02-18"},{"lineNumber":117,"author":{"gitId":"dtaywd"},"content":"        switch (wordArray[0]) {","lastModifiedDate":"2024-02-18"},{"lineNumber":118,"author":{"gitId":"dtaywd"},"content":"        case (\"T\"):","lastModifiedDate":"2024-02-18"},{"lineNumber":119,"author":{"gitId":"dtaywd"},"content":"            output[0] \u003d \"todo\";","lastModifiedDate":"2024-02-18"},{"lineNumber":120,"author":{"gitId":"dtaywd"},"content":"            output[1] \u003d wordArray[1];","lastModifiedDate":"2024-02-18"},{"lineNumber":121,"author":{"gitId":"dtaywd"},"content":"            output[2] \u003d wordArray[2];","lastModifiedDate":"2024-02-18"},{"lineNumber":122,"author":{"gitId":"dtaywd"},"content":"            if (output[1].trim().isEmpty() || output[2].trim().isEmpty()) {","lastModifiedDate":"2024-02-18"},{"lineNumber":123,"author":{"gitId":"dtaywd"},"content":"                throw new CorruptedFileException();","lastModifiedDate":"2024-02-18"},{"lineNumber":124,"author":{"gitId":"dtaywd"},"content":"            }","lastModifiedDate":"2024-02-18"},{"lineNumber":125,"author":{"gitId":"dtaywd"},"content":"            break;","lastModifiedDate":"2024-02-18"},{"lineNumber":126,"author":{"gitId":"dtaywd"},"content":"","lastModifiedDate":"2024-02-18"},{"lineNumber":127,"author":{"gitId":"dtaywd"},"content":"        case (\"D\"):","lastModifiedDate":"2024-02-18"},{"lineNumber":128,"author":{"gitId":"dtaywd"},"content":"            output[0] \u003d \"deadline\";","lastModifiedDate":"2024-02-18"},{"lineNumber":129,"author":{"gitId":"dtaywd"},"content":"            output[1] \u003d wordArray[1];","lastModifiedDate":"2024-02-18"},{"lineNumber":130,"author":{"gitId":"dtaywd"},"content":"            output[2] \u003d wordArray[2];","lastModifiedDate":"2024-02-18"},{"lineNumber":131,"author":{"gitId":"dtaywd"},"content":"            output[3] \u003d wordArray[3];","lastModifiedDate":"2024-02-18"},{"lineNumber":132,"author":{"gitId":"dtaywd"},"content":"            if (output[1].trim().isEmpty() || output[2].trim().isEmpty() || output[3].trim().isEmpty()) {","lastModifiedDate":"2024-02-18"},{"lineNumber":133,"author":{"gitId":"dtaywd"},"content":"                throw new CorruptedFileException();","lastModifiedDate":"2024-02-18"},{"lineNumber":134,"author":{"gitId":"dtaywd"},"content":"            }","lastModifiedDate":"2024-02-18"},{"lineNumber":135,"author":{"gitId":"dtaywd"},"content":"            break;","lastModifiedDate":"2024-02-18"},{"lineNumber":136,"author":{"gitId":"dtaywd"},"content":"","lastModifiedDate":"2024-02-18"},{"lineNumber":137,"author":{"gitId":"dtaywd"},"content":"        case (\"E\"):","lastModifiedDate":"2024-02-18"},{"lineNumber":138,"author":{"gitId":"dtaywd"},"content":"            output[0] \u003d \"event\";","lastModifiedDate":"2024-02-18"},{"lineNumber":139,"author":{"gitId":"dtaywd"},"content":"            output[1] \u003d wordArray[1];","lastModifiedDate":"2024-02-18"},{"lineNumber":140,"author":{"gitId":"dtaywd"},"content":"            output[2] \u003d wordArray[2];","lastModifiedDate":"2024-02-18"},{"lineNumber":141,"author":{"gitId":"dtaywd"},"content":"            output[3] \u003d wordArray[3];","lastModifiedDate":"2024-02-18"},{"lineNumber":142,"author":{"gitId":"dtaywd"},"content":"            output[4] \u003d wordArray[4];","lastModifiedDate":"2024-02-18"},{"lineNumber":143,"author":{"gitId":"dtaywd"},"content":"            if (output[1].trim().isEmpty() || output[2].trim().isEmpty() || output[3].trim().isEmpty() ||","lastModifiedDate":"2024-02-18"},{"lineNumber":144,"author":{"gitId":"dtaywd"},"content":"                    output[4].trim().isEmpty()) {","lastModifiedDate":"2024-02-18"},{"lineNumber":145,"author":{"gitId":"dtaywd"},"content":"                throw new CorruptedFileException();","lastModifiedDate":"2024-02-18"},{"lineNumber":146,"author":{"gitId":"dtaywd"},"content":"            }","lastModifiedDate":"2024-02-18"},{"lineNumber":147,"author":{"gitId":"dtaywd"},"content":"            break;","lastModifiedDate":"2024-02-18"},{"lineNumber":148,"author":{"gitId":"dtaywd"},"content":"","lastModifiedDate":"2024-02-18"},{"lineNumber":149,"author":{"gitId":"dtaywd"},"content":"        default:","lastModifiedDate":"2024-02-18"},{"lineNumber":150,"author":{"gitId":"dtaywd"},"content":"            output[0] \u003d \"error\";","lastModifiedDate":"2024-02-18"},{"lineNumber":151,"author":{"gitId":"dtaywd"},"content":"            throw new CorruptedFileException();","lastModifiedDate":"2024-02-18"},{"lineNumber":152,"author":{"gitId":"dtaywd"},"content":"        }","lastModifiedDate":"2024-02-18"},{"lineNumber":153,"author":{"gitId":"dtaywd"},"content":"        return output;","lastModifiedDate":"2024-02-18"},{"lineNumber":154,"author":{"gitId":"dtaywd"},"content":"    }","lastModifiedDate":"2024-02-18"},{"lineNumber":155,"author":{"gitId":"dtaywd"},"content":"","lastModifiedDate":"2024-02-18"},{"lineNumber":156,"author":{"gitId":"dtaywd"},"content":"}","lastModifiedDate":"2024-02-06"}],"authorContributionMap":{"dtaywd":156}},{"path":"src/main/java/Sebastian.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dtaywd"},"content":"/**","lastModifiedDate":"2024-02-26"},{"lineNumber":2,"author":{"gitId":"dtaywd"},"content":" * The Sebastian class contains the main method to run the Sebastian program.","lastModifiedDate":"2024-02-26"},{"lineNumber":3,"author":{"gitId":"dtaywd"},"content":" * It displays a welcome message and initializes the user interface.","lastModifiedDate":"2024-02-26"},{"lineNumber":4,"author":{"gitId":"dtaywd"},"content":" */","lastModifiedDate":"2024-02-26"},{"lineNumber":5,"author":{"gitId":"dtaywd"},"content":"public class Sebastian {","lastModifiedDate":"2024-01-26"},{"lineNumber":6,"author":{"gitId":"dtaywd"},"content":"    /**","lastModifiedDate":"2024-02-26"},{"lineNumber":7,"author":{"gitId":"dtaywd"},"content":"     * The main method to run the Sebastian program.","lastModifiedDate":"2024-02-26"},{"lineNumber":8,"author":{"gitId":"dtaywd"},"content":"     * It displays a welcome message and initializes the user interface.","lastModifiedDate":"2024-02-26"},{"lineNumber":9,"author":{"gitId":"dtaywd"},"content":"     *","lastModifiedDate":"2024-02-26"},{"lineNumber":10,"author":{"gitId":"dtaywd"},"content":"     * @param args The command-line arguments (not used in this program).","lastModifiedDate":"2024-02-26"},{"lineNumber":11,"author":{"gitId":"dtaywd"},"content":"     */","lastModifiedDate":"2024-02-26"},{"lineNumber":12,"author":{"gitId":"dtaywd"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2024-01-26"},{"lineNumber":13,"author":{"gitId":"dtaywd"},"content":"        String logo \u003d \" ____       _               _   _\\n\" +","lastModifiedDate":"2024-01-26"},{"lineNumber":14,"author":{"gitId":"dtaywd"},"content":"                \"/ ___|  ___| |__   __ _ ___| |_(_) __ _ _ __\\n\" +","lastModifiedDate":"2024-01-26"},{"lineNumber":15,"author":{"gitId":"dtaywd"},"content":"                \"\\\\___ \\\\ / _ \\\\ \u0027_ \\\\ / _` / __| __| |/ _` | \u0027_ \\\\\\n\" +","lastModifiedDate":"2024-01-26"},{"lineNumber":16,"author":{"gitId":"dtaywd"},"content":"                \" ___) |  __/ |_) | (_| \\\\__ \\\\ |_| | (_| | | | |\\n\" +","lastModifiedDate":"2024-01-26"},{"lineNumber":17,"author":{"gitId":"dtaywd"},"content":"                \"|____/ \\\\___|_.__/ \\\\__,_|___/\\\\__|_|\\\\__,_|_| |_|\\n\";","lastModifiedDate":"2024-01-26"},{"lineNumber":18,"author":{"gitId":"dtaywd"},"content":"","lastModifiedDate":"2024-01-26"},{"lineNumber":19,"author":{"gitId":"dtaywd"},"content":"        System.out.println(\"Hello from\\n\" + logo);","lastModifiedDate":"2024-01-26"},{"lineNumber":20,"author":{"gitId":"dtaywd"},"content":"        System.out.println(\"Hello! I\u0027m Sebastian, your humble butler\\n\" +","lastModifiedDate":"2024-01-26"},{"lineNumber":21,"author":{"gitId":"dtaywd"},"content":"                \"What can I do for you?\");","lastModifiedDate":"2024-01-26"},{"lineNumber":22,"author":{"gitId":"dtaywd"},"content":"        Ui myUserInterface \u003d new Ui();","lastModifiedDate":"2024-02-26"},{"lineNumber":23,"author":{"gitId":"dtaywd"},"content":"    }","lastModifiedDate":"2024-01-26"},{"lineNumber":24,"author":{"gitId":"dtaywd"},"content":"","lastModifiedDate":"2024-02-07"},{"lineNumber":25,"author":{"gitId":"dtaywd"},"content":"}","lastModifiedDate":"2024-01-26"}],"authorContributionMap":{"dtaywd":25}},{"path":"src/main/java/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dtaywd"},"content":"import java.io.File;","lastModifiedDate":"2024-02-26"},{"lineNumber":2,"author":{"gitId":"dtaywd"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2024-02-26"},{"lineNumber":3,"author":{"gitId":"dtaywd"},"content":"import java.io.FileWriter;","lastModifiedDate":"2024-02-26"},{"lineNumber":4,"author":{"gitId":"dtaywd"},"content":"import java.io.IOException;","lastModifiedDate":"2024-02-26"},{"lineNumber":5,"author":{"gitId":"dtaywd"},"content":"import java.io.PrintWriter;","lastModifiedDate":"2024-02-26"},{"lineNumber":6,"author":{"gitId":"dtaywd"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-02-18"},{"lineNumber":7,"author":{"gitId":"dtaywd"},"content":"import java.util.Scanner;","lastModifiedDate":"2024-02-18"},{"lineNumber":8,"author":{"gitId":"dtaywd"},"content":"","lastModifiedDate":"2024-02-18"},{"lineNumber":9,"author":{"gitId":"dtaywd"},"content":"/**","lastModifiedDate":"2024-02-26"},{"lineNumber":10,"author":{"gitId":"dtaywd"},"content":" * The Storage class handles file input/output operations for task data.","lastModifiedDate":"2024-02-26"},{"lineNumber":11,"author":{"gitId":"dtaywd"},"content":" * It provides methods to read from, write to, and manipulate data in text files.","lastModifiedDate":"2024-02-26"},{"lineNumber":12,"author":{"gitId":"dtaywd"},"content":" */","lastModifiedDate":"2024-02-26"},{"lineNumber":13,"author":{"gitId":"dtaywd"},"content":"public class Storage {","lastModifiedDate":"2024-02-26"},{"lineNumber":14,"author":{"gitId":"dtaywd"},"content":"","lastModifiedDate":"2024-02-18"},{"lineNumber":15,"author":{"gitId":"dtaywd"},"content":"    /**","lastModifiedDate":"2024-02-26"},{"lineNumber":16,"author":{"gitId":"dtaywd"},"content":"     * Prints the contents of the file specified by the given file path.","lastModifiedDate":"2024-02-26"},{"lineNumber":17,"author":{"gitId":"dtaywd"},"content":"     *","lastModifiedDate":"2024-02-26"},{"lineNumber":18,"author":{"gitId":"dtaywd"},"content":"     * @param filePath The path of the file to print.","lastModifiedDate":"2024-02-26"},{"lineNumber":19,"author":{"gitId":"dtaywd"},"content":"     * @throws FileNotFoundException If the file specified by the file path is not found.","lastModifiedDate":"2024-02-26"},{"lineNumber":20,"author":{"gitId":"dtaywd"},"content":"     */","lastModifiedDate":"2024-02-26"},{"lineNumber":21,"author":{"gitId":"dtaywd"},"content":"    public static void printFileContents(String filePath) throws FileNotFoundException {","lastModifiedDate":"2024-02-18"},{"lineNumber":22,"author":{"gitId":"dtaywd"},"content":"        File f \u003d new File(filePath); // create a File for the given file path","lastModifiedDate":"2024-02-18"},{"lineNumber":23,"author":{"gitId":"dtaywd"},"content":"        Scanner s \u003d new Scanner(f); // create a Scanner using the File as the source","lastModifiedDate":"2024-02-18"},{"lineNumber":24,"author":{"gitId":"dtaywd"},"content":"        while (s.hasNext()) {","lastModifiedDate":"2024-02-18"},{"lineNumber":25,"author":{"gitId":"dtaywd"},"content":"            System.out.println(s.nextLine());","lastModifiedDate":"2024-02-18"},{"lineNumber":26,"author":{"gitId":"dtaywd"},"content":"        }","lastModifiedDate":"2024-02-18"},{"lineNumber":27,"author":{"gitId":"dtaywd"},"content":"    }","lastModifiedDate":"2024-02-18"},{"lineNumber":28,"author":{"gitId":"dtaywd"},"content":"","lastModifiedDate":"2024-02-18"},{"lineNumber":29,"author":{"gitId":"dtaywd"},"content":"    /**","lastModifiedDate":"2024-02-26"},{"lineNumber":30,"author":{"gitId":"dtaywd"},"content":"     * Writes the given text to the file specified by the file path.","lastModifiedDate":"2024-02-26"},{"lineNumber":31,"author":{"gitId":"dtaywd"},"content":"     *","lastModifiedDate":"2024-02-26"},{"lineNumber":32,"author":{"gitId":"dtaywd"},"content":"     * @param filePath  The path of the file to write to.","lastModifiedDate":"2024-02-26"},{"lineNumber":33,"author":{"gitId":"dtaywd"},"content":"     * @param textToAdd The text to add to the file.","lastModifiedDate":"2024-02-26"},{"lineNumber":34,"author":{"gitId":"dtaywd"},"content":"     * @throws IOException If an I/O error occurs while writing to the file.","lastModifiedDate":"2024-02-26"},{"lineNumber":35,"author":{"gitId":"dtaywd"},"content":"     */","lastModifiedDate":"2024-02-26"},{"lineNumber":36,"author":{"gitId":"dtaywd"},"content":"    public static void writeToFile(String filePath, String textToAdd) throws IOException {","lastModifiedDate":"2024-02-18"},{"lineNumber":37,"author":{"gitId":"dtaywd"},"content":"        FileWriter fw \u003d new FileWriter(filePath);","lastModifiedDate":"2024-02-18"},{"lineNumber":38,"author":{"gitId":"dtaywd"},"content":"        fw.write(textToAdd);","lastModifiedDate":"2024-02-18"},{"lineNumber":39,"author":{"gitId":"dtaywd"},"content":"        fw.close();","lastModifiedDate":"2024-02-18"},{"lineNumber":40,"author":{"gitId":"dtaywd"},"content":"    }","lastModifiedDate":"2024-02-18"},{"lineNumber":41,"author":{"gitId":"dtaywd"},"content":"","lastModifiedDate":"2024-02-18"},{"lineNumber":42,"author":{"gitId":"dtaywd"},"content":"    /**","lastModifiedDate":"2024-02-26"},{"lineNumber":43,"author":{"gitId":"dtaywd"},"content":"     * Appends the given text to the end of the file specified by the file path.","lastModifiedDate":"2024-02-26"},{"lineNumber":44,"author":{"gitId":"dtaywd"},"content":"     *","lastModifiedDate":"2024-02-26"},{"lineNumber":45,"author":{"gitId":"dtaywd"},"content":"     * @param filePath     The path of the file to append to.","lastModifiedDate":"2024-02-26"},{"lineNumber":46,"author":{"gitId":"dtaywd"},"content":"     * @param textToAppend The text to append to the file.","lastModifiedDate":"2024-02-26"},{"lineNumber":47,"author":{"gitId":"dtaywd"},"content":"     * @throws IOException If an I/O error occurs while appending to the file.","lastModifiedDate":"2024-02-26"},{"lineNumber":48,"author":{"gitId":"dtaywd"},"content":"     */","lastModifiedDate":"2024-02-26"},{"lineNumber":49,"author":{"gitId":"dtaywd"},"content":"    public static void appendToFile(String filePath, String textToAppend) throws IOException {","lastModifiedDate":"2024-02-18"},{"lineNumber":50,"author":{"gitId":"dtaywd"},"content":"        FileWriter fw \u003d new FileWriter(filePath, true); // create a FileWriter in append mode","lastModifiedDate":"2024-02-18"},{"lineNumber":51,"author":{"gitId":"dtaywd"},"content":"        fw.write(\"\\n\");","lastModifiedDate":"2024-02-18"},{"lineNumber":52,"author":{"gitId":"dtaywd"},"content":"        fw.write(textToAppend);","lastModifiedDate":"2024-02-18"},{"lineNumber":53,"author":{"gitId":"dtaywd"},"content":"        fw.close();","lastModifiedDate":"2024-02-18"},{"lineNumber":54,"author":{"gitId":"dtaywd"},"content":"    }","lastModifiedDate":"2024-02-18"},{"lineNumber":55,"author":{"gitId":"dtaywd"},"content":"","lastModifiedDate":"2024-02-18"},{"lineNumber":56,"author":{"gitId":"dtaywd"},"content":"    /**","lastModifiedDate":"2024-02-26"},{"lineNumber":57,"author":{"gitId":"dtaywd"},"content":"     * Performs a startup check for the existence of the data file.","lastModifiedDate":"2024-02-26"},{"lineNumber":58,"author":{"gitId":"dtaywd"},"content":"     * If the file exists, loads its contents into the task manager.","lastModifiedDate":"2024-02-26"},{"lineNumber":59,"author":{"gitId":"dtaywd"},"content":"     * If the file does not exist, creates an empty file.","lastModifiedDate":"2024-02-26"},{"lineNumber":60,"author":{"gitId":"dtaywd"},"content":"     *","lastModifiedDate":"2024-02-26"},{"lineNumber":61,"author":{"gitId":"dtaywd"},"content":"     * @param filePath The path of the data file.","lastModifiedDate":"2024-02-26"},{"lineNumber":62,"author":{"gitId":"dtaywd"},"content":"     * @throws FileNotFoundException If the data file is not found.","lastModifiedDate":"2024-02-26"},{"lineNumber":63,"author":{"gitId":"dtaywd"},"content":"     */","lastModifiedDate":"2024-02-26"},{"lineNumber":64,"author":{"gitId":"dtaywd"},"content":"    public static void startUpCheck(String filePath) throws FileNotFoundException {","lastModifiedDate":"2024-02-18"},{"lineNumber":65,"author":{"gitId":"dtaywd"},"content":"        File f \u003d new File(filePath);","lastModifiedDate":"2024-02-18"},{"lineNumber":66,"author":{"gitId":"dtaywd"},"content":"        if (f.exists()) {","lastModifiedDate":"2024-02-18"},{"lineNumber":67,"author":{"gitId":"dtaywd"},"content":"            ArrayList\u003cString\u003e dataArrayList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-02-18"},{"lineNumber":68,"author":{"gitId":"dtaywd"},"content":"            System.out.println(\"Data file exists.\");","lastModifiedDate":"2024-02-21"},{"lineNumber":69,"author":{"gitId":"dtaywd"},"content":"            Scanner s \u003d new Scanner(f);","lastModifiedDate":"2024-02-18"},{"lineNumber":70,"author":{"gitId":"dtaywd"},"content":"            while (s.hasNext()) {","lastModifiedDate":"2024-02-18"},{"lineNumber":71,"author":{"gitId":"dtaywd"},"content":"                dataArrayList.add(s.nextLine());","lastModifiedDate":"2024-02-18"},{"lineNumber":72,"author":{"gitId":"dtaywd"},"content":"            }","lastModifiedDate":"2024-02-18"},{"lineNumber":73,"author":{"gitId":"dtaywd"},"content":"            TaskManager.loadTasks(dataArrayList);","lastModifiedDate":"2024-02-18"},{"lineNumber":74,"author":{"gitId":"dtaywd"},"content":"        } else {","lastModifiedDate":"2024-02-18"},{"lineNumber":75,"author":{"gitId":"dtaywd"},"content":"            try {","lastModifiedDate":"2024-02-21"},{"lineNumber":76,"author":{"gitId":"dtaywd"},"content":"                writeToFile(filePath, \"\");","lastModifiedDate":"2024-02-21"},{"lineNumber":77,"author":{"gitId":"dtaywd"},"content":"            } catch (IOException e) {","lastModifiedDate":"2024-02-21"},{"lineNumber":78,"author":{"gitId":"dtaywd"},"content":"                System.out.println(\"failed to create file\");","lastModifiedDate":"2024-02-21"},{"lineNumber":79,"author":{"gitId":"dtaywd"},"content":"            }","lastModifiedDate":"2024-02-21"},{"lineNumber":80,"author":{"gitId":"dtaywd"},"content":"        }","lastModifiedDate":"2024-02-18"},{"lineNumber":81,"author":{"gitId":"dtaywd"},"content":"    }","lastModifiedDate":"2024-02-18"},{"lineNumber":82,"author":{"gitId":"dtaywd"},"content":"","lastModifiedDate":"2024-02-18"},{"lineNumber":83,"author":{"gitId":"dtaywd"},"content":"    /**","lastModifiedDate":"2024-02-26"},{"lineNumber":84,"author":{"gitId":"dtaywd"},"content":"     * Clears the contents of the file specified by the file path.","lastModifiedDate":"2024-02-26"},{"lineNumber":85,"author":{"gitId":"dtaywd"},"content":"     *","lastModifiedDate":"2024-02-26"},{"lineNumber":86,"author":{"gitId":"dtaywd"},"content":"     * @param filePath The path of the file to clear.","lastModifiedDate":"2024-02-26"},{"lineNumber":87,"author":{"gitId":"dtaywd"},"content":"     */","lastModifiedDate":"2024-02-26"},{"lineNumber":88,"author":{"gitId":"dtaywd"},"content":"    public static void clearFile(String filePath) {","lastModifiedDate":"2024-02-21"},{"lineNumber":89,"author":{"gitId":"dtaywd"},"content":"        try {","lastModifiedDate":"2024-02-18"},{"lineNumber":90,"author":{"gitId":"dtaywd"},"content":"            FileWriter fw \u003d new FileWriter(filePath, false);","lastModifiedDate":"2024-02-21"},{"lineNumber":91,"author":{"gitId":"dtaywd"},"content":"            PrintWriter pw \u003d new PrintWriter(fw, false);","lastModifiedDate":"2024-02-21"},{"lineNumber":92,"author":{"gitId":"dtaywd"},"content":"            pw.flush();","lastModifiedDate":"2024-02-21"},{"lineNumber":93,"author":{"gitId":"dtaywd"},"content":"            pw.close();","lastModifiedDate":"2024-02-21"},{"lineNumber":94,"author":{"gitId":"dtaywd"},"content":"            fw.close();","lastModifiedDate":"2024-02-21"},{"lineNumber":95,"author":{"gitId":"dtaywd"},"content":"        } catch (Exception exception) {","lastModifiedDate":"2024-02-21"},{"lineNumber":96,"author":{"gitId":"dtaywd"},"content":"            System.out.println(\"failed to clear file\");","lastModifiedDate":"2024-02-21"},{"lineNumber":97,"author":{"gitId":"dtaywd"},"content":"        }","lastModifiedDate":"2024-02-18"},{"lineNumber":98,"author":{"gitId":"dtaywd"},"content":"    }","lastModifiedDate":"2024-02-18"},{"lineNumber":99,"author":{"gitId":"dtaywd"},"content":"","lastModifiedDate":"2024-02-18"},{"lineNumber":100,"author":{"gitId":"dtaywd"},"content":"    /**","lastModifiedDate":"2024-02-26"},{"lineNumber":101,"author":{"gitId":"dtaywd"},"content":"     * Removes the line of data at the specified line number from the file.","lastModifiedDate":"2024-02-26"},{"lineNumber":102,"author":{"gitId":"dtaywd"},"content":"     *","lastModifiedDate":"2024-02-26"},{"lineNumber":103,"author":{"gitId":"dtaywd"},"content":"     * @param filePath   The path of the file to remove data from.","lastModifiedDate":"2024-02-26"},{"lineNumber":104,"author":{"gitId":"dtaywd"},"content":"     * @param deleteLine The line number of the data to be removed.","lastModifiedDate":"2024-02-26"},{"lineNumber":105,"author":{"gitId":"dtaywd"},"content":"     * @throws FileNotFoundException If the file specified by the file path is not found.","lastModifiedDate":"2024-02-26"},{"lineNumber":106,"author":{"gitId":"dtaywd"},"content":"     */","lastModifiedDate":"2024-02-26"},{"lineNumber":107,"author":{"gitId":"dtaywd"},"content":"    public static void removeLineData(String filePath, int deleteLine) throws FileNotFoundException {","lastModifiedDate":"2024-02-21"},{"lineNumber":108,"author":{"gitId":"dtaywd"},"content":"        ArrayList\u003cString\u003e dataContents \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-02-21"},{"lineNumber":109,"author":{"gitId":"dtaywd"},"content":"        File f \u003d new File(filePath); // create a File for the given file path","lastModifiedDate":"2024-02-21"},{"lineNumber":110,"author":{"gitId":"dtaywd"},"content":"        Scanner s \u003d new Scanner(f); // create a Scanner using the File as the source","lastModifiedDate":"2024-02-21"},{"lineNumber":111,"author":{"gitId":"dtaywd"},"content":"        int count \u003d 1;","lastModifiedDate":"2024-02-21"},{"lineNumber":112,"author":{"gitId":"dtaywd"},"content":"        while (s.hasNext()) {","lastModifiedDate":"2024-02-21"},{"lineNumber":113,"author":{"gitId":"dtaywd"},"content":"            if (count !\u003d deleteLine) {","lastModifiedDate":"2024-02-21"},{"lineNumber":114,"author":{"gitId":"dtaywd"},"content":"                dataContents.add(s.nextLine());","lastModifiedDate":"2024-02-21"},{"lineNumber":115,"author":{"gitId":"dtaywd"},"content":"            } else {","lastModifiedDate":"2024-02-18"},{"lineNumber":116,"author":{"gitId":"dtaywd"},"content":"                s.nextLine();","lastModifiedDate":"2024-02-21"},{"lineNumber":117,"author":{"gitId":"dtaywd"},"content":"            }","lastModifiedDate":"2024-02-18"},{"lineNumber":118,"author":{"gitId":"dtaywd"},"content":"            count +\u003d 1;","lastModifiedDate":"2024-02-21"},{"lineNumber":119,"author":{"gitId":"dtaywd"},"content":"        }","lastModifiedDate":"2024-02-21"},{"lineNumber":120,"author":{"gitId":"dtaywd"},"content":"        try {","lastModifiedDate":"2024-02-21"},{"lineNumber":121,"author":{"gitId":"dtaywd"},"content":"            int counter \u003d 0;","lastModifiedDate":"2024-02-21"},{"lineNumber":122,"author":{"gitId":"dtaywd"},"content":"            for (String line : dataContents) {","lastModifiedDate":"2024-02-21"},{"lineNumber":123,"author":{"gitId":"dtaywd"},"content":"                if (counter \u003d\u003d 0) {","lastModifiedDate":"2024-02-21"},{"lineNumber":124,"author":{"gitId":"dtaywd"},"content":"                    writeToFile(filePath, line);","lastModifiedDate":"2024-02-21"},{"lineNumber":125,"author":{"gitId":"dtaywd"},"content":"                } else {","lastModifiedDate":"2024-02-21"},{"lineNumber":126,"author":{"gitId":"dtaywd"},"content":"                    appendToFile(filePath, line);","lastModifiedDate":"2024-02-21"},{"lineNumber":127,"author":{"gitId":"dtaywd"},"content":"                }","lastModifiedDate":"2024-02-21"},{"lineNumber":128,"author":{"gitId":"dtaywd"},"content":"                counter +\u003d 1;","lastModifiedDate":"2024-02-21"},{"lineNumber":129,"author":{"gitId":"dtaywd"},"content":"            }","lastModifiedDate":"2024-02-18"},{"lineNumber":130,"author":{"gitId":"dtaywd"},"content":"        } catch (IOException e) {","lastModifiedDate":"2024-02-21"},{"lineNumber":131,"author":{"gitId":"dtaywd"},"content":"            System.out.println(\"error in removing line\");","lastModifiedDate":"2024-02-21"},{"lineNumber":132,"author":{"gitId":"dtaywd"},"content":"        }","lastModifiedDate":"2024-02-18"},{"lineNumber":133,"author":{"gitId":"dtaywd"},"content":"    }","lastModifiedDate":"2024-02-18"},{"lineNumber":134,"author":{"gitId":"dtaywd"},"content":"","lastModifiedDate":"2024-02-18"},{"lineNumber":135,"author":{"gitId":"dtaywd"},"content":"    /**","lastModifiedDate":"2024-02-26"},{"lineNumber":136,"author":{"gitId":"dtaywd"},"content":"     * Changes the status of a task in the file specified by the file path.","lastModifiedDate":"2024-02-26"},{"lineNumber":137,"author":{"gitId":"dtaywd"},"content":"     *","lastModifiedDate":"2024-02-26"},{"lineNumber":138,"author":{"gitId":"dtaywd"},"content":"     * @param filePath        The path of the file containing task data.","lastModifiedDate":"2024-02-26"},{"lineNumber":139,"author":{"gitId":"dtaywd"},"content":"     * @param changeStatusLine The line number of the task whose status is to be changed.","lastModifiedDate":"2024-02-26"},{"lineNumber":140,"author":{"gitId":"dtaywd"},"content":"     * @param status           The new status to set for the task (0 for not done, 1 for done).","lastModifiedDate":"2024-02-26"},{"lineNumber":141,"author":{"gitId":"dtaywd"},"content":"     * @throws FileNotFoundException If the file specified by the file path is not found.","lastModifiedDate":"2024-02-26"},{"lineNumber":142,"author":{"gitId":"dtaywd"},"content":"     */","lastModifiedDate":"2024-02-26"},{"lineNumber":143,"author":{"gitId":"dtaywd"},"content":"    public static void changeTaskStatusData(String filePath, int changeStatusLine, int status) throws FileNotFoundException {","lastModifiedDate":"2024-02-21"},{"lineNumber":144,"author":{"gitId":"dtaywd"},"content":"        ArrayList\u003cString\u003e dataContents \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-02-21"},{"lineNumber":145,"author":{"gitId":"dtaywd"},"content":"        File f \u003d new File(filePath); // create a File for the given file path","lastModifiedDate":"2024-02-21"},{"lineNumber":146,"author":{"gitId":"dtaywd"},"content":"        Scanner s \u003d new Scanner(f); // create a Scanner using the File as the source","lastModifiedDate":"2024-02-21"},{"lineNumber":147,"author":{"gitId":"dtaywd"},"content":"        int count \u003d 1;","lastModifiedDate":"2024-02-21"},{"lineNumber":148,"author":{"gitId":"dtaywd"},"content":"        while (s.hasNext()) {","lastModifiedDate":"2024-02-21"},{"lineNumber":149,"author":{"gitId":"dtaywd"},"content":"            if (count !\u003d changeStatusLine) {","lastModifiedDate":"2024-02-21"},{"lineNumber":150,"author":{"gitId":"dtaywd"},"content":"                dataContents.add(s.nextLine());","lastModifiedDate":"2024-02-21"},{"lineNumber":151,"author":{"gitId":"dtaywd"},"content":"            } else {","lastModifiedDate":"2024-02-21"},{"lineNumber":152,"author":{"gitId":"dtaywd"},"content":"                String nextLine \u003d s.nextLine();","lastModifiedDate":"2024-02-21"},{"lineNumber":153,"author":{"gitId":"dtaywd"},"content":"                String[] lineArray \u003d nextLine.split(\",\");","lastModifiedDate":"2024-02-21"},{"lineNumber":154,"author":{"gitId":"dtaywd"},"content":"                String remainingContent \u003d \"\";","lastModifiedDate":"2024-02-21"},{"lineNumber":155,"author":{"gitId":"dtaywd"},"content":"                for (int i \u003d 2; i \u003c lineArray.length; i +\u003d 1) {","lastModifiedDate":"2024-02-21"},{"lineNumber":156,"author":{"gitId":"dtaywd"},"content":"                    remainingContent \u003d remainingContent + \",\" + lineArray[i];","lastModifiedDate":"2024-02-21"},{"lineNumber":157,"author":{"gitId":"dtaywd"},"content":"                }","lastModifiedDate":"2024-02-21"},{"lineNumber":158,"author":{"gitId":"dtaywd"},"content":"                dataContents.add(lineArray[0] + \",\" + status + remainingContent);","lastModifiedDate":"2024-02-21"},{"lineNumber":159,"author":{"gitId":"dtaywd"},"content":"            }","lastModifiedDate":"2024-02-21"},{"lineNumber":160,"author":{"gitId":"dtaywd"},"content":"            count +\u003d 1;","lastModifiedDate":"2024-02-21"},{"lineNumber":161,"author":{"gitId":"dtaywd"},"content":"        }","lastModifiedDate":"2024-02-21"},{"lineNumber":162,"author":{"gitId":"dtaywd"},"content":"        try {","lastModifiedDate":"2024-02-21"},{"lineNumber":163,"author":{"gitId":"dtaywd"},"content":"            int counter \u003d 0;","lastModifiedDate":"2024-02-21"},{"lineNumber":164,"author":{"gitId":"dtaywd"},"content":"            for (String line : dataContents) {","lastModifiedDate":"2024-02-21"},{"lineNumber":165,"author":{"gitId":"dtaywd"},"content":"                if (counter \u003d\u003d 0) {","lastModifiedDate":"2024-02-21"},{"lineNumber":166,"author":{"gitId":"dtaywd"},"content":"                    writeToFile(filePath, line);","lastModifiedDate":"2024-02-21"},{"lineNumber":167,"author":{"gitId":"dtaywd"},"content":"                } else {","lastModifiedDate":"2024-02-21"},{"lineNumber":168,"author":{"gitId":"dtaywd"},"content":"                    appendToFile(filePath, line);","lastModifiedDate":"2024-02-21"},{"lineNumber":169,"author":{"gitId":"dtaywd"},"content":"                }","lastModifiedDate":"2024-02-21"},{"lineNumber":170,"author":{"gitId":"dtaywd"},"content":"                counter +\u003d 1;","lastModifiedDate":"2024-02-21"},{"lineNumber":171,"author":{"gitId":"dtaywd"},"content":"            }","lastModifiedDate":"2024-02-21"},{"lineNumber":172,"author":{"gitId":"dtaywd"},"content":"        } catch (IOException e) {","lastModifiedDate":"2024-02-21"},{"lineNumber":173,"author":{"gitId":"dtaywd"},"content":"            System.out.println(\"error in removing line\");","lastModifiedDate":"2024-02-21"},{"lineNumber":174,"author":{"gitId":"dtaywd"},"content":"        }","lastModifiedDate":"2024-02-21"},{"lineNumber":175,"author":{"gitId":"dtaywd"},"content":"    }","lastModifiedDate":"2024-02-21"},{"lineNumber":176,"author":{"gitId":"dtaywd"},"content":"}","lastModifiedDate":"2024-02-18"}],"authorContributionMap":{"dtaywd":176}},{"path":"src/main/java/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dtaywd"},"content":"import Tasks.Task;","lastModifiedDate":"2024-02-26"},{"lineNumber":2,"author":{"gitId":"dtaywd"},"content":"","lastModifiedDate":"2024-02-26"},{"lineNumber":3,"author":{"gitId":"dtaywd"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-02-26"},{"lineNumber":4,"author":{"gitId":"dtaywd"},"content":"","lastModifiedDate":"2024-02-26"},{"lineNumber":5,"author":{"gitId":"dtaywd"},"content":"/**","lastModifiedDate":"2024-02-26"},{"lineNumber":6,"author":{"gitId":"dtaywd"},"content":" * The TaskList class manages a list of tasks.","lastModifiedDate":"2024-02-26"},{"lineNumber":7,"author":{"gitId":"dtaywd"},"content":" * It provides methods to add, retrieve, update, and delete tasks from the list.","lastModifiedDate":"2024-02-26"},{"lineNumber":8,"author":{"gitId":"dtaywd"},"content":" */","lastModifiedDate":"2024-02-26"},{"lineNumber":9,"author":{"gitId":"dtaywd"},"content":"public class TaskList {","lastModifiedDate":"2024-02-26"},{"lineNumber":10,"author":{"gitId":"dtaywd"},"content":"    /**","lastModifiedDate":"2024-02-26"},{"lineNumber":11,"author":{"gitId":"dtaywd"},"content":"     * The ArrayList to store tasks.","lastModifiedDate":"2024-02-26"},{"lineNumber":12,"author":{"gitId":"dtaywd"},"content":"     */","lastModifiedDate":"2024-02-26"},{"lineNumber":13,"author":{"gitId":"dtaywd"},"content":"    private static ArrayList\u003cTask\u003e taskArrayList;","lastModifiedDate":"2024-02-26"},{"lineNumber":14,"author":{"gitId":"dtaywd"},"content":"","lastModifiedDate":"2024-02-26"},{"lineNumber":15,"author":{"gitId":"dtaywd"},"content":"    /**","lastModifiedDate":"2024-02-26"},{"lineNumber":16,"author":{"gitId":"dtaywd"},"content":"     * Constructs a new TaskList object with the given ArrayList of tasks.","lastModifiedDate":"2024-02-26"},{"lineNumber":17,"author":{"gitId":"dtaywd"},"content":"     *","lastModifiedDate":"2024-02-26"},{"lineNumber":18,"author":{"gitId":"dtaywd"},"content":"     * @param taskList The ArrayList containing tasks to be managed by the TaskList.","lastModifiedDate":"2024-02-26"},{"lineNumber":19,"author":{"gitId":"dtaywd"},"content":"     */","lastModifiedDate":"2024-02-26"},{"lineNumber":20,"author":{"gitId":"dtaywd"},"content":"    public TaskList(ArrayList\u003cTask\u003e taskList) {","lastModifiedDate":"2024-02-26"},{"lineNumber":21,"author":{"gitId":"dtaywd"},"content":"        TaskList.taskArrayList \u003d taskList;","lastModifiedDate":"2024-02-26"},{"lineNumber":22,"author":{"gitId":"dtaywd"},"content":"    }","lastModifiedDate":"2024-02-26"},{"lineNumber":23,"author":{"gitId":"dtaywd"},"content":"","lastModifiedDate":"2024-02-26"},{"lineNumber":24,"author":{"gitId":"dtaywd"},"content":"    /**","lastModifiedDate":"2024-02-26"},{"lineNumber":25,"author":{"gitId":"dtaywd"},"content":"     * Adds a task to the task list.","lastModifiedDate":"2024-02-26"},{"lineNumber":26,"author":{"gitId":"dtaywd"},"content":"     *","lastModifiedDate":"2024-02-26"},{"lineNumber":27,"author":{"gitId":"dtaywd"},"content":"     * @param task The task to be added to the list.","lastModifiedDate":"2024-02-26"},{"lineNumber":28,"author":{"gitId":"dtaywd"},"content":"     */","lastModifiedDate":"2024-02-26"},{"lineNumber":29,"author":{"gitId":"dtaywd"},"content":"    public static void add(Task task) {","lastModifiedDate":"2024-02-26"},{"lineNumber":30,"author":{"gitId":"dtaywd"},"content":"        taskArrayList.add(task);","lastModifiedDate":"2024-02-26"},{"lineNumber":31,"author":{"gitId":"dtaywd"},"content":"    }","lastModifiedDate":"2024-02-26"},{"lineNumber":32,"author":{"gitId":"dtaywd"},"content":"","lastModifiedDate":"2024-02-26"},{"lineNumber":33,"author":{"gitId":"dtaywd"},"content":"    /**","lastModifiedDate":"2024-02-26"},{"lineNumber":34,"author":{"gitId":"dtaywd"},"content":"     * Retrieves a task from the task list based on its index.","lastModifiedDate":"2024-02-26"},{"lineNumber":35,"author":{"gitId":"dtaywd"},"content":"     *","lastModifiedDate":"2024-02-26"},{"lineNumber":36,"author":{"gitId":"dtaywd"},"content":"     * @param itemIndex The index of the task to retrieve.","lastModifiedDate":"2024-02-26"},{"lineNumber":37,"author":{"gitId":"dtaywd"},"content":"     * @return The task at the specified index.","lastModifiedDate":"2024-02-26"},{"lineNumber":38,"author":{"gitId":"dtaywd"},"content":"     */","lastModifiedDate":"2024-02-26"},{"lineNumber":39,"author":{"gitId":"dtaywd"},"content":"    public static Task get(int itemIndex) {","lastModifiedDate":"2024-02-26"},{"lineNumber":40,"author":{"gitId":"dtaywd"},"content":"        return taskArrayList.get(itemIndex);","lastModifiedDate":"2024-02-26"},{"lineNumber":41,"author":{"gitId":"dtaywd"},"content":"    }","lastModifiedDate":"2024-02-26"},{"lineNumber":42,"author":{"gitId":"dtaywd"},"content":"","lastModifiedDate":"2024-02-26"},{"lineNumber":43,"author":{"gitId":"dtaywd"},"content":"    /**","lastModifiedDate":"2024-02-26"},{"lineNumber":44,"author":{"gitId":"dtaywd"},"content":"     * Sets the status of a task (done or not done) based on its index.","lastModifiedDate":"2024-02-26"},{"lineNumber":45,"author":{"gitId":"dtaywd"},"content":"     *","lastModifiedDate":"2024-02-26"},{"lineNumber":46,"author":{"gitId":"dtaywd"},"content":"     * @param itemIndex The index of the task to update.","lastModifiedDate":"2024-02-26"},{"lineNumber":47,"author":{"gitId":"dtaywd"},"content":"     * @param isDone    The status to set for the task (true for done, false for not done).","lastModifiedDate":"2024-02-26"},{"lineNumber":48,"author":{"gitId":"dtaywd"},"content":"     */","lastModifiedDate":"2024-02-26"},{"lineNumber":49,"author":{"gitId":"dtaywd"},"content":"    public static void setDone(int itemIndex, boolean isDone) {","lastModifiedDate":"2024-02-26"},{"lineNumber":50,"author":{"gitId":"dtaywd"},"content":"        taskArrayList.get(itemIndex).setDone(isDone);","lastModifiedDate":"2024-02-26"},{"lineNumber":51,"author":{"gitId":"dtaywd"},"content":"    }","lastModifiedDate":"2024-02-26"},{"lineNumber":52,"author":{"gitId":"dtaywd"},"content":"","lastModifiedDate":"2024-02-26"},{"lineNumber":53,"author":{"gitId":"dtaywd"},"content":"    /**","lastModifiedDate":"2024-02-26"},{"lineNumber":54,"author":{"gitId":"dtaywd"},"content":"     * Deletes a task from the task list based on its index.","lastModifiedDate":"2024-02-26"},{"lineNumber":55,"author":{"gitId":"dtaywd"},"content":"     *","lastModifiedDate":"2024-02-26"},{"lineNumber":56,"author":{"gitId":"dtaywd"},"content":"     * @param itemIndex The index of the task to delete.","lastModifiedDate":"2024-02-26"},{"lineNumber":57,"author":{"gitId":"dtaywd"},"content":"     */","lastModifiedDate":"2024-02-26"},{"lineNumber":58,"author":{"gitId":"dtaywd"},"content":"    public static void delete(int itemIndex) {","lastModifiedDate":"2024-02-26"},{"lineNumber":59,"author":{"gitId":"dtaywd"},"content":"        taskArrayList.remove(itemIndex);","lastModifiedDate":"2024-02-26"},{"lineNumber":60,"author":{"gitId":"dtaywd"},"content":"    }","lastModifiedDate":"2024-02-26"},{"lineNumber":61,"author":{"gitId":"dtaywd"},"content":"","lastModifiedDate":"2024-02-26"},{"lineNumber":62,"author":{"gitId":"dtaywd"},"content":"    /**","lastModifiedDate":"2024-02-26"},{"lineNumber":63,"author":{"gitId":"dtaywd"},"content":"     * Clears the task list, removing all tasks.","lastModifiedDate":"2024-02-26"},{"lineNumber":64,"author":{"gitId":"dtaywd"},"content":"     */","lastModifiedDate":"2024-02-26"},{"lineNumber":65,"author":{"gitId":"dtaywd"},"content":"    public static void clearList() {","lastModifiedDate":"2024-02-26"},{"lineNumber":66,"author":{"gitId":"dtaywd"},"content":"        taskArrayList.clear();","lastModifiedDate":"2024-02-26"},{"lineNumber":67,"author":{"gitId":"dtaywd"},"content":"    }","lastModifiedDate":"2024-02-26"},{"lineNumber":68,"author":{"gitId":"dtaywd"},"content":"","lastModifiedDate":"2024-02-26"},{"lineNumber":69,"author":{"gitId":"dtaywd"},"content":"    public static void findAndPrint(String keyword) {","lastModifiedDate":"2024-02-26"},{"lineNumber":70,"author":{"gitId":"dtaywd"},"content":"        boolean hasMatch \u003d false;","lastModifiedDate":"2024-02-26"},{"lineNumber":71,"author":{"gitId":"dtaywd"},"content":"        ArrayList\u003cTask\u003e tempTaskList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-02-26"},{"lineNumber":72,"author":{"gitId":"dtaywd"},"content":"        for (Task task : taskArrayList) {","lastModifiedDate":"2024-02-26"},{"lineNumber":73,"author":{"gitId":"dtaywd"},"content":"            if (task.getContent().contains(keyword)) {","lastModifiedDate":"2024-02-26"},{"lineNumber":74,"author":{"gitId":"dtaywd"},"content":"                hasMatch \u003d true;","lastModifiedDate":"2024-02-26"},{"lineNumber":75,"author":{"gitId":"dtaywd"},"content":"                tempTaskList.add(task);","lastModifiedDate":"2024-02-26"},{"lineNumber":76,"author":{"gitId":"dtaywd"},"content":"            }","lastModifiedDate":"2024-02-26"},{"lineNumber":77,"author":{"gitId":"dtaywd"},"content":"        }","lastModifiedDate":"2024-02-26"},{"lineNumber":78,"author":{"gitId":"dtaywd"},"content":"        if (hasMatch) {","lastModifiedDate":"2024-02-26"},{"lineNumber":79,"author":{"gitId":"dtaywd"},"content":"            String taskPlural \u003d tempTaskList.size() \u003d\u003d 1 ? \"task\" : \"tasks\";","lastModifiedDate":"2024-02-26"},{"lineNumber":80,"author":{"gitId":"dtaywd"},"content":"            System.out.println(\"Here are the matching \" + taskPlural + \" in your list:\");","lastModifiedDate":"2024-02-26"},{"lineNumber":81,"author":{"gitId":"dtaywd"},"content":"            int iterator \u003d 0;","lastModifiedDate":"2024-02-26"},{"lineNumber":82,"author":{"gitId":"dtaywd"},"content":"            for (Task task : tempTaskList) {","lastModifiedDate":"2024-02-26"},{"lineNumber":83,"author":{"gitId":"dtaywd"},"content":"                iterator +\u003d 1;","lastModifiedDate":"2024-02-26"},{"lineNumber":84,"author":{"gitId":"dtaywd"},"content":"                System.out.println(iterator + \". \" + task);","lastModifiedDate":"2024-02-26"},{"lineNumber":85,"author":{"gitId":"dtaywd"},"content":"            }","lastModifiedDate":"2024-02-26"},{"lineNumber":86,"author":{"gitId":"dtaywd"},"content":"        }","lastModifiedDate":"2024-02-26"},{"lineNumber":87,"author":{"gitId":"dtaywd"},"content":"        else {","lastModifiedDate":"2024-02-26"},{"lineNumber":88,"author":{"gitId":"dtaywd"},"content":"            System.out.println(\"No matches found\");","lastModifiedDate":"2024-02-26"},{"lineNumber":89,"author":{"gitId":"dtaywd"},"content":"        }","lastModifiedDate":"2024-02-26"},{"lineNumber":90,"author":{"gitId":"dtaywd"},"content":"    }","lastModifiedDate":"2024-02-26"},{"lineNumber":91,"author":{"gitId":"dtaywd"},"content":"}","lastModifiedDate":"2024-02-26"}],"authorContributionMap":{"dtaywd":91}},{"path":"src/main/java/TaskManager.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dtaywd"},"content":"import Exceptions.CorruptedFileException;","lastModifiedDate":"2024-02-18"},{"lineNumber":2,"author":{"gitId":"dtaywd"},"content":"import Exceptions.DeadlineLackInputsException;","lastModifiedDate":"2024-02-14"},{"lineNumber":3,"author":{"gitId":"dtaywd"},"content":"import Exceptions.EventLackInputsException;","lastModifiedDate":"2024-02-14"},{"lineNumber":4,"author":{"gitId":"dtaywd"},"content":"import Exceptions.TodoLackInputsException;","lastModifiedDate":"2024-02-14"},{"lineNumber":5,"author":{"gitId":"dtaywd"},"content":"import Tasks.Deadline;","lastModifiedDate":"2024-02-14"},{"lineNumber":6,"author":{"gitId":"dtaywd"},"content":"import Tasks.Event;","lastModifiedDate":"2024-02-14"},{"lineNumber":7,"author":{"gitId":"dtaywd"},"content":"import Tasks.Task;","lastModifiedDate":"2024-02-14"},{"lineNumber":8,"author":{"gitId":"dtaywd"},"content":"import Tasks.Todo;","lastModifiedDate":"2024-02-14"},{"lineNumber":9,"author":{"gitId":"dtaywd"},"content":"","lastModifiedDate":"2024-02-18"},{"lineNumber":10,"author":{"gitId":"dtaywd"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2024-02-21"},{"lineNumber":11,"author":{"gitId":"dtaywd"},"content":"import java.io.IOException;","lastModifiedDate":"2024-02-18"},{"lineNumber":12,"author":{"gitId":"dtaywd"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-02-17"},{"lineNumber":13,"author":{"gitId":"dtaywd"},"content":"","lastModifiedDate":"2024-02-14"},{"lineNumber":14,"author":{"gitId":"dtaywd"},"content":"/**","lastModifiedDate":"2024-02-26"},{"lineNumber":15,"author":{"gitId":"dtaywd"},"content":" * The TaskManager class manages tasks and their operations.","lastModifiedDate":"2024-02-26"},{"lineNumber":16,"author":{"gitId":"dtaywd"},"content":" * It provides methods to interact with tasks, such as adding, deleting, and marking tasks as done.","lastModifiedDate":"2024-02-26"},{"lineNumber":17,"author":{"gitId":"dtaywd"},"content":" */","lastModifiedDate":"2024-02-26"},{"lineNumber":18,"author":{"gitId":"dtaywd"},"content":"public class TaskManager {","lastModifiedDate":"2024-02-01"},{"lineNumber":19,"author":{"gitId":"dtaywd"},"content":"    /**","lastModifiedDate":"2024-02-26"},{"lineNumber":20,"author":{"gitId":"dtaywd"},"content":"     * The file path for storing task data.","lastModifiedDate":"2024-02-26"},{"lineNumber":21,"author":{"gitId":"dtaywd"},"content":"     */","lastModifiedDate":"2024-02-26"},{"lineNumber":22,"author":{"gitId":"dtaywd"},"content":"    public static final String DATA_TXT_FILE_PATH \u003d \"./data.txt\";","lastModifiedDate":"2024-02-21"},{"lineNumber":23,"author":{"gitId":"dtaywd"},"content":"","lastModifiedDate":"2024-02-26"},{"lineNumber":24,"author":{"gitId":"dtaywd"},"content":"    /**","lastModifiedDate":"2024-02-26"},{"lineNumber":25,"author":{"gitId":"dtaywd"},"content":"     * The number of items currently stored in the task manager.","lastModifiedDate":"2024-02-26"},{"lineNumber":26,"author":{"gitId":"dtaywd"},"content":"     */","lastModifiedDate":"2024-02-26"},{"lineNumber":27,"author":{"gitId":"dtaywd"},"content":"    private static int numItems;","lastModifiedDate":"2024-02-18"},{"lineNumber":28,"author":{"gitId":"dtaywd"},"content":"","lastModifiedDate":"2024-02-26"},{"lineNumber":29,"author":{"gitId":"dtaywd"},"content":"    /**","lastModifiedDate":"2024-02-26"},{"lineNumber":30,"author":{"gitId":"dtaywd"},"content":"     * An ArrayList to store tasks.","lastModifiedDate":"2024-02-26"},{"lineNumber":31,"author":{"gitId":"dtaywd"},"content":"     */","lastModifiedDate":"2024-02-26"},{"lineNumber":32,"author":{"gitId":"dtaywd"},"content":"    ArrayList\u003cTask\u003e taskArrayList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-02-26"},{"lineNumber":33,"author":{"gitId":"dtaywd"},"content":"","lastModifiedDate":"2024-02-26"},{"lineNumber":34,"author":{"gitId":"dtaywd"},"content":"    /**","lastModifiedDate":"2024-02-26"},{"lineNumber":35,"author":{"gitId":"dtaywd"},"content":"     * TaskList object to manage tasks.","lastModifiedDate":"2024-02-26"},{"lineNumber":36,"author":{"gitId":"dtaywd"},"content":"     */","lastModifiedDate":"2024-02-26"},{"lineNumber":37,"author":{"gitId":"dtaywd"},"content":"    TaskList myTaskList \u003d new TaskList(taskArrayList);","lastModifiedDate":"2024-02-26"},{"lineNumber":38,"author":{"gitId":"dtaywd"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":39,"author":{"gitId":"dtaywd"},"content":"    /**","lastModifiedDate":"2024-02-26"},{"lineNumber":40,"author":{"gitId":"dtaywd"},"content":"     * String representation of required inputs for different task types.","lastModifiedDate":"2024-02-26"},{"lineNumber":41,"author":{"gitId":"dtaywd"},"content":"     */","lastModifiedDate":"2024-02-26"},{"lineNumber":42,"author":{"gitId":"dtaywd"},"content":"    public final String TODO_REQUIRED_INPUTS \u003d \"\u0027todo \u003ctask\u003e\u0027\";","lastModifiedDate":"2024-02-17"},{"lineNumber":43,"author":{"gitId":"dtaywd"},"content":"    public final String DEADLINE_REQUIRED_INPUTS \u003d \"\u0027Deadline \u003ctask\u003e /by \u003cdue date\u003e\u0027\";","lastModifiedDate":"2024-02-17"},{"lineNumber":44,"author":{"gitId":"dtaywd"},"content":"    public final String EVENT_REQUIRED_INPUTS \u003d \"\u0027Event \u003ctask\u003e /from \u003cstart date\u003e /to \u003cend date\u003e\u0027\";","lastModifiedDate":"2024-02-17"},{"lineNumber":45,"author":{"gitId":"dtaywd"},"content":"","lastModifiedDate":"2024-02-17"},{"lineNumber":46,"author":{"gitId":"dtaywd"},"content":"    /**","lastModifiedDate":"2024-02-26"},{"lineNumber":47,"author":{"gitId":"dtaywd"},"content":"     * Constructs a new TaskManager object.","lastModifiedDate":"2024-02-26"},{"lineNumber":48,"author":{"gitId":"dtaywd"},"content":"     * Initializes the number of items to 0.","lastModifiedDate":"2024-02-26"},{"lineNumber":49,"author":{"gitId":"dtaywd"},"content":"     */","lastModifiedDate":"2024-02-26"},{"lineNumber":50,"author":{"gitId":"dtaywd"},"content":"    public TaskManager() {","lastModifiedDate":"2024-02-01"},{"lineNumber":51,"author":{"gitId":"dtaywd"},"content":"        numItems \u003d 0;","lastModifiedDate":"2024-02-18"},{"lineNumber":52,"author":{"gitId":"dtaywd"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":53,"author":{"gitId":"dtaywd"},"content":"","lastModifiedDate":"2024-02-18"},{"lineNumber":54,"author":{"gitId":"dtaywd"},"content":"    /**","lastModifiedDate":"2024-02-26"},{"lineNumber":55,"author":{"gitId":"dtaywd"},"content":"     * Adds task contents to the task list based on the user input.","lastModifiedDate":"2024-02-26"},{"lineNumber":56,"author":{"gitId":"dtaywd"},"content":"     * Handles various types of tasks like Todo, Deadline, and Event.","lastModifiedDate":"2024-02-26"},{"lineNumber":57,"author":{"gitId":"dtaywd"},"content":"     * Adds task contents to the data.txt file","lastModifiedDate":"2024-02-26"},{"lineNumber":58,"author":{"gitId":"dtaywd"},"content":"     *","lastModifiedDate":"2024-02-26"},{"lineNumber":59,"author":{"gitId":"dtaywd"},"content":"     * @param userInput The user input containing task information to be processed and added.","lastModifiedDate":"2024-02-26"},{"lineNumber":60,"author":{"gitId":"dtaywd"},"content":"     */","lastModifiedDate":"2024-02-26"},{"lineNumber":61,"author":{"gitId":"dtaywd"},"content":"    public void addListContents(String userInput) {","lastModifiedDate":"2024-02-17"},{"lineNumber":62,"author":{"gitId":"dtaywd"},"content":"        try {","lastModifiedDate":"2024-02-14"},{"lineNumber":63,"author":{"gitId":"dtaywd"},"content":"            String[] taskInformation \u003d Parser.processTaskInformation(userInput);","lastModifiedDate":"2024-02-18"},{"lineNumber":64,"author":{"gitId":"dtaywd"},"content":"            addByTaskToTaskArray(taskInformation, false);","lastModifiedDate":"2024-02-18"},{"lineNumber":65,"author":{"gitId":"dtaywd"},"content":"            System.out.println(\"Got it. I\u0027ve added this task:\");","lastModifiedDate":"2024-02-14"},{"lineNumber":66,"author":{"gitId":"dtaywd"},"content":"            System.out.println(TaskList.get(numItems));","lastModifiedDate":"2024-02-26"},{"lineNumber":67,"author":{"gitId":"dtaywd"},"content":"            String taskPluralString \u003d numItems \u003e 1 ? \" tasks\" : \" task\";","lastModifiedDate":"2024-02-07"},{"lineNumber":68,"author":{"gitId":"dtaywd"},"content":"            System.out.println(\"Now you have \" + (numItems + 1) + taskPluralString + \" in the list.\");","lastModifiedDate":"2024-02-21"},{"lineNumber":69,"author":{"gitId":"dtaywd"},"content":"            String dataToAppend \u003d formatDataToAppend(taskInformation);","lastModifiedDate":"2024-02-18"},{"lineNumber":70,"author":{"gitId":"dtaywd"},"content":"            if (numItems \u003d\u003d 0) {","lastModifiedDate":"2024-02-21"},{"lineNumber":71,"author":{"gitId":"dtaywd"},"content":"                Storage.writeToFile(DATA_TXT_FILE_PATH, dataToAppend);","lastModifiedDate":"2024-02-26"},{"lineNumber":72,"author":{"gitId":"dtaywd"},"content":"            }","lastModifiedDate":"2024-02-21"},{"lineNumber":73,"author":{"gitId":"dtaywd"},"content":"            else {","lastModifiedDate":"2024-02-21"},{"lineNumber":74,"author":{"gitId":"dtaywd"},"content":"                Storage.appendToFile(DATA_TXT_FILE_PATH, dataToAppend);","lastModifiedDate":"2024-02-26"},{"lineNumber":75,"author":{"gitId":"dtaywd"},"content":"            }","lastModifiedDate":"2024-02-14"},{"lineNumber":76,"author":{"gitId":"dtaywd"},"content":"            numItems +\u003d 1;","lastModifiedDate":"2024-02-21"},{"lineNumber":77,"author":{"gitId":"dtaywd"},"content":"        } catch (TodoLackInputsException e) {","lastModifiedDate":"2024-02-21"},{"lineNumber":78,"author":{"gitId":"dtaywd"},"content":"            lackInputsErrorMessage(userInput, \"todo\", TODO_REQUIRED_INPUTS);","lastModifiedDate":"2024-02-17"},{"lineNumber":79,"author":{"gitId":"dtaywd"},"content":"        } catch (DeadlineLackInputsException e) {","lastModifiedDate":"2024-02-21"},{"lineNumber":80,"author":{"gitId":"dtaywd"},"content":"            lackInputsErrorMessage(userInput, \"deadline\", DEADLINE_REQUIRED_INPUTS);","lastModifiedDate":"2024-02-17"},{"lineNumber":81,"author":{"gitId":"dtaywd"},"content":"        } catch (EventLackInputsException e) {","lastModifiedDate":"2024-02-21"},{"lineNumber":82,"author":{"gitId":"dtaywd"},"content":"            lackInputsErrorMessage(userInput, \"event\", EVENT_REQUIRED_INPUTS);","lastModifiedDate":"2024-02-17"},{"lineNumber":83,"author":{"gitId":"dtaywd"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2024-02-21"},{"lineNumber":84,"author":{"gitId":"dtaywd"},"content":"            if (userInput.contains(\"deadline\")) {","lastModifiedDate":"2024-02-14"},{"lineNumber":85,"author":{"gitId":"dtaywd"},"content":"                lackInputsErrorMessage(userInput, \"deadline\", DEADLINE_REQUIRED_INPUTS);","lastModifiedDate":"2024-02-17"},{"lineNumber":86,"author":{"gitId":"dtaywd"},"content":"            } else if (userInput.contains(\"event\")) {","lastModifiedDate":"2024-02-14"},{"lineNumber":87,"author":{"gitId":"dtaywd"},"content":"                lackInputsErrorMessage(userInput, \"event\", EVENT_REQUIRED_INPUTS);","lastModifiedDate":"2024-02-17"},{"lineNumber":88,"author":{"gitId":"dtaywd"},"content":"            }","lastModifiedDate":"2024-02-17"},{"lineNumber":89,"author":{"gitId":"dtaywd"},"content":"        } catch (IOException e) {","lastModifiedDate":"2024-02-21"},{"lineNumber":90,"author":{"gitId":"dtaywd"},"content":"            System.out.println(\"failed to append data to txt file\");","lastModifiedDate":"2024-02-18"},{"lineNumber":91,"author":{"gitId":"dtaywd"},"content":"        }","lastModifiedDate":"2024-02-18"},{"lineNumber":92,"author":{"gitId":"dtaywd"},"content":"","lastModifiedDate":"2024-02-17"},{"lineNumber":93,"author":{"gitId":"dtaywd"},"content":"    }","lastModifiedDate":"2024-02-14"},{"lineNumber":94,"author":{"gitId":"dtaywd"},"content":"","lastModifiedDate":"2024-02-14"},{"lineNumber":95,"author":{"gitId":"dtaywd"},"content":"    /**","lastModifiedDate":"2024-02-26"},{"lineNumber":96,"author":{"gitId":"dtaywd"},"content":"     * Formats task information into a string to append to the task list data file.","lastModifiedDate":"2024-02-26"},{"lineNumber":97,"author":{"gitId":"dtaywd"},"content":"     * This method accepts an array of task information and creates a string","lastModifiedDate":"2024-02-26"},{"lineNumber":98,"author":{"gitId":"dtaywd"},"content":"     * representation based on the task type (Todo, Deadline, or Event).","lastModifiedDate":"2024-02-26"},{"lineNumber":99,"author":{"gitId":"dtaywd"},"content":"     *","lastModifiedDate":"2024-02-26"},{"lineNumber":100,"author":{"gitId":"dtaywd"},"content":"     * @param taskInformation An array containing task information.","lastModifiedDate":"2024-02-26"},{"lineNumber":101,"author":{"gitId":"dtaywd"},"content":"     *                        For Todo tasks: taskInformation[0] \u003d \"todo\", taskInformation[1] \u003d task description.","lastModifiedDate":"2024-02-26"},{"lineNumber":102,"author":{"gitId":"dtaywd"},"content":"     *                        For Deadline tasks: taskInformation[0] \u003d \"deadline\", taskInformation[1] \u003d task description,","lastModifiedDate":"2024-02-26"},{"lineNumber":103,"author":{"gitId":"dtaywd"},"content":"     *                        taskInformation[2] \u003d deadline.","lastModifiedDate":"2024-02-26"},{"lineNumber":104,"author":{"gitId":"dtaywd"},"content":"     *                        For Event tasks: taskInformation[0] \u003d \"event\", taskInformation[1] \u003d event description,","lastModifiedDate":"2024-02-26"},{"lineNumber":105,"author":{"gitId":"dtaywd"},"content":"     *                        taskInformation[2] \u003d event start date, taskInformation[3] \u003d event end date.","lastModifiedDate":"2024-02-26"},{"lineNumber":106,"author":{"gitId":"dtaywd"},"content":"     * @return A string representation of the task formatted for appending to the task list data file.","lastModifiedDate":"2024-02-26"},{"lineNumber":107,"author":{"gitId":"dtaywd"},"content":"     *         For example, \"T,0,taskDescription\" for Todo tasks,","lastModifiedDate":"2024-02-26"},{"lineNumber":108,"author":{"gitId":"dtaywd"},"content":"     *         \"D,0,taskDescription,deadline\" for Deadline tasks,","lastModifiedDate":"2024-02-26"},{"lineNumber":109,"author":{"gitId":"dtaywd"},"content":"     *         \"E,0,eventDescription,eventDate,eventTime\" for Event tasks.","lastModifiedDate":"2024-02-26"},{"lineNumber":110,"author":{"gitId":"dtaywd"},"content":"     *         Returns \"error\" if the task type is not recognized.","lastModifiedDate":"2024-02-26"},{"lineNumber":111,"author":{"gitId":"dtaywd"},"content":"     */","lastModifiedDate":"2024-02-26"},{"lineNumber":112,"author":{"gitId":"dtaywd"},"content":"    public static String formatDataToAppend(String[] taskInformation) {","lastModifiedDate":"2024-02-18"},{"lineNumber":113,"author":{"gitId":"dtaywd"},"content":"        String output;","lastModifiedDate":"2024-02-18"},{"lineNumber":114,"author":{"gitId":"dtaywd"},"content":"        switch (taskInformation[0]) {","lastModifiedDate":"2024-02-18"},{"lineNumber":115,"author":{"gitId":"dtaywd"},"content":"        case (\"todo\"):","lastModifiedDate":"2024-02-18"},{"lineNumber":116,"author":{"gitId":"dtaywd"},"content":"            output \u003d \"T,0,\" + taskInformation[1];","lastModifiedDate":"2024-02-18"},{"lineNumber":117,"author":{"gitId":"dtaywd"},"content":"            break;","lastModifiedDate":"2024-02-18"},{"lineNumber":118,"author":{"gitId":"dtaywd"},"content":"","lastModifiedDate":"2024-02-18"},{"lineNumber":119,"author":{"gitId":"dtaywd"},"content":"        case (\"deadline\"):","lastModifiedDate":"2024-02-18"},{"lineNumber":120,"author":{"gitId":"dtaywd"},"content":"            output \u003d \"D,0,\" + taskInformation[1] + \",\" + taskInformation[2];","lastModifiedDate":"2024-02-18"},{"lineNumber":121,"author":{"gitId":"dtaywd"},"content":"            break;","lastModifiedDate":"2024-02-18"},{"lineNumber":122,"author":{"gitId":"dtaywd"},"content":"","lastModifiedDate":"2024-02-18"},{"lineNumber":123,"author":{"gitId":"dtaywd"},"content":"        case (\"event\"):","lastModifiedDate":"2024-02-18"},{"lineNumber":124,"author":{"gitId":"dtaywd"},"content":"            output \u003d \"E,0,\" + taskInformation[1] + \",\" + taskInformation[2] + \",\" + taskInformation[3];","lastModifiedDate":"2024-02-18"},{"lineNumber":125,"author":{"gitId":"dtaywd"},"content":"            break;","lastModifiedDate":"2024-02-18"},{"lineNumber":126,"author":{"gitId":"dtaywd"},"content":"","lastModifiedDate":"2024-02-18"},{"lineNumber":127,"author":{"gitId":"dtaywd"},"content":"        default:","lastModifiedDate":"2024-02-18"},{"lineNumber":128,"author":{"gitId":"dtaywd"},"content":"            output \u003d \"error\";","lastModifiedDate":"2024-02-18"},{"lineNumber":129,"author":{"gitId":"dtaywd"},"content":"        }","lastModifiedDate":"2024-02-18"},{"lineNumber":130,"author":{"gitId":"dtaywd"},"content":"        return output;","lastModifiedDate":"2024-02-18"},{"lineNumber":131,"author":{"gitId":"dtaywd"},"content":"    }","lastModifiedDate":"2024-02-18"},{"lineNumber":132,"author":{"gitId":"dtaywd"},"content":"","lastModifiedDate":"2024-02-18"},{"lineNumber":133,"author":{"gitId":"dtaywd"},"content":"    /**","lastModifiedDate":"2024-02-26"},{"lineNumber":134,"author":{"gitId":"dtaywd"},"content":"     * Adds a new task to the task list based on the provided task information.","lastModifiedDate":"2024-02-26"},{"lineNumber":135,"author":{"gitId":"dtaywd"},"content":"     * This method creates a new task object depending on the task type and adds it to the task list.","lastModifiedDate":"2024-02-26"},{"lineNumber":136,"author":{"gitId":"dtaywd"},"content":"     *","lastModifiedDate":"2024-02-26"},{"lineNumber":137,"author":{"gitId":"dtaywd"},"content":"     * @param taskInformation An array containing task information.","lastModifiedDate":"2024-02-26"},{"lineNumber":138,"author":{"gitId":"dtaywd"},"content":"     *                        For Todo tasks: taskInformation[0] \u003d \"todo\", taskInformation[1] \u003d task description.","lastModifiedDate":"2024-02-26"},{"lineNumber":139,"author":{"gitId":"dtaywd"},"content":"     *                        For Deadline tasks: taskInformation[0] \u003d \"deadline\", taskInformation[1] \u003d task description,","lastModifiedDate":"2024-02-26"},{"lineNumber":140,"author":{"gitId":"dtaywd"},"content":"     *                        taskInformation[2] \u003d deadline.","lastModifiedDate":"2024-02-26"},{"lineNumber":141,"author":{"gitId":"dtaywd"},"content":"     *                        For Event tasks: taskInformation[0] \u003d \"event\", taskInformation[1] \u003d event description,","lastModifiedDate":"2024-02-26"},{"lineNumber":142,"author":{"gitId":"dtaywd"},"content":"     *                        taskInformation[2] \u003d event start date, taskInformation[3] \u003d event end date.","lastModifiedDate":"2024-02-26"},{"lineNumber":143,"author":{"gitId":"dtaywd"},"content":"     * @param isDone          A boolean value indicating whether the task is already done or not.","lastModifiedDate":"2024-02-26"},{"lineNumber":144,"author":{"gitId":"dtaywd"},"content":"     *                        \u0027true\u0027 if the task is done, \u0027false\u0027 otherwise.","lastModifiedDate":"2024-02-26"},{"lineNumber":145,"author":{"gitId":"dtaywd"},"content":"     */","lastModifiedDate":"2024-02-26"},{"lineNumber":146,"author":{"gitId":"dtaywd"},"content":"    private static void addByTaskToTaskArray(String[] taskInformation, boolean isDone) {","lastModifiedDate":"2024-02-18"},{"lineNumber":147,"author":{"gitId":"dtaywd"},"content":"        switch (taskInformation[0]) {","lastModifiedDate":"2024-02-18"},{"lineNumber":148,"author":{"gitId":"dtaywd"},"content":"        case (\"todo\"):","lastModifiedDate":"2024-02-18"},{"lineNumber":149,"author":{"gitId":"dtaywd"},"content":"            TaskList.add(new Todo(taskInformation[1], isDone));","lastModifiedDate":"2024-02-26"},{"lineNumber":150,"author":{"gitId":"dtaywd"},"content":"            break;","lastModifiedDate":"2024-02-18"},{"lineNumber":151,"author":{"gitId":"dtaywd"},"content":"","lastModifiedDate":"2024-02-18"},{"lineNumber":152,"author":{"gitId":"dtaywd"},"content":"        case (\"deadline\"):","lastModifiedDate":"2024-02-18"},{"lineNumber":153,"author":{"gitId":"dtaywd"},"content":"            TaskList.add(new Deadline(taskInformation[1], isDone, taskInformation[2]));","lastModifiedDate":"2024-02-26"},{"lineNumber":154,"author":{"gitId":"dtaywd"},"content":"            break;","lastModifiedDate":"2024-02-18"},{"lineNumber":155,"author":{"gitId":"dtaywd"},"content":"","lastModifiedDate":"2024-02-18"},{"lineNumber":156,"author":{"gitId":"dtaywd"},"content":"        case (\"event\"):","lastModifiedDate":"2024-02-18"},{"lineNumber":157,"author":{"gitId":"dtaywd"},"content":"            TaskList.add(new Event(taskInformation[1], isDone, taskInformation[2],","lastModifiedDate":"2024-02-26"},{"lineNumber":158,"author":{"gitId":"dtaywd"},"content":"                    taskInformation[3]));","lastModifiedDate":"2024-02-18"},{"lineNumber":159,"author":{"gitId":"dtaywd"},"content":"            break;","lastModifiedDate":"2024-02-18"},{"lineNumber":160,"author":{"gitId":"dtaywd"},"content":"","lastModifiedDate":"2024-02-18"},{"lineNumber":161,"author":{"gitId":"dtaywd"},"content":"        case (\"error\"):","lastModifiedDate":"2024-02-18"},{"lineNumber":162,"author":{"gitId":"dtaywd"},"content":"            //should not hit this line","lastModifiedDate":"2024-02-18"},{"lineNumber":163,"author":{"gitId":"dtaywd"},"content":"            System.out.println(\"Please give a proper input for todo/deadline/event\");","lastModifiedDate":"2024-02-18"},{"lineNumber":164,"author":{"gitId":"dtaywd"},"content":"            break;","lastModifiedDate":"2024-02-18"},{"lineNumber":165,"author":{"gitId":"dtaywd"},"content":"","lastModifiedDate":"2024-02-18"},{"lineNumber":166,"author":{"gitId":"dtaywd"},"content":"        default:","lastModifiedDate":"2024-02-18"},{"lineNumber":167,"author":{"gitId":"dtaywd"},"content":"            break;","lastModifiedDate":"2024-02-18"},{"lineNumber":168,"author":{"gitId":"dtaywd"},"content":"        }","lastModifiedDate":"2024-02-18"},{"lineNumber":169,"author":{"gitId":"dtaywd"},"content":"    }","lastModifiedDate":"2024-02-18"},{"lineNumber":170,"author":{"gitId":"dtaywd"},"content":"","lastModifiedDate":"2024-02-18"},{"lineNumber":171,"author":{"gitId":"dtaywd"},"content":"    /**","lastModifiedDate":"2024-02-26"},{"lineNumber":172,"author":{"gitId":"dtaywd"},"content":"     * Prints an error message indicating that the user\u0027s task description lacks inputs.","lastModifiedDate":"2024-02-26"},{"lineNumber":173,"author":{"gitId":"dtaywd"},"content":"     * This method provides guidance on how to correctly format the task description.","lastModifiedDate":"2024-02-26"},{"lineNumber":174,"author":{"gitId":"dtaywd"},"content":"     *","lastModifiedDate":"2024-02-26"},{"lineNumber":175,"author":{"gitId":"dtaywd"},"content":"     * @param userInput      The user input that triggered the error.","lastModifiedDate":"2024-02-26"},{"lineNumber":176,"author":{"gitId":"dtaywd"},"content":"     * @param errorType      The type of task for which inputs are lacking (e.g., \"todo\", \"deadline\", \"event\").","lastModifiedDate":"2024-02-26"},{"lineNumber":177,"author":{"gitId":"dtaywd"},"content":"     * @param requiredInputs The required format for the task description that should be entered.","lastModifiedDate":"2024-02-26"},{"lineNumber":178,"author":{"gitId":"dtaywd"},"content":"     *                       For example, \"todo \u003cdescription\u003e\", \"deadline \u003cdescription\u003e /by \u003cdeadline\u003e\", \"event \u003cdescription\u003e /at \u003cdate\u003e \u003ctime\u003e\".","lastModifiedDate":"2024-02-26"},{"lineNumber":179,"author":{"gitId":"dtaywd"},"content":"     */","lastModifiedDate":"2024-02-26"},{"lineNumber":180,"author":{"gitId":"dtaywd"},"content":"    private static void lackInputsErrorMessage(String userInput, String errorType, String requiredInputs) {","lastModifiedDate":"2024-02-17"},{"lineNumber":181,"author":{"gitId":"dtaywd"},"content":"        System.out.println(\"Your \" + errorType + \" task description seems to lack inputs. What you entered was \" + userInput +","lastModifiedDate":"2024-02-17"},{"lineNumber":182,"author":{"gitId":"dtaywd"},"content":"                \". Try typing it as \" + requiredInputs);","lastModifiedDate":"2024-02-17"},{"lineNumber":183,"author":{"gitId":"dtaywd"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":184,"author":{"gitId":"dtaywd"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":185,"author":{"gitId":"dtaywd"},"content":"    /**","lastModifiedDate":"2024-02-26"},{"lineNumber":186,"author":{"gitId":"dtaywd"},"content":"     * Displays the contents of the task list.","lastModifiedDate":"2024-02-26"},{"lineNumber":187,"author":{"gitId":"dtaywd"},"content":"     * If the list is empty, it prints a message indicating so.","lastModifiedDate":"2024-02-26"},{"lineNumber":188,"author":{"gitId":"dtaywd"},"content":"     * Otherwise, it prints the tasks along with their indices in the list.","lastModifiedDate":"2024-02-26"},{"lineNumber":189,"author":{"gitId":"dtaywd"},"content":"     */","lastModifiedDate":"2024-02-26"},{"lineNumber":190,"author":{"gitId":"dtaywd"},"content":"    public void showListContents() {","lastModifiedDate":"2024-02-01"},{"lineNumber":191,"author":{"gitId":"dtaywd"},"content":"        if (numItems \u003d\u003d 0) {","lastModifiedDate":"2024-02-18"},{"lineNumber":192,"author":{"gitId":"dtaywd"},"content":"            System.out.println(\"List is empty. Please enter something first.\");","lastModifiedDate":"2024-02-01"},{"lineNumber":193,"author":{"gitId":"dtaywd"},"content":"        } else {","lastModifiedDate":"2024-02-21"},{"lineNumber":194,"author":{"gitId":"dtaywd"},"content":"            System.out.println(\"Here are the tasks in your list:\");","lastModifiedDate":"2024-02-07"},{"lineNumber":195,"author":{"gitId":"dtaywd"},"content":"            for (int i \u003d 0; i \u003c numItems; i +\u003d 1) {","lastModifiedDate":"2024-02-01"},{"lineNumber":196,"author":{"gitId":"dtaywd"},"content":"                System.out.print(i + 1 + \". \");","lastModifiedDate":"2024-02-17"},{"lineNumber":197,"author":{"gitId":"dtaywd"},"content":"                System.out.println(TaskList.get(i));","lastModifiedDate":"2024-02-26"},{"lineNumber":198,"author":{"gitId":"dtaywd"},"content":"            }","lastModifiedDate":"2024-02-01"},{"lineNumber":199,"author":{"gitId":"dtaywd"},"content":"        }","lastModifiedDate":"2024-02-01"},{"lineNumber":200,"author":{"gitId":"dtaywd"},"content":"    }","lastModifiedDate":"2024-02-07"},{"lineNumber":201,"author":{"gitId":"dtaywd"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":202,"author":{"gitId":"dtaywd"},"content":"    /**","lastModifiedDate":"2024-02-26"},{"lineNumber":203,"author":{"gitId":"dtaywd"},"content":"     * Checks if a given string represents a valid integer.","lastModifiedDate":"2024-02-26"},{"lineNumber":204,"author":{"gitId":"dtaywd"},"content":"     *","lastModifiedDate":"2024-02-26"},{"lineNumber":205,"author":{"gitId":"dtaywd"},"content":"     * @param number The string to be checked for integer validity.","lastModifiedDate":"2024-02-26"},{"lineNumber":206,"author":{"gitId":"dtaywd"},"content":"     * @return true if the string represents a valid integer, false otherwise.","lastModifiedDate":"2024-02-26"},{"lineNumber":207,"author":{"gitId":"dtaywd"},"content":"     */","lastModifiedDate":"2024-02-26"},{"lineNumber":208,"author":{"gitId":"dtaywd"},"content":"    public static boolean isStringInteger(String number) {","lastModifiedDate":"2024-02-01"},{"lineNumber":209,"author":{"gitId":"dtaywd"},"content":"        try {","lastModifiedDate":"2024-02-01"},{"lineNumber":210,"author":{"gitId":"dtaywd"},"content":"            Integer.parseInt(number);","lastModifiedDate":"2024-02-01"},{"lineNumber":211,"author":{"gitId":"dtaywd"},"content":"        } catch (Exception e) {","lastModifiedDate":"2024-02-01"},{"lineNumber":212,"author":{"gitId":"dtaywd"},"content":"            return false;","lastModifiedDate":"2024-02-01"},{"lineNumber":213,"author":{"gitId":"dtaywd"},"content":"        }","lastModifiedDate":"2024-02-01"},{"lineNumber":214,"author":{"gitId":"dtaywd"},"content":"        return true;","lastModifiedDate":"2024-02-01"},{"lineNumber":215,"author":{"gitId":"dtaywd"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":216,"author":{"gitId":"dtaywd"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":217,"author":{"gitId":"dtaywd"},"content":"    /**","lastModifiedDate":"2024-02-26"},{"lineNumber":218,"author":{"gitId":"dtaywd"},"content":"     * Changes the status of a task based on the user input.","lastModifiedDate":"2024-02-26"},{"lineNumber":219,"author":{"gitId":"dtaywd"},"content":"     * If the user input is not valid, the method prints out an error message.","lastModifiedDate":"2024-02-26"},{"lineNumber":220,"author":{"gitId":"dtaywd"},"content":"     *","lastModifiedDate":"2024-02-26"},{"lineNumber":221,"author":{"gitId":"dtaywd"},"content":"     * @param userInput The user input indicating the task ID and whether to mark or unmark the task.","lastModifiedDate":"2024-02-26"},{"lineNumber":222,"author":{"gitId":"dtaywd"},"content":"     */","lastModifiedDate":"2024-02-26"},{"lineNumber":223,"author":{"gitId":"dtaywd"},"content":"    public void changeTaskStatus(String userInput) {","lastModifiedDate":"2024-02-01"},{"lineNumber":224,"author":{"gitId":"dtaywd"},"content":"        if (!isValidTaskId(userInput, \"changeTaskStatus\")) {","lastModifiedDate":"2024-02-17"},{"lineNumber":225,"author":{"gitId":"dtaywd"},"content":"            return;","lastModifiedDate":"2024-02-01"},{"lineNumber":226,"author":{"gitId":"dtaywd"},"content":"        }","lastModifiedDate":"2024-02-01"},{"lineNumber":227,"author":{"gitId":"dtaywd"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":228,"author":{"gitId":"dtaywd"},"content":"        int id \u003d Parser.processTaskIdforMarkingAndDeletingTask(userInput);","lastModifiedDate":"2024-02-18"},{"lineNumber":229,"author":{"gitId":"dtaywd"},"content":"","lastModifiedDate":"2024-02-16"},{"lineNumber":230,"author":{"gitId":"dtaywd"},"content":"        if (userInput.contains(\"unmark\")) {","lastModifiedDate":"2024-02-01"},{"lineNumber":231,"author":{"gitId":"dtaywd"},"content":"            try {","lastModifiedDate":"2024-02-21"},{"lineNumber":232,"author":{"gitId":"dtaywd"},"content":"                Storage.changeTaskStatusData(DATA_TXT_FILE_PATH, id + 1, 0);","lastModifiedDate":"2024-02-26"},{"lineNumber":233,"author":{"gitId":"dtaywd"},"content":"            } catch (FileNotFoundException e) {","lastModifiedDate":"2024-02-21"},{"lineNumber":234,"author":{"gitId":"dtaywd"},"content":"                System.out.println(\"could not unmark task\");","lastModifiedDate":"2024-02-21"},{"lineNumber":235,"author":{"gitId":"dtaywd"},"content":"                return;","lastModifiedDate":"2024-02-21"},{"lineNumber":236,"author":{"gitId":"dtaywd"},"content":"            }","lastModifiedDate":"2024-02-21"},{"lineNumber":237,"author":{"gitId":"dtaywd"},"content":"            TaskList.setDone(id, false);","lastModifiedDate":"2024-02-26"},{"lineNumber":238,"author":{"gitId":"dtaywd"},"content":"            System.out.println(\"OK, I\u0027ve marked this task as not done yet:\");","lastModifiedDate":"2024-02-01"},{"lineNumber":239,"author":{"gitId":"dtaywd"},"content":"            System.out.println(TaskList.get(id));","lastModifiedDate":"2024-02-26"},{"lineNumber":240,"author":{"gitId":"dtaywd"},"content":"        }","lastModifiedDate":"2024-02-01"},{"lineNumber":241,"author":{"gitId":"dtaywd"},"content":"        // must contain mark at this point","lastModifiedDate":"2024-02-01"},{"lineNumber":242,"author":{"gitId":"dtaywd"},"content":"        else {","lastModifiedDate":"2024-02-01"},{"lineNumber":243,"author":{"gitId":"dtaywd"},"content":"            try {","lastModifiedDate":"2024-02-21"},{"lineNumber":244,"author":{"gitId":"dtaywd"},"content":"                Storage.changeTaskStatusData(DATA_TXT_FILE_PATH, id + 1, 1);","lastModifiedDate":"2024-02-26"},{"lineNumber":245,"author":{"gitId":"dtaywd"},"content":"            } catch (FileNotFoundException e) {","lastModifiedDate":"2024-02-21"},{"lineNumber":246,"author":{"gitId":"dtaywd"},"content":"                System.out.println(\"could not mark task\");","lastModifiedDate":"2024-02-21"},{"lineNumber":247,"author":{"gitId":"dtaywd"},"content":"                return;","lastModifiedDate":"2024-02-21"},{"lineNumber":248,"author":{"gitId":"dtaywd"},"content":"            }","lastModifiedDate":"2024-02-21"},{"lineNumber":249,"author":{"gitId":"dtaywd"},"content":"            TaskList.setDone(id, true);","lastModifiedDate":"2024-02-26"},{"lineNumber":250,"author":{"gitId":"dtaywd"},"content":"            System.out.println(\"Nice! I\u0027ve marked this task as done:\");","lastModifiedDate":"2024-02-01"},{"lineNumber":251,"author":{"gitId":"dtaywd"},"content":"            System.out.println(TaskList.get(id));","lastModifiedDate":"2024-02-26"},{"lineNumber":252,"author":{"gitId":"dtaywd"},"content":"        }","lastModifiedDate":"2024-02-17"},{"lineNumber":253,"author":{"gitId":"dtaywd"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":254,"author":{"gitId":"dtaywd"},"content":"","lastModifiedDate":"2024-02-17"},{"lineNumber":255,"author":{"gitId":"dtaywd"},"content":"    /**","lastModifiedDate":"2024-02-26"},{"lineNumber":256,"author":{"gitId":"dtaywd"},"content":"     * Checks if the user input contains a valid task ID.","lastModifiedDate":"2024-02-26"},{"lineNumber":257,"author":{"gitId":"dtaywd"},"content":"     * The method also ensures that the input follows the expected command structure for a specific purpose.","lastModifiedDate":"2024-02-26"},{"lineNumber":258,"author":{"gitId":"dtaywd"},"content":"     *","lastModifiedDate":"2024-02-26"},{"lineNumber":259,"author":{"gitId":"dtaywd"},"content":"     * @param userInput The user input to be validated, containing task information.","lastModifiedDate":"2024-02-26"},{"lineNumber":260,"author":{"gitId":"dtaywd"},"content":"     * @param purpose   A string indicating the purpose of the validation. Valid values are \"deleteTask\" or \"changeTaskStatus\".","lastModifiedDate":"2024-02-26"},{"lineNumber":261,"author":{"gitId":"dtaywd"},"content":"     * @return true if the user input is valid, false otherwise.","lastModifiedDate":"2024-02-26"},{"lineNumber":262,"author":{"gitId":"dtaywd"},"content":"     */","lastModifiedDate":"2024-02-26"},{"lineNumber":263,"author":{"gitId":"dtaywd"},"content":"    public boolean isValidTaskId(String userInput, String purpose) {","lastModifiedDate":"2024-02-17"},{"lineNumber":264,"author":{"gitId":"dtaywd"},"content":"        userInput \u003d userInput.toLowerCase();","lastModifiedDate":"2024-02-17"},{"lineNumber":265,"author":{"gitId":"dtaywd"},"content":"        String[] wordArray \u003d userInput.split(\" \");","lastModifiedDate":"2024-02-17"},{"lineNumber":266,"author":{"gitId":"dtaywd"},"content":"        String commandStructure;","lastModifiedDate":"2024-02-17"},{"lineNumber":267,"author":{"gitId":"dtaywd"},"content":"        if (purpose.equals(\"changeTaskStatus\")) {","lastModifiedDate":"2024-02-17"},{"lineNumber":268,"author":{"gitId":"dtaywd"},"content":"            commandStructure \u003d \"\\\"mark x or unmark x\\\"\";","lastModifiedDate":"2024-02-17"},{"lineNumber":269,"author":{"gitId":"dtaywd"},"content":"        } else if (purpose.equals(\"deleteTask\")) {","lastModifiedDate":"2024-02-17"},{"lineNumber":270,"author":{"gitId":"dtaywd"},"content":"            commandStructure \u003d \"\\\"delete x\\\"\";","lastModifiedDate":"2024-02-17"},{"lineNumber":271,"author":{"gitId":"dtaywd"},"content":"        } else {","lastModifiedDate":"2024-02-21"},{"lineNumber":272,"author":{"gitId":"dtaywd"},"content":"            System.out.println(\"not a valid purpose \u003d(\");","lastModifiedDate":"2024-02-17"},{"lineNumber":273,"author":{"gitId":"dtaywd"},"content":"            return false;","lastModifiedDate":"2024-02-17"},{"lineNumber":274,"author":{"gitId":"dtaywd"},"content":"        }","lastModifiedDate":"2024-02-01"},{"lineNumber":275,"author":{"gitId":"dtaywd"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":276,"author":{"gitId":"dtaywd"},"content":"        if (wordArray.length !\u003d 2 || !isStringInteger(wordArray[1])) {","lastModifiedDate":"2024-02-17"},{"lineNumber":277,"author":{"gitId":"dtaywd"},"content":"            System.out.println(\"Please give a command in the structure of \" + commandStructure +","lastModifiedDate":"2024-02-17"},{"lineNumber":278,"author":{"gitId":"dtaywd"},"content":"                    \"where x is the task number\");","lastModifiedDate":"2024-02-17"},{"lineNumber":279,"author":{"gitId":"dtaywd"},"content":"            return false;","lastModifiedDate":"2024-02-17"},{"lineNumber":280,"author":{"gitId":"dtaywd"},"content":"        }","lastModifiedDate":"2024-02-17"},{"lineNumber":281,"author":{"gitId":"dtaywd"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":282,"author":{"gitId":"dtaywd"},"content":"        int id \u003d Integer.parseInt(wordArray[1]) - 1;","lastModifiedDate":"2024-02-17"},{"lineNumber":283,"author":{"gitId":"dtaywd"},"content":"        if (id \u003e\u003d numItems || id \u003c 0) {","lastModifiedDate":"2024-02-17"},{"lineNumber":284,"author":{"gitId":"dtaywd"},"content":"            System.out.println(\"Please select a task number that exists. \u003d)\");","lastModifiedDate":"2024-02-17"},{"lineNumber":285,"author":{"gitId":"dtaywd"},"content":"            return false;","lastModifiedDate":"2024-02-17"},{"lineNumber":286,"author":{"gitId":"dtaywd"},"content":"        }","lastModifiedDate":"2024-02-17"},{"lineNumber":287,"author":{"gitId":"dtaywd"},"content":"        return true;","lastModifiedDate":"2024-02-17"},{"lineNumber":288,"author":{"gitId":"dtaywd"},"content":"    }","lastModifiedDate":"2024-02-17"},{"lineNumber":289,"author":{"gitId":"dtaywd"},"content":"","lastModifiedDate":"2024-02-17"},{"lineNumber":290,"author":{"gitId":"dtaywd"},"content":"    /**","lastModifiedDate":"2024-02-26"},{"lineNumber":291,"author":{"gitId":"dtaywd"},"content":"     * Deletes a task from the task list based on the provided user input.","lastModifiedDate":"2024-02-26"},{"lineNumber":292,"author":{"gitId":"dtaywd"},"content":"     * If the user input is not valid, the method returns without making any changes and prints out an error message.","lastModifiedDate":"2024-02-26"},{"lineNumber":293,"author":{"gitId":"dtaywd"},"content":"     *","lastModifiedDate":"2024-02-26"},{"lineNumber":294,"author":{"gitId":"dtaywd"},"content":"     * @param userInput The user input indicating the task ID to be deleted.","lastModifiedDate":"2024-02-26"},{"lineNumber":295,"author":{"gitId":"dtaywd"},"content":"     */","lastModifiedDate":"2024-02-26"},{"lineNumber":296,"author":{"gitId":"dtaywd"},"content":"    public void deleteTask(String userInput) {","lastModifiedDate":"2024-02-17"},{"lineNumber":297,"author":{"gitId":"dtaywd"},"content":"        if (!isValidTaskId(userInput, \"deleteTask\")) {","lastModifiedDate":"2024-02-17"},{"lineNumber":298,"author":{"gitId":"dtaywd"},"content":"            return;","lastModifiedDate":"2024-02-17"},{"lineNumber":299,"author":{"gitId":"dtaywd"},"content":"        }","lastModifiedDate":"2024-02-17"},{"lineNumber":300,"author":{"gitId":"dtaywd"},"content":"        int id \u003d Parser.processTaskIdforMarkingAndDeletingTask(userInput);","lastModifiedDate":"2024-02-18"},{"lineNumber":301,"author":{"gitId":"dtaywd"},"content":"        System.out.println(\"Noted. I\u0027ve removed this task:\");","lastModifiedDate":"2024-02-17"},{"lineNumber":302,"author":{"gitId":"dtaywd"},"content":"        System.out.println(TaskList.get(id));","lastModifiedDate":"2024-02-26"},{"lineNumber":303,"author":{"gitId":"dtaywd"},"content":"        numItems -\u003d 1;","lastModifiedDate":"2024-02-18"},{"lineNumber":304,"author":{"gitId":"dtaywd"},"content":"        String taskPluralString \u003d numItems \u003e 1 ? \" tasks\" : \" task\";","lastModifiedDate":"2024-02-17"},{"lineNumber":305,"author":{"gitId":"dtaywd"},"content":"        System.out.println(\"Now you have \" + numItems + taskPluralString + \" in the list.\");","lastModifiedDate":"2024-02-17"},{"lineNumber":306,"author":{"gitId":"dtaywd"},"content":"        try {","lastModifiedDate":"2024-02-21"},{"lineNumber":307,"author":{"gitId":"dtaywd"},"content":"            Storage.removeLineData(DATA_TXT_FILE_PATH, id + 1);","lastModifiedDate":"2024-02-26"},{"lineNumber":308,"author":{"gitId":"dtaywd"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2024-02-21"},{"lineNumber":309,"author":{"gitId":"dtaywd"},"content":"            System.out.println(\"unable to delete task. Please ensure that you have input the correct command\");","lastModifiedDate":"2024-02-21"},{"lineNumber":310,"author":{"gitId":"dtaywd"},"content":"        }","lastModifiedDate":"2024-02-21"},{"lineNumber":311,"author":{"gitId":"dtaywd"},"content":"        TaskList.delete(id);","lastModifiedDate":"2024-02-26"},{"lineNumber":312,"author":{"gitId":"dtaywd"},"content":"    }","lastModifiedDate":"2024-02-17"},{"lineNumber":313,"author":{"gitId":"dtaywd"},"content":"","lastModifiedDate":"2024-02-18"},{"lineNumber":314,"author":{"gitId":"dtaywd"},"content":"    /**","lastModifiedDate":"2024-02-26"},{"lineNumber":315,"author":{"gitId":"dtaywd"},"content":"     * Loads tasks from the provided data array list into the task list.","lastModifiedDate":"2024-02-26"},{"lineNumber":316,"author":{"gitId":"dtaywd"},"content":"     * Each element in the data array list represents a line of task data.","lastModifiedDate":"2024-02-26"},{"lineNumber":317,"author":{"gitId":"dtaywd"},"content":"     *","lastModifiedDate":"2024-02-26"},{"lineNumber":318,"author":{"gitId":"dtaywd"},"content":"     * @param dataArrayList An ArrayList containing lines of task data to be loaded.","lastModifiedDate":"2024-02-26"},{"lineNumber":319,"author":{"gitId":"dtaywd"},"content":"     *                      Each line represents a task in a specific format.","lastModifiedDate":"2024-02-26"},{"lineNumber":320,"author":{"gitId":"dtaywd"},"content":"     *                      For example, \"T,0,taskDescription\" for Todo tasks,","lastModifiedDate":"2024-02-26"},{"lineNumber":321,"author":{"gitId":"dtaywd"},"content":"     *                      \"D,0,taskDescription,deadline\" for Deadline tasks,","lastModifiedDate":"2024-02-26"},{"lineNumber":322,"author":{"gitId":"dtaywd"},"content":"     *                      \"E,0,eventDescription,startDate,endDate\" for Event tasks.","lastModifiedDate":"2024-02-26"},{"lineNumber":323,"author":{"gitId":"dtaywd"},"content":"     *                      The second element indicates whether the task is done (1) or not done (0).","lastModifiedDate":"2024-02-26"},{"lineNumber":324,"author":{"gitId":"dtaywd"},"content":"     *                      The format is expected to be consistent across all lines.","lastModifiedDate":"2024-02-26"},{"lineNumber":325,"author":{"gitId":"dtaywd"},"content":"     *                      If the file is corrupted, the method clears the file, restarts it,","lastModifiedDate":"2024-02-26"},{"lineNumber":326,"author":{"gitId":"dtaywd"},"content":"     *                      resets the task count, and clears the task list.","lastModifiedDate":"2024-02-26"},{"lineNumber":327,"author":{"gitId":"dtaywd"},"content":"     */","lastModifiedDate":"2024-02-26"},{"lineNumber":328,"author":{"gitId":"dtaywd"},"content":"    public static void loadTasks(ArrayList\u003cString\u003e dataArrayList) {","lastModifiedDate":"2024-02-18"},{"lineNumber":329,"author":{"gitId":"dtaywd"},"content":"        for (String line : dataArrayList) {","lastModifiedDate":"2024-02-18"},{"lineNumber":330,"author":{"gitId":"dtaywd"},"content":"            try {","lastModifiedDate":"2024-02-18"},{"lineNumber":331,"author":{"gitId":"dtaywd"},"content":"                String[] output \u003d Parser.processTaskLoadingData(line);","lastModifiedDate":"2024-02-18"},{"lineNumber":332,"author":{"gitId":"dtaywd"},"content":"                boolean isDone \u003d output[1].equals(\"1\");","lastModifiedDate":"2024-02-18"},{"lineNumber":333,"author":{"gitId":"dtaywd"},"content":"                String[] filteredOutput \u003d new String[4];","lastModifiedDate":"2024-02-18"},{"lineNumber":334,"author":{"gitId":"dtaywd"},"content":"                filteredOutput[0] \u003d output[0];","lastModifiedDate":"2024-02-18"},{"lineNumber":335,"author":{"gitId":"dtaywd"},"content":"                System.arraycopy(output, 2, filteredOutput, 1, 3);","lastModifiedDate":"2024-02-18"},{"lineNumber":336,"author":{"gitId":"dtaywd"},"content":"                addByTaskToTaskArray(filteredOutput, isDone);","lastModifiedDate":"2024-02-18"},{"lineNumber":337,"author":{"gitId":"dtaywd"},"content":"                numItems +\u003d 1;","lastModifiedDate":"2024-02-18"},{"lineNumber":338,"author":{"gitId":"dtaywd"},"content":"            } catch (CorruptedFileException e) {","lastModifiedDate":"2024-02-21"},{"lineNumber":339,"author":{"gitId":"dtaywd"},"content":"                System.out.println(\"File is corrupted\");","lastModifiedDate":"2024-02-18"},{"lineNumber":340,"author":{"gitId":"dtaywd"},"content":"                Storage.clearFile(DATA_TXT_FILE_PATH);","lastModifiedDate":"2024-02-26"},{"lineNumber":341,"author":{"gitId":"dtaywd"},"content":"                System.out.println(\"Successfully restarted file\");","lastModifiedDate":"2024-02-18"},{"lineNumber":342,"author":{"gitId":"dtaywd"},"content":"                numItems \u003d 0;","lastModifiedDate":"2024-02-21"},{"lineNumber":343,"author":{"gitId":"dtaywd"},"content":"                TaskList.clearList();","lastModifiedDate":"2024-02-26"},{"lineNumber":344,"author":{"gitId":"dtaywd"},"content":"                return;","lastModifiedDate":"2024-02-21"},{"lineNumber":345,"author":{"gitId":"dtaywd"},"content":"            }","lastModifiedDate":"2024-02-18"},{"lineNumber":346,"author":{"gitId":"dtaywd"},"content":"        }","lastModifiedDate":"2024-02-18"},{"lineNumber":347,"author":{"gitId":"dtaywd"},"content":"        System.out.println(\"File loaded successfully!\");","lastModifiedDate":"2024-02-26"},{"lineNumber":348,"author":{"gitId":"dtaywd"},"content":"    }","lastModifiedDate":"2024-02-18"},{"lineNumber":349,"author":{"gitId":"dtaywd"},"content":"","lastModifiedDate":"2024-02-18"},{"lineNumber":350,"author":{"gitId":"dtaywd"},"content":"    public static void findTask(String userInput) {","lastModifiedDate":"2024-02-26"},{"lineNumber":351,"author":{"gitId":"dtaywd"},"content":"        String[] wordArray \u003d userInput.split(\" \");","lastModifiedDate":"2024-02-26"},{"lineNumber":352,"author":{"gitId":"dtaywd"},"content":"        if (wordArray.length \u003d\u003d 2) {","lastModifiedDate":"2024-02-26"},{"lineNumber":353,"author":{"gitId":"dtaywd"},"content":"            String keyWord \u003d wordArray[1].toLowerCase().trim();","lastModifiedDate":"2024-02-26"},{"lineNumber":354,"author":{"gitId":"dtaywd"},"content":"            TaskList.findAndPrint(keyWord);","lastModifiedDate":"2024-02-26"},{"lineNumber":355,"author":{"gitId":"dtaywd"},"content":"        }","lastModifiedDate":"2024-02-26"},{"lineNumber":356,"author":{"gitId":"dtaywd"},"content":"        else {","lastModifiedDate":"2024-02-26"},{"lineNumber":357,"author":{"gitId":"dtaywd"},"content":"            System.out.println(\"Your input was \" + userInput + \" .Please enter it in the format of find \u0027\u003cname of item\u003e\u0027\");","lastModifiedDate":"2024-02-26"},{"lineNumber":358,"author":{"gitId":"dtaywd"},"content":"        }","lastModifiedDate":"2024-02-26"},{"lineNumber":359,"author":{"gitId":"dtaywd"},"content":"    }","lastModifiedDate":"2024-02-26"},{"lineNumber":360,"author":{"gitId":"dtaywd"},"content":"}","lastModifiedDate":"2024-02-01"}],"authorContributionMap":{"dtaywd":360}},{"path":"src/main/java/Tasks/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dtaywd"},"content":"package Tasks;","lastModifiedDate":"2024-02-14"},{"lineNumber":2,"author":{"gitId":"dtaywd"},"content":"","lastModifiedDate":"2024-02-14"},{"lineNumber":3,"author":{"gitId":"dtaywd"},"content":"/**","lastModifiedDate":"2024-02-26"},{"lineNumber":4,"author":{"gitId":"dtaywd"},"content":" * The Deadline class represents a deadline task.","lastModifiedDate":"2024-02-26"},{"lineNumber":5,"author":{"gitId":"dtaywd"},"content":" * It extends the Task class and provides specific behavior for deadline tasks.","lastModifiedDate":"2024-02-26"},{"lineNumber":6,"author":{"gitId":"dtaywd"},"content":" */","lastModifiedDate":"2024-02-26"},{"lineNumber":7,"author":{"gitId":"dtaywd"},"content":"public class Deadline extends Task {","lastModifiedDate":"2024-02-06"},{"lineNumber":8,"author":{"gitId":"dtaywd"},"content":"    /** The due date of the deadline task. */","lastModifiedDate":"2024-02-26"},{"lineNumber":9,"author":{"gitId":"dtaywd"},"content":"    protected String dueDate;","lastModifiedDate":"2024-02-14"},{"lineNumber":10,"author":{"gitId":"dtaywd"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":11,"author":{"gitId":"dtaywd"},"content":"    /**","lastModifiedDate":"2024-02-26"},{"lineNumber":12,"author":{"gitId":"dtaywd"},"content":"     * Constructs a new Deadline object with the given content, completion status, and due date.","lastModifiedDate":"2024-02-26"},{"lineNumber":13,"author":{"gitId":"dtaywd"},"content":"     *","lastModifiedDate":"2024-02-26"},{"lineNumber":14,"author":{"gitId":"dtaywd"},"content":"     * @param content   The content of the deadline task.","lastModifiedDate":"2024-02-26"},{"lineNumber":15,"author":{"gitId":"dtaywd"},"content":"     * @param isDone    The completion status of the deadline task (true if completed, false otherwise).","lastModifiedDate":"2024-02-26"},{"lineNumber":16,"author":{"gitId":"dtaywd"},"content":"     * @param by        The due date of the deadline task.","lastModifiedDate":"2024-02-26"},{"lineNumber":17,"author":{"gitId":"dtaywd"},"content":"     */","lastModifiedDate":"2024-02-26"},{"lineNumber":18,"author":{"gitId":"dtaywd"},"content":"    public Deadline(String content, boolean isDone, String by) {","lastModifiedDate":"2024-02-17"},{"lineNumber":19,"author":{"gitId":"dtaywd"},"content":"        super(content, isDone);","lastModifiedDate":"2024-02-17"},{"lineNumber":20,"author":{"gitId":"dtaywd"},"content":"        this.dueDate \u003d by;","lastModifiedDate":"2024-02-14"},{"lineNumber":21,"author":{"gitId":"dtaywd"},"content":"    }","lastModifiedDate":"2024-02-06"},{"lineNumber":22,"author":{"gitId":"dtaywd"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":23,"author":{"gitId":"dtaywd"},"content":"    /**","lastModifiedDate":"2024-02-26"},{"lineNumber":24,"author":{"gitId":"dtaywd"},"content":"     * Returns a string representation of the deadline task.","lastModifiedDate":"2024-02-26"},{"lineNumber":25,"author":{"gitId":"dtaywd"},"content":"     * The string representation includes the task type identifier \"[D]\", its content, and due date.","lastModifiedDate":"2024-02-26"},{"lineNumber":26,"author":{"gitId":"dtaywd"},"content":"     *","lastModifiedDate":"2024-02-26"},{"lineNumber":27,"author":{"gitId":"dtaywd"},"content":"     * @return A string representation of the deadline task.","lastModifiedDate":"2024-02-26"},{"lineNumber":28,"author":{"gitId":"dtaywd"},"content":"     */","lastModifiedDate":"2024-02-26"},{"lineNumber":29,"author":{"gitId":"dtaywd"},"content":"    @Override","lastModifiedDate":"2024-02-06"},{"lineNumber":30,"author":{"gitId":"dtaywd"},"content":"    public String toString() {","lastModifiedDate":"2024-02-06"},{"lineNumber":31,"author":{"gitId":"dtaywd"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + dueDate + \")\";","lastModifiedDate":"2024-02-14"},{"lineNumber":32,"author":{"gitId":"dtaywd"},"content":"    }","lastModifiedDate":"2024-02-06"},{"lineNumber":33,"author":{"gitId":"dtaywd"},"content":"}","lastModifiedDate":"2024-02-06"}],"authorContributionMap":{"dtaywd":33}},{"path":"src/main/java/Tasks/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dtaywd"},"content":"package Tasks;","lastModifiedDate":"2024-02-14"},{"lineNumber":2,"author":{"gitId":"dtaywd"},"content":"","lastModifiedDate":"2024-02-14"},{"lineNumber":3,"author":{"gitId":"dtaywd"},"content":"/**","lastModifiedDate":"2024-02-26"},{"lineNumber":4,"author":{"gitId":"dtaywd"},"content":" * The Event class represents an event task.","lastModifiedDate":"2024-02-26"},{"lineNumber":5,"author":{"gitId":"dtaywd"},"content":" * It extends the Task class and provides specific behavior for event tasks.","lastModifiedDate":"2024-02-26"},{"lineNumber":6,"author":{"gitId":"dtaywd"},"content":" */","lastModifiedDate":"2024-02-26"},{"lineNumber":7,"author":{"gitId":"dtaywd"},"content":"public class Event extends Task{","lastModifiedDate":"2024-02-14"},{"lineNumber":8,"author":{"gitId":"dtaywd"},"content":"    /** The start date of the event. */","lastModifiedDate":"2024-02-26"},{"lineNumber":9,"author":{"gitId":"dtaywd"},"content":"    protected String startDate;","lastModifiedDate":"2024-02-14"},{"lineNumber":10,"author":{"gitId":"dtaywd"},"content":"","lastModifiedDate":"2024-02-26"},{"lineNumber":11,"author":{"gitId":"dtaywd"},"content":"    /** The end date of the event. */","lastModifiedDate":"2024-02-26"},{"lineNumber":12,"author":{"gitId":"dtaywd"},"content":"    protected String endDate;","lastModifiedDate":"2024-02-14"},{"lineNumber":13,"author":{"gitId":"dtaywd"},"content":"","lastModifiedDate":"2024-02-14"},{"lineNumber":14,"author":{"gitId":"dtaywd"},"content":"    /**","lastModifiedDate":"2024-02-26"},{"lineNumber":15,"author":{"gitId":"dtaywd"},"content":"     * Constructs a new Event object with the given content, completion status, start date, and end date.","lastModifiedDate":"2024-02-26"},{"lineNumber":16,"author":{"gitId":"dtaywd"},"content":"     *","lastModifiedDate":"2024-02-26"},{"lineNumber":17,"author":{"gitId":"dtaywd"},"content":"     * @param content   The content of the event task.","lastModifiedDate":"2024-02-26"},{"lineNumber":18,"author":{"gitId":"dtaywd"},"content":"     * @param isDone    The completion status of the event task (true if completed, false otherwise).","lastModifiedDate":"2024-02-26"},{"lineNumber":19,"author":{"gitId":"dtaywd"},"content":"     * @param from      The start date of the event.","lastModifiedDate":"2024-02-26"},{"lineNumber":20,"author":{"gitId":"dtaywd"},"content":"     * @param to        The end date of the event.","lastModifiedDate":"2024-02-26"},{"lineNumber":21,"author":{"gitId":"dtaywd"},"content":"     */","lastModifiedDate":"2024-02-26"},{"lineNumber":22,"author":{"gitId":"dtaywd"},"content":"    public Event(String content, boolean isDone, String from, String to) {","lastModifiedDate":"2024-02-17"},{"lineNumber":23,"author":{"gitId":"dtaywd"},"content":"        super(content, isDone);","lastModifiedDate":"2024-02-17"},{"lineNumber":24,"author":{"gitId":"dtaywd"},"content":"        this.startDate \u003d from;","lastModifiedDate":"2024-02-14"},{"lineNumber":25,"author":{"gitId":"dtaywd"},"content":"        this.endDate \u003d to;","lastModifiedDate":"2024-02-14"},{"lineNumber":26,"author":{"gitId":"dtaywd"},"content":"    }","lastModifiedDate":"2024-02-14"},{"lineNumber":27,"author":{"gitId":"dtaywd"},"content":"","lastModifiedDate":"2024-02-14"},{"lineNumber":28,"author":{"gitId":"dtaywd"},"content":"    /**","lastModifiedDate":"2024-02-26"},{"lineNumber":29,"author":{"gitId":"dtaywd"},"content":"     * Returns a string representation of the event task.","lastModifiedDate":"2024-02-26"},{"lineNumber":30,"author":{"gitId":"dtaywd"},"content":"     * The string representation includes the task type identifier \"[E]\", its content, start date, and end date.","lastModifiedDate":"2024-02-26"},{"lineNumber":31,"author":{"gitId":"dtaywd"},"content":"     *","lastModifiedDate":"2024-02-26"},{"lineNumber":32,"author":{"gitId":"dtaywd"},"content":"     * @return A string representation of the event task.","lastModifiedDate":"2024-02-26"},{"lineNumber":33,"author":{"gitId":"dtaywd"},"content":"     */","lastModifiedDate":"2024-02-26"},{"lineNumber":34,"author":{"gitId":"dtaywd"},"content":"    @Override","lastModifiedDate":"2024-02-14"},{"lineNumber":35,"author":{"gitId":"dtaywd"},"content":"    public String toString() {","lastModifiedDate":"2024-02-14"},{"lineNumber":36,"author":{"gitId":"dtaywd"},"content":"        return \"[E]\" + super.toString() + \" (from: \" + startDate + \" to: \" + endDate + \")\";","lastModifiedDate":"2024-02-14"},{"lineNumber":37,"author":{"gitId":"dtaywd"},"content":"    }","lastModifiedDate":"2024-02-14"},{"lineNumber":38,"author":{"gitId":"dtaywd"},"content":"}","lastModifiedDate":"2024-02-14"}],"authorContributionMap":{"dtaywd":38}},{"path":"src/main/java/Tasks/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dtaywd"},"content":"package Tasks;","lastModifiedDate":"2024-02-14"},{"lineNumber":2,"author":{"gitId":"dtaywd"},"content":"","lastModifiedDate":"2024-02-14"},{"lineNumber":3,"author":{"gitId":"dtaywd"},"content":"/**","lastModifiedDate":"2024-02-26"},{"lineNumber":4,"author":{"gitId":"dtaywd"},"content":" * The Task class represents a task with content and completion status.","lastModifiedDate":"2024-02-26"},{"lineNumber":5,"author":{"gitId":"dtaywd"},"content":" * It provides methods to access and manipulate task properties.","lastModifiedDate":"2024-02-26"},{"lineNumber":6,"author":{"gitId":"dtaywd"},"content":" */","lastModifiedDate":"2024-02-26"},{"lineNumber":7,"author":{"gitId":"dtaywd"},"content":"public abstract class Task {","lastModifiedDate":"2024-02-26"},{"lineNumber":8,"author":{"gitId":"dtaywd"},"content":"    private String content;","lastModifiedDate":"2024-02-01"},{"lineNumber":9,"author":{"gitId":"dtaywd"},"content":"    private boolean isDone;","lastModifiedDate":"2024-02-01"},{"lineNumber":10,"author":{"gitId":"dtaywd"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":11,"author":{"gitId":"dtaywd"},"content":"    /**","lastModifiedDate":"2024-02-26"},{"lineNumber":12,"author":{"gitId":"dtaywd"},"content":"     * Constructs a new Task object with the given content and completion status.","lastModifiedDate":"2024-02-26"},{"lineNumber":13,"author":{"gitId":"dtaywd"},"content":"     *","lastModifiedDate":"2024-02-26"},{"lineNumber":14,"author":{"gitId":"dtaywd"},"content":"     * @param content The content of the task.","lastModifiedDate":"2024-02-26"},{"lineNumber":15,"author":{"gitId":"dtaywd"},"content":"     * @param isDone  The completion status of the task (true if completed, false otherwise).","lastModifiedDate":"2024-02-26"},{"lineNumber":16,"author":{"gitId":"dtaywd"},"content":"     */","lastModifiedDate":"2024-02-26"},{"lineNumber":17,"author":{"gitId":"dtaywd"},"content":"    public Task(String content, boolean isDone) {","lastModifiedDate":"2024-02-17"},{"lineNumber":18,"author":{"gitId":"dtaywd"},"content":"        this.content \u003d content;","lastModifiedDate":"2024-02-01"},{"lineNumber":19,"author":{"gitId":"dtaywd"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2024-02-01"},{"lineNumber":20,"author":{"gitId":"dtaywd"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":21,"author":{"gitId":"dtaywd"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":22,"author":{"gitId":"dtaywd"},"content":"    /**","lastModifiedDate":"2024-02-26"},{"lineNumber":23,"author":{"gitId":"dtaywd"},"content":"     * Retrieves the content of the task.","lastModifiedDate":"2024-02-26"},{"lineNumber":24,"author":{"gitId":"dtaywd"},"content":"     *","lastModifiedDate":"2024-02-26"},{"lineNumber":25,"author":{"gitId":"dtaywd"},"content":"     * @return The content of the task.","lastModifiedDate":"2024-02-26"},{"lineNumber":26,"author":{"gitId":"dtaywd"},"content":"     */","lastModifiedDate":"2024-02-26"},{"lineNumber":27,"author":{"gitId":"dtaywd"},"content":"    public String getContent() {","lastModifiedDate":"2024-02-01"},{"lineNumber":28,"author":{"gitId":"dtaywd"},"content":"        return content;","lastModifiedDate":"2024-02-01"},{"lineNumber":29,"author":{"gitId":"dtaywd"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":30,"author":{"gitId":"dtaywd"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":31,"author":{"gitId":"dtaywd"},"content":"    /**","lastModifiedDate":"2024-02-26"},{"lineNumber":32,"author":{"gitId":"dtaywd"},"content":"     * Checks if the task is done.","lastModifiedDate":"2024-02-26"},{"lineNumber":33,"author":{"gitId":"dtaywd"},"content":"     *","lastModifiedDate":"2024-02-26"},{"lineNumber":34,"author":{"gitId":"dtaywd"},"content":"     * @return True if the task is done, false otherwise.","lastModifiedDate":"2024-02-26"},{"lineNumber":35,"author":{"gitId":"dtaywd"},"content":"     */","lastModifiedDate":"2024-02-26"},{"lineNumber":36,"author":{"gitId":"dtaywd"},"content":"    public boolean isDone() {","lastModifiedDate":"2024-02-01"},{"lineNumber":37,"author":{"gitId":"dtaywd"},"content":"        return isDone;","lastModifiedDate":"2024-02-01"},{"lineNumber":38,"author":{"gitId":"dtaywd"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":39,"author":{"gitId":"dtaywd"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":40,"author":{"gitId":"dtaywd"},"content":"    /**","lastModifiedDate":"2024-02-26"},{"lineNumber":41,"author":{"gitId":"dtaywd"},"content":"     * Sets the completion status of the task.","lastModifiedDate":"2024-02-26"},{"lineNumber":42,"author":{"gitId":"dtaywd"},"content":"     *","lastModifiedDate":"2024-02-26"},{"lineNumber":43,"author":{"gitId":"dtaywd"},"content":"     * @param done The completion status to set for the task (true if completed, false otherwise).","lastModifiedDate":"2024-02-26"},{"lineNumber":44,"author":{"gitId":"dtaywd"},"content":"     */","lastModifiedDate":"2024-02-26"},{"lineNumber":45,"author":{"gitId":"dtaywd"},"content":"    public void setDone(boolean done) {","lastModifiedDate":"2024-02-01"},{"lineNumber":46,"author":{"gitId":"dtaywd"},"content":"        isDone \u003d done;","lastModifiedDate":"2024-02-01"},{"lineNumber":47,"author":{"gitId":"dtaywd"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":48,"author":{"gitId":"dtaywd"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":49,"author":{"gitId":"dtaywd"},"content":"    /**","lastModifiedDate":"2024-02-26"},{"lineNumber":50,"author":{"gitId":"dtaywd"},"content":"     * Returns a string representation of the task.","lastModifiedDate":"2024-02-26"},{"lineNumber":51,"author":{"gitId":"dtaywd"},"content":"     *","lastModifiedDate":"2024-02-26"},{"lineNumber":52,"author":{"gitId":"dtaywd"},"content":"     * @return A string representation of the task, including its completion status and content.","lastModifiedDate":"2024-02-26"},{"lineNumber":53,"author":{"gitId":"dtaywd"},"content":"     */","lastModifiedDate":"2024-02-26"},{"lineNumber":54,"author":{"gitId":"dtaywd"},"content":"    @Override","lastModifiedDate":"2024-02-06"},{"lineNumber":55,"author":{"gitId":"dtaywd"},"content":"    public String toString() {","lastModifiedDate":"2024-02-06"},{"lineNumber":56,"author":{"gitId":"dtaywd"},"content":"        String checkmark \u003d isDone ? \"X\": \" \";","lastModifiedDate":"2024-02-06"},{"lineNumber":57,"author":{"gitId":"dtaywd"},"content":"        return  \" [\" + checkmark + \"] \" + content;","lastModifiedDate":"2024-02-06"},{"lineNumber":58,"author":{"gitId":"dtaywd"},"content":"    }","lastModifiedDate":"2024-02-06"},{"lineNumber":59,"author":{"gitId":"dtaywd"},"content":"}","lastModifiedDate":"2024-02-01"}],"authorContributionMap":{"dtaywd":59}},{"path":"src/main/java/Tasks/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dtaywd"},"content":"package Tasks;","lastModifiedDate":"2024-02-14"},{"lineNumber":2,"author":{"gitId":"dtaywd"},"content":"","lastModifiedDate":"2024-02-14"},{"lineNumber":3,"author":{"gitId":"dtaywd"},"content":"/**","lastModifiedDate":"2024-02-26"},{"lineNumber":4,"author":{"gitId":"dtaywd"},"content":" * The Todo class represents a to-do task.","lastModifiedDate":"2024-02-26"},{"lineNumber":5,"author":{"gitId":"dtaywd"},"content":" * It extends the Task class and provides specific behavior for to-do tasks.","lastModifiedDate":"2024-02-26"},{"lineNumber":6,"author":{"gitId":"dtaywd"},"content":" */","lastModifiedDate":"2024-02-26"},{"lineNumber":7,"author":{"gitId":"dtaywd"},"content":"public class Todo extends Task {","lastModifiedDate":"2024-02-06"},{"lineNumber":8,"author":{"gitId":"dtaywd"},"content":"    /**","lastModifiedDate":"2024-02-26"},{"lineNumber":9,"author":{"gitId":"dtaywd"},"content":"     * Constructs a new Todo object with the given content and completion status.","lastModifiedDate":"2024-02-26"},{"lineNumber":10,"author":{"gitId":"dtaywd"},"content":"     *","lastModifiedDate":"2024-02-26"},{"lineNumber":11,"author":{"gitId":"dtaywd"},"content":"     * @param content The content of the to-do task.","lastModifiedDate":"2024-02-26"},{"lineNumber":12,"author":{"gitId":"dtaywd"},"content":"     * @param isDone  The completion status of the to-do task (true if completed, false otherwise).","lastModifiedDate":"2024-02-26"},{"lineNumber":13,"author":{"gitId":"dtaywd"},"content":"     */","lastModifiedDate":"2024-02-26"},{"lineNumber":14,"author":{"gitId":"dtaywd"},"content":"","lastModifiedDate":"2024-02-26"},{"lineNumber":15,"author":{"gitId":"dtaywd"},"content":"    public Todo(String content, boolean isDone) {","lastModifiedDate":"2024-02-17"},{"lineNumber":16,"author":{"gitId":"dtaywd"},"content":"        super(content, isDone);","lastModifiedDate":"2024-02-17"},{"lineNumber":17,"author":{"gitId":"dtaywd"},"content":"    }","lastModifiedDate":"2024-02-06"},{"lineNumber":18,"author":{"gitId":"dtaywd"},"content":"","lastModifiedDate":"2024-02-26"},{"lineNumber":19,"author":{"gitId":"dtaywd"},"content":"    /**","lastModifiedDate":"2024-02-26"},{"lineNumber":20,"author":{"gitId":"dtaywd"},"content":"     * Returns a string representation of the to-do task.","lastModifiedDate":"2024-02-26"},{"lineNumber":21,"author":{"gitId":"dtaywd"},"content":"     * The string representation includes the task type identifier \"[T]\" and its content.","lastModifiedDate":"2024-02-26"},{"lineNumber":22,"author":{"gitId":"dtaywd"},"content":"     *","lastModifiedDate":"2024-02-26"},{"lineNumber":23,"author":{"gitId":"dtaywd"},"content":"     * @return A string representation of the to-do task.","lastModifiedDate":"2024-02-26"},{"lineNumber":24,"author":{"gitId":"dtaywd"},"content":"     */","lastModifiedDate":"2024-02-26"},{"lineNumber":25,"author":{"gitId":"dtaywd"},"content":"    @Override","lastModifiedDate":"2024-02-06"},{"lineNumber":26,"author":{"gitId":"dtaywd"},"content":"    public String toString() {","lastModifiedDate":"2024-02-06"},{"lineNumber":27,"author":{"gitId":"dtaywd"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2024-02-06"},{"lineNumber":28,"author":{"gitId":"dtaywd"},"content":"    }","lastModifiedDate":"2024-02-06"},{"lineNumber":29,"author":{"gitId":"dtaywd"},"content":"","lastModifiedDate":"2024-02-26"},{"lineNumber":30,"author":{"gitId":"dtaywd"},"content":"}","lastModifiedDate":"2024-02-06"}],"authorContributionMap":{"dtaywd":30}},{"path":"src/main/java/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"dtaywd"},"content":"import java.io.IOException;","lastModifiedDate":"2024-02-18"},{"lineNumber":2,"author":{"gitId":"dtaywd"},"content":"import java.util.Scanner;","lastModifiedDate":"2024-02-06"},{"lineNumber":3,"author":{"gitId":"dtaywd"},"content":"","lastModifiedDate":"2024-02-26"},{"lineNumber":4,"author":{"gitId":"dtaywd"},"content":"/**","lastModifiedDate":"2024-02-26"},{"lineNumber":5,"author":{"gitId":"dtaywd"},"content":" * The UI class manages the user interface and interaction with the task manager.","lastModifiedDate":"2024-02-26"},{"lineNumber":6,"author":{"gitId":"dtaywd"},"content":" * It processes user commands and displays appropriate messages or performs actions accordingly.","lastModifiedDate":"2024-02-26"},{"lineNumber":7,"author":{"gitId":"dtaywd"},"content":" * The UI prompts the user for input and continuously processes commands until the user decides to exit.","lastModifiedDate":"2024-02-26"},{"lineNumber":8,"author":{"gitId":"dtaywd"},"content":" */","lastModifiedDate":"2024-02-26"},{"lineNumber":9,"author":{"gitId":"dtaywd"},"content":"public class Ui {","lastModifiedDate":"2024-02-26"},{"lineNumber":10,"author":{"gitId":"dtaywd"},"content":"    /**","lastModifiedDate":"2024-02-26"},{"lineNumber":11,"author":{"gitId":"dtaywd"},"content":"     * The file path for storing task data.","lastModifiedDate":"2024-02-26"},{"lineNumber":12,"author":{"gitId":"dtaywd"},"content":"     */","lastModifiedDate":"2024-02-26"},{"lineNumber":13,"author":{"gitId":"dtaywd"},"content":"    public static final String DATA_TXT_FILE_PATH \u003d \"./data.txt\";","lastModifiedDate":"2024-02-21"},{"lineNumber":14,"author":{"gitId":"dtaywd"},"content":"","lastModifiedDate":"2024-02-26"},{"lineNumber":15,"author":{"gitId":"dtaywd"},"content":"    /**","lastModifiedDate":"2024-02-26"},{"lineNumber":16,"author":{"gitId":"dtaywd"},"content":"     * Scanner object for reading user input.","lastModifiedDate":"2024-02-26"},{"lineNumber":17,"author":{"gitId":"dtaywd"},"content":"     */","lastModifiedDate":"2024-02-26"},{"lineNumber":18,"author":{"gitId":"dtaywd"},"content":"    Scanner myScanner \u003d new Scanner(System.in);","lastModifiedDate":"2024-02-06"},{"lineNumber":19,"author":{"gitId":"dtaywd"},"content":"","lastModifiedDate":"2024-02-26"},{"lineNumber":20,"author":{"gitId":"dtaywd"},"content":"    /**","lastModifiedDate":"2024-02-26"},{"lineNumber":21,"author":{"gitId":"dtaywd"},"content":"     * TaskManager object for managing tasks.","lastModifiedDate":"2024-02-26"},{"lineNumber":22,"author":{"gitId":"dtaywd"},"content":"     */","lastModifiedDate":"2024-02-26"},{"lineNumber":23,"author":{"gitId":"dtaywd"},"content":"    TaskManager taskManager \u003d new TaskManager();","lastModifiedDate":"2024-02-06"},{"lineNumber":24,"author":{"gitId":"dtaywd"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":25,"author":{"gitId":"dtaywd"},"content":"    /**","lastModifiedDate":"2024-02-26"},{"lineNumber":26,"author":{"gitId":"dtaywd"},"content":"     * Flag indicating whether to continue receiving user inputs.","lastModifiedDate":"2024-02-26"},{"lineNumber":27,"author":{"gitId":"dtaywd"},"content":"     */","lastModifiedDate":"2024-02-26"},{"lineNumber":28,"author":{"gitId":"dtaywd"},"content":"    private boolean continueReceivingUserInputs \u003d true;","lastModifiedDate":"2024-02-17"},{"lineNumber":29,"author":{"gitId":"dtaywd"},"content":"","lastModifiedDate":"2024-02-17"},{"lineNumber":30,"author":{"gitId":"dtaywd"},"content":"    /**","lastModifiedDate":"2024-02-26"},{"lineNumber":31,"author":{"gitId":"dtaywd"},"content":"     * Constructs a new Ui object.","lastModifiedDate":"2024-02-26"},{"lineNumber":32,"author":{"gitId":"dtaywd"},"content":"     * Performs startup checks and begins processing user commands.","lastModifiedDate":"2024-02-26"},{"lineNumber":33,"author":{"gitId":"dtaywd"},"content":"     */","lastModifiedDate":"2024-02-26"},{"lineNumber":34,"author":{"gitId":"dtaywd"},"content":"    public Ui() {","lastModifiedDate":"2024-02-26"},{"lineNumber":35,"author":{"gitId":"dtaywd"},"content":"        try {","lastModifiedDate":"2024-02-18"},{"lineNumber":36,"author":{"gitId":"dtaywd"},"content":"            Storage.startUpCheck(DATA_TXT_FILE_PATH);","lastModifiedDate":"2024-02-26"},{"lineNumber":37,"author":{"gitId":"dtaywd"},"content":"        }","lastModifiedDate":"2024-02-18"},{"lineNumber":38,"author":{"gitId":"dtaywd"},"content":"        catch (IOException e) {","lastModifiedDate":"2024-02-18"},{"lineNumber":39,"author":{"gitId":"dtaywd"},"content":"            System.out.println(\"input output error\");","lastModifiedDate":"2024-02-18"},{"lineNumber":40,"author":{"gitId":"dtaywd"},"content":"        }","lastModifiedDate":"2024-02-18"},{"lineNumber":41,"author":{"gitId":"dtaywd"},"content":"        String userInput \u003d myScanner.nextLine();","lastModifiedDate":"2024-02-06"},{"lineNumber":42,"author":{"gitId":"dtaywd"},"content":"        processUserCommand(userInput);","lastModifiedDate":"2024-02-06"},{"lineNumber":43,"author":{"gitId":"dtaywd"},"content":"    }","lastModifiedDate":"2024-02-06"},{"lineNumber":44,"author":{"gitId":"dtaywd"},"content":"","lastModifiedDate":"2024-02-06"},{"lineNumber":45,"author":{"gitId":"dtaywd"},"content":"    /**","lastModifiedDate":"2024-02-26"},{"lineNumber":46,"author":{"gitId":"dtaywd"},"content":"     * Processes user commands based on the provided input.","lastModifiedDate":"2024-02-26"},{"lineNumber":47,"author":{"gitId":"dtaywd"},"content":"     * The method gets the next user command until the user decides to exit.","lastModifiedDate":"2024-02-26"},{"lineNumber":48,"author":{"gitId":"dtaywd"},"content":"     *","lastModifiedDate":"2024-02-26"},{"lineNumber":49,"author":{"gitId":"dtaywd"},"content":"     * @param userInput The user input command to be processed.","lastModifiedDate":"2024-02-26"},{"lineNumber":50,"author":{"gitId":"dtaywd"},"content":"     */","lastModifiedDate":"2024-02-26"},{"lineNumber":51,"author":{"gitId":"dtaywd"},"content":"    public void processUserCommand(String userInput) {","lastModifiedDate":"2024-02-06"},{"lineNumber":52,"author":{"gitId":"dtaywd"},"content":"        while (continueReceivingUserInputs) {","lastModifiedDate":"2024-02-17"},{"lineNumber":53,"author":{"gitId":"dtaywd"},"content":"            userInput \u003d userInput.toLowerCase();","lastModifiedDate":"2024-02-07"},{"lineNumber":54,"author":{"gitId":"dtaywd"},"content":"            if (userInput.equals(\"bye\")) {","lastModifiedDate":"2024-02-06"},{"lineNumber":55,"author":{"gitId":"dtaywd"},"content":"                System.out.println(\"Bye. I will be awaiting your next order! ☺\");","lastModifiedDate":"2024-02-14"},{"lineNumber":56,"author":{"gitId":"dtaywd"},"content":"                continueReceivingUserInputs \u003d false;","lastModifiedDate":"2024-02-17"},{"lineNumber":57,"author":{"gitId":"dtaywd"},"content":"            } else if (userInput.equals(\"list\")) {","lastModifiedDate":"2024-02-06"},{"lineNumber":58,"author":{"gitId":"dtaywd"},"content":"                taskManager.showListContents();","lastModifiedDate":"2024-02-06"},{"lineNumber":59,"author":{"gitId":"dtaywd"},"content":"                userInput \u003d myScanner.nextLine();","lastModifiedDate":"2024-02-06"},{"lineNumber":60,"author":{"gitId":"dtaywd"},"content":"            } else if (userInput.contains(\"mark\")) {","lastModifiedDate":"2024-02-06"},{"lineNumber":61,"author":{"gitId":"dtaywd"},"content":"                taskManager.changeTaskStatus(userInput);","lastModifiedDate":"2024-02-06"},{"lineNumber":62,"author":{"gitId":"dtaywd"},"content":"                userInput \u003d myScanner.nextLine();","lastModifiedDate":"2024-02-06"},{"lineNumber":63,"author":{"gitId":"dtaywd"},"content":"            } else if (userInput.contains(\"todo\") || userInput.contains(\"event\") || userInput.contains(\"deadline\")){","lastModifiedDate":"2024-02-07"},{"lineNumber":64,"author":{"gitId":"dtaywd"},"content":"                taskManager.addListContents(userInput);","lastModifiedDate":"2024-02-06"},{"lineNumber":65,"author":{"gitId":"dtaywd"},"content":"                userInput \u003d myScanner.nextLine();","lastModifiedDate":"2024-02-06"},{"lineNumber":66,"author":{"gitId":"dtaywd"},"content":"            } else if (userInput.contains(\"delete\")) {","lastModifiedDate":"2024-02-17"},{"lineNumber":67,"author":{"gitId":"dtaywd"},"content":"                taskManager.deleteTask(userInput);","lastModifiedDate":"2024-02-17"},{"lineNumber":68,"author":{"gitId":"dtaywd"},"content":"                userInput \u003d myScanner.nextLine();","lastModifiedDate":"2024-02-17"},{"lineNumber":69,"author":{"gitId":"dtaywd"},"content":"            } else if (userInput.contains(\"find\")) {","lastModifiedDate":"2024-02-26"},{"lineNumber":70,"author":{"gitId":"dtaywd"},"content":"                taskManager.findTask(userInput);","lastModifiedDate":"2024-02-26"},{"lineNumber":71,"author":{"gitId":"dtaywd"},"content":"                userInput \u003d myScanner.nextLine();","lastModifiedDate":"2024-02-26"},{"lineNumber":72,"author":{"gitId":"dtaywd"},"content":"            } else {","lastModifiedDate":"2024-02-17"},{"lineNumber":73,"author":{"gitId":"dtaywd"},"content":"                System.out.println(\"Please enter a valid command. Here have a cup of tea as you think of your next command. ☕\");","lastModifiedDate":"2024-02-14"},{"lineNumber":74,"author":{"gitId":"dtaywd"},"content":"                userInput \u003d myScanner.nextLine();","lastModifiedDate":"2024-02-07"},{"lineNumber":75,"author":{"gitId":"dtaywd"},"content":"                processUserCommand(userInput);","lastModifiedDate":"2024-02-07"},{"lineNumber":76,"author":{"gitId":"dtaywd"},"content":"            }","lastModifiedDate":"2024-02-07"},{"lineNumber":77,"author":{"gitId":"dtaywd"},"content":"        }","lastModifiedDate":"2024-02-06"},{"lineNumber":78,"author":{"gitId":"dtaywd"},"content":"    }","lastModifiedDate":"2024-02-06"},{"lineNumber":79,"author":{"gitId":"dtaywd"},"content":"}","lastModifiedDate":"2024-02-17"}],"authorContributionMap":{"dtaywd":79}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"dtaywd"},"content":"todo","lastModifiedDate":"2024-02-14"},{"lineNumber":2,"author":{"gitId":"dtaywd"},"content":"event /from test /to","lastModifiedDate":"2024-02-14"},{"lineNumber":3,"author":{"gitId":"dtaywd"},"content":"todo borrow book","lastModifiedDate":"2024-02-07"},{"lineNumber":4,"author":{"gitId":"dtaywd"},"content":"list","lastModifiedDate":"2024-02-07"},{"lineNumber":5,"author":{"gitId":"dtaywd"},"content":"deadline return book /by Sunday","lastModifiedDate":"2024-02-07"},{"lineNumber":6,"author":{"gitId":"dtaywd"},"content":"event project meeting /from Mon 2pm /to 4pm","lastModifiedDate":"2024-02-07"},{"lineNumber":7,"author":{"gitId":"dtaywd"},"content":"bye","lastModifiedDate":"2024-02-07"}],"authorContributionMap":{"dtaywd":7}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"dtaywd"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java ..\\src\\main\\java\\Exceptions\\*.java ..\\src\\main\\java\\Tasks\\*.java","lastModifiedDate":"2024-02-14"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"dtaywd"},"content":"java -classpath ..\\bin Sebastian \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2024-02-07"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"dtaywd":2,"-":19}}]
