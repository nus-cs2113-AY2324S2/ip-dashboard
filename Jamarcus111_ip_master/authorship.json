[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"Jamarcus111"},"content":"# Ma project template","lastModifiedDate":"2024-01-31"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it.","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2021-01-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`.","lastModifiedDate":"2021-01-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2021-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29"},{"lineNumber":16,"author":{"gitId":"Jamarcus111"},"content":"3. After that, locate the `src/main/java/Ma.java` file, right-click it, and choose `Run Ma.main()` (if the code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something like the below as the output:","lastModifiedDate":"2024-01-31"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"   Hello from","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    ____        _        ","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ ","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"Jamarcus111":2,"-":22}},{"path":"data/duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Jamarcus111"},"content":"T | 0 | Read a book","lastModifiedDate":"2024-02-23"},{"lineNumber":2,"author":{"gitId":"Jamarcus111"},"content":"T | 0 | Sleep an hour","lastModifiedDate":"2024-02-23"}],"authorContributionMap":{"Jamarcus111":2}},{"path":"src/main/java/CommandParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jamarcus111"},"content":"public class CommandParser {","lastModifiedDate":"2024-02-12"},{"lineNumber":2,"author":{"gitId":"Jamarcus111"},"content":"    private final TaskList taskList;","lastModifiedDate":"2024-02-12"},{"lineNumber":3,"author":{"gitId":"Jamarcus111"},"content":"","lastModifiedDate":"2024-02-12"},{"lineNumber":4,"author":{"gitId":"Jamarcus111"},"content":"","lastModifiedDate":"2024-02-15"},{"lineNumber":5,"author":{"gitId":"Jamarcus111"},"content":"    public CommandParser(TaskList taskList) {","lastModifiedDate":"2024-02-12"},{"lineNumber":6,"author":{"gitId":"Jamarcus111"},"content":"        this.taskList \u003d taskList;","lastModifiedDate":"2024-02-12"},{"lineNumber":7,"author":{"gitId":"Jamarcus111"},"content":"    }","lastModifiedDate":"2024-02-12"},{"lineNumber":8,"author":{"gitId":"Jamarcus111"},"content":"","lastModifiedDate":"2024-02-12"},{"lineNumber":9,"author":{"gitId":"Jamarcus111"},"content":"    public void parseCommand(String userInput) throws HandleException {","lastModifiedDate":"2024-02-16"},{"lineNumber":10,"author":{"gitId":"Jamarcus111"},"content":"        if (userInput.trim().isEmpty()) {","lastModifiedDate":"2024-02-16"},{"lineNumber":11,"author":{"gitId":"Jamarcus111"},"content":"            throw new HandleException(\"The input cannot be empty!\");","lastModifiedDate":"2024-02-16"},{"lineNumber":12,"author":{"gitId":"Jamarcus111"},"content":"        } else if (userInput.equalsIgnoreCase(\"list\")) {","lastModifiedDate":"2024-02-16"},{"lineNumber":13,"author":{"gitId":"Jamarcus111"},"content":"            taskList.listTasks();","lastModifiedDate":"2024-02-12"},{"lineNumber":14,"author":{"gitId":"Jamarcus111"},"content":"        } else if (userInput.startsWith(\"delete\")) {","lastModifiedDate":"2024-02-23"},{"lineNumber":15,"author":{"gitId":"Jamarcus111"},"content":"            String[] parts \u003d userInput.split(\" \", 2);","lastModifiedDate":"2024-02-23"},{"lineNumber":16,"author":{"gitId":"Jamarcus111"},"content":"            if (parts.length \u003c 2 || parts[1].isEmpty()) {","lastModifiedDate":"2024-02-23"},{"lineNumber":17,"author":{"gitId":"Jamarcus111"},"content":"                throw new HandleException(\"OOPS!!! The task number to delete cannot be empty.\");","lastModifiedDate":"2024-02-23"},{"lineNumber":18,"author":{"gitId":"Jamarcus111"},"content":"            }","lastModifiedDate":"2024-02-23"},{"lineNumber":19,"author":{"gitId":"Jamarcus111"},"content":"            int taskIndex;","lastModifiedDate":"2024-02-23"},{"lineNumber":20,"author":{"gitId":"Jamarcus111"},"content":"            try {","lastModifiedDate":"2024-02-23"},{"lineNumber":21,"author":{"gitId":"Jamarcus111"},"content":"                taskIndex \u003d Integer.parseInt(parts[1]);","lastModifiedDate":"2024-02-23"},{"lineNumber":22,"author":{"gitId":"Jamarcus111"},"content":"            } catch (NumberFormatException e) {","lastModifiedDate":"2024-02-23"},{"lineNumber":23,"author":{"gitId":"Jamarcus111"},"content":"                throw new HandleException(\"OOPS!!! The task number is invalid.\");","lastModifiedDate":"2024-02-23"},{"lineNumber":24,"author":{"gitId":"Jamarcus111"},"content":"            }","lastModifiedDate":"2024-02-23"},{"lineNumber":25,"author":{"gitId":"Jamarcus111"},"content":"            taskList.deleteTask(taskIndex);","lastModifiedDate":"2024-02-23"},{"lineNumber":26,"author":{"gitId":"Jamarcus111"},"content":"        } else if (!userInput.startsWith(\"todo\") \u0026\u0026 !userInput.startsWith(\"deadline\") \u0026\u0026 !userInput.startsWith(\"event\")) {","lastModifiedDate":"2024-02-16"},{"lineNumber":27,"author":{"gitId":"Jamarcus111"},"content":"            throw new HandleException(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");","lastModifiedDate":"2024-02-16"},{"lineNumber":28,"author":{"gitId":"Jamarcus111"},"content":"        } else {","lastModifiedDate":"2024-02-12"},{"lineNumber":29,"author":{"gitId":"Jamarcus111"},"content":"            taskList.addTask(userInput);","lastModifiedDate":"2024-02-12"},{"lineNumber":30,"author":{"gitId":"Jamarcus111"},"content":"        }","lastModifiedDate":"2024-02-12"},{"lineNumber":31,"author":{"gitId":"Jamarcus111"},"content":"    }","lastModifiedDate":"2024-02-12"},{"lineNumber":32,"author":{"gitId":"Jamarcus111"},"content":"}","lastModifiedDate":"2024-02-12"},{"lineNumber":33,"author":{"gitId":"Jamarcus111"},"content":"","lastModifiedDate":"2024-02-12"},{"lineNumber":34,"author":{"gitId":"Jamarcus111"},"content":"","lastModifiedDate":"2024-02-23"}],"authorContributionMap":{"Jamarcus111":34}},{"path":"src/main/java/DeadLine.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jamarcus111"},"content":"public class DeadLine extends Task {","lastModifiedDate":"2024-02-12"},{"lineNumber":2,"author":{"gitId":"Jamarcus111"},"content":"    protected String by;","lastModifiedDate":"2024-02-12"},{"lineNumber":3,"author":{"gitId":"Jamarcus111"},"content":"","lastModifiedDate":"2024-02-12"},{"lineNumber":4,"author":{"gitId":"Jamarcus111"},"content":"    public String toFileFormat() {","lastModifiedDate":"2024-02-23"},{"lineNumber":5,"author":{"gitId":"Jamarcus111"},"content":"        return String.format(\"D | %d | %s | %s\", isDone ? 1 : 0, description, by);","lastModifiedDate":"2024-02-23"},{"lineNumber":6,"author":{"gitId":"Jamarcus111"},"content":"    }","lastModifiedDate":"2024-02-23"},{"lineNumber":7,"author":{"gitId":"Jamarcus111"},"content":"    public DeadLine(String description, String by) {","lastModifiedDate":"2024-02-12"},{"lineNumber":8,"author":{"gitId":"Jamarcus111"},"content":"        super(description);","lastModifiedDate":"2024-02-12"},{"lineNumber":9,"author":{"gitId":"Jamarcus111"},"content":"        this.by \u003d by;","lastModifiedDate":"2024-02-12"},{"lineNumber":10,"author":{"gitId":"Jamarcus111"},"content":"    }","lastModifiedDate":"2024-02-12"},{"lineNumber":11,"author":{"gitId":"Jamarcus111"},"content":"","lastModifiedDate":"2024-02-12"},{"lineNumber":12,"author":{"gitId":"Jamarcus111"},"content":"    @Override","lastModifiedDate":"2024-02-12"},{"lineNumber":13,"author":{"gitId":"Jamarcus111"},"content":"    public String toString() {","lastModifiedDate":"2024-02-12"},{"lineNumber":14,"author":{"gitId":"Jamarcus111"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + this.by + \")\";","lastModifiedDate":"2024-02-12"},{"lineNumber":15,"author":{"gitId":"Jamarcus111"},"content":"    }","lastModifiedDate":"2024-02-12"},{"lineNumber":16,"author":{"gitId":"Jamarcus111"},"content":"}","lastModifiedDate":"2024-02-12"}],"authorContributionMap":{"Jamarcus111":16}},{"path":"src/main/java/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jamarcus111"},"content":"public class Event extends Task {","lastModifiedDate":"2024-02-12"},{"lineNumber":2,"author":{"gitId":"Jamarcus111"},"content":"    protected String from;","lastModifiedDate":"2024-02-12"},{"lineNumber":3,"author":{"gitId":"Jamarcus111"},"content":"    protected String to;","lastModifiedDate":"2024-02-12"},{"lineNumber":4,"author":{"gitId":"Jamarcus111"},"content":"","lastModifiedDate":"2024-02-12"},{"lineNumber":5,"author":{"gitId":"Jamarcus111"},"content":"    public String toFileFormat() {","lastModifiedDate":"2024-02-23"},{"lineNumber":6,"author":{"gitId":"Jamarcus111"},"content":"        return String.format(\"E | %d | %s | %s to %s\", isDone ? 1 : 0, description, from, to);","lastModifiedDate":"2024-02-23"},{"lineNumber":7,"author":{"gitId":"Jamarcus111"},"content":"    }","lastModifiedDate":"2024-02-23"},{"lineNumber":8,"author":{"gitId":"Jamarcus111"},"content":"    public Event(String description, String from, String to) {","lastModifiedDate":"2024-02-12"},{"lineNumber":9,"author":{"gitId":"Jamarcus111"},"content":"        super(description);","lastModifiedDate":"2024-02-12"},{"lineNumber":10,"author":{"gitId":"Jamarcus111"},"content":"        this.from \u003d from;","lastModifiedDate":"2024-02-12"},{"lineNumber":11,"author":{"gitId":"Jamarcus111"},"content":"        this.to \u003d to;","lastModifiedDate":"2024-02-12"},{"lineNumber":12,"author":{"gitId":"Jamarcus111"},"content":"    }","lastModifiedDate":"2024-02-12"},{"lineNumber":13,"author":{"gitId":"Jamarcus111"},"content":"","lastModifiedDate":"2024-02-12"},{"lineNumber":14,"author":{"gitId":"Jamarcus111"},"content":"    @Override","lastModifiedDate":"2024-02-12"},{"lineNumber":15,"author":{"gitId":"Jamarcus111"},"content":"    public String toString() {","lastModifiedDate":"2024-02-12"},{"lineNumber":16,"author":{"gitId":"Jamarcus111"},"content":"        return \"[E]\" + super.toString() + \" (from: \" + this.from + \" to: \" + this.to + \")\";","lastModifiedDate":"2024-02-12"},{"lineNumber":17,"author":{"gitId":"Jamarcus111"},"content":"    }","lastModifiedDate":"2024-02-12"},{"lineNumber":18,"author":{"gitId":"Jamarcus111"},"content":"}","lastModifiedDate":"2024-02-12"}],"authorContributionMap":{"Jamarcus111":18}},{"path":"src/main/java/HandleException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jamarcus111"},"content":"public class HandleException extends Exception {","lastModifiedDate":"2024-02-16"},{"lineNumber":2,"author":{"gitId":"Jamarcus111"},"content":"    public HandleException(String message) {","lastModifiedDate":"2024-02-16"},{"lineNumber":3,"author":{"gitId":"Jamarcus111"},"content":"        super(message);","lastModifiedDate":"2024-02-16"},{"lineNumber":4,"author":{"gitId":"Jamarcus111"},"content":"    }","lastModifiedDate":"2024-02-16"},{"lineNumber":5,"author":{"gitId":"Jamarcus111"},"content":"}","lastModifiedDate":"2024-02-16"},{"lineNumber":6,"author":{"gitId":"Jamarcus111"},"content":"","lastModifiedDate":"2024-02-16"}],"authorContributionMap":{"Jamarcus111":6}},{"path":"src/main/java/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jamarcus111"},"content":"public class Task {","lastModifiedDate":"2024-02-01"},{"lineNumber":2,"author":{"gitId":"Jamarcus111"},"content":"    protected String description;","lastModifiedDate":"2024-02-01"},{"lineNumber":3,"author":{"gitId":"Jamarcus111"},"content":"    protected boolean isDone;","lastModifiedDate":"2024-02-01"},{"lineNumber":4,"author":{"gitId":"Jamarcus111"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":5,"author":{"gitId":"Jamarcus111"},"content":"    public String toFileFormat() {","lastModifiedDate":"2024-02-23"},{"lineNumber":6,"author":{"gitId":"Jamarcus111"},"content":"        return String.format(\"T | %d | %s\", isDone ? 1 : 0, description);","lastModifiedDate":"2024-02-23"},{"lineNumber":7,"author":{"gitId":"Jamarcus111"},"content":"    }","lastModifiedDate":"2024-02-23"},{"lineNumber":8,"author":{"gitId":"Jamarcus111"},"content":"    public Task(String description) {","lastModifiedDate":"2024-02-01"},{"lineNumber":9,"author":{"gitId":"Jamarcus111"},"content":"        this.description \u003d description;","lastModifiedDate":"2024-02-01"},{"lineNumber":10,"author":{"gitId":"Jamarcus111"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2024-02-01"},{"lineNumber":11,"author":{"gitId":"Jamarcus111"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":12,"author":{"gitId":"Jamarcus111"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":13,"author":{"gitId":"Jamarcus111"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2024-02-01"},{"lineNumber":14,"author":{"gitId":"Jamarcus111"},"content":"        return (isDone ? \"X\" : \" \"); // mark done task with X","lastModifiedDate":"2024-02-01"},{"lineNumber":15,"author":{"gitId":"Jamarcus111"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":16,"author":{"gitId":"Jamarcus111"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":17,"author":{"gitId":"Jamarcus111"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":18,"author":{"gitId":"Jamarcus111"},"content":"    public String toString() {","lastModifiedDate":"2024-02-01"},{"lineNumber":19,"author":{"gitId":"Jamarcus111"},"content":"        return \"[\" + this.getStatusIcon() + \"] \" + this.description;","lastModifiedDate":"2024-02-01"},{"lineNumber":20,"author":{"gitId":"Jamarcus111"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":21,"author":{"gitId":"Jamarcus111"},"content":"}","lastModifiedDate":"2024-02-01"}],"authorContributionMap":{"Jamarcus111":21}},{"path":"src/main/java/TaskFactory.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jamarcus111"},"content":"public class TaskFactory {","lastModifiedDate":"2024-02-12"},{"lineNumber":2,"author":{"gitId":"Jamarcus111"},"content":"    public static Task createTask(String userInput) throws HandleException {","lastModifiedDate":"2024-02-16"},{"lineNumber":3,"author":{"gitId":"Jamarcus111"},"content":"        String[] parts \u003d userInput.split(\" \", 2);","lastModifiedDate":"2024-02-12"},{"lineNumber":4,"author":{"gitId":"Jamarcus111"},"content":"        String type \u003d parts[0];","lastModifiedDate":"2024-02-12"},{"lineNumber":5,"author":{"gitId":"Jamarcus111"},"content":"        Task task \u003d null;","lastModifiedDate":"2024-02-12"},{"lineNumber":6,"author":{"gitId":"Jamarcus111"},"content":"","lastModifiedDate":"2024-02-12"},{"lineNumber":7,"author":{"gitId":"Jamarcus111"},"content":"        if (parts.length \u003c 2 || parts[1].isEmpty()) {","lastModifiedDate":"2024-02-16"},{"lineNumber":8,"author":{"gitId":"Jamarcus111"},"content":"            throw new HandleException(\"OOPS!!! The description of a task cannot be empty.\");","lastModifiedDate":"2024-02-16"},{"lineNumber":9,"author":{"gitId":"Jamarcus111"},"content":"        }","lastModifiedDate":"2024-02-16"},{"lineNumber":10,"author":{"gitId":"Jamarcus111"},"content":"","lastModifiedDate":"2024-02-16"},{"lineNumber":11,"author":{"gitId":"Jamarcus111"},"content":"        switch (type) {","lastModifiedDate":"2024-02-16"},{"lineNumber":12,"author":{"gitId":"Jamarcus111"},"content":"        case \"todo\":","lastModifiedDate":"2024-02-16"},{"lineNumber":13,"author":{"gitId":"Jamarcus111"},"content":"            task \u003d new Todo(parts[1]);","lastModifiedDate":"2024-02-12"},{"lineNumber":14,"author":{"gitId":"Jamarcus111"},"content":"            break;","lastModifiedDate":"2024-02-16"},{"lineNumber":15,"author":{"gitId":"Jamarcus111"},"content":"        case \"deadline\":","lastModifiedDate":"2024-02-16"},{"lineNumber":16,"author":{"gitId":"Jamarcus111"},"content":"            String[] details \u003d parts[1].split(\" /by \", 2);","lastModifiedDate":"2024-02-12"},{"lineNumber":17,"author":{"gitId":"Jamarcus111"},"content":"            if (details.length \u003c 2 || details[1].isEmpty()) {","lastModifiedDate":"2024-02-16"},{"lineNumber":18,"author":{"gitId":"Jamarcus111"},"content":"                throw new HandleException(\"OOPS!!! The date of a deadline cannot be empty.\");","lastModifiedDate":"2024-02-16"},{"lineNumber":19,"author":{"gitId":"Jamarcus111"},"content":"            }","lastModifiedDate":"2024-02-16"},{"lineNumber":20,"author":{"gitId":"Jamarcus111"},"content":"            task \u003d new DeadLine(details[0], details[1]);","lastModifiedDate":"2024-02-12"},{"lineNumber":21,"author":{"gitId":"Jamarcus111"},"content":"            break;","lastModifiedDate":"2024-02-16"},{"lineNumber":22,"author":{"gitId":"Jamarcus111"},"content":"        case \"event\":","lastModifiedDate":"2024-02-16"},{"lineNumber":23,"author":{"gitId":"Jamarcus111"},"content":"            details \u003d parts[1].split(\" /from \", 2);","lastModifiedDate":"2024-02-16"},{"lineNumber":24,"author":{"gitId":"Jamarcus111"},"content":"            if (details.length \u003c 2 || details[1].isEmpty()) {","lastModifiedDate":"2024-02-16"},{"lineNumber":25,"author":{"gitId":"Jamarcus111"},"content":"                throw new HandleException(\"OOPS!!! The start time of an event cannot be empty.\");","lastModifiedDate":"2024-02-16"},{"lineNumber":26,"author":{"gitId":"Jamarcus111"},"content":"            }","lastModifiedDate":"2024-02-16"},{"lineNumber":27,"author":{"gitId":"Jamarcus111"},"content":"            String[] times \u003d details[1].split(\" /to \", 2);","lastModifiedDate":"2024-02-12"},{"lineNumber":28,"author":{"gitId":"Jamarcus111"},"content":"            if (times.length \u003c 2 || times[1].isEmpty()) {","lastModifiedDate":"2024-02-16"},{"lineNumber":29,"author":{"gitId":"Jamarcus111"},"content":"                throw new HandleException(\"OOPS!!! The end time of an event cannot be empty.\");","lastModifiedDate":"2024-02-16"},{"lineNumber":30,"author":{"gitId":"Jamarcus111"},"content":"            }","lastModifiedDate":"2024-02-16"},{"lineNumber":31,"author":{"gitId":"Jamarcus111"},"content":"            task \u003d new Event(details[0], times[0], times[1]);","lastModifiedDate":"2024-02-12"},{"lineNumber":32,"author":{"gitId":"Jamarcus111"},"content":"            break;","lastModifiedDate":"2024-02-16"},{"lineNumber":33,"author":{"gitId":"Jamarcus111"},"content":"        default:","lastModifiedDate":"2024-02-16"},{"lineNumber":34,"author":{"gitId":"Jamarcus111"},"content":"            throw new HandleException(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");","lastModifiedDate":"2024-02-16"},{"lineNumber":35,"author":{"gitId":"Jamarcus111"},"content":"        }","lastModifiedDate":"2024-02-12"},{"lineNumber":36,"author":{"gitId":"Jamarcus111"},"content":"","lastModifiedDate":"2024-02-12"},{"lineNumber":37,"author":{"gitId":"Jamarcus111"},"content":"        return task;","lastModifiedDate":"2024-02-12"},{"lineNumber":38,"author":{"gitId":"Jamarcus111"},"content":"    }","lastModifiedDate":"2024-02-12"},{"lineNumber":39,"author":{"gitId":"Jamarcus111"},"content":"}","lastModifiedDate":"2024-02-12"},{"lineNumber":40,"author":{"gitId":"Jamarcus111"},"content":"","lastModifiedDate":"2024-02-16"}],"authorContributionMap":{"Jamarcus111":40}},{"path":"src/main/java/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jamarcus111"},"content":"import java.io.File;","lastModifiedDate":"2024-02-23"},{"lineNumber":2,"author":{"gitId":"Jamarcus111"},"content":"import java.io.FileWriter;","lastModifiedDate":"2024-02-23"},{"lineNumber":3,"author":{"gitId":"Jamarcus111"},"content":"import java.io.IOException;","lastModifiedDate":"2024-02-23"},{"lineNumber":4,"author":{"gitId":"Jamarcus111"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-02-12"},{"lineNumber":5,"author":{"gitId":"Jamarcus111"},"content":"import java.util.Scanner;","lastModifiedDate":"2024-02-23"},{"lineNumber":6,"author":{"gitId":"Jamarcus111"},"content":"","lastModifiedDate":"2024-02-23"},{"lineNumber":7,"author":{"gitId":"Jamarcus111"},"content":"public class TaskList {","lastModifiedDate":"2024-02-12"},{"lineNumber":8,"author":{"gitId":"Jamarcus111"},"content":"    private final ArrayList\u003cTask\u003e tasks;","lastModifiedDate":"2024-02-12"},{"lineNumber":9,"author":{"gitId":"Jamarcus111"},"content":"    private static final String FILE_PATH \u003d \"./data/duke.txt\";","lastModifiedDate":"2024-02-23"},{"lineNumber":10,"author":{"gitId":"Jamarcus111"},"content":"","lastModifiedDate":"2024-02-12"},{"lineNumber":11,"author":{"gitId":"Jamarcus111"},"content":"    public TaskList() {","lastModifiedDate":"2024-02-12"},{"lineNumber":12,"author":{"gitId":"Jamarcus111"},"content":"        this.tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-02-12"},{"lineNumber":13,"author":{"gitId":"Jamarcus111"},"content":"        loadTasks(); // Ensure tasks are loaded when an instance is created","lastModifiedDate":"2024-02-23"},{"lineNumber":14,"author":{"gitId":"Jamarcus111"},"content":"    }","lastModifiedDate":"2024-02-23"},{"lineNumber":15,"author":{"gitId":"Jamarcus111"},"content":"","lastModifiedDate":"2024-02-23"},{"lineNumber":16,"author":{"gitId":"Jamarcus111"},"content":"    private void loadTasks() {","lastModifiedDate":"2024-02-23"},{"lineNumber":17,"author":{"gitId":"Jamarcus111"},"content":"        File file \u003d new File(FILE_PATH);","lastModifiedDate":"2024-02-23"},{"lineNumber":18,"author":{"gitId":"Jamarcus111"},"content":"        if (!file.exists()) {","lastModifiedDate":"2024-02-23"},{"lineNumber":19,"author":{"gitId":"Jamarcus111"},"content":"            return; // Skip loading if file does not exist","lastModifiedDate":"2024-02-23"},{"lineNumber":20,"author":{"gitId":"Jamarcus111"},"content":"        }","lastModifiedDate":"2024-02-23"},{"lineNumber":21,"author":{"gitId":"Jamarcus111"},"content":"        try (Scanner scanner \u003d new Scanner(file)) {","lastModifiedDate":"2024-02-23"},{"lineNumber":22,"author":{"gitId":"Jamarcus111"},"content":"            while (scanner.hasNextLine()) {","lastModifiedDate":"2024-02-23"},{"lineNumber":23,"author":{"gitId":"Jamarcus111"},"content":"                String line \u003d scanner.nextLine();","lastModifiedDate":"2024-02-23"},{"lineNumber":24,"author":{"gitId":"Jamarcus111"},"content":"                Task task \u003d parseLineToTask(line);","lastModifiedDate":"2024-02-23"},{"lineNumber":25,"author":{"gitId":"Jamarcus111"},"content":"                if (task !\u003d null) {","lastModifiedDate":"2024-02-23"},{"lineNumber":26,"author":{"gitId":"Jamarcus111"},"content":"                    tasks.add(task);","lastModifiedDate":"2024-02-23"},{"lineNumber":27,"author":{"gitId":"Jamarcus111"},"content":"                }","lastModifiedDate":"2024-02-23"},{"lineNumber":28,"author":{"gitId":"Jamarcus111"},"content":"            }","lastModifiedDate":"2024-02-23"},{"lineNumber":29,"author":{"gitId":"Jamarcus111"},"content":"        } catch (IOException e) { // Catching IOException which covers FileNotFoundException","lastModifiedDate":"2024-02-23"},{"lineNumber":30,"author":{"gitId":"Jamarcus111"},"content":"            System.out.println(\"Unable to read tasks from file: \" + e.getMessage());","lastModifiedDate":"2024-02-23"},{"lineNumber":31,"author":{"gitId":"Jamarcus111"},"content":"        }","lastModifiedDate":"2024-02-23"},{"lineNumber":32,"author":{"gitId":"Jamarcus111"},"content":"    }","lastModifiedDate":"2024-02-12"},{"lineNumber":33,"author":{"gitId":"Jamarcus111"},"content":"","lastModifiedDate":"2024-02-12"},{"lineNumber":34,"author":{"gitId":"Jamarcus111"},"content":"    private Task parseLineToTask(String line) {","lastModifiedDate":"2024-02-23"},{"lineNumber":35,"author":{"gitId":"Jamarcus111"},"content":"        String[] parts \u003d line.split(\" \\\\| \");","lastModifiedDate":"2024-02-23"},{"lineNumber":36,"author":{"gitId":"Jamarcus111"},"content":"        String type \u003d parts[0];","lastModifiedDate":"2024-02-23"},{"lineNumber":37,"author":{"gitId":"Jamarcus111"},"content":"        boolean isDone \u003d parts[1].equals(\"1\");","lastModifiedDate":"2024-02-23"},{"lineNumber":38,"author":{"gitId":"Jamarcus111"},"content":"        String description \u003d parts[2];","lastModifiedDate":"2024-02-23"},{"lineNumber":39,"author":{"gitId":"Jamarcus111"},"content":"        Task task;","lastModifiedDate":"2024-02-23"},{"lineNumber":40,"author":{"gitId":"Jamarcus111"},"content":"","lastModifiedDate":"2024-02-23"},{"lineNumber":41,"author":{"gitId":"Jamarcus111"},"content":"        switch (type) {","lastModifiedDate":"2024-02-23"},{"lineNumber":42,"author":{"gitId":"Jamarcus111"},"content":"        case \"T\":","lastModifiedDate":"2024-02-23"},{"lineNumber":43,"author":{"gitId":"Jamarcus111"},"content":"            task \u003d new Todo(description);","lastModifiedDate":"2024-02-23"},{"lineNumber":44,"author":{"gitId":"Jamarcus111"},"content":"            break;","lastModifiedDate":"2024-02-23"},{"lineNumber":45,"author":{"gitId":"Jamarcus111"},"content":"        case \"D\":","lastModifiedDate":"2024-02-23"},{"lineNumber":46,"author":{"gitId":"Jamarcus111"},"content":"            String by \u003d parts.length \u003e 3 ? parts[3] : \"\";","lastModifiedDate":"2024-02-23"},{"lineNumber":47,"author":{"gitId":"Jamarcus111"},"content":"            task \u003d new DeadLine(description, by);","lastModifiedDate":"2024-02-23"},{"lineNumber":48,"author":{"gitId":"Jamarcus111"},"content":"            break;","lastModifiedDate":"2024-02-23"},{"lineNumber":49,"author":{"gitId":"Jamarcus111"},"content":"        case \"E\":","lastModifiedDate":"2024-02-23"},{"lineNumber":50,"author":{"gitId":"Jamarcus111"},"content":"            String from \u003d parts.length \u003e 3 ? parts[3] : \"\";","lastModifiedDate":"2024-02-23"},{"lineNumber":51,"author":{"gitId":"Jamarcus111"},"content":"            String to \u003d parts.length \u003e 4 ? parts[4] : \"\";","lastModifiedDate":"2024-02-23"},{"lineNumber":52,"author":{"gitId":"Jamarcus111"},"content":"            task \u003d new Event(description, from, to);","lastModifiedDate":"2024-02-23"},{"lineNumber":53,"author":{"gitId":"Jamarcus111"},"content":"            break;","lastModifiedDate":"2024-02-23"},{"lineNumber":54,"author":{"gitId":"Jamarcus111"},"content":"        default:","lastModifiedDate":"2024-02-23"},{"lineNumber":55,"author":{"gitId":"Jamarcus111"},"content":"            System.out.println(\"Unknown task type in file: \" + type);","lastModifiedDate":"2024-02-23"},{"lineNumber":56,"author":{"gitId":"Jamarcus111"},"content":"            return null; // Return null for unknown task types","lastModifiedDate":"2024-02-23"},{"lineNumber":57,"author":{"gitId":"Jamarcus111"},"content":"        }","lastModifiedDate":"2024-02-12"},{"lineNumber":58,"author":{"gitId":"Jamarcus111"},"content":"        task.isDone \u003d isDone;","lastModifiedDate":"2024-02-23"},{"lineNumber":59,"author":{"gitId":"Jamarcus111"},"content":"        return task;","lastModifiedDate":"2024-02-23"},{"lineNumber":60,"author":{"gitId":"Jamarcus111"},"content":"    }","lastModifiedDate":"2024-02-23"},{"lineNumber":61,"author":{"gitId":"Jamarcus111"},"content":"","lastModifiedDate":"2024-02-23"},{"lineNumber":62,"author":{"gitId":"Jamarcus111"},"content":"","lastModifiedDate":"2024-02-23"},{"lineNumber":63,"author":{"gitId":"Jamarcus111"},"content":"","lastModifiedDate":"2024-02-23"},{"lineNumber":64,"author":{"gitId":"Jamarcus111"},"content":"","lastModifiedDate":"2024-02-12"},{"lineNumber":65,"author":{"gitId":"Jamarcus111"},"content":"    public void addTask(String userInput) throws HandleException {","lastModifiedDate":"2024-02-16"},{"lineNumber":66,"author":{"gitId":"Jamarcus111"},"content":"        Task task \u003d TaskFactory.createTask(userInput);","lastModifiedDate":"2024-02-12"},{"lineNumber":67,"author":{"gitId":"Jamarcus111"},"content":"        if (task !\u003d null) {","lastModifiedDate":"2024-02-12"},{"lineNumber":68,"author":{"gitId":"Jamarcus111"},"content":"            tasks.add(task);","lastModifiedDate":"2024-02-12"},{"lineNumber":69,"author":{"gitId":"Jamarcus111"},"content":"            saveTasks(); // Save the task list to file after adding a new task","lastModifiedDate":"2024-02-23"},{"lineNumber":70,"author":{"gitId":"Jamarcus111"},"content":"            System.out.println(\"Got it. I\u0027ve added this task:\");","lastModifiedDate":"2024-02-12"},{"lineNumber":71,"author":{"gitId":"Jamarcus111"},"content":"            System.out.println(\"  \" + task);","lastModifiedDate":"2024-02-12"},{"lineNumber":72,"author":{"gitId":"Jamarcus111"},"content":"            System.out.println(\"Now you have \" + tasks.size() + \" tasks in the list.\");","lastModifiedDate":"2024-02-12"},{"lineNumber":73,"author":{"gitId":"Jamarcus111"},"content":"        }","lastModifiedDate":"2024-02-12"},{"lineNumber":74,"author":{"gitId":"Jamarcus111"},"content":"    }","lastModifiedDate":"2024-02-12"},{"lineNumber":75,"author":{"gitId":"Jamarcus111"},"content":"","lastModifiedDate":"2024-02-12"},{"lineNumber":76,"author":{"gitId":"Jamarcus111"},"content":"","lastModifiedDate":"2024-02-23"},{"lineNumber":77,"author":{"gitId":"Jamarcus111"},"content":"    public void deleteTask(int taskIndex) throws HandleException {","lastModifiedDate":"2024-02-23"},{"lineNumber":78,"author":{"gitId":"Jamarcus111"},"content":"        if (taskIndex \u003c 1 || taskIndex \u003e tasks.size()) {","lastModifiedDate":"2024-02-23"},{"lineNumber":79,"author":{"gitId":"Jamarcus111"},"content":"            throw new HandleException(\"OOPS!!! The task number is invalid.\");","lastModifiedDate":"2024-02-23"},{"lineNumber":80,"author":{"gitId":"Jamarcus111"},"content":"        }","lastModifiedDate":"2024-02-23"},{"lineNumber":81,"author":{"gitId":"Jamarcus111"},"content":"        Task removedTask \u003d tasks.remove(taskIndex - 1);","lastModifiedDate":"2024-02-23"},{"lineNumber":82,"author":{"gitId":"Jamarcus111"},"content":"        System.out.println(\"Noted. I\u0027ve removed this task:\");","lastModifiedDate":"2024-02-23"},{"lineNumber":83,"author":{"gitId":"Jamarcus111"},"content":"        System.out.println(\"  \" + removedTask);","lastModifiedDate":"2024-02-23"},{"lineNumber":84,"author":{"gitId":"Jamarcus111"},"content":"        System.out.println(\"Now you have \" + tasks.size() + \" tasks in the list.\");","lastModifiedDate":"2024-02-23"},{"lineNumber":85,"author":{"gitId":"Jamarcus111"},"content":"    }","lastModifiedDate":"2024-02-23"},{"lineNumber":86,"author":{"gitId":"Jamarcus111"},"content":"","lastModifiedDate":"2024-02-23"},{"lineNumber":87,"author":{"gitId":"Jamarcus111"},"content":"    public void saveTasks() {","lastModifiedDate":"2024-02-23"},{"lineNumber":88,"author":{"gitId":"Jamarcus111"},"content":"        try {","lastModifiedDate":"2024-02-23"},{"lineNumber":89,"author":{"gitId":"Jamarcus111"},"content":"            File file \u003d new File(FILE_PATH);","lastModifiedDate":"2024-02-23"},{"lineNumber":90,"author":{"gitId":"Jamarcus111"},"content":"            if (!file.getParentFile().mkdirs() \u0026\u0026 !file.getParentFile().exists()) {","lastModifiedDate":"2024-02-23"},{"lineNumber":91,"author":{"gitId":"Jamarcus111"},"content":"                System.out.println(\"Failed to create directories for the task file.\");","lastModifiedDate":"2024-02-23"},{"lineNumber":92,"author":{"gitId":"Jamarcus111"},"content":"                return;","lastModifiedDate":"2024-02-23"},{"lineNumber":93,"author":{"gitId":"Jamarcus111"},"content":"            }","lastModifiedDate":"2024-02-23"},{"lineNumber":94,"author":{"gitId":"Jamarcus111"},"content":"            try (FileWriter writer \u003d new FileWriter(file, false)) {","lastModifiedDate":"2024-02-23"},{"lineNumber":95,"author":{"gitId":"Jamarcus111"},"content":"                for (Task task : tasks) {","lastModifiedDate":"2024-02-23"},{"lineNumber":96,"author":{"gitId":"Jamarcus111"},"content":"                    writer.write(task.toFileFormat() + System.lineSeparator());","lastModifiedDate":"2024-02-23"},{"lineNumber":97,"author":{"gitId":"Jamarcus111"},"content":"                }","lastModifiedDate":"2024-02-23"},{"lineNumber":98,"author":{"gitId":"Jamarcus111"},"content":"            }","lastModifiedDate":"2024-02-23"},{"lineNumber":99,"author":{"gitId":"Jamarcus111"},"content":"        } catch (IOException e) {","lastModifiedDate":"2024-02-23"},{"lineNumber":100,"author":{"gitId":"Jamarcus111"},"content":"            System.out.println(\"Unable to save tasks to file: \" + e.getMessage());","lastModifiedDate":"2024-02-23"},{"lineNumber":101,"author":{"gitId":"Jamarcus111"},"content":"        }","lastModifiedDate":"2024-02-23"},{"lineNumber":102,"author":{"gitId":"Jamarcus111"},"content":"    }","lastModifiedDate":"2024-02-23"},{"lineNumber":103,"author":{"gitId":"Jamarcus111"},"content":"","lastModifiedDate":"2024-02-23"},{"lineNumber":104,"author":{"gitId":"Jamarcus111"},"content":"    public void listTasks() {","lastModifiedDate":"2024-02-12"},{"lineNumber":105,"author":{"gitId":"Jamarcus111"},"content":"        System.out.println(\"Here are the tasks in your list:\");","lastModifiedDate":"2024-02-12"},{"lineNumber":106,"author":{"gitId":"Jamarcus111"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2024-02-12"},{"lineNumber":107,"author":{"gitId":"Jamarcus111"},"content":"            System.out.println((i + 1) + \".\" + tasks.get(i));","lastModifiedDate":"2024-02-12"},{"lineNumber":108,"author":{"gitId":"Jamarcus111"},"content":"        }","lastModifiedDate":"2024-02-12"},{"lineNumber":109,"author":{"gitId":"Jamarcus111"},"content":"    }","lastModifiedDate":"2024-02-12"},{"lineNumber":110,"author":{"gitId":"Jamarcus111"},"content":"}","lastModifiedDate":"2024-02-12"},{"lineNumber":111,"author":{"gitId":"Jamarcus111"},"content":"","lastModifiedDate":"2024-02-23"}],"authorContributionMap":{"Jamarcus111":111}},{"path":"src/main/java/TaskManager.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jamarcus111"},"content":"import java.util.Scanner;","lastModifiedDate":"2024-02-12"},{"lineNumber":2,"author":{"gitId":"Jamarcus111"},"content":"","lastModifiedDate":"2024-02-12"},{"lineNumber":3,"author":{"gitId":"Jamarcus111"},"content":"public class TaskManager {","lastModifiedDate":"2024-02-12"},{"lineNumber":4,"author":{"gitId":"Jamarcus111"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2024-02-12"},{"lineNumber":5,"author":{"gitId":"Jamarcus111"},"content":"        Scanner scanner \u003d new Scanner(System.in);","lastModifiedDate":"2024-02-12"},{"lineNumber":6,"author":{"gitId":"Jamarcus111"},"content":"        TaskList taskList \u003d new TaskList();","lastModifiedDate":"2024-02-12"},{"lineNumber":7,"author":{"gitId":"Jamarcus111"},"content":"        CommandParser commandParser \u003d new CommandParser(taskList);","lastModifiedDate":"2024-02-12"},{"lineNumber":8,"author":{"gitId":"Jamarcus111"},"content":"","lastModifiedDate":"2024-02-12"},{"lineNumber":9,"author":{"gitId":"Jamarcus111"},"content":"        System.out.println(\"Hello! I\u0027m TaskManager Jamarcus \\nWhat can I do for you?\");","lastModifiedDate":"2024-02-12"},{"lineNumber":10,"author":{"gitId":"Jamarcus111"},"content":"","lastModifiedDate":"2024-02-12"},{"lineNumber":11,"author":{"gitId":"Jamarcus111"},"content":"","lastModifiedDate":"2024-02-16"},{"lineNumber":12,"author":{"gitId":"Jamarcus111"},"content":"        while (true) {","lastModifiedDate":"2024-02-12"},{"lineNumber":13,"author":{"gitId":"Jamarcus111"},"content":"            try {","lastModifiedDate":"2024-02-16"},{"lineNumber":14,"author":{"gitId":"Jamarcus111"},"content":"                String userInput \u003d scanner.nextLine().trim();","lastModifiedDate":"2024-02-12"},{"lineNumber":15,"author":{"gitId":"Jamarcus111"},"content":"                if (userInput.equalsIgnoreCase(\"bye\")) {","lastModifiedDate":"2024-02-12"},{"lineNumber":16,"author":{"gitId":"Jamarcus111"},"content":"                    System.out.println(\"Bye. Hope to see you again soon!\");","lastModifiedDate":"2024-02-12"},{"lineNumber":17,"author":{"gitId":"Jamarcus111"},"content":"                    break;","lastModifiedDate":"2024-02-12"},{"lineNumber":18,"author":{"gitId":"Jamarcus111"},"content":"                } else {","lastModifiedDate":"2024-02-12"},{"lineNumber":19,"author":{"gitId":"Jamarcus111"},"content":"                    commandParser.parseCommand(userInput);","lastModifiedDate":"2024-02-12"},{"lineNumber":20,"author":{"gitId":"Jamarcus111"},"content":"                }","lastModifiedDate":"2024-02-12"},{"lineNumber":21,"author":{"gitId":"Jamarcus111"},"content":"            } catch (HandleException e) {","lastModifiedDate":"2024-02-16"},{"lineNumber":22,"author":{"gitId":"Jamarcus111"},"content":"                System.out.println(e.getMessage());","lastModifiedDate":"2024-02-16"},{"lineNumber":23,"author":{"gitId":"Jamarcus111"},"content":"            } catch (Exception e) {","lastModifiedDate":"2024-02-16"},{"lineNumber":24,"author":{"gitId":"Jamarcus111"},"content":"                System.out.println(\"An unexpected error occurred: \" + e.getMessage());","lastModifiedDate":"2024-02-16"},{"lineNumber":25,"author":{"gitId":"Jamarcus111"},"content":"            }","lastModifiedDate":"2024-02-16"},{"lineNumber":26,"author":{"gitId":"Jamarcus111"},"content":"        }","lastModifiedDate":"2024-02-12"},{"lineNumber":27,"author":{"gitId":"Jamarcus111"},"content":"","lastModifiedDate":"2024-02-12"},{"lineNumber":28,"author":{"gitId":"Jamarcus111"},"content":"        scanner.close();","lastModifiedDate":"2024-02-12"},{"lineNumber":29,"author":{"gitId":"Jamarcus111"},"content":"    }","lastModifiedDate":"2024-02-12"},{"lineNumber":30,"author":{"gitId":"Jamarcus111"},"content":"}","lastModifiedDate":"2024-02-12"},{"lineNumber":31,"author":{"gitId":"Jamarcus111"},"content":"","lastModifiedDate":"2024-02-16"}],"authorContributionMap":{"Jamarcus111":31}},{"path":"src/main/java/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jamarcus111"},"content":"public class Todo extends Task {","lastModifiedDate":"2024-02-12"},{"lineNumber":2,"author":{"gitId":"Jamarcus111"},"content":"    public Todo(String description) {","lastModifiedDate":"2024-02-12"},{"lineNumber":3,"author":{"gitId":"Jamarcus111"},"content":"        super(description);","lastModifiedDate":"2024-02-12"},{"lineNumber":4,"author":{"gitId":"Jamarcus111"},"content":"    }","lastModifiedDate":"2024-02-12"},{"lineNumber":5,"author":{"gitId":"Jamarcus111"},"content":"","lastModifiedDate":"2024-02-12"},{"lineNumber":6,"author":{"gitId":"Jamarcus111"},"content":"    public String toFileFormat() {","lastModifiedDate":"2024-02-23"},{"lineNumber":7,"author":{"gitId":"Jamarcus111"},"content":"        return String.format(\"T | %d | %s\", isDone ? 1 : 0, description);","lastModifiedDate":"2024-02-23"},{"lineNumber":8,"author":{"gitId":"Jamarcus111"},"content":"    }","lastModifiedDate":"2024-02-23"},{"lineNumber":9,"author":{"gitId":"Jamarcus111"},"content":"","lastModifiedDate":"2024-02-23"},{"lineNumber":10,"author":{"gitId":"Jamarcus111"},"content":"    @Override","lastModifiedDate":"2024-02-12"},{"lineNumber":11,"author":{"gitId":"Jamarcus111"},"content":"    public String toString() {","lastModifiedDate":"2024-02-12"},{"lineNumber":12,"author":{"gitId":"Jamarcus111"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2024-02-12"},{"lineNumber":13,"author":{"gitId":"Jamarcus111"},"content":"    }","lastModifiedDate":"2024-02-12"},{"lineNumber":14,"author":{"gitId":"Jamarcus111"},"content":"}","lastModifiedDate":"2024-02-12"}],"authorContributionMap":{"Jamarcus111":14}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"Jamarcus111"},"content":"java -classpath ..\\bin Ma \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2024-01-31"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"Jamarcus111":1,"-":20}}]
