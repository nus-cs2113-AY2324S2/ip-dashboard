[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"Jamarcus111"},"content":"# Ma project template","lastModifiedDate":"2024-01-31"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it.","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2021-01-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`.","lastModifiedDate":"2021-01-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2021-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29"},{"lineNumber":16,"author":{"gitId":"Jamarcus111"},"content":"3. After that, locate the `src/main/java/Ma.java` file, right-click it, and choose `Run Ma.main()` (if the code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something like the below as the output:","lastModifiedDate":"2024-01-31"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"   Hello from","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    ____        _        ","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ ","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"Jamarcus111":2,"-":22}},{"path":"data/duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Jamarcus111"},"content":"T | 1 | 2","lastModifiedDate":"2024-03-05"},{"lineNumber":2,"author":{"gitId":"Jamarcus111"},"content":"T | 1 | read book","lastModifiedDate":"2024-03-04"},{"lineNumber":3,"author":{"gitId":"Jamarcus111"},"content":"D | 0 | askdfsoief as kjsa lf | SFJ","lastModifiedDate":"2024-03-04"},{"lineNumber":4,"author":{"gitId":"Jamarcus111"},"content":"T | 1 | readbook","lastModifiedDate":"2024-03-04"}],"authorContributionMap":{"Jamarcus111":4}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"Jamarcus111"},"content":"# TaskManager","lastModifiedDate":"2024-03-04"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":3,"author":{"gitId":"Jamarcus111"},"content":"TaskManager is a simple yet powerful Java application designed to help users manage their tasks efficiently. It allows users to add, delete, mark tasks as done or not done, and find tasks by searching for keywords.","lastModifiedDate":"2024-03-04"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Features","lastModifiedDate":"2019-07-29"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":7,"author":{"gitId":"Jamarcus111"},"content":"- **Add Tasks**: Users can add three types of tasks - todos, deadlines, and events.","lastModifiedDate":"2024-03-04"},{"lineNumber":8,"author":{"gitId":"Jamarcus111"},"content":"- **Delete Tasks**: Users can delete tasks they no longer need.","lastModifiedDate":"2024-03-04"},{"lineNumber":9,"author":{"gitId":"Jamarcus111"},"content":"- **Mark Tasks**: Users can mark tasks as done or not done.","lastModifiedDate":"2024-03-04"},{"lineNumber":10,"author":{"gitId":"Jamarcus111"},"content":"- **Find Tasks**: Users can search for tasks by keywords.","lastModifiedDate":"2024-03-04"},{"lineNumber":11,"author":{"gitId":"Jamarcus111"},"content":"- **List Tasks**: Users can view all their tasks at any time.","lastModifiedDate":"2024-03-04"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":13,"author":{"gitId":"Jamarcus111"},"content":"## Getting Started","lastModifiedDate":"2024-03-04"},{"lineNumber":14,"author":{"gitId":"Jamarcus111"},"content":"## Adding a task","lastModifiedDate":"2024-03-04"},{"lineNumber":15,"author":{"gitId":"Jamarcus111"},"content":"### Type of task","lastModifiedDate":"2024-03-04"},{"lineNumber":16,"author":{"gitId":"Jamarcus111"},"content":"- Todo","lastModifiedDate":"2024-03-04"},{"lineNumber":17,"author":{"gitId":"Jamarcus111"},"content":"- Deadline","lastModifiedDate":"2024-03-04"},{"lineNumber":18,"author":{"gitId":"Jamarcus111"},"content":"- Event","lastModifiedDate":"2024-03-04"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":20,"author":{"gitId":"Jamarcus111"},"content":"### Prompt","lastModifiedDate":"2024-03-04"},{"lineNumber":21,"author":{"gitId":"Jamarcus111"},"content":"- Todo: todo {task description}","lastModifiedDate":"2024-03-04"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":23,"author":{"gitId":"Jamarcus111"},"content":"  _e.g. adding task todo `read book`_","lastModifiedDate":"2024-03-04"},{"lineNumber":24,"author":{"gitId":"Jamarcus111"},"content":"    ```","lastModifiedDate":"2024-03-04"},{"lineNumber":25,"author":{"gitId":"Jamarcus111"},"content":"    todo read book","lastModifiedDate":"2024-03-04"},{"lineNumber":26,"author":{"gitId":"Jamarcus111"},"content":"    ```","lastModifiedDate":"2024-03-04"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":28,"author":{"gitId":"Jamarcus111"},"content":"- Deadline: deadline {task description} /by {date}","lastModifiedDate":"2024-03-04"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":30,"author":{"gitId":"Jamarcus111"},"content":"  _e.g. adding task deadline `return book` before `2021-09-17`_","lastModifiedDate":"2024-03-04"},{"lineNumber":31,"author":{"gitId":"Jamarcus111"},"content":"    ```","lastModifiedDate":"2024-03-04"},{"lineNumber":32,"author":{"gitId":"Jamarcus111"},"content":"    deadline return book /by 2021-09-17","lastModifiedDate":"2024-03-04"},{"lineNumber":33,"author":{"gitId":"Jamarcus111"},"content":"    ```","lastModifiedDate":"2024-03-04"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":35,"author":{"gitId":"Jamarcus111"},"content":"- Event: event {task description} from {date} to {date}","lastModifiedDate":"2024-03-04"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":37,"author":{"gitId":"Jamarcus111"},"content":"  _e.g. adding task event `project meeting` from `2021-09-17` to `2021-09-18`_","lastModifiedDate":"2024-03-04"},{"lineNumber":38,"author":{"gitId":"Jamarcus111"},"content":"    ```","lastModifiedDate":"2024-03-04"},{"lineNumber":39,"author":{"gitId":"Jamarcus111"},"content":"    event project meeting from 2021-09-17 to 2021-09-18","lastModifiedDate":"2024-03-04"},{"lineNumber":40,"author":{"gitId":"Jamarcus111"},"content":"    ```","lastModifiedDate":"2024-03-04"},{"lineNumber":41,"author":{"gitId":"Jamarcus111"},"content":"### Expected output for all adding tasks","lastModifiedDate":"2024-03-04"},{"lineNumber":42,"author":{"gitId":"Jamarcus111"},"content":"    Got it. I\u0027ve added this task:","lastModifiedDate":"2024-03-04"},{"lineNumber":43,"author":{"gitId":"Jamarcus111"},"content":"        [D][ ] return book (by: 2021-09-17)","lastModifiedDate":"2024-03-04"},{"lineNumber":44,"author":{"gitId":"Jamarcus111"},"content":"\u003e Note: the following e.g. for each command will be using the output of the above prompt","lastModifiedDate":"2024-03-04"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":46,"author":{"gitId":"Jamarcus111"},"content":"## Listing all tasks","lastModifiedDate":"2024-03-04"},{"lineNumber":47,"author":{"gitId":"Jamarcus111"},"content":"### Prompt","lastModifiedDate":"2024-03-04"},{"lineNumber":48,"author":{"gitId":"Jamarcus111"},"content":"- list","lastModifiedDate":"2024-03-04"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":50,"author":{"gitId":"Jamarcus111"},"content":"  _e.g. listing all tasks_","lastModifiedDate":"2024-03-04"},{"lineNumber":51,"author":{"gitId":"Jamarcus111"},"content":"    ```","lastModifiedDate":"2024-03-04"},{"lineNumber":52,"author":{"gitId":"Jamarcus111"},"content":"    list","lastModifiedDate":"2024-03-04"},{"lineNumber":53,"author":{"gitId":"Jamarcus111"},"content":"    ```","lastModifiedDate":"2024-03-04"},{"lineNumber":54,"author":{"gitId":"Jamarcus111"},"content":"### Expected output","lastModifiedDate":"2024-03-04"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2024-03-05"},{"lineNumber":56,"author":{"gitId":"Jamarcus111"},"content":"    Here are the tasks in your list:","lastModifiedDate":"2024-03-04"},{"lineNumber":57,"author":{"gitId":"Jamarcus111"},"content":"    1. [T][ ] read book","lastModifiedDate":"2024-03-04"},{"lineNumber":58,"author":{"gitId":"Jamarcus111"},"content":"    2. [D][ ] return book (by: Sep 17 2021)","lastModifiedDate":"2024-03-04"},{"lineNumber":59,"author":{"gitId":"Jamarcus111"},"content":"    3. [E][ ] project meeting (from: Sep 17 2021 to: Sep 18 2021)","lastModifiedDate":"2024-03-04"},{"lineNumber":60,"author":{"gitId":"Jamarcus111"},"content":"","lastModifiedDate":"2024-03-05"},{"lineNumber":61,"author":{"gitId":"Jamarcus111"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":62,"author":{"gitId":"Jamarcus111"},"content":"## Deleting a task","lastModifiedDate":"2024-03-04"},{"lineNumber":63,"author":{"gitId":"Jamarcus111"},"content":"### prompt","lastModifiedDate":"2024-03-04"},{"lineNumber":64,"author":{"gitId":"Jamarcus111"},"content":"- delete {task number}","lastModifiedDate":"2024-03-04"},{"lineNumber":65,"author":{"gitId":"Jamarcus111"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":66,"author":{"gitId":"Jamarcus111"},"content":"  _e.g. deleting 3_","lastModifiedDate":"2024-03-05"},{"lineNumber":67,"author":{"gitId":"Jamarcus111"},"content":"    ```","lastModifiedDate":"2024-03-04"},{"lineNumber":68,"author":{"gitId":"Jamarcus111"},"content":"    delete 3","lastModifiedDate":"2024-03-04"},{"lineNumber":69,"author":{"gitId":"Jamarcus111"},"content":"    ```","lastModifiedDate":"2024-03-04"},{"lineNumber":70,"author":{"gitId":"Jamarcus111"},"content":"### Expected output","lastModifiedDate":"2024-03-04"},{"lineNumber":71,"author":{"gitId":"Jamarcus111"},"content":"","lastModifiedDate":"2024-03-05"},{"lineNumber":72,"author":{"gitId":"Jamarcus111"},"content":"    Noted. I\u0027ve removed this task: {task number}","lastModifiedDate":"2024-03-04"},{"lineNumber":73,"author":{"gitId":"Jamarcus111"},"content":"    this can be verified by listing all tasks:","lastModifiedDate":"2024-03-04"},{"lineNumber":74,"author":{"gitId":"Jamarcus111"},"content":"","lastModifiedDate":"2024-03-05"},{"lineNumber":75,"author":{"gitId":"Jamarcus111"},"content":"    list","lastModifiedDate":"2024-03-04"},{"lineNumber":76,"author":{"gitId":"Jamarcus111"},"content":"    Here are the tasks in your list:","lastModifiedDate":"2024-03-04"},{"lineNumber":77,"author":{"gitId":"Jamarcus111"},"content":"    1. [T][ ] read book","lastModifiedDate":"2024-03-04"},{"lineNumber":78,"author":{"gitId":"Jamarcus111"},"content":"    2. [D][ ] return book (by: Sep 17 2021)","lastModifiedDate":"2024-03-04"},{"lineNumber":79,"author":{"gitId":"Jamarcus111"},"content":"","lastModifiedDate":"2024-03-05"},{"lineNumber":80,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":81,"author":{"gitId":"Jamarcus111"},"content":"## Marking a task as done","lastModifiedDate":"2024-03-04"},{"lineNumber":82,"author":{"gitId":"Jamarcus111"},"content":"### Prompt","lastModifiedDate":"2024-03-04"},{"lineNumber":83,"author":{"gitId":"Jamarcus111"},"content":"- mark {task name}","lastModifiedDate":"2024-03-04"},{"lineNumber":84,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":85,"author":{"gitId":"Jamarcus111"},"content":"  _e.g. marking task 1 as done_","lastModifiedDate":"2024-03-04"},{"lineNumber":86,"author":{"gitId":"Jamarcus111"},"content":"    ```","lastModifiedDate":"2024-03-04"},{"lineNumber":87,"author":{"gitId":"Jamarcus111"},"content":"    mark read book","lastModifiedDate":"2024-03-04"},{"lineNumber":88,"author":{"gitId":"Jamarcus111"},"content":"    ```","lastModifiedDate":"2024-03-04"},{"lineNumber":89,"author":{"gitId":"Jamarcus111"},"content":"### Expected output","lastModifiedDate":"2024-03-04"},{"lineNumber":90,"author":{"gitId":"Jamarcus111"},"content":"","lastModifiedDate":"2024-03-05"},{"lineNumber":91,"author":{"gitId":"Jamarcus111"},"content":"    Nice! I\u0027ve marked this task as done: {task name}","lastModifiedDate":"2024-03-04"},{"lineNumber":92,"author":{"gitId":"Jamarcus111"},"content":"    this can be verified by listing or finding tasks:","lastModifiedDate":"2024-03-04"},{"lineNumber":93,"author":{"gitId":"Jamarcus111"},"content":"  ```","lastModifiedDate":"2024-03-04"},{"lineNumber":94,"author":{"gitId":"Jamarcus111"},"content":"  list","lastModifiedDate":"2024-03-04"},{"lineNumber":95,"author":{"gitId":"Jamarcus111"},"content":"  Here are the tasks in your list:","lastModifiedDate":"2024-03-04"},{"lineNumber":96,"author":{"gitId":"Jamarcus111"},"content":"  1. [T][X] read book","lastModifiedDate":"2024-03-04"},{"lineNumber":97,"author":{"gitId":"Jamarcus111"},"content":"  2. [D][ ] return book (by: Sep 17 2021)","lastModifiedDate":"2024-03-04"},{"lineNumber":98,"author":{"gitId":"Jamarcus111"},"content":"  3. [E][ ] project meeting (from: Sep 17 2021 to: Sep 18 2021)","lastModifiedDate":"2024-03-04"},{"lineNumber":99,"author":{"gitId":"Jamarcus111"},"content":"  ```","lastModifiedDate":"2024-03-04"},{"lineNumber":100,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":101,"author":{"gitId":"Jamarcus111"},"content":"- unmark {task name}","lastModifiedDate":"2024-03-04"},{"lineNumber":102,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":103,"author":{"gitId":"Jamarcus111"},"content":"  _e.g. unmarking read book_","lastModifiedDate":"2024-03-04"},{"lineNumber":104,"author":{"gitId":"Jamarcus111"},"content":"  ```","lastModifiedDate":"2024-03-04"},{"lineNumber":105,"author":{"gitId":"Jamarcus111"},"content":"  unmark read book","lastModifiedDate":"2024-03-04"},{"lineNumber":106,"author":{"gitId":"Jamarcus111"},"content":"  ```","lastModifiedDate":"2024-03-04"},{"lineNumber":107,"author":{"gitId":"Jamarcus111"},"content":"### Expected output","lastModifiedDate":"2024-03-04"},{"lineNumber":108,"author":{"gitId":"Jamarcus111"},"content":"  ```","lastModifiedDate":"2024-03-04"},{"lineNumber":109,"author":{"gitId":"Jamarcus111"},"content":"  unmarked ","lastModifiedDate":"2024-03-04"},{"lineNumber":110,"author":{"gitId":"Jamarcus111"},"content":"  I\u0027ve unmarked this task as done: {task name}","lastModifiedDate":"2024-03-04"},{"lineNumber":111,"author":{"gitId":"Jamarcus111"},"content":"  ```","lastModifiedDate":"2024-03-04"},{"lineNumber":112,"author":{"gitId":"Jamarcus111"},"content":"this can be verified by listing all tasks:","lastModifiedDate":"2024-03-04"},{"lineNumber":113,"author":{"gitId":"Jamarcus111"},"content":"  ```","lastModifiedDate":"2024-03-04"},{"lineNumber":114,"author":{"gitId":"Jamarcus111"},"content":"  list","lastModifiedDate":"2024-03-04"},{"lineNumber":115,"author":{"gitId":"Jamarcus111"},"content":"  Here are the tasks in your list:","lastModifiedDate":"2024-03-04"},{"lineNumber":116,"author":{"gitId":"Jamarcus111"},"content":"  1. [T][ ] read book","lastModifiedDate":"2024-03-04"},{"lineNumber":117,"author":{"gitId":"Jamarcus111"},"content":"  2. [D][ ] return book (by: Sep 17 2021)","lastModifiedDate":"2024-03-04"},{"lineNumber":118,"author":{"gitId":"Jamarcus111"},"content":"  3. [E][ ] project meeting (from: Sep 17 2021 to: Sep 18 2021)","lastModifiedDate":"2024-03-04"},{"lineNumber":119,"author":{"gitId":"Jamarcus111"},"content":"  ```","lastModifiedDate":"2024-03-04"},{"lineNumber":120,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":121,"author":{"gitId":"Jamarcus111"},"content":"## Finding a task","lastModifiedDate":"2024-03-04"},{"lineNumber":122,"author":{"gitId":"Jamarcus111"},"content":"### prompt","lastModifiedDate":"2024-03-04"},{"lineNumber":123,"author":{"gitId":"Jamarcus111"},"content":"- find {keyword}","lastModifiedDate":"2024-03-04"},{"lineNumber":124,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":125,"author":{"gitId":"Jamarcus111"},"content":"  e.g. finding tasks related to `book`","lastModifiedDate":"2024-03-04"},{"lineNumber":126,"author":{"gitId":"Jamarcus111"},"content":"    ```","lastModifiedDate":"2024-03-04"},{"lineNumber":127,"author":{"gitId":"Jamarcus111"},"content":"    find book","lastModifiedDate":"2024-03-04"},{"lineNumber":128,"author":{"gitId":"-"},"content":"    ```","lastModifiedDate":"2021-07-17"},{"lineNumber":129,"author":{"gitId":"Jamarcus111"},"content":"### Expected output","lastModifiedDate":"2024-03-04"},{"lineNumber":130,"author":{"gitId":"Jamarcus111"},"content":"    Here are the matching tasks in your list:","lastModifiedDate":"2024-03-04"},{"lineNumber":131,"author":{"gitId":"Jamarcus111"},"content":"    1. [T][ ] read book","lastModifiedDate":"2024-03-04"},{"lineNumber":132,"author":{"gitId":"Jamarcus111"},"content":"    2. [D][ ] return book (by: Sep 17 2021)","lastModifiedDate":"2024-03-04"},{"lineNumber":133,"author":{"gitId":"Jamarcus111"},"content":"","lastModifiedDate":"2024-03-05"},{"lineNumber":134,"author":{"gitId":"Jamarcus111"},"content":"## Exit Program","lastModifiedDate":"2024-03-05"},{"lineNumber":135,"author":{"gitId":"Jamarcus111"},"content":"### prompt","lastModifiedDate":"2024-03-05"},{"lineNumber":136,"author":{"gitId":"Jamarcus111"},"content":"- bye","lastModifiedDate":"2024-03-05"},{"lineNumber":137,"author":{"gitId":"Jamarcus111"},"content":"","lastModifiedDate":"2024-03-05"},{"lineNumber":138,"author":{"gitId":"Jamarcus111"},"content":"### Expected output","lastModifiedDate":"2024-03-05"},{"lineNumber":139,"author":{"gitId":"Jamarcus111"},"content":"  ```","lastModifiedDate":"2024-03-05"},{"lineNumber":140,"author":{"gitId":"Jamarcus111"},"content":"  Bye. Hope to see you again soon!","lastModifiedDate":"2024-03-05"},{"lineNumber":141,"author":{"gitId":"Jamarcus111"},"content":"  ```","lastModifiedDate":"2024-03-04"},{"lineNumber":142,"author":{"gitId":"Jamarcus111"},"content":"### Prerequisites","lastModifiedDate":"2024-03-04"},{"lineNumber":143,"author":{"gitId":"Jamarcus111"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":144,"author":{"gitId":"Jamarcus111"},"content":"- Java 11 or above.","lastModifiedDate":"2024-03-04"}],"authorContributionMap":{"Jamarcus111":123,"-":21}},{"path":"src/main/java/CommandParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jamarcus111"},"content":"/**","lastModifiedDate":"2024-03-04"},{"lineNumber":2,"author":{"gitId":"Jamarcus111"},"content":" * CommandParser is responsible for interpreting and executing commands","lastModifiedDate":"2024-03-04"},{"lineNumber":3,"author":{"gitId":"Jamarcus111"},"content":" * input by the user. It acts as a controller that directs user commands","lastModifiedDate":"2024-03-04"},{"lineNumber":4,"author":{"gitId":"Jamarcus111"},"content":" * to appropriate actions on the task list.","lastModifiedDate":"2024-03-04"},{"lineNumber":5,"author":{"gitId":"Jamarcus111"},"content":" */","lastModifiedDate":"2024-03-04"},{"lineNumber":6,"author":{"gitId":"Jamarcus111"},"content":"public class CommandParser {","lastModifiedDate":"2024-02-12"},{"lineNumber":7,"author":{"gitId":"Jamarcus111"},"content":"    private final TaskList taskList;","lastModifiedDate":"2024-02-12"},{"lineNumber":8,"author":{"gitId":"Jamarcus111"},"content":"    private final Ui ui;","lastModifiedDate":"2024-03-04"},{"lineNumber":9,"author":{"gitId":"Jamarcus111"},"content":"","lastModifiedDate":"2024-02-12"},{"lineNumber":10,"author":{"gitId":"Jamarcus111"},"content":"    /**","lastModifiedDate":"2024-03-04"},{"lineNumber":11,"author":{"gitId":"Jamarcus111"},"content":"     * Constructs a CommandParser with the specified task list and UI.","lastModifiedDate":"2024-03-04"},{"lineNumber":12,"author":{"gitId":"Jamarcus111"},"content":"     *","lastModifiedDate":"2024-03-04"},{"lineNumber":13,"author":{"gitId":"Jamarcus111"},"content":"     * @param taskList the task list to be manipulated based on user commands.","lastModifiedDate":"2024-03-04"},{"lineNumber":14,"author":{"gitId":"Jamarcus111"},"content":"     * @param ui the UI object for interacting with the user.","lastModifiedDate":"2024-03-04"},{"lineNumber":15,"author":{"gitId":"Jamarcus111"},"content":"     */","lastModifiedDate":"2024-03-04"},{"lineNumber":16,"author":{"gitId":"Jamarcus111"},"content":"    public CommandParser(TaskList taskList, Ui ui) {","lastModifiedDate":"2024-03-04"},{"lineNumber":17,"author":{"gitId":"Jamarcus111"},"content":"        this.taskList \u003d taskList;","lastModifiedDate":"2024-02-12"},{"lineNumber":18,"author":{"gitId":"Jamarcus111"},"content":"        this.ui \u003d ui;","lastModifiedDate":"2024-03-04"},{"lineNumber":19,"author":{"gitId":"Jamarcus111"},"content":"    }","lastModifiedDate":"2024-02-12"},{"lineNumber":20,"author":{"gitId":"Jamarcus111"},"content":"","lastModifiedDate":"2024-02-12"},{"lineNumber":21,"author":{"gitId":"Jamarcus111"},"content":"    /**","lastModifiedDate":"2024-03-04"},{"lineNumber":22,"author":{"gitId":"Jamarcus111"},"content":"     * Parses and executes a user input command. Supported commands include","lastModifiedDate":"2024-03-04"},{"lineNumber":23,"author":{"gitId":"Jamarcus111"},"content":"     * adding, deleting, marking, unmarking tasks, and finding tasks by keywords.","lastModifiedDate":"2024-03-04"},{"lineNumber":24,"author":{"gitId":"Jamarcus111"},"content":"     * It also handles listing all tasks and exiting the application.","lastModifiedDate":"2024-03-04"},{"lineNumber":25,"author":{"gitId":"Jamarcus111"},"content":"     *","lastModifiedDate":"2024-03-04"},{"lineNumber":26,"author":{"gitId":"Jamarcus111"},"content":"     * @param userInput the full user input command to be parsed and executed.","lastModifiedDate":"2024-03-04"},{"lineNumber":27,"author":{"gitId":"Jamarcus111"},"content":"     */","lastModifiedDate":"2024-03-04"},{"lineNumber":28,"author":{"gitId":"Jamarcus111"},"content":"    public void parseCommand(String userInput) {","lastModifiedDate":"2024-03-04"},{"lineNumber":29,"author":{"gitId":"Jamarcus111"},"content":"        try {","lastModifiedDate":"2024-03-04"},{"lineNumber":30,"author":{"gitId":"Jamarcus111"},"content":"            if (userInput.trim().isEmpty()) {","lastModifiedDate":"2024-02-16"},{"lineNumber":31,"author":{"gitId":"Jamarcus111"},"content":"                ui.showError(\"The input cannot be empty!\");","lastModifiedDate":"2024-03-04"},{"lineNumber":32,"author":{"gitId":"Jamarcus111"},"content":"            } else if (userInput.equalsIgnoreCase(\"list\")) {","lastModifiedDate":"2024-02-16"},{"lineNumber":33,"author":{"gitId":"Jamarcus111"},"content":"                taskList.listTasks();","lastModifiedDate":"2024-02-12"},{"lineNumber":34,"author":{"gitId":"Jamarcus111"},"content":"            } else if (userInput.startsWith(\"delete\")) {","lastModifiedDate":"2024-02-23"},{"lineNumber":35,"author":{"gitId":"Jamarcus111"},"content":"                int taskIndex \u003d Integer.parseInt(userInput.split(\" \")[1]) - 1; // Get task index","lastModifiedDate":"2024-03-04"},{"lineNumber":36,"author":{"gitId":"Jamarcus111"},"content":"                taskList.deleteTask(taskIndex);","lastModifiedDate":"2024-02-23"},{"lineNumber":37,"author":{"gitId":"Jamarcus111"},"content":"            } else if (userInput.startsWith(\"mark\")) {","lastModifiedDate":"2024-03-04"},{"lineNumber":38,"author":{"gitId":"Jamarcus111"},"content":"                int taskIndex \u003d Integer.parseInt(userInput.split(\" \")[1]) - 1; // Get task index","lastModifiedDate":"2024-03-04"},{"lineNumber":39,"author":{"gitId":"Jamarcus111"},"content":"                taskList.markTaskAsDone(taskIndex);","lastModifiedDate":"2024-03-04"},{"lineNumber":40,"author":{"gitId":"Jamarcus111"},"content":"            } else if (userInput.startsWith(\"unmark\")) {","lastModifiedDate":"2024-03-04"},{"lineNumber":41,"author":{"gitId":"Jamarcus111"},"content":"                int taskIndex \u003d Integer.parseInt(userInput.split(\" \")[1]) - 1; // Get task index","lastModifiedDate":"2024-03-04"},{"lineNumber":42,"author":{"gitId":"Jamarcus111"},"content":"                taskList.markTaskAsNotDone(taskIndex);","lastModifiedDate":"2024-03-04"},{"lineNumber":43,"author":{"gitId":"Jamarcus111"},"content":"            } else if (userInput.startsWith(\"find\")) {","lastModifiedDate":"2024-03-04"},{"lineNumber":44,"author":{"gitId":"Jamarcus111"},"content":"                String keyword \u003d userInput.substring(5); // Assume \"find \" is followed by a keyword","lastModifiedDate":"2024-03-04"},{"lineNumber":45,"author":{"gitId":"Jamarcus111"},"content":"                taskList.findTask(keyword);","lastModifiedDate":"2024-03-04"},{"lineNumber":46,"author":{"gitId":"Jamarcus111"},"content":"            } else if (!userInput.startsWith(\"todo\") \u0026\u0026 !userInput.startsWith(\"deadline\")","lastModifiedDate":"2024-03-04"},{"lineNumber":47,"author":{"gitId":"Jamarcus111"},"content":"                    \u0026\u0026 !userInput.startsWith(\"event\") \u0026\u0026 !userInput.startsWith(\"find\")) {","lastModifiedDate":"2024-03-04"},{"lineNumber":48,"author":{"gitId":"Jamarcus111"},"content":"                ui.showError(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");","lastModifiedDate":"2024-03-04"},{"lineNumber":49,"author":{"gitId":"Jamarcus111"},"content":"            } else {","lastModifiedDate":"2024-02-12"},{"lineNumber":50,"author":{"gitId":"Jamarcus111"},"content":"                taskList.addTask(userInput);","lastModifiedDate":"2024-02-12"},{"lineNumber":51,"author":{"gitId":"Jamarcus111"},"content":"            }","lastModifiedDate":"2024-02-12"},{"lineNumber":52,"author":{"gitId":"Jamarcus111"},"content":"        } catch (HandleException he) {","lastModifiedDate":"2024-03-04"},{"lineNumber":53,"author":{"gitId":"Jamarcus111"},"content":"            ui.showError(he.getMessage());","lastModifiedDate":"2024-03-04"},{"lineNumber":54,"author":{"gitId":"Jamarcus111"},"content":"        } catch (NumberFormatException nfe) {","lastModifiedDate":"2024-03-04"},{"lineNumber":55,"author":{"gitId":"Jamarcus111"},"content":"            ui.showError(\"OOPS!!! The task number is invalid.\");","lastModifiedDate":"2024-03-04"},{"lineNumber":56,"author":{"gitId":"Jamarcus111"},"content":"        } catch (ArrayIndexOutOfBoundsException aioobe) {","lastModifiedDate":"2024-03-04"},{"lineNumber":57,"author":{"gitId":"Jamarcus111"},"content":"            ui.showError(\"OOPS!!! It seems like the command is not complete.\");","lastModifiedDate":"2024-03-04"},{"lineNumber":58,"author":{"gitId":"Jamarcus111"},"content":"        }","lastModifiedDate":"2024-03-04"},{"lineNumber":59,"author":{"gitId":"Jamarcus111"},"content":"    }","lastModifiedDate":"2024-02-12"},{"lineNumber":60,"author":{"gitId":"Jamarcus111"},"content":"}","lastModifiedDate":"2024-02-12"}],"authorContributionMap":{"Jamarcus111":60}},{"path":"src/main/java/DeadLine.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jamarcus111"},"content":"/**","lastModifiedDate":"2024-03-04"},{"lineNumber":2,"author":{"gitId":"Jamarcus111"},"content":" * Represents a deadline task with a specific due date.","lastModifiedDate":"2024-03-04"},{"lineNumber":3,"author":{"gitId":"Jamarcus111"},"content":" * A {@code DeadLine} object encapsulates the details of a task that needs to be done before a specific date.","lastModifiedDate":"2024-03-04"},{"lineNumber":4,"author":{"gitId":"Jamarcus111"},"content":" */","lastModifiedDate":"2024-03-04"},{"lineNumber":5,"author":{"gitId":"Jamarcus111"},"content":"public class DeadLine extends Task {","lastModifiedDate":"2024-02-12"},{"lineNumber":6,"author":{"gitId":"Jamarcus111"},"content":"    protected String by; // The due date of the deadline task.","lastModifiedDate":"2024-03-04"},{"lineNumber":7,"author":{"gitId":"Jamarcus111"},"content":"","lastModifiedDate":"2024-02-12"},{"lineNumber":8,"author":{"gitId":"Jamarcus111"},"content":"    /**","lastModifiedDate":"2024-03-04"},{"lineNumber":9,"author":{"gitId":"Jamarcus111"},"content":"     * Constructs a {@code DeadLine} with the specified task description and due date.","lastModifiedDate":"2024-03-04"},{"lineNumber":10,"author":{"gitId":"Jamarcus111"},"content":"     *","lastModifiedDate":"2024-03-04"},{"lineNumber":11,"author":{"gitId":"Jamarcus111"},"content":"     * @param description The description of the deadline task.","lastModifiedDate":"2024-03-04"},{"lineNumber":12,"author":{"gitId":"Jamarcus111"},"content":"     * @param by The due date of the task.","lastModifiedDate":"2024-03-04"},{"lineNumber":13,"author":{"gitId":"Jamarcus111"},"content":"     */","lastModifiedDate":"2024-03-04"},{"lineNumber":14,"author":{"gitId":"Jamarcus111"},"content":"    public DeadLine(String description, String by) {","lastModifiedDate":"2024-03-04"},{"lineNumber":15,"author":{"gitId":"Jamarcus111"},"content":"        super(description); // Call the superclass constructor to set the task description.","lastModifiedDate":"2024-03-04"},{"lineNumber":16,"author":{"gitId":"Jamarcus111"},"content":"        this.by \u003d by; // Set the due date of the deadline task.","lastModifiedDate":"2024-03-04"},{"lineNumber":17,"author":{"gitId":"Jamarcus111"},"content":"    }","lastModifiedDate":"2024-03-04"},{"lineNumber":18,"author":{"gitId":"Jamarcus111"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":19,"author":{"gitId":"Jamarcus111"},"content":"    /**","lastModifiedDate":"2024-03-04"},{"lineNumber":20,"author":{"gitId":"Jamarcus111"},"content":"     * Returns the string representation of the deadline task in a format suitable for file storage.","lastModifiedDate":"2024-03-04"},{"lineNumber":21,"author":{"gitId":"Jamarcus111"},"content":"     * The format is \"D | isDone | description | by\", where \"D\" indicates a deadline task.","lastModifiedDate":"2024-03-04"},{"lineNumber":22,"author":{"gitId":"Jamarcus111"},"content":"     *","lastModifiedDate":"2024-03-04"},{"lineNumber":23,"author":{"gitId":"Jamarcus111"},"content":"     * @return A string representation of the deadline task for file storage.","lastModifiedDate":"2024-03-04"},{"lineNumber":24,"author":{"gitId":"Jamarcus111"},"content":"     */","lastModifiedDate":"2024-03-04"},{"lineNumber":25,"author":{"gitId":"Jamarcus111"},"content":"    @Override","lastModifiedDate":"2024-03-04"},{"lineNumber":26,"author":{"gitId":"Jamarcus111"},"content":"    public String toFileFormat() {","lastModifiedDate":"2024-02-23"},{"lineNumber":27,"author":{"gitId":"Jamarcus111"},"content":"        return String.format(\"D | %d | %s | %s\", isDone ? 1 : 0, description, by);","lastModifiedDate":"2024-02-23"},{"lineNumber":28,"author":{"gitId":"Jamarcus111"},"content":"    }","lastModifiedDate":"2024-02-23"},{"lineNumber":29,"author":{"gitId":"Jamarcus111"},"content":"","lastModifiedDate":"2024-02-12"},{"lineNumber":30,"author":{"gitId":"Jamarcus111"},"content":"    /**","lastModifiedDate":"2024-03-04"},{"lineNumber":31,"author":{"gitId":"Jamarcus111"},"content":"     * Returns the string representation of the deadline task, including its status (done or not done),","lastModifiedDate":"2024-03-04"},{"lineNumber":32,"author":{"gitId":"Jamarcus111"},"content":"     * description, and due date.","lastModifiedDate":"2024-03-04"},{"lineNumber":33,"author":{"gitId":"Jamarcus111"},"content":"     *","lastModifiedDate":"2024-03-04"},{"lineNumber":34,"author":{"gitId":"Jamarcus111"},"content":"     * @return A string representation of the deadline task, including status, description, and due date.","lastModifiedDate":"2024-03-04"},{"lineNumber":35,"author":{"gitId":"Jamarcus111"},"content":"     */","lastModifiedDate":"2024-03-04"},{"lineNumber":36,"author":{"gitId":"Jamarcus111"},"content":"    @Override","lastModifiedDate":"2024-02-12"},{"lineNumber":37,"author":{"gitId":"Jamarcus111"},"content":"    public String toString() {","lastModifiedDate":"2024-02-12"},{"lineNumber":38,"author":{"gitId":"Jamarcus111"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + this.by + \")\";","lastModifiedDate":"2024-02-12"},{"lineNumber":39,"author":{"gitId":"Jamarcus111"},"content":"    }","lastModifiedDate":"2024-02-12"},{"lineNumber":40,"author":{"gitId":"Jamarcus111"},"content":"}","lastModifiedDate":"2024-02-12"}],"authorContributionMap":{"Jamarcus111":40}},{"path":"src/main/java/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jamarcus111"},"content":"/**","lastModifiedDate":"2024-03-04"},{"lineNumber":2,"author":{"gitId":"Jamarcus111"},"content":" * Represents an event task with a start and end time.","lastModifiedDate":"2024-03-04"},{"lineNumber":3,"author":{"gitId":"Jamarcus111"},"content":" * An {@code Event} object encapsulates the details of a task that occurs over a period defined by a start and end time.","lastModifiedDate":"2024-03-04"},{"lineNumber":4,"author":{"gitId":"Jamarcus111"},"content":" */","lastModifiedDate":"2024-03-04"},{"lineNumber":5,"author":{"gitId":"Jamarcus111"},"content":"public class Event extends Task {","lastModifiedDate":"2024-02-12"},{"lineNumber":6,"author":{"gitId":"Jamarcus111"},"content":"    protected String from; // The start time of the event.","lastModifiedDate":"2024-03-04"},{"lineNumber":7,"author":{"gitId":"Jamarcus111"},"content":"    protected String to; // The end time of the event.","lastModifiedDate":"2024-03-04"},{"lineNumber":8,"author":{"gitId":"Jamarcus111"},"content":"","lastModifiedDate":"2024-02-12"},{"lineNumber":9,"author":{"gitId":"Jamarcus111"},"content":"    /**","lastModifiedDate":"2024-03-04"},{"lineNumber":10,"author":{"gitId":"Jamarcus111"},"content":"     * Constructs an {@code Event} with the specified task description, start time, and end time.","lastModifiedDate":"2024-03-04"},{"lineNumber":11,"author":{"gitId":"Jamarcus111"},"content":"     *","lastModifiedDate":"2024-03-04"},{"lineNumber":12,"author":{"gitId":"Jamarcus111"},"content":"     * @param description The description of the event task.","lastModifiedDate":"2024-03-04"},{"lineNumber":13,"author":{"gitId":"Jamarcus111"},"content":"     * @param from The start time of the event.","lastModifiedDate":"2024-03-04"},{"lineNumber":14,"author":{"gitId":"Jamarcus111"},"content":"     * @param to The end time of the event.","lastModifiedDate":"2024-03-04"},{"lineNumber":15,"author":{"gitId":"Jamarcus111"},"content":"     */","lastModifiedDate":"2024-03-04"},{"lineNumber":16,"author":{"gitId":"Jamarcus111"},"content":"    public Event(String description, String from, String to) {","lastModifiedDate":"2024-03-04"},{"lineNumber":17,"author":{"gitId":"Jamarcus111"},"content":"        super(description); // Call the superclass constructor to set the task description.","lastModifiedDate":"2024-03-04"},{"lineNumber":18,"author":{"gitId":"Jamarcus111"},"content":"        this.from \u003d from; // Set the start time of the event.","lastModifiedDate":"2024-03-04"},{"lineNumber":19,"author":{"gitId":"Jamarcus111"},"content":"        this.to \u003d to; // Set the end time of the event.","lastModifiedDate":"2024-03-04"},{"lineNumber":20,"author":{"gitId":"Jamarcus111"},"content":"    }","lastModifiedDate":"2024-03-04"},{"lineNumber":21,"author":{"gitId":"Jamarcus111"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":22,"author":{"gitId":"Jamarcus111"},"content":"    /**","lastModifiedDate":"2024-03-04"},{"lineNumber":23,"author":{"gitId":"Jamarcus111"},"content":"     * Returns the string representation of the event task in a format suitable for file storage.","lastModifiedDate":"2024-03-04"},{"lineNumber":24,"author":{"gitId":"Jamarcus111"},"content":"     * The format is \"E | isDone | description | from to to\", where \"E\" indicates an event task.","lastModifiedDate":"2024-03-04"},{"lineNumber":25,"author":{"gitId":"Jamarcus111"},"content":"     *","lastModifiedDate":"2024-03-04"},{"lineNumber":26,"author":{"gitId":"Jamarcus111"},"content":"     * @return A string representation of the event task for file storage.","lastModifiedDate":"2024-03-04"},{"lineNumber":27,"author":{"gitId":"Jamarcus111"},"content":"     */","lastModifiedDate":"2024-03-04"},{"lineNumber":28,"author":{"gitId":"Jamarcus111"},"content":"    @Override","lastModifiedDate":"2024-03-04"},{"lineNumber":29,"author":{"gitId":"Jamarcus111"},"content":"    public String toFileFormat() {","lastModifiedDate":"2024-02-23"},{"lineNumber":30,"author":{"gitId":"Jamarcus111"},"content":"        return String.format(\"E | %d | %s | %s to %s\", isDone ? 1 : 0, description, from, to);","lastModifiedDate":"2024-02-23"},{"lineNumber":31,"author":{"gitId":"Jamarcus111"},"content":"    }","lastModifiedDate":"2024-02-23"},{"lineNumber":32,"author":{"gitId":"Jamarcus111"},"content":"","lastModifiedDate":"2024-02-12"},{"lineNumber":33,"author":{"gitId":"Jamarcus111"},"content":"    /**","lastModifiedDate":"2024-03-04"},{"lineNumber":34,"author":{"gitId":"Jamarcus111"},"content":"     * Returns the string representation of the event task, including its status (done or not done),","lastModifiedDate":"2024-03-04"},{"lineNumber":35,"author":{"gitId":"Jamarcus111"},"content":"     * description, and the period over which it occurs (from start time to end time).","lastModifiedDate":"2024-03-04"},{"lineNumber":36,"author":{"gitId":"Jamarcus111"},"content":"     *","lastModifiedDate":"2024-03-04"},{"lineNumber":37,"author":{"gitId":"Jamarcus111"},"content":"     * @return A string representation of the event task, including status, description, and period.","lastModifiedDate":"2024-03-04"},{"lineNumber":38,"author":{"gitId":"Jamarcus111"},"content":"     */","lastModifiedDate":"2024-03-04"},{"lineNumber":39,"author":{"gitId":"Jamarcus111"},"content":"    @Override","lastModifiedDate":"2024-02-12"},{"lineNumber":40,"author":{"gitId":"Jamarcus111"},"content":"    public String toString() {","lastModifiedDate":"2024-02-12"},{"lineNumber":41,"author":{"gitId":"Jamarcus111"},"content":"        return \"[E]\" + super.toString() + \" (from: \" + this.from + \" to: \" + this.to + \")\";","lastModifiedDate":"2024-02-12"},{"lineNumber":42,"author":{"gitId":"Jamarcus111"},"content":"    }","lastModifiedDate":"2024-02-12"},{"lineNumber":43,"author":{"gitId":"Jamarcus111"},"content":"}","lastModifiedDate":"2024-02-12"},{"lineNumber":44,"author":{"gitId":"Jamarcus111"},"content":"","lastModifiedDate":"2024-03-04"}],"authorContributionMap":{"Jamarcus111":44}},{"path":"src/main/java/HandleException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jamarcus111"},"content":"/**","lastModifiedDate":"2024-03-04"},{"lineNumber":2,"author":{"gitId":"Jamarcus111"},"content":" * Represents a custom exception class for handling errors specific to the application.","lastModifiedDate":"2024-03-04"},{"lineNumber":3,"author":{"gitId":"Jamarcus111"},"content":" * {@code HandleException} is used to encapsulate user-related errors, providing","lastModifiedDate":"2024-03-04"},{"lineNumber":4,"author":{"gitId":"Jamarcus111"},"content":" * more context and control over error handling within the application.","lastModifiedDate":"2024-03-04"},{"lineNumber":5,"author":{"gitId":"Jamarcus111"},"content":" */","lastModifiedDate":"2024-03-04"},{"lineNumber":6,"author":{"gitId":"Jamarcus111"},"content":"public class HandleException extends Exception {","lastModifiedDate":"2024-02-16"},{"lineNumber":7,"author":{"gitId":"Jamarcus111"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":8,"author":{"gitId":"Jamarcus111"},"content":"    /**","lastModifiedDate":"2024-03-04"},{"lineNumber":9,"author":{"gitId":"Jamarcus111"},"content":"     * Constructs a new {@code HandleException} with the specified detail message.","lastModifiedDate":"2024-03-04"},{"lineNumber":10,"author":{"gitId":"Jamarcus111"},"content":"     * The detail message is saved for later retrieval by the {@link #getMessage()} method.","lastModifiedDate":"2024-03-04"},{"lineNumber":11,"author":{"gitId":"Jamarcus111"},"content":"     *","lastModifiedDate":"2024-03-04"},{"lineNumber":12,"author":{"gitId":"Jamarcus111"},"content":"     * @param message the detail message. The detail message is saved for later retrieval","lastModifiedDate":"2024-03-04"},{"lineNumber":13,"author":{"gitId":"Jamarcus111"},"content":"     *                by the {@link #getMessage()} method.","lastModifiedDate":"2024-03-04"},{"lineNumber":14,"author":{"gitId":"Jamarcus111"},"content":"     */","lastModifiedDate":"2024-03-04"},{"lineNumber":15,"author":{"gitId":"Jamarcus111"},"content":"    public HandleException(String message) {","lastModifiedDate":"2024-02-16"},{"lineNumber":16,"author":{"gitId":"Jamarcus111"},"content":"        super(message);","lastModifiedDate":"2024-02-16"},{"lineNumber":17,"author":{"gitId":"Jamarcus111"},"content":"    }","lastModifiedDate":"2024-02-16"},{"lineNumber":18,"author":{"gitId":"Jamarcus111"},"content":"}","lastModifiedDate":"2024-02-16"},{"lineNumber":19,"author":{"gitId":"Jamarcus111"},"content":"","lastModifiedDate":"2024-02-16"},{"lineNumber":20,"author":{"gitId":"Jamarcus111"},"content":"","lastModifiedDate":"2024-03-04"}],"authorContributionMap":{"Jamarcus111":20}},{"path":"src/main/java/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jamarcus111"},"content":"import java.io.File;","lastModifiedDate":"2024-03-04"},{"lineNumber":2,"author":{"gitId":"Jamarcus111"},"content":"import java.io.FileWriter;","lastModifiedDate":"2024-03-04"},{"lineNumber":3,"author":{"gitId":"Jamarcus111"},"content":"import java.io.IOException;","lastModifiedDate":"2024-03-04"},{"lineNumber":4,"author":{"gitId":"Jamarcus111"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-03-04"},{"lineNumber":5,"author":{"gitId":"Jamarcus111"},"content":"import java.util.Scanner;","lastModifiedDate":"2024-03-04"},{"lineNumber":6,"author":{"gitId":"Jamarcus111"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":7,"author":{"gitId":"Jamarcus111"},"content":"/**","lastModifiedDate":"2024-03-04"},{"lineNumber":8,"author":{"gitId":"Jamarcus111"},"content":" * Handles loading and saving tasks to a file.","lastModifiedDate":"2024-03-04"},{"lineNumber":9,"author":{"gitId":"Jamarcus111"},"content":" * This class is responsible for reading from and writing to the task storage file,","lastModifiedDate":"2024-03-04"},{"lineNumber":10,"author":{"gitId":"Jamarcus111"},"content":" * converting between the file format and Task objects.","lastModifiedDate":"2024-03-04"},{"lineNumber":11,"author":{"gitId":"Jamarcus111"},"content":" */","lastModifiedDate":"2024-03-04"},{"lineNumber":12,"author":{"gitId":"Jamarcus111"},"content":"public class Storage {","lastModifiedDate":"2024-03-04"},{"lineNumber":13,"author":{"gitId":"Jamarcus111"},"content":"    private final String filePath; // The file path where tasks are stored.","lastModifiedDate":"2024-03-04"},{"lineNumber":14,"author":{"gitId":"Jamarcus111"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":15,"author":{"gitId":"Jamarcus111"},"content":"    /**","lastModifiedDate":"2024-03-04"},{"lineNumber":16,"author":{"gitId":"Jamarcus111"},"content":"     * Constructs a Storage object associated with a specific file path.","lastModifiedDate":"2024-03-04"},{"lineNumber":17,"author":{"gitId":"Jamarcus111"},"content":"     *","lastModifiedDate":"2024-03-04"},{"lineNumber":18,"author":{"gitId":"Jamarcus111"},"content":"     * @param filePath the path to the file used for task storage.","lastModifiedDate":"2024-03-04"},{"lineNumber":19,"author":{"gitId":"Jamarcus111"},"content":"     */","lastModifiedDate":"2024-03-04"},{"lineNumber":20,"author":{"gitId":"Jamarcus111"},"content":"    public Storage(String filePath) {","lastModifiedDate":"2024-03-04"},{"lineNumber":21,"author":{"gitId":"Jamarcus111"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2024-03-04"},{"lineNumber":22,"author":{"gitId":"Jamarcus111"},"content":"    }","lastModifiedDate":"2024-03-04"},{"lineNumber":23,"author":{"gitId":"Jamarcus111"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":24,"author":{"gitId":"Jamarcus111"},"content":"    /**","lastModifiedDate":"2024-03-04"},{"lineNumber":25,"author":{"gitId":"Jamarcus111"},"content":"     * Loads tasks from the storage file.","lastModifiedDate":"2024-03-04"},{"lineNumber":26,"author":{"gitId":"Jamarcus111"},"content":"     * Reads the task file line by line, parsing each line into a Task object,","lastModifiedDate":"2024-03-04"},{"lineNumber":27,"author":{"gitId":"Jamarcus111"},"content":"     * and returns a list of all tasks loaded from the file.","lastModifiedDate":"2024-03-04"},{"lineNumber":28,"author":{"gitId":"Jamarcus111"},"content":"     *","lastModifiedDate":"2024-03-04"},{"lineNumber":29,"author":{"gitId":"Jamarcus111"},"content":"     * @return an ArrayList of Task objects loaded from the file.","lastModifiedDate":"2024-03-04"},{"lineNumber":30,"author":{"gitId":"Jamarcus111"},"content":"     */","lastModifiedDate":"2024-03-04"},{"lineNumber":31,"author":{"gitId":"Jamarcus111"},"content":"    public ArrayList\u003cTask\u003e load() {","lastModifiedDate":"2024-03-04"},{"lineNumber":32,"author":{"gitId":"Jamarcus111"},"content":"        ArrayList\u003cTask\u003e loadedTasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-03-04"},{"lineNumber":33,"author":{"gitId":"Jamarcus111"},"content":"        File file \u003d new File(filePath);","lastModifiedDate":"2024-03-04"},{"lineNumber":34,"author":{"gitId":"Jamarcus111"},"content":"        if (file.exists()) {","lastModifiedDate":"2024-03-04"},{"lineNumber":35,"author":{"gitId":"Jamarcus111"},"content":"            try (Scanner scanner \u003d new Scanner(file)) {","lastModifiedDate":"2024-03-04"},{"lineNumber":36,"author":{"gitId":"Jamarcus111"},"content":"                while (scanner.hasNextLine()) {","lastModifiedDate":"2024-03-04"},{"lineNumber":37,"author":{"gitId":"Jamarcus111"},"content":"                    String line \u003d scanner.nextLine();","lastModifiedDate":"2024-03-04"},{"lineNumber":38,"author":{"gitId":"Jamarcus111"},"content":"                    Task task \u003d parseLineToTask(line);","lastModifiedDate":"2024-03-04"},{"lineNumber":39,"author":{"gitId":"Jamarcus111"},"content":"                    if (task !\u003d null) {","lastModifiedDate":"2024-03-04"},{"lineNumber":40,"author":{"gitId":"Jamarcus111"},"content":"                        loadedTasks.add(task);","lastModifiedDate":"2024-03-04"},{"lineNumber":41,"author":{"gitId":"Jamarcus111"},"content":"                    }","lastModifiedDate":"2024-03-04"},{"lineNumber":42,"author":{"gitId":"Jamarcus111"},"content":"                }","lastModifiedDate":"2024-03-04"},{"lineNumber":43,"author":{"gitId":"Jamarcus111"},"content":"            } catch (IOException e) {","lastModifiedDate":"2024-03-04"},{"lineNumber":44,"author":{"gitId":"Jamarcus111"},"content":"                System.out.println(\"Unable to read tasks from file: \" + e.getMessage());","lastModifiedDate":"2024-03-04"},{"lineNumber":45,"author":{"gitId":"Jamarcus111"},"content":"            }","lastModifiedDate":"2024-03-04"},{"lineNumber":46,"author":{"gitId":"Jamarcus111"},"content":"        }","lastModifiedDate":"2024-03-04"},{"lineNumber":47,"author":{"gitId":"Jamarcus111"},"content":"        return loadedTasks;","lastModifiedDate":"2024-03-04"},{"lineNumber":48,"author":{"gitId":"Jamarcus111"},"content":"    }","lastModifiedDate":"2024-03-04"},{"lineNumber":49,"author":{"gitId":"Jamarcus111"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":50,"author":{"gitId":"Jamarcus111"},"content":"    /**","lastModifiedDate":"2024-03-04"},{"lineNumber":51,"author":{"gitId":"Jamarcus111"},"content":"     * Saves the current list of tasks to the storage file.","lastModifiedDate":"2024-03-04"},{"lineNumber":52,"author":{"gitId":"Jamarcus111"},"content":"     * Writes each task to the file in a format suitable for later loading.","lastModifiedDate":"2024-03-04"},{"lineNumber":53,"author":{"gitId":"Jamarcus111"},"content":"     *","lastModifiedDate":"2024-03-04"},{"lineNumber":54,"author":{"gitId":"Jamarcus111"},"content":"     * @param tasks the list of Task objects to be saved to the file.","lastModifiedDate":"2024-03-04"},{"lineNumber":55,"author":{"gitId":"Jamarcus111"},"content":"     * @throws IOException if an I/O error occurs writing to the file.","lastModifiedDate":"2024-03-04"},{"lineNumber":56,"author":{"gitId":"Jamarcus111"},"content":"     */","lastModifiedDate":"2024-03-04"},{"lineNumber":57,"author":{"gitId":"Jamarcus111"},"content":"    public void save(ArrayList\u003cTask\u003e tasks) throws IOException {","lastModifiedDate":"2024-03-04"},{"lineNumber":58,"author":{"gitId":"Jamarcus111"},"content":"        try (FileWriter writer \u003d new FileWriter(filePath, false)) {","lastModifiedDate":"2024-03-04"},{"lineNumber":59,"author":{"gitId":"Jamarcus111"},"content":"            for (Task task : tasks) {","lastModifiedDate":"2024-03-04"},{"lineNumber":60,"author":{"gitId":"Jamarcus111"},"content":"                writer.write(task.toFileFormat() + System.lineSeparator());","lastModifiedDate":"2024-03-04"},{"lineNumber":61,"author":{"gitId":"Jamarcus111"},"content":"            }","lastModifiedDate":"2024-03-04"},{"lineNumber":62,"author":{"gitId":"Jamarcus111"},"content":"        }","lastModifiedDate":"2024-03-04"},{"lineNumber":63,"author":{"gitId":"Jamarcus111"},"content":"    }","lastModifiedDate":"2024-03-04"},{"lineNumber":64,"author":{"gitId":"Jamarcus111"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":65,"author":{"gitId":"Jamarcus111"},"content":"    /**","lastModifiedDate":"2024-03-04"},{"lineNumber":66,"author":{"gitId":"Jamarcus111"},"content":"     * Parses a single line from the task file into a Task object.","lastModifiedDate":"2024-03-04"},{"lineNumber":67,"author":{"gitId":"Jamarcus111"},"content":"     * This method is used internally when loading tasks from the file.","lastModifiedDate":"2024-03-04"},{"lineNumber":68,"author":{"gitId":"Jamarcus111"},"content":"     *","lastModifiedDate":"2024-03-04"},{"lineNumber":69,"author":{"gitId":"Jamarcus111"},"content":"     * @param line the line from the file to parse into a Task object.","lastModifiedDate":"2024-03-04"},{"lineNumber":70,"author":{"gitId":"Jamarcus111"},"content":"     * @return the Task object parsed from the line, or null if the line could not be parsed.","lastModifiedDate":"2024-03-04"},{"lineNumber":71,"author":{"gitId":"Jamarcus111"},"content":"     */","lastModifiedDate":"2024-03-04"},{"lineNumber":72,"author":{"gitId":"Jamarcus111"},"content":"    private Task parseLineToTask(String line) {","lastModifiedDate":"2024-03-04"},{"lineNumber":73,"author":{"gitId":"Jamarcus111"},"content":"        String[] parts \u003d line.split(\" \\\\| \");","lastModifiedDate":"2024-03-04"},{"lineNumber":74,"author":{"gitId":"Jamarcus111"},"content":"        String type \u003d parts[0];","lastModifiedDate":"2024-03-04"},{"lineNumber":75,"author":{"gitId":"Jamarcus111"},"content":"        Task task \u003d null;","lastModifiedDate":"2024-03-04"},{"lineNumber":76,"author":{"gitId":"Jamarcus111"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":77,"author":{"gitId":"Jamarcus111"},"content":"        try {","lastModifiedDate":"2024-03-04"},{"lineNumber":78,"author":{"gitId":"Jamarcus111"},"content":"            switch (type) {","lastModifiedDate":"2024-03-04"},{"lineNumber":79,"author":{"gitId":"Jamarcus111"},"content":"            case \"T\":","lastModifiedDate":"2024-03-04"},{"lineNumber":80,"author":{"gitId":"Jamarcus111"},"content":"                task \u003d new Todo(parts[2].trim());","lastModifiedDate":"2024-03-04"},{"lineNumber":81,"author":{"gitId":"Jamarcus111"},"content":"                break;","lastModifiedDate":"2024-03-04"},{"lineNumber":82,"author":{"gitId":"Jamarcus111"},"content":"            case \"D\":","lastModifiedDate":"2024-03-04"},{"lineNumber":83,"author":{"gitId":"Jamarcus111"},"content":"                task \u003d new DeadLine(parts[2].trim(), parts[3].trim());","lastModifiedDate":"2024-03-04"},{"lineNumber":84,"author":{"gitId":"Jamarcus111"},"content":"                break;","lastModifiedDate":"2024-03-04"},{"lineNumber":85,"author":{"gitId":"Jamarcus111"},"content":"            case \"E\":","lastModifiedDate":"2024-03-04"},{"lineNumber":86,"author":{"gitId":"Jamarcus111"},"content":"                task \u003d new Event(parts[2].trim(), parts[3].trim(), parts[4].trim());","lastModifiedDate":"2024-03-04"},{"lineNumber":87,"author":{"gitId":"Jamarcus111"},"content":"                break;","lastModifiedDate":"2024-03-04"},{"lineNumber":88,"author":{"gitId":"Jamarcus111"},"content":"            }","lastModifiedDate":"2024-03-04"},{"lineNumber":89,"author":{"gitId":"Jamarcus111"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":90,"author":{"gitId":"Jamarcus111"},"content":"            if (task !\u003d null) {","lastModifiedDate":"2024-03-04"},{"lineNumber":91,"author":{"gitId":"Jamarcus111"},"content":"                boolean isDone \u003d parts[1].trim().equals(\"1\");","lastModifiedDate":"2024-03-04"},{"lineNumber":92,"author":{"gitId":"Jamarcus111"},"content":"                task.setDone(isDone);","lastModifiedDate":"2024-03-04"},{"lineNumber":93,"author":{"gitId":"Jamarcus111"},"content":"            }","lastModifiedDate":"2024-03-04"},{"lineNumber":94,"author":{"gitId":"Jamarcus111"},"content":"        } catch (Exception e) {","lastModifiedDate":"2024-03-04"},{"lineNumber":95,"author":{"gitId":"Jamarcus111"},"content":"            System.err.println(\"Failed to parse line into task: \" + line);","lastModifiedDate":"2024-03-04"},{"lineNumber":96,"author":{"gitId":"Jamarcus111"},"content":"        }","lastModifiedDate":"2024-03-04"},{"lineNumber":97,"author":{"gitId":"Jamarcus111"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":98,"author":{"gitId":"Jamarcus111"},"content":"        return task;","lastModifiedDate":"2024-03-04"},{"lineNumber":99,"author":{"gitId":"Jamarcus111"},"content":"    }","lastModifiedDate":"2024-03-04"},{"lineNumber":100,"author":{"gitId":"Jamarcus111"},"content":"}","lastModifiedDate":"2024-03-04"}],"authorContributionMap":{"Jamarcus111":100}},{"path":"src/main/java/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jamarcus111"},"content":"/**","lastModifiedDate":"2024-03-04"},{"lineNumber":2,"author":{"gitId":"Jamarcus111"},"content":" * Represents a generic task in the task list.","lastModifiedDate":"2024-03-04"},{"lineNumber":3,"author":{"gitId":"Jamarcus111"},"content":" * This class serves as a base class for different types of tasks","lastModifiedDate":"2024-03-04"},{"lineNumber":4,"author":{"gitId":"Jamarcus111"},"content":" * such as todos, deadlines, and events.","lastModifiedDate":"2024-03-04"},{"lineNumber":5,"author":{"gitId":"Jamarcus111"},"content":" */","lastModifiedDate":"2024-03-04"},{"lineNumber":6,"author":{"gitId":"Jamarcus111"},"content":"public class Task {","lastModifiedDate":"2024-02-01"},{"lineNumber":7,"author":{"gitId":"Jamarcus111"},"content":"    protected String description; // The task\u0027s description","lastModifiedDate":"2024-03-04"},{"lineNumber":8,"author":{"gitId":"Jamarcus111"},"content":"    protected boolean isDone; // The task\u0027s completion status","lastModifiedDate":"2024-03-04"},{"lineNumber":9,"author":{"gitId":"Jamarcus111"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":10,"author":{"gitId":"Jamarcus111"},"content":"    /**","lastModifiedDate":"2024-03-04"},{"lineNumber":11,"author":{"gitId":"Jamarcus111"},"content":"     * Constructs a new Task with the given description. By default, the task is not done.","lastModifiedDate":"2024-03-04"},{"lineNumber":12,"author":{"gitId":"Jamarcus111"},"content":"     *","lastModifiedDate":"2024-03-04"},{"lineNumber":13,"author":{"gitId":"Jamarcus111"},"content":"     * @param description The text description of the task.","lastModifiedDate":"2024-03-04"},{"lineNumber":14,"author":{"gitId":"Jamarcus111"},"content":"     */","lastModifiedDate":"2024-03-04"},{"lineNumber":15,"author":{"gitId":"Jamarcus111"},"content":"    public Task(String description) {","lastModifiedDate":"2024-02-01"},{"lineNumber":16,"author":{"gitId":"Jamarcus111"},"content":"        this.description \u003d description;","lastModifiedDate":"2024-02-01"},{"lineNumber":17,"author":{"gitId":"Jamarcus111"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2024-02-01"},{"lineNumber":18,"author":{"gitId":"Jamarcus111"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":19,"author":{"gitId":"Jamarcus111"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":20,"author":{"gitId":"Jamarcus111"},"content":"    /**","lastModifiedDate":"2024-03-04"},{"lineNumber":21,"author":{"gitId":"Jamarcus111"},"content":"     * Formats the task for file storage, including its done status and description.","lastModifiedDate":"2024-03-04"},{"lineNumber":22,"author":{"gitId":"Jamarcus111"},"content":"     *","lastModifiedDate":"2024-03-04"},{"lineNumber":23,"author":{"gitId":"Jamarcus111"},"content":"     * @return A string representation of the task suitable for file storage.","lastModifiedDate":"2024-03-04"},{"lineNumber":24,"author":{"gitId":"Jamarcus111"},"content":"     */","lastModifiedDate":"2024-03-04"},{"lineNumber":25,"author":{"gitId":"Jamarcus111"},"content":"    public String toFileFormat() {","lastModifiedDate":"2024-03-04"},{"lineNumber":26,"author":{"gitId":"Jamarcus111"},"content":"        return String.format(\"T | %d | %s\", isDone ? 1 : 0, description);","lastModifiedDate":"2024-03-04"},{"lineNumber":27,"author":{"gitId":"Jamarcus111"},"content":"    }","lastModifiedDate":"2024-03-04"},{"lineNumber":28,"author":{"gitId":"Jamarcus111"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":29,"author":{"gitId":"Jamarcus111"},"content":"    /**","lastModifiedDate":"2024-03-04"},{"lineNumber":30,"author":{"gitId":"Jamarcus111"},"content":"     * Marks the task as done.","lastModifiedDate":"2024-03-04"},{"lineNumber":31,"author":{"gitId":"Jamarcus111"},"content":"     */","lastModifiedDate":"2024-03-04"},{"lineNumber":32,"author":{"gitId":"Jamarcus111"},"content":"    public void markAsDone() {","lastModifiedDate":"2024-03-04"},{"lineNumber":33,"author":{"gitId":"Jamarcus111"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2024-03-04"},{"lineNumber":34,"author":{"gitId":"Jamarcus111"},"content":"    }","lastModifiedDate":"2024-03-04"},{"lineNumber":35,"author":{"gitId":"Jamarcus111"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":36,"author":{"gitId":"Jamarcus111"},"content":"    /**","lastModifiedDate":"2024-03-04"},{"lineNumber":37,"author":{"gitId":"Jamarcus111"},"content":"     * Marks the task as not done.","lastModifiedDate":"2024-03-04"},{"lineNumber":38,"author":{"gitId":"Jamarcus111"},"content":"     */","lastModifiedDate":"2024-03-04"},{"lineNumber":39,"author":{"gitId":"Jamarcus111"},"content":"    public void markAsNotDone() {","lastModifiedDate":"2024-03-04"},{"lineNumber":40,"author":{"gitId":"Jamarcus111"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2024-03-04"},{"lineNumber":41,"author":{"gitId":"Jamarcus111"},"content":"    }","lastModifiedDate":"2024-03-04"},{"lineNumber":42,"author":{"gitId":"Jamarcus111"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":43,"author":{"gitId":"Jamarcus111"},"content":"    /**","lastModifiedDate":"2024-03-04"},{"lineNumber":44,"author":{"gitId":"Jamarcus111"},"content":"     * Sets the done status of the task.","lastModifiedDate":"2024-03-04"},{"lineNumber":45,"author":{"gitId":"Jamarcus111"},"content":"     *","lastModifiedDate":"2024-03-04"},{"lineNumber":46,"author":{"gitId":"Jamarcus111"},"content":"     * @param isDone True if the task is done, false otherwise.","lastModifiedDate":"2024-03-04"},{"lineNumber":47,"author":{"gitId":"Jamarcus111"},"content":"     */","lastModifiedDate":"2024-03-04"},{"lineNumber":48,"author":{"gitId":"Jamarcus111"},"content":"    public void setDone(boolean isDone) {","lastModifiedDate":"2024-03-04"},{"lineNumber":49,"author":{"gitId":"Jamarcus111"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2024-03-04"},{"lineNumber":50,"author":{"gitId":"Jamarcus111"},"content":"    }","lastModifiedDate":"2024-03-04"},{"lineNumber":51,"author":{"gitId":"Jamarcus111"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":52,"author":{"gitId":"Jamarcus111"},"content":"    /**","lastModifiedDate":"2024-03-04"},{"lineNumber":53,"author":{"gitId":"Jamarcus111"},"content":"     * Returns a status icon indicating whether the task is done.","lastModifiedDate":"2024-03-04"},{"lineNumber":54,"author":{"gitId":"Jamarcus111"},"content":"     *","lastModifiedDate":"2024-03-04"},{"lineNumber":55,"author":{"gitId":"Jamarcus111"},"content":"     * @return A string representing a check mark if done, or a space if not done.","lastModifiedDate":"2024-03-04"},{"lineNumber":56,"author":{"gitId":"Jamarcus111"},"content":"     */","lastModifiedDate":"2024-03-04"},{"lineNumber":57,"author":{"gitId":"Jamarcus111"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2024-02-01"},{"lineNumber":58,"author":{"gitId":"Jamarcus111"},"content":"        return (isDone ? \"X\" : \" \"); // mark done task with X","lastModifiedDate":"2024-02-01"},{"lineNumber":59,"author":{"gitId":"Jamarcus111"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":60,"author":{"gitId":"Jamarcus111"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":61,"author":{"gitId":"Jamarcus111"},"content":"    /**","lastModifiedDate":"2024-03-04"},{"lineNumber":62,"author":{"gitId":"Jamarcus111"},"content":"     * Returns a string representation of the task, including its status icon and description.","lastModifiedDate":"2024-03-04"},{"lineNumber":63,"author":{"gitId":"Jamarcus111"},"content":"     *","lastModifiedDate":"2024-03-04"},{"lineNumber":64,"author":{"gitId":"Jamarcus111"},"content":"     * @return A string representation of the task.","lastModifiedDate":"2024-03-04"},{"lineNumber":65,"author":{"gitId":"Jamarcus111"},"content":"     */","lastModifiedDate":"2024-03-04"},{"lineNumber":66,"author":{"gitId":"Jamarcus111"},"content":"    @Override","lastModifiedDate":"2024-03-04"},{"lineNumber":67,"author":{"gitId":"Jamarcus111"},"content":"    public String toString() {","lastModifiedDate":"2024-02-01"},{"lineNumber":68,"author":{"gitId":"Jamarcus111"},"content":"        return \"[\" + this.getStatusIcon() + \"] \" + this.description;","lastModifiedDate":"2024-02-01"},{"lineNumber":69,"author":{"gitId":"Jamarcus111"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":70,"author":{"gitId":"Jamarcus111"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":71,"author":{"gitId":"Jamarcus111"},"content":"    /**","lastModifiedDate":"2024-03-04"},{"lineNumber":72,"author":{"gitId":"Jamarcus111"},"content":"     * Gets the description of the task.","lastModifiedDate":"2024-03-04"},{"lineNumber":73,"author":{"gitId":"Jamarcus111"},"content":"     *","lastModifiedDate":"2024-03-04"},{"lineNumber":74,"author":{"gitId":"Jamarcus111"},"content":"     * @return The description of the task.","lastModifiedDate":"2024-03-04"},{"lineNumber":75,"author":{"gitId":"Jamarcus111"},"content":"     */","lastModifiedDate":"2024-03-04"},{"lineNumber":76,"author":{"gitId":"Jamarcus111"},"content":"    public String getDescription() {","lastModifiedDate":"2024-03-04"},{"lineNumber":77,"author":{"gitId":"Jamarcus111"},"content":"        return this.description;","lastModifiedDate":"2024-03-04"},{"lineNumber":78,"author":{"gitId":"Jamarcus111"},"content":"    }","lastModifiedDate":"2024-03-04"},{"lineNumber":79,"author":{"gitId":"Jamarcus111"},"content":"}","lastModifiedDate":"2024-02-01"}],"authorContributionMap":{"Jamarcus111":79}},{"path":"src/main/java/TaskFactory.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jamarcus111"},"content":"/**","lastModifiedDate":"2024-03-04"},{"lineNumber":2,"author":{"gitId":"Jamarcus111"},"content":" * TaskFactory is responsible for creating Task objects based on user input.","lastModifiedDate":"2024-03-04"},{"lineNumber":3,"author":{"gitId":"Jamarcus111"},"content":" * It interprets the command and parameters provided by the user to instantiate","lastModifiedDate":"2024-03-04"},{"lineNumber":4,"author":{"gitId":"Jamarcus111"},"content":" * the appropriate Task subclass (Todo, DeadLine, or Event).","lastModifiedDate":"2024-03-04"},{"lineNumber":5,"author":{"gitId":"Jamarcus111"},"content":" */","lastModifiedDate":"2024-03-04"},{"lineNumber":6,"author":{"gitId":"Jamarcus111"},"content":"public class TaskFactory {","lastModifiedDate":"2024-02-12"},{"lineNumber":7,"author":{"gitId":"Jamarcus111"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":8,"author":{"gitId":"Jamarcus111"},"content":"    /**","lastModifiedDate":"2024-03-04"},{"lineNumber":9,"author":{"gitId":"Jamarcus111"},"content":"     * Creates a Task object based on the user\u0027s input.","lastModifiedDate":"2024-03-04"},{"lineNumber":10,"author":{"gitId":"Jamarcus111"},"content":"     * This method parses the user input to determine the type of task to create","lastModifiedDate":"2024-03-04"},{"lineNumber":11,"author":{"gitId":"Jamarcus111"},"content":"     * and extracts any necessary parameters (e.g., description, due date).","lastModifiedDate":"2024-03-04"},{"lineNumber":12,"author":{"gitId":"Jamarcus111"},"content":"     *","lastModifiedDate":"2024-03-04"},{"lineNumber":13,"author":{"gitId":"Jamarcus111"},"content":"     * @param userInput The complete command input from the user, including the task type","lastModifiedDate":"2024-03-04"},{"lineNumber":14,"author":{"gitId":"Jamarcus111"},"content":"     *                  and any parameters.","lastModifiedDate":"2024-03-04"},{"lineNumber":15,"author":{"gitId":"Jamarcus111"},"content":"     * @return A Task object corresponding to the user\u0027s command.","lastModifiedDate":"2024-03-04"},{"lineNumber":16,"author":{"gitId":"Jamarcus111"},"content":"     * @throws HandleException If the input format is incorrect or insufficient information","lastModifiedDate":"2024-03-04"},{"lineNumber":17,"author":{"gitId":"Jamarcus111"},"content":"     *                         is provided to create a task.","lastModifiedDate":"2024-03-04"},{"lineNumber":18,"author":{"gitId":"Jamarcus111"},"content":"     */","lastModifiedDate":"2024-03-04"},{"lineNumber":19,"author":{"gitId":"Jamarcus111"},"content":"    public static Task createTask(String userInput) throws HandleException {","lastModifiedDate":"2024-02-16"},{"lineNumber":20,"author":{"gitId":"Jamarcus111"},"content":"        String[] parts \u003d userInput.split(\" \", 2);","lastModifiedDate":"2024-02-12"},{"lineNumber":21,"author":{"gitId":"Jamarcus111"},"content":"        String type \u003d parts[0];","lastModifiedDate":"2024-02-12"},{"lineNumber":22,"author":{"gitId":"Jamarcus111"},"content":"        Task task;","lastModifiedDate":"2024-03-04"},{"lineNumber":23,"author":{"gitId":"Jamarcus111"},"content":"","lastModifiedDate":"2024-02-12"},{"lineNumber":24,"author":{"gitId":"Jamarcus111"},"content":"        if (parts.length \u003c 2 || parts[1].isEmpty()) {","lastModifiedDate":"2024-02-16"},{"lineNumber":25,"author":{"gitId":"Jamarcus111"},"content":"            throw new HandleException(\"OOPS!!! The description of a task cannot be empty.\");","lastModifiedDate":"2024-02-16"},{"lineNumber":26,"author":{"gitId":"Jamarcus111"},"content":"        }","lastModifiedDate":"2024-02-16"},{"lineNumber":27,"author":{"gitId":"Jamarcus111"},"content":"","lastModifiedDate":"2024-02-16"},{"lineNumber":28,"author":{"gitId":"Jamarcus111"},"content":"        // Details are declared outside the switch to use across multiple cases.","lastModifiedDate":"2024-03-04"},{"lineNumber":29,"author":{"gitId":"Jamarcus111"},"content":"        String[] details;","lastModifiedDate":"2024-03-04"},{"lineNumber":30,"author":{"gitId":"Jamarcus111"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":31,"author":{"gitId":"Jamarcus111"},"content":"        switch (type.toLowerCase()) {","lastModifiedDate":"2024-03-04"},{"lineNumber":32,"author":{"gitId":"Jamarcus111"},"content":"        case \"todo\":","lastModifiedDate":"2024-02-16"},{"lineNumber":33,"author":{"gitId":"Jamarcus111"},"content":"            task \u003d new Todo(parts[1]);","lastModifiedDate":"2024-02-12"},{"lineNumber":34,"author":{"gitId":"Jamarcus111"},"content":"            break;","lastModifiedDate":"2024-02-16"},{"lineNumber":35,"author":{"gitId":"Jamarcus111"},"content":"        case \"deadline\":","lastModifiedDate":"2024-02-16"},{"lineNumber":36,"author":{"gitId":"Jamarcus111"},"content":"            details \u003d parts[1].split(\" /by \", 2);","lastModifiedDate":"2024-03-04"},{"lineNumber":37,"author":{"gitId":"Jamarcus111"},"content":"            if (details.length \u003c 2 || details[1].isEmpty()) {","lastModifiedDate":"2024-02-16"},{"lineNumber":38,"author":{"gitId":"Jamarcus111"},"content":"                throw new HandleException(\"OOPS!!! The date of a deadline cannot be empty.\");","lastModifiedDate":"2024-02-16"},{"lineNumber":39,"author":{"gitId":"Jamarcus111"},"content":"            }","lastModifiedDate":"2024-02-16"},{"lineNumber":40,"author":{"gitId":"Jamarcus111"},"content":"            task \u003d new DeadLine(details[0], details[1]);","lastModifiedDate":"2024-02-12"},{"lineNumber":41,"author":{"gitId":"Jamarcus111"},"content":"            break;","lastModifiedDate":"2024-02-16"},{"lineNumber":42,"author":{"gitId":"Jamarcus111"},"content":"        case \"event\":","lastModifiedDate":"2024-02-16"},{"lineNumber":43,"author":{"gitId":"Jamarcus111"},"content":"            details \u003d parts[1].split(\" /from \", 2);","lastModifiedDate":"2024-03-04"},{"lineNumber":44,"author":{"gitId":"Jamarcus111"},"content":"            if (details.length \u003c 2 || details[1].isEmpty()) {","lastModifiedDate":"2024-02-16"},{"lineNumber":45,"author":{"gitId":"Jamarcus111"},"content":"                throw new HandleException(\"OOPS!!! The start time of an event cannot be empty.\");","lastModifiedDate":"2024-02-16"},{"lineNumber":46,"author":{"gitId":"Jamarcus111"},"content":"            }","lastModifiedDate":"2024-02-16"},{"lineNumber":47,"author":{"gitId":"Jamarcus111"},"content":"            String[] times \u003d details[1].split(\" /to \", 2);","lastModifiedDate":"2024-02-12"},{"lineNumber":48,"author":{"gitId":"Jamarcus111"},"content":"            if (times.length \u003c 2 || times[1].isEmpty()) {","lastModifiedDate":"2024-02-16"},{"lineNumber":49,"author":{"gitId":"Jamarcus111"},"content":"                throw new HandleException(\"OOPS!!! The end time of an event cannot be empty.\");","lastModifiedDate":"2024-02-16"},{"lineNumber":50,"author":{"gitId":"Jamarcus111"},"content":"            }","lastModifiedDate":"2024-02-16"},{"lineNumber":51,"author":{"gitId":"Jamarcus111"},"content":"            task \u003d new Event(details[0], times[0], times[1]);","lastModifiedDate":"2024-02-12"},{"lineNumber":52,"author":{"gitId":"Jamarcus111"},"content":"            break;","lastModifiedDate":"2024-02-16"},{"lineNumber":53,"author":{"gitId":"Jamarcus111"},"content":"        default:","lastModifiedDate":"2024-02-16"},{"lineNumber":54,"author":{"gitId":"Jamarcus111"},"content":"            throw new HandleException(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");","lastModifiedDate":"2024-02-16"},{"lineNumber":55,"author":{"gitId":"Jamarcus111"},"content":"        }","lastModifiedDate":"2024-02-12"},{"lineNumber":56,"author":{"gitId":"Jamarcus111"},"content":"","lastModifiedDate":"2024-02-12"},{"lineNumber":57,"author":{"gitId":"Jamarcus111"},"content":"        return task;","lastModifiedDate":"2024-02-12"},{"lineNumber":58,"author":{"gitId":"Jamarcus111"},"content":"    }","lastModifiedDate":"2024-02-12"},{"lineNumber":59,"author":{"gitId":"Jamarcus111"},"content":"}","lastModifiedDate":"2024-02-12"},{"lineNumber":60,"author":{"gitId":"Jamarcus111"},"content":"","lastModifiedDate":"2024-02-16"}],"authorContributionMap":{"Jamarcus111":60}},{"path":"src/main/java/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jamarcus111"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-02-12"},{"lineNumber":2,"author":{"gitId":"Jamarcus111"},"content":"","lastModifiedDate":"2024-02-23"},{"lineNumber":3,"author":{"gitId":"Jamarcus111"},"content":"/**","lastModifiedDate":"2024-03-04"},{"lineNumber":4,"author":{"gitId":"Jamarcus111"},"content":" * Represents a list of tasks in the application. This class manages the tasks,","lastModifiedDate":"2024-03-04"},{"lineNumber":5,"author":{"gitId":"Jamarcus111"},"content":" * including adding, deleting, marking tasks as done or not done, listing all tasks,","lastModifiedDate":"2024-03-04"},{"lineNumber":6,"author":{"gitId":"Jamarcus111"},"content":" * and finding tasks by keywords.","lastModifiedDate":"2024-03-04"},{"lineNumber":7,"author":{"gitId":"Jamarcus111"},"content":" */","lastModifiedDate":"2024-03-04"},{"lineNumber":8,"author":{"gitId":"Jamarcus111"},"content":"public class TaskList {","lastModifiedDate":"2024-02-12"},{"lineNumber":9,"author":{"gitId":"Jamarcus111"},"content":"    private final ArrayList\u003cTask\u003e tasks; // A list of tasks.","lastModifiedDate":"2024-03-04"},{"lineNumber":10,"author":{"gitId":"Jamarcus111"},"content":"","lastModifiedDate":"2024-02-12"},{"lineNumber":11,"author":{"gitId":"Jamarcus111"},"content":"    /**","lastModifiedDate":"2024-03-04"},{"lineNumber":12,"author":{"gitId":"Jamarcus111"},"content":"     * Constructs a TaskList with a specified list of tasks.","lastModifiedDate":"2024-03-04"},{"lineNumber":13,"author":{"gitId":"Jamarcus111"},"content":"     *","lastModifiedDate":"2024-03-04"},{"lineNumber":14,"author":{"gitId":"Jamarcus111"},"content":"     * @param tasks An ArrayList of Task objects.","lastModifiedDate":"2024-03-04"},{"lineNumber":15,"author":{"gitId":"Jamarcus111"},"content":"     */","lastModifiedDate":"2024-03-04"},{"lineNumber":16,"author":{"gitId":"Jamarcus111"},"content":"    public TaskList(ArrayList\u003cTask\u003e tasks) {","lastModifiedDate":"2024-03-04"},{"lineNumber":17,"author":{"gitId":"Jamarcus111"},"content":"        this.tasks \u003d tasks;","lastModifiedDate":"2024-03-04"},{"lineNumber":18,"author":{"gitId":"Jamarcus111"},"content":"    }","lastModifiedDate":"2024-02-23"},{"lineNumber":19,"author":{"gitId":"Jamarcus111"},"content":"","lastModifiedDate":"2024-02-23"},{"lineNumber":20,"author":{"gitId":"Jamarcus111"},"content":"    /**","lastModifiedDate":"2024-03-04"},{"lineNumber":21,"author":{"gitId":"Jamarcus111"},"content":"     * Returns the list of tasks.","lastModifiedDate":"2024-03-04"},{"lineNumber":22,"author":{"gitId":"Jamarcus111"},"content":"     *","lastModifiedDate":"2024-03-04"},{"lineNumber":23,"author":{"gitId":"Jamarcus111"},"content":"     * @return An ArrayList of Task objects.","lastModifiedDate":"2024-03-04"},{"lineNumber":24,"author":{"gitId":"Jamarcus111"},"content":"     */","lastModifiedDate":"2024-03-04"},{"lineNumber":25,"author":{"gitId":"Jamarcus111"},"content":"    public ArrayList\u003cTask\u003e getTasks() {","lastModifiedDate":"2024-03-04"},{"lineNumber":26,"author":{"gitId":"Jamarcus111"},"content":"        return tasks;","lastModifiedDate":"2024-03-04"},{"lineNumber":27,"author":{"gitId":"Jamarcus111"},"content":"    }","lastModifiedDate":"2024-02-23"},{"lineNumber":28,"author":{"gitId":"Jamarcus111"},"content":"","lastModifiedDate":"2024-02-12"},{"lineNumber":29,"author":{"gitId":"Jamarcus111"},"content":"    /**","lastModifiedDate":"2024-03-04"},{"lineNumber":30,"author":{"gitId":"Jamarcus111"},"content":"     * Adds a task to the task list based on the user input.","lastModifiedDate":"2024-03-04"},{"lineNumber":31,"author":{"gitId":"Jamarcus111"},"content":"     *","lastModifiedDate":"2024-03-04"},{"lineNumber":32,"author":{"gitId":"Jamarcus111"},"content":"     * @param userInput The full command input from the user for creating a task.","lastModifiedDate":"2024-03-04"},{"lineNumber":33,"author":{"gitId":"Jamarcus111"},"content":"     * @throws HandleException If the task cannot be created due to invalid input.","lastModifiedDate":"2024-03-04"},{"lineNumber":34,"author":{"gitId":"Jamarcus111"},"content":"     */","lastModifiedDate":"2024-03-04"},{"lineNumber":35,"author":{"gitId":"Jamarcus111"},"content":"    public void addTask(String userInput) throws HandleException {","lastModifiedDate":"2024-02-16"},{"lineNumber":36,"author":{"gitId":"Jamarcus111"},"content":"        Task task \u003d TaskFactory.createTask(userInput);","lastModifiedDate":"2024-02-12"},{"lineNumber":37,"author":{"gitId":"Jamarcus111"},"content":"        tasks.add(task);","lastModifiedDate":"2024-02-12"},{"lineNumber":38,"author":{"gitId":"Jamarcus111"},"content":"        System.out.println(\"Got it. I\u0027ve added this task:\\n  \" + task);","lastModifiedDate":"2024-03-04"},{"lineNumber":39,"author":{"gitId":"Jamarcus111"},"content":"        System.out.println(\"Now you have \" + tasks.size() + \" tasks in the list.\");","lastModifiedDate":"2024-02-12"},{"lineNumber":40,"author":{"gitId":"Jamarcus111"},"content":"    }","lastModifiedDate":"2024-02-12"},{"lineNumber":41,"author":{"gitId":"Jamarcus111"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":42,"author":{"gitId":"Jamarcus111"},"content":"    /**","lastModifiedDate":"2024-03-04"},{"lineNumber":43,"author":{"gitId":"Jamarcus111"},"content":"     * Marks a task as done based on its index in the task list.","lastModifiedDate":"2024-03-04"},{"lineNumber":44,"author":{"gitId":"Jamarcus111"},"content":"     *","lastModifiedDate":"2024-03-04"},{"lineNumber":45,"author":{"gitId":"Jamarcus111"},"content":"     * @param taskIndex The index of the task to be marked as done.","lastModifiedDate":"2024-03-04"},{"lineNumber":46,"author":{"gitId":"Jamarcus111"},"content":"     */","lastModifiedDate":"2024-03-04"},{"lineNumber":47,"author":{"gitId":"Jamarcus111"},"content":"    public void markTaskAsDone(int taskIndex) {","lastModifiedDate":"2024-03-04"},{"lineNumber":48,"author":{"gitId":"Jamarcus111"},"content":"        if (taskIndex \u003e\u003d 0 \u0026\u0026 taskIndex \u003c tasks.size()) {","lastModifiedDate":"2024-03-04"},{"lineNumber":49,"author":{"gitId":"Jamarcus111"},"content":"            Task task \u003d tasks.get(taskIndex);","lastModifiedDate":"2024-03-04"},{"lineNumber":50,"author":{"gitId":"Jamarcus111"},"content":"            task.markAsDone();","lastModifiedDate":"2024-03-04"},{"lineNumber":51,"author":{"gitId":"Jamarcus111"},"content":"            System.out.println(\"Nice! I\u0027ve marked this task as done:\\n  \" + task);","lastModifiedDate":"2024-03-04"},{"lineNumber":52,"author":{"gitId":"Jamarcus111"},"content":"        } else {","lastModifiedDate":"2024-03-04"},{"lineNumber":53,"author":{"gitId":"Jamarcus111"},"content":"            System.out.println(\"Task with given index does not exist.\");","lastModifiedDate":"2024-03-04"},{"lineNumber":54,"author":{"gitId":"Jamarcus111"},"content":"        }","lastModifiedDate":"2024-03-04"},{"lineNumber":55,"author":{"gitId":"Jamarcus111"},"content":"    }","lastModifiedDate":"2024-03-04"},{"lineNumber":56,"author":{"gitId":"Jamarcus111"},"content":"","lastModifiedDate":"2024-02-12"},{"lineNumber":57,"author":{"gitId":"Jamarcus111"},"content":"    /**","lastModifiedDate":"2024-03-04"},{"lineNumber":58,"author":{"gitId":"Jamarcus111"},"content":"     * Marks a task as not done based on its index in the task list.","lastModifiedDate":"2024-03-04"},{"lineNumber":59,"author":{"gitId":"Jamarcus111"},"content":"     *","lastModifiedDate":"2024-03-04"},{"lineNumber":60,"author":{"gitId":"Jamarcus111"},"content":"     * @param taskIndex The index of the task to be marked as not done.","lastModifiedDate":"2024-03-04"},{"lineNumber":61,"author":{"gitId":"Jamarcus111"},"content":"     */","lastModifiedDate":"2024-03-04"},{"lineNumber":62,"author":{"gitId":"Jamarcus111"},"content":"    public void markTaskAsNotDone(int taskIndex) {","lastModifiedDate":"2024-03-04"},{"lineNumber":63,"author":{"gitId":"Jamarcus111"},"content":"        if (taskIndex \u003e\u003d 0 \u0026\u0026 taskIndex \u003c tasks.size()) {","lastModifiedDate":"2024-03-04"},{"lineNumber":64,"author":{"gitId":"Jamarcus111"},"content":"            Task task \u003d tasks.get(taskIndex);","lastModifiedDate":"2024-03-04"},{"lineNumber":65,"author":{"gitId":"Jamarcus111"},"content":"            task.markAsNotDone();","lastModifiedDate":"2024-03-04"},{"lineNumber":66,"author":{"gitId":"Jamarcus111"},"content":"            System.out.println(\"OK, I\u0027ve marked this task as not done yet:\\n  \" + task);","lastModifiedDate":"2024-03-04"},{"lineNumber":67,"author":{"gitId":"Jamarcus111"},"content":"        } else {","lastModifiedDate":"2024-03-04"},{"lineNumber":68,"author":{"gitId":"Jamarcus111"},"content":"            System.out.println(\"Task with given index does not exist.\");","lastModifiedDate":"2024-03-04"},{"lineNumber":69,"author":{"gitId":"Jamarcus111"},"content":"        }","lastModifiedDate":"2024-03-04"},{"lineNumber":70,"author":{"gitId":"Jamarcus111"},"content":"    }","lastModifiedDate":"2024-03-04"},{"lineNumber":71,"author":{"gitId":"Jamarcus111"},"content":"","lastModifiedDate":"2024-02-23"},{"lineNumber":72,"author":{"gitId":"Jamarcus111"},"content":"    /**","lastModifiedDate":"2024-03-04"},{"lineNumber":73,"author":{"gitId":"Jamarcus111"},"content":"     * Deletes a task from the task list based on its index.","lastModifiedDate":"2024-03-04"},{"lineNumber":74,"author":{"gitId":"Jamarcus111"},"content":"     *","lastModifiedDate":"2024-03-04"},{"lineNumber":75,"author":{"gitId":"Jamarcus111"},"content":"     * @param taskIndex The index of the task to be deleted.","lastModifiedDate":"2024-03-04"},{"lineNumber":76,"author":{"gitId":"Jamarcus111"},"content":"     * @throws HandleException If the specified index is invalid.","lastModifiedDate":"2024-03-04"},{"lineNumber":77,"author":{"gitId":"Jamarcus111"},"content":"     */","lastModifiedDate":"2024-03-04"},{"lineNumber":78,"author":{"gitId":"Jamarcus111"},"content":"    public void deleteTask(int taskIndex) throws HandleException {","lastModifiedDate":"2024-02-23"},{"lineNumber":79,"author":{"gitId":"Jamarcus111"},"content":"        if (taskIndex \u003c 0 || taskIndex \u003e tasks.size()) {","lastModifiedDate":"2024-03-04"},{"lineNumber":80,"author":{"gitId":"Jamarcus111"},"content":"            throw new HandleException(\"OOPS!!! The task number is invalid.\");","lastModifiedDate":"2024-02-23"},{"lineNumber":81,"author":{"gitId":"Jamarcus111"},"content":"        }","lastModifiedDate":"2024-02-23"},{"lineNumber":82,"author":{"gitId":"Jamarcus111"},"content":"        Task removedTask \u003d tasks.remove(taskIndex);","lastModifiedDate":"2024-03-04"},{"lineNumber":83,"author":{"gitId":"Jamarcus111"},"content":"        System.out.println(\"Noted. I\u0027ve removed this task:\\n  \" + removedTask);","lastModifiedDate":"2024-03-04"},{"lineNumber":84,"author":{"gitId":"Jamarcus111"},"content":"        System.out.println(\"Now you have \" + tasks.size() + \" tasks in the list.\");","lastModifiedDate":"2024-02-23"},{"lineNumber":85,"author":{"gitId":"Jamarcus111"},"content":"    }","lastModifiedDate":"2024-02-23"},{"lineNumber":86,"author":{"gitId":"Jamarcus111"},"content":"","lastModifiedDate":"2024-02-23"},{"lineNumber":87,"author":{"gitId":"Jamarcus111"},"content":"    /**","lastModifiedDate":"2024-03-04"},{"lineNumber":88,"author":{"gitId":"Jamarcus111"},"content":"     * Lists all tasks in the task list.","lastModifiedDate":"2024-03-04"},{"lineNumber":89,"author":{"gitId":"Jamarcus111"},"content":"     */","lastModifiedDate":"2024-03-04"},{"lineNumber":90,"author":{"gitId":"Jamarcus111"},"content":"    public void listTasks() {","lastModifiedDate":"2024-02-12"},{"lineNumber":91,"author":{"gitId":"Jamarcus111"},"content":"        System.out.println(\"Here are the tasks in your list:\");","lastModifiedDate":"2024-02-12"},{"lineNumber":92,"author":{"gitId":"Jamarcus111"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2024-02-12"},{"lineNumber":93,"author":{"gitId":"Jamarcus111"},"content":"            System.out.println((i + 1) + \".\" + tasks.get(i));","lastModifiedDate":"2024-02-12"},{"lineNumber":94,"author":{"gitId":"Jamarcus111"},"content":"        }","lastModifiedDate":"2024-02-12"},{"lineNumber":95,"author":{"gitId":"Jamarcus111"},"content":"    }","lastModifiedDate":"2024-02-12"},{"lineNumber":96,"author":{"gitId":"Jamarcus111"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":97,"author":{"gitId":"Jamarcus111"},"content":"    /**","lastModifiedDate":"2024-03-04"},{"lineNumber":98,"author":{"gitId":"Jamarcus111"},"content":"     * Finds and lists all tasks that contain the specified keyword in their description.","lastModifiedDate":"2024-03-04"},{"lineNumber":99,"author":{"gitId":"Jamarcus111"},"content":"     *","lastModifiedDate":"2024-03-04"},{"lineNumber":100,"author":{"gitId":"Jamarcus111"},"content":"     * @param keyword The keyword to search for in task descriptions.","lastModifiedDate":"2024-03-04"},{"lineNumber":101,"author":{"gitId":"Jamarcus111"},"content":"     */","lastModifiedDate":"2024-03-04"},{"lineNumber":102,"author":{"gitId":"Jamarcus111"},"content":"    public void findTask(String keyword) {","lastModifiedDate":"2024-03-04"},{"lineNumber":103,"author":{"gitId":"Jamarcus111"},"content":"        System.out.println(\"Here are the matching tasks in your list:\");","lastModifiedDate":"2024-03-04"},{"lineNumber":104,"author":{"gitId":"Jamarcus111"},"content":"        int count \u003d 0;","lastModifiedDate":"2024-03-04"},{"lineNumber":105,"author":{"gitId":"Jamarcus111"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2024-03-04"},{"lineNumber":106,"author":{"gitId":"Jamarcus111"},"content":"            Task task \u003d tasks.get(i);","lastModifiedDate":"2024-03-04"},{"lineNumber":107,"author":{"gitId":"Jamarcus111"},"content":"            if (task.getDescription().contains(keyword)) {","lastModifiedDate":"2024-03-04"},{"lineNumber":108,"author":{"gitId":"Jamarcus111"},"content":"                System.out.println((i + 1) + \".\" + task);","lastModifiedDate":"2024-03-04"},{"lineNumber":109,"author":{"gitId":"Jamarcus111"},"content":"                count++;","lastModifiedDate":"2024-03-04"},{"lineNumber":110,"author":{"gitId":"Jamarcus111"},"content":"            }","lastModifiedDate":"2024-03-04"},{"lineNumber":111,"author":{"gitId":"Jamarcus111"},"content":"        }","lastModifiedDate":"2024-03-04"},{"lineNumber":112,"author":{"gitId":"Jamarcus111"},"content":"        if (count \u003d\u003d 0) {","lastModifiedDate":"2024-03-04"},{"lineNumber":113,"author":{"gitId":"Jamarcus111"},"content":"            System.out.println(\"No matching tasks found.\");","lastModifiedDate":"2024-03-04"},{"lineNumber":114,"author":{"gitId":"Jamarcus111"},"content":"        }","lastModifiedDate":"2024-03-04"},{"lineNumber":115,"author":{"gitId":"Jamarcus111"},"content":"    }","lastModifiedDate":"2024-03-04"},{"lineNumber":116,"author":{"gitId":"Jamarcus111"},"content":"}","lastModifiedDate":"2024-02-12"}],"authorContributionMap":{"Jamarcus111":116}},{"path":"src/main/java/TaskManager.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jamarcus111"},"content":"import java.io.IOException; // Make sure to import IOException","lastModifiedDate":"2024-03-04"},{"lineNumber":2,"author":{"gitId":"Jamarcus111"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-03-04"},{"lineNumber":3,"author":{"gitId":"Jamarcus111"},"content":"","lastModifiedDate":"2024-02-12"},{"lineNumber":4,"author":{"gitId":"Jamarcus111"},"content":"/**","lastModifiedDate":"2024-03-04"},{"lineNumber":5,"author":{"gitId":"Jamarcus111"},"content":" * The entry point of the application. This class orchestrates the flow of the application,","lastModifiedDate":"2024-03-04"},{"lineNumber":6,"author":{"gitId":"Jamarcus111"},"content":" * including initializing components, loading tasks from storage, and processing user commands.","lastModifiedDate":"2024-03-04"},{"lineNumber":7,"author":{"gitId":"Jamarcus111"},"content":" */","lastModifiedDate":"2024-03-04"},{"lineNumber":8,"author":{"gitId":"Jamarcus111"},"content":"public class TaskManager {","lastModifiedDate":"2024-02-12"},{"lineNumber":9,"author":{"gitId":"Jamarcus111"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":10,"author":{"gitId":"Jamarcus111"},"content":"    /**","lastModifiedDate":"2024-03-04"},{"lineNumber":11,"author":{"gitId":"Jamarcus111"},"content":"     * The main method that drives the application. It initializes the necessary components","lastModifiedDate":"2024-03-04"},{"lineNumber":12,"author":{"gitId":"Jamarcus111"},"content":"     * such as Ui, Storage, and TaskList, and enters a loop to accept and process user commands","lastModifiedDate":"2024-03-04"},{"lineNumber":13,"author":{"gitId":"Jamarcus111"},"content":"     * until the \"bye\" command is entered.","lastModifiedDate":"2024-03-04"},{"lineNumber":14,"author":{"gitId":"Jamarcus111"},"content":"     *","lastModifiedDate":"2024-03-04"},{"lineNumber":15,"author":{"gitId":"Jamarcus111"},"content":"     * @param args Command line arguments (not used in this application).","lastModifiedDate":"2024-03-04"},{"lineNumber":16,"author":{"gitId":"Jamarcus111"},"content":"     */","lastModifiedDate":"2024-03-04"},{"lineNumber":17,"author":{"gitId":"Jamarcus111"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2024-02-12"},{"lineNumber":18,"author":{"gitId":"Jamarcus111"},"content":"        Ui ui \u003d new Ui(); // Component for user interactions.","lastModifiedDate":"2024-03-04"},{"lineNumber":19,"author":{"gitId":"Jamarcus111"},"content":"        Storage storage \u003d new Storage(\"./data/duke.txt\"); // Component for handling task storage.","lastModifiedDate":"2024-03-04"},{"lineNumber":20,"author":{"gitId":"Jamarcus111"},"content":"        ArrayList\u003cTask\u003e loadedTasks \u003d storage.load(); // Load tasks from the specified storage.","lastModifiedDate":"2024-03-04"},{"lineNumber":21,"author":{"gitId":"Jamarcus111"},"content":"        TaskList taskList \u003d new TaskList(loadedTasks); // Initialize the task list with loaded tasks.","lastModifiedDate":"2024-03-04"},{"lineNumber":22,"author":{"gitId":"Jamarcus111"},"content":"        CommandParser commandParser \u003d new CommandParser(taskList, ui); // Initialize the command parser with the task list and UI.","lastModifiedDate":"2024-03-04"},{"lineNumber":23,"author":{"gitId":"Jamarcus111"},"content":"","lastModifiedDate":"2024-02-12"},{"lineNumber":24,"author":{"gitId":"Jamarcus111"},"content":"        ui.showWelcome(); // Display a welcome message to the user.","lastModifiedDate":"2024-03-04"},{"lineNumber":25,"author":{"gitId":"Jamarcus111"},"content":"","lastModifiedDate":"2024-02-12"},{"lineNumber":26,"author":{"gitId":"Jamarcus111"},"content":"        boolean isExit \u003d false; // Flag to control the main application loop.","lastModifiedDate":"2024-03-04"},{"lineNumber":27,"author":{"gitId":"Jamarcus111"},"content":"        while (!isExit) {","lastModifiedDate":"2024-03-04"},{"lineNumber":28,"author":{"gitId":"Jamarcus111"},"content":"            String userInput \u003d ui.readCommand(); // Read user input.","lastModifiedDate":"2024-03-04"},{"lineNumber":29,"author":{"gitId":"Jamarcus111"},"content":"            if (userInput.equalsIgnoreCase(\"bye\")) {","lastModifiedDate":"2024-02-12"},{"lineNumber":30,"author":{"gitId":"Jamarcus111"},"content":"                ui.showGoodbye(); // Display a goodbye message.","lastModifiedDate":"2024-03-04"},{"lineNumber":31,"author":{"gitId":"Jamarcus111"},"content":"                try {","lastModifiedDate":"2024-03-04"},{"lineNumber":32,"author":{"gitId":"Jamarcus111"},"content":"                    storage.save(taskList.getTasks()); // Attempt to save the current state of tasks.","lastModifiedDate":"2024-03-04"},{"lineNumber":33,"author":{"gitId":"Jamarcus111"},"content":"                } catch (IOException e) { // Handle potential IO exceptions from saving tasks.","lastModifiedDate":"2024-03-04"},{"lineNumber":34,"author":{"gitId":"Jamarcus111"},"content":"                    ui.showError(\"An error occurred while saving tasks: \" + e.getMessage());","lastModifiedDate":"2024-03-04"},{"lineNumber":35,"author":{"gitId":"Jamarcus111"},"content":"                }","lastModifiedDate":"2024-03-04"},{"lineNumber":36,"author":{"gitId":"Jamarcus111"},"content":"                isExit \u003d true; // Set flag to exit the application loop.","lastModifiedDate":"2024-03-04"},{"lineNumber":37,"author":{"gitId":"Jamarcus111"},"content":"            } else {","lastModifiedDate":"2024-02-12"},{"lineNumber":38,"author":{"gitId":"Jamarcus111"},"content":"                commandParser.parseCommand(userInput); // Parse and execute the user command.","lastModifiedDate":"2024-03-04"},{"lineNumber":39,"author":{"gitId":"Jamarcus111"},"content":"            }","lastModifiedDate":"2024-02-12"},{"lineNumber":40,"author":{"gitId":"Jamarcus111"},"content":"        }","lastModifiedDate":"2024-02-16"},{"lineNumber":41,"author":{"gitId":"Jamarcus111"},"content":"    }","lastModifiedDate":"2024-02-12"},{"lineNumber":42,"author":{"gitId":"Jamarcus111"},"content":"}","lastModifiedDate":"2024-02-12"}],"authorContributionMap":{"Jamarcus111":42}},{"path":"src/main/java/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jamarcus111"},"content":"/**","lastModifiedDate":"2024-03-04"},{"lineNumber":2,"author":{"gitId":"Jamarcus111"},"content":" * Represents a to-do task without a specific deadline.","lastModifiedDate":"2024-03-04"},{"lineNumber":3,"author":{"gitId":"Jamarcus111"},"content":" * A {@code Todo} object encapsulates the details of a task that needs to be done.","lastModifiedDate":"2024-03-04"},{"lineNumber":4,"author":{"gitId":"Jamarcus111"},"content":" */","lastModifiedDate":"2024-03-04"},{"lineNumber":5,"author":{"gitId":"Jamarcus111"},"content":"public class Todo extends Task {","lastModifiedDate":"2024-02-12"},{"lineNumber":6,"author":{"gitId":"Jamarcus111"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":7,"author":{"gitId":"Jamarcus111"},"content":"    /**","lastModifiedDate":"2024-03-04"},{"lineNumber":8,"author":{"gitId":"Jamarcus111"},"content":"     * Constructs a {@code Todo} with the specified task description.","lastModifiedDate":"2024-03-04"},{"lineNumber":9,"author":{"gitId":"Jamarcus111"},"content":"     * Initializes a new to-do task with the provided description.","lastModifiedDate":"2024-03-04"},{"lineNumber":10,"author":{"gitId":"Jamarcus111"},"content":"     *","lastModifiedDate":"2024-03-04"},{"lineNumber":11,"author":{"gitId":"Jamarcus111"},"content":"     * @param description The text description of the to-do task.","lastModifiedDate":"2024-03-04"},{"lineNumber":12,"author":{"gitId":"Jamarcus111"},"content":"     */","lastModifiedDate":"2024-03-04"},{"lineNumber":13,"author":{"gitId":"Jamarcus111"},"content":"    public Todo(String description) {","lastModifiedDate":"2024-02-12"},{"lineNumber":14,"author":{"gitId":"Jamarcus111"},"content":"        super(description); // Calls the superclass Task constructor with the description.","lastModifiedDate":"2024-03-04"},{"lineNumber":15,"author":{"gitId":"Jamarcus111"},"content":"    }","lastModifiedDate":"2024-02-12"},{"lineNumber":16,"author":{"gitId":"Jamarcus111"},"content":"","lastModifiedDate":"2024-02-12"},{"lineNumber":17,"author":{"gitId":"Jamarcus111"},"content":"    /**","lastModifiedDate":"2024-03-04"},{"lineNumber":18,"author":{"gitId":"Jamarcus111"},"content":"     * Returns the string representation of the to-do task in a format suitable for file storage.","lastModifiedDate":"2024-03-04"},{"lineNumber":19,"author":{"gitId":"Jamarcus111"},"content":"     * This method leverages the {@code toFileFormat} method from the superclass {@code Task}.","lastModifiedDate":"2024-03-04"},{"lineNumber":20,"author":{"gitId":"Jamarcus111"},"content":"     *","lastModifiedDate":"2024-03-04"},{"lineNumber":21,"author":{"gitId":"Jamarcus111"},"content":"     * @return A string representation of the to-do task for file storage, maintaining the format defined in {@code Task}.","lastModifiedDate":"2024-03-04"},{"lineNumber":22,"author":{"gitId":"Jamarcus111"},"content":"     */","lastModifiedDate":"2024-03-04"},{"lineNumber":23,"author":{"gitId":"Jamarcus111"},"content":"    @Override","lastModifiedDate":"2024-03-04"},{"lineNumber":24,"author":{"gitId":"Jamarcus111"},"content":"    public String toFileFormat() {","lastModifiedDate":"2024-02-23"},{"lineNumber":25,"author":{"gitId":"Jamarcus111"},"content":"        return super.toFileFormat(); // Uses the Task class\u0027s method for file formatting.","lastModifiedDate":"2024-03-04"},{"lineNumber":26,"author":{"gitId":"Jamarcus111"},"content":"    }","lastModifiedDate":"2024-02-23"},{"lineNumber":27,"author":{"gitId":"Jamarcus111"},"content":"","lastModifiedDate":"2024-02-23"},{"lineNumber":28,"author":{"gitId":"Jamarcus111"},"content":"    /**","lastModifiedDate":"2024-03-04"},{"lineNumber":29,"author":{"gitId":"Jamarcus111"},"content":"     * Returns the string representation of the to-do task, including its type, status (done or not done),","lastModifiedDate":"2024-03-04"},{"lineNumber":30,"author":{"gitId":"Jamarcus111"},"content":"     * and description. Overrides the {@code toString} method from the superclass {@code Task}.","lastModifiedDate":"2024-03-04"},{"lineNumber":31,"author":{"gitId":"Jamarcus111"},"content":"     *","lastModifiedDate":"2024-03-04"},{"lineNumber":32,"author":{"gitId":"Jamarcus111"},"content":"     * @return A string representation of the to-do task, formatted with its type and status.","lastModifiedDate":"2024-03-04"},{"lineNumber":33,"author":{"gitId":"Jamarcus111"},"content":"     */","lastModifiedDate":"2024-03-04"},{"lineNumber":34,"author":{"gitId":"Jamarcus111"},"content":"    @Override","lastModifiedDate":"2024-02-12"},{"lineNumber":35,"author":{"gitId":"Jamarcus111"},"content":"    public String toString() {","lastModifiedDate":"2024-02-12"},{"lineNumber":36,"author":{"gitId":"Jamarcus111"},"content":"        return \"[T]\" + super.toString(); // Adds the to-do type identifier \"[T]\" before the standard task representation.","lastModifiedDate":"2024-03-04"},{"lineNumber":37,"author":{"gitId":"Jamarcus111"},"content":"    }","lastModifiedDate":"2024-02-12"},{"lineNumber":38,"author":{"gitId":"Jamarcus111"},"content":"}","lastModifiedDate":"2024-02-12"}],"authorContributionMap":{"Jamarcus111":38}},{"path":"src/main/java/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jamarcus111"},"content":"import java.util.Scanner;","lastModifiedDate":"2024-03-04"},{"lineNumber":2,"author":{"gitId":"Jamarcus111"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":3,"author":{"gitId":"Jamarcus111"},"content":"/**","lastModifiedDate":"2024-03-04"},{"lineNumber":4,"author":{"gitId":"Jamarcus111"},"content":" * Handles all user interactions for the application. This class is responsible for","lastModifiedDate":"2024-03-04"},{"lineNumber":5,"author":{"gitId":"Jamarcus111"},"content":" * displaying messages to the user and reading user input from the command line.","lastModifiedDate":"2024-03-04"},{"lineNumber":6,"author":{"gitId":"Jamarcus111"},"content":" */","lastModifiedDate":"2024-03-04"},{"lineNumber":7,"author":{"gitId":"Jamarcus111"},"content":"public class Ui {","lastModifiedDate":"2024-03-04"},{"lineNumber":8,"author":{"gitId":"Jamarcus111"},"content":"    private final Scanner scanner; // Scanner object to read user input.","lastModifiedDate":"2024-03-04"},{"lineNumber":9,"author":{"gitId":"Jamarcus111"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":10,"author":{"gitId":"Jamarcus111"},"content":"    /**","lastModifiedDate":"2024-03-04"},{"lineNumber":11,"author":{"gitId":"Jamarcus111"},"content":"     * Constructs a Ui object, initializing the scanner to read input from the command line.","lastModifiedDate":"2024-03-04"},{"lineNumber":12,"author":{"gitId":"Jamarcus111"},"content":"     */","lastModifiedDate":"2024-03-04"},{"lineNumber":13,"author":{"gitId":"Jamarcus111"},"content":"    public Ui() {","lastModifiedDate":"2024-03-04"},{"lineNumber":14,"author":{"gitId":"Jamarcus111"},"content":"        this.scanner \u003d new Scanner(System.in);","lastModifiedDate":"2024-03-04"},{"lineNumber":15,"author":{"gitId":"Jamarcus111"},"content":"    }","lastModifiedDate":"2024-03-04"},{"lineNumber":16,"author":{"gitId":"Jamarcus111"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":17,"author":{"gitId":"Jamarcus111"},"content":"    /**","lastModifiedDate":"2024-03-04"},{"lineNumber":18,"author":{"gitId":"Jamarcus111"},"content":"     * Prompts the user for a command and returns the trimmed input.","lastModifiedDate":"2024-03-04"},{"lineNumber":19,"author":{"gitId":"Jamarcus111"},"content":"     *","lastModifiedDate":"2024-03-04"},{"lineNumber":20,"author":{"gitId":"Jamarcus111"},"content":"     * @return The user\u0027s input as a trimmed string.","lastModifiedDate":"2024-03-04"},{"lineNumber":21,"author":{"gitId":"Jamarcus111"},"content":"     */","lastModifiedDate":"2024-03-04"},{"lineNumber":22,"author":{"gitId":"Jamarcus111"},"content":"    public String readCommand() {","lastModifiedDate":"2024-03-04"},{"lineNumber":23,"author":{"gitId":"Jamarcus111"},"content":"        System.out.println(\"\\nEnter your command:\");","lastModifiedDate":"2024-03-04"},{"lineNumber":24,"author":{"gitId":"Jamarcus111"},"content":"        return scanner.nextLine().trim();","lastModifiedDate":"2024-03-04"},{"lineNumber":25,"author":{"gitId":"Jamarcus111"},"content":"    }","lastModifiedDate":"2024-03-04"},{"lineNumber":26,"author":{"gitId":"Jamarcus111"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":27,"author":{"gitId":"Jamarcus111"},"content":"    /**","lastModifiedDate":"2024-03-04"},{"lineNumber":28,"author":{"gitId":"Jamarcus111"},"content":"     * Displays a welcome message to the user at the start of the application.","lastModifiedDate":"2024-03-04"},{"lineNumber":29,"author":{"gitId":"Jamarcus111"},"content":"     */","lastModifiedDate":"2024-03-04"},{"lineNumber":30,"author":{"gitId":"Jamarcus111"},"content":"    public void showWelcome() {","lastModifiedDate":"2024-03-04"},{"lineNumber":31,"author":{"gitId":"Jamarcus111"},"content":"        System.out.println(\"Hello! I\u0027m TaskManager\\nWhat can I do for you?\");","lastModifiedDate":"2024-03-04"},{"lineNumber":32,"author":{"gitId":"Jamarcus111"},"content":"    }","lastModifiedDate":"2024-03-04"},{"lineNumber":33,"author":{"gitId":"Jamarcus111"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":34,"author":{"gitId":"Jamarcus111"},"content":"    /**","lastModifiedDate":"2024-03-04"},{"lineNumber":35,"author":{"gitId":"Jamarcus111"},"content":"     * Displays an error message to the user.","lastModifiedDate":"2024-03-04"},{"lineNumber":36,"author":{"gitId":"Jamarcus111"},"content":"     *","lastModifiedDate":"2024-03-04"},{"lineNumber":37,"author":{"gitId":"Jamarcus111"},"content":"     * @param message The error message to be displayed.","lastModifiedDate":"2024-03-04"},{"lineNumber":38,"author":{"gitId":"Jamarcus111"},"content":"     */","lastModifiedDate":"2024-03-04"},{"lineNumber":39,"author":{"gitId":"Jamarcus111"},"content":"    public void showError(String message) {","lastModifiedDate":"2024-03-04"},{"lineNumber":40,"author":{"gitId":"Jamarcus111"},"content":"        System.out.println(message);","lastModifiedDate":"2024-03-04"},{"lineNumber":41,"author":{"gitId":"Jamarcus111"},"content":"    }","lastModifiedDate":"2024-03-04"},{"lineNumber":42,"author":{"gitId":"Jamarcus111"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":43,"author":{"gitId":"Jamarcus111"},"content":"    /**","lastModifiedDate":"2024-03-04"},{"lineNumber":44,"author":{"gitId":"Jamarcus111"},"content":"     * Displays a line of text to the user. Can be used for displaying","lastModifiedDate":"2024-03-04"},{"lineNumber":45,"author":{"gitId":"Jamarcus111"},"content":"     * informational messages or command results.","lastModifiedDate":"2024-03-04"},{"lineNumber":46,"author":{"gitId":"Jamarcus111"},"content":"     *","lastModifiedDate":"2024-03-04"},{"lineNumber":47,"author":{"gitId":"Jamarcus111"},"content":"     * @param message The message to be displayed.","lastModifiedDate":"2024-03-04"},{"lineNumber":48,"author":{"gitId":"Jamarcus111"},"content":"     */","lastModifiedDate":"2024-03-04"},{"lineNumber":49,"author":{"gitId":"Jamarcus111"},"content":"    public void showLine(String message) {","lastModifiedDate":"2024-03-04"},{"lineNumber":50,"author":{"gitId":"Jamarcus111"},"content":"        System.out.println(message);","lastModifiedDate":"2024-03-04"},{"lineNumber":51,"author":{"gitId":"Jamarcus111"},"content":"    }","lastModifiedDate":"2024-03-04"},{"lineNumber":52,"author":{"gitId":"Jamarcus111"},"content":"","lastModifiedDate":"2024-03-04"},{"lineNumber":53,"author":{"gitId":"Jamarcus111"},"content":"    /**","lastModifiedDate":"2024-03-04"},{"lineNumber":54,"author":{"gitId":"Jamarcus111"},"content":"     * Displays a goodbye message to the user when exiting the application.","lastModifiedDate":"2024-03-04"},{"lineNumber":55,"author":{"gitId":"Jamarcus111"},"content":"     */","lastModifiedDate":"2024-03-04"},{"lineNumber":56,"author":{"gitId":"Jamarcus111"},"content":"    public void showGoodbye() {","lastModifiedDate":"2024-03-04"},{"lineNumber":57,"author":{"gitId":"Jamarcus111"},"content":"        System.out.println(\"Bye. Hope to see you again soon!\");","lastModifiedDate":"2024-03-04"},{"lineNumber":58,"author":{"gitId":"Jamarcus111"},"content":"    }","lastModifiedDate":"2024-03-04"},{"lineNumber":59,"author":{"gitId":"Jamarcus111"},"content":"}","lastModifiedDate":"2024-03-04"}],"authorContributionMap":{"Jamarcus111":59}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"Jamarcus111"},"content":"java -classpath ..\\bin Ma \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2024-01-31"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"Jamarcus111":1,"-":20}}]
