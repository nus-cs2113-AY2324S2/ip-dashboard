[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"Jamarcus111"},"content":"# Ma project template","lastModifiedDate":"2024-01-31"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it.","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2021-01-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`.","lastModifiedDate":"2021-01-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2021-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29"},{"lineNumber":16,"author":{"gitId":"Jamarcus111"},"content":"3. After that, locate the `src/main/java/Ma.java` file, right-click it, and choose `Run Ma.main()` (if the code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something like the below as the output:","lastModifiedDate":"2024-01-31"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"   Hello from","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    ____        _        ","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ ","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"Jamarcus111":2,"-":22}},{"path":"src/main/java/Ma.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jamarcus111"},"content":"import java.util.Scanner;","lastModifiedDate":"2024-01-31"},{"lineNumber":2,"author":{"gitId":"Jamarcus111"},"content":"import java.util.ArrayList;","lastModifiedDate":"2024-01-31"},{"lineNumber":3,"author":{"gitId":"Jamarcus111"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":4,"author":{"gitId":"Jamarcus111"},"content":"public class Ma {","lastModifiedDate":"2024-01-31"},{"lineNumber":5,"author":{"gitId":"Jamarcus111"},"content":"    private static void printLine() {","lastModifiedDate":"2024-01-31"},{"lineNumber":6,"author":{"gitId":"Jamarcus111"},"content":"        System.out.println(\"____________________________________________________________\");","lastModifiedDate":"2024-01-31"},{"lineNumber":7,"author":{"gitId":"Jamarcus111"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":8,"author":{"gitId":"Jamarcus111"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":9,"author":{"gitId":"Jamarcus111"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2024-01-31"},{"lineNumber":10,"author":{"gitId":"Jamarcus111"},"content":"        Scanner scanner \u003d new Scanner(System.in); // Create a Scanner object","lastModifiedDate":"2024-01-31"},{"lineNumber":11,"author":{"gitId":"Jamarcus111"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":12,"author":{"gitId":"Jamarcus111"},"content":"        ArrayList\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2024-02-01"},{"lineNumber":13,"author":{"gitId":"Jamarcus111"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":14,"author":{"gitId":"Jamarcus111"},"content":"        String logo \u003d \"üêé  __  __    _    üêé\\n\"","lastModifiedDate":"2024-01-31"},{"lineNumber":15,"author":{"gitId":"Jamarcus111"},"content":"                + \"   |  \\\\/  |  / \\\\   \\n\"","lastModifiedDate":"2024-01-31"},{"lineNumber":16,"author":{"gitId":"Jamarcus111"},"content":"                + \"   | |\\\\/| | / _ \\\\  \\n\"","lastModifiedDate":"2024-01-31"},{"lineNumber":17,"author":{"gitId":"Jamarcus111"},"content":"                + \"   | |  | |/ ___ \\\\ \\n\"","lastModifiedDate":"2024-01-31"},{"lineNumber":18,"author":{"gitId":"Jamarcus111"},"content":"                + \"üêé |_|  |_/_/   \\\\_\\\\üêé\\n\"","lastModifiedDate":"2024-01-31"},{"lineNumber":19,"author":{"gitId":"Jamarcus111"},"content":"                + \"What can I help you withÔºü\";","lastModifiedDate":"2024-01-31"},{"lineNumber":20,"author":{"gitId":"Jamarcus111"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":21,"author":{"gitId":"Jamarcus111"},"content":"        System.out.println(\"Hello from\\n\" + logo);","lastModifiedDate":"2024-01-31"},{"lineNumber":22,"author":{"gitId":"Jamarcus111"},"content":"        printLine();","lastModifiedDate":"2024-01-31"},{"lineNumber":23,"author":{"gitId":"Jamarcus111"},"content":"        System.out.println(\"Hello! I\u0027m Ma\\nWhat can I do for you?\");","lastModifiedDate":"2024-01-31"},{"lineNumber":24,"author":{"gitId":"Jamarcus111"},"content":"        printLine();","lastModifiedDate":"2024-01-31"},{"lineNumber":25,"author":{"gitId":"Jamarcus111"},"content":"","lastModifiedDate":"2024-01-31"},{"lineNumber":26,"author":{"gitId":"Jamarcus111"},"content":"        while (true) {","lastModifiedDate":"2024-01-31"},{"lineNumber":27,"author":{"gitId":"Jamarcus111"},"content":"            String userInput \u003d scanner.nextLine();","lastModifiedDate":"2024-01-31"},{"lineNumber":28,"author":{"gitId":"Jamarcus111"},"content":"            printLine();","lastModifiedDate":"2024-01-31"},{"lineNumber":29,"author":{"gitId":"Jamarcus111"},"content":"            if (\"bye\".equalsIgnoreCase(userInput)) {","lastModifiedDate":"2024-01-31"},{"lineNumber":30,"author":{"gitId":"Jamarcus111"},"content":"                System.out.println(\"Bye. Hope to see you again soon!\");","lastModifiedDate":"2024-01-31"},{"lineNumber":31,"author":{"gitId":"Jamarcus111"},"content":"                printLine();","lastModifiedDate":"2024-01-31"},{"lineNumber":32,"author":{"gitId":"Jamarcus111"},"content":"                break;","lastModifiedDate":"2024-01-31"},{"lineNumber":33,"author":{"gitId":"Jamarcus111"},"content":"            } else if (\"list\".equalsIgnoreCase(userInput)) {","lastModifiedDate":"2024-01-31"},{"lineNumber":34,"author":{"gitId":"Jamarcus111"},"content":"                System.out.println(\"Here are the tasks in your list:\");","lastModifiedDate":"2024-02-01"},{"lineNumber":35,"author":{"gitId":"Jamarcus111"},"content":"                for (int i \u003d 0; i \u003c list.size(); i++) {","lastModifiedDate":"2024-01-31"},{"lineNumber":36,"author":{"gitId":"Jamarcus111"},"content":"                    System.out.println(\" \" + (i + 1) + \". \" + list.get(i).toString());","lastModifiedDate":"2024-02-01"},{"lineNumber":37,"author":{"gitId":"Jamarcus111"},"content":"                }","lastModifiedDate":"2024-01-31"},{"lineNumber":38,"author":{"gitId":"Jamarcus111"},"content":"                printLine();","lastModifiedDate":"2024-01-31"},{"lineNumber":39,"author":{"gitId":"Jamarcus111"},"content":"            } else if (userInput.startsWith(\"mark\")) {","lastModifiedDate":"2024-02-01"},{"lineNumber":40,"author":{"gitId":"Jamarcus111"},"content":"                int index \u003d Integer.parseInt(userInput.split(\" \")[1]) - 1; // Ëé∑Âèñ‰ªªÂä°ÁºñÂè∑","lastModifiedDate":"2024-02-01"},{"lineNumber":41,"author":{"gitId":"Jamarcus111"},"content":"                Task task \u003d list.get(index);","lastModifiedDate":"2024-02-01"},{"lineNumber":42,"author":{"gitId":"Jamarcus111"},"content":"                task.markAsDone();","lastModifiedDate":"2024-02-01"},{"lineNumber":43,"author":{"gitId":"Jamarcus111"},"content":"                System.out.println(\"Nice! I\u0027ve marked this task as done:\\n  \" + task);","lastModifiedDate":"2024-02-01"},{"lineNumber":44,"author":{"gitId":"Jamarcus111"},"content":"                printLine();","lastModifiedDate":"2024-02-01"},{"lineNumber":45,"author":{"gitId":"Jamarcus111"},"content":"            }else if (userInput.startsWith(\"unmark\")) {","lastModifiedDate":"2024-02-01"},{"lineNumber":46,"author":{"gitId":"Jamarcus111"},"content":"                int index \u003d Integer.parseInt(userInput.split(\" \")[1]) - 1; // Ëé∑Âèñ‰ªªÂä°ÁºñÂè∑","lastModifiedDate":"2024-02-01"},{"lineNumber":47,"author":{"gitId":"Jamarcus111"},"content":"                Task task \u003d list.get(index);","lastModifiedDate":"2024-02-01"},{"lineNumber":48,"author":{"gitId":"Jamarcus111"},"content":"                task.markAsUnDone();","lastModifiedDate":"2024-02-01"},{"lineNumber":49,"author":{"gitId":"Jamarcus111"},"content":"                System.out.println(\"OK, I\u0027ve marked this task as not done yet:\\n  \" + task);","lastModifiedDate":"2024-02-01"},{"lineNumber":50,"author":{"gitId":"Jamarcus111"},"content":"                printLine();","lastModifiedDate":"2024-02-01"},{"lineNumber":51,"author":{"gitId":"Jamarcus111"},"content":"            }","lastModifiedDate":"2024-02-01"},{"lineNumber":52,"author":{"gitId":"Jamarcus111"},"content":"            else {","lastModifiedDate":"2024-02-01"},{"lineNumber":53,"author":{"gitId":"Jamarcus111"},"content":"                Task newTask \u003d new Task(userInput);","lastModifiedDate":"2024-02-01"},{"lineNumber":54,"author":{"gitId":"Jamarcus111"},"content":"                list.add(newTask);","lastModifiedDate":"2024-02-01"},{"lineNumber":55,"author":{"gitId":"Jamarcus111"},"content":"                printLine();","lastModifiedDate":"2024-01-31"},{"lineNumber":56,"author":{"gitId":"Jamarcus111"},"content":"                System.out.println(\"added: \" + userInput);","lastModifiedDate":"2024-01-31"},{"lineNumber":57,"author":{"gitId":"Jamarcus111"},"content":"                printLine();","lastModifiedDate":"2024-01-31"},{"lineNumber":58,"author":{"gitId":"Jamarcus111"},"content":"            }","lastModifiedDate":"2024-01-31"},{"lineNumber":59,"author":{"gitId":"Jamarcus111"},"content":"        }","lastModifiedDate":"2024-01-31"},{"lineNumber":60,"author":{"gitId":"Jamarcus111"},"content":"        scanner.close();","lastModifiedDate":"2024-01-31"},{"lineNumber":61,"author":{"gitId":"Jamarcus111"},"content":"    }","lastModifiedDate":"2024-01-31"},{"lineNumber":62,"author":{"gitId":"Jamarcus111"},"content":"}","lastModifiedDate":"2024-01-31"}],"authorContributionMap":{"Jamarcus111":62}},{"path":"src/main/java/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Jamarcus111"},"content":"public class Task {","lastModifiedDate":"2024-02-01"},{"lineNumber":2,"author":{"gitId":"Jamarcus111"},"content":"    protected String description;","lastModifiedDate":"2024-02-01"},{"lineNumber":3,"author":{"gitId":"Jamarcus111"},"content":"    protected boolean isDone;","lastModifiedDate":"2024-02-01"},{"lineNumber":4,"author":{"gitId":"Jamarcus111"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":5,"author":{"gitId":"Jamarcus111"},"content":"    public Task(String description) {","lastModifiedDate":"2024-02-01"},{"lineNumber":6,"author":{"gitId":"Jamarcus111"},"content":"        this.description \u003d description;","lastModifiedDate":"2024-02-01"},{"lineNumber":7,"author":{"gitId":"Jamarcus111"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2024-02-01"},{"lineNumber":8,"author":{"gitId":"Jamarcus111"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":9,"author":{"gitId":"Jamarcus111"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":10,"author":{"gitId":"Jamarcus111"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2024-02-01"},{"lineNumber":11,"author":{"gitId":"Jamarcus111"},"content":"        return (isDone ? \"X\" : \" \"); // mark done task with X","lastModifiedDate":"2024-02-01"},{"lineNumber":12,"author":{"gitId":"Jamarcus111"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":13,"author":{"gitId":"Jamarcus111"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":14,"author":{"gitId":"Jamarcus111"},"content":"    public void markAsDone() {","lastModifiedDate":"2024-02-01"},{"lineNumber":15,"author":{"gitId":"Jamarcus111"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2024-02-01"},{"lineNumber":16,"author":{"gitId":"Jamarcus111"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":17,"author":{"gitId":"Jamarcus111"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":18,"author":{"gitId":"Jamarcus111"},"content":"    public void markAsUnDone() {","lastModifiedDate":"2024-02-01"},{"lineNumber":19,"author":{"gitId":"Jamarcus111"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2024-02-01"},{"lineNumber":20,"author":{"gitId":"Jamarcus111"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":21,"author":{"gitId":"Jamarcus111"},"content":"","lastModifiedDate":"2024-02-01"},{"lineNumber":22,"author":{"gitId":"Jamarcus111"},"content":"    @Override","lastModifiedDate":"2024-02-01"},{"lineNumber":23,"author":{"gitId":"Jamarcus111"},"content":"    public String toString() {","lastModifiedDate":"2024-02-01"},{"lineNumber":24,"author":{"gitId":"Jamarcus111"},"content":"        return \"[\" + this.getStatusIcon() + \"] \" + this.description;","lastModifiedDate":"2024-02-01"},{"lineNumber":25,"author":{"gitId":"Jamarcus111"},"content":"    }","lastModifiedDate":"2024-02-01"},{"lineNumber":26,"author":{"gitId":"Jamarcus111"},"content":"}","lastModifiedDate":"2024-02-01"},{"lineNumber":27,"author":{"gitId":"Jamarcus111"},"content":"","lastModifiedDate":"2024-02-01"}],"authorContributionMap":{"Jamarcus111":27}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"Jamarcus111"},"content":"java -classpath ..\\bin Ma \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2024-01-31"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"Jamarcus111":1,"-":20}}]
